// Generated by ProtoGen, Version=2.4.1.555, Culture=neutral, PublicKeyToken=17b3b1f090c3ea48.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace maxtrack.pb.mxt1xx {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class Mxt1Xx {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_info__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_info, global::maxtrack.pb.mxt1xx.mxt1xx_u_info.Builder> internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_info__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_firmware__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_firmware, global::maxtrack.pb.mxt1xx.mxt1xx_u_firmware.Builder> internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_firmware__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_gps_modem_flag_state__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_gps_modem_flag_state, global::maxtrack.pb.mxt1xx.mxt1xx_u_gps_modem_flag_state.Builder> internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_gps_modem_flag_state__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_gps_modem_sad69_datum__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_gps_modem_sad69_datum, global::maxtrack.pb.mxt1xx.mxt1xx_u_gps_modem_sad69_datum.Builder> internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_gps_modem_sad69_datum__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_gps_modem_utm_coordinate__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_gps_modem_utm_coordinate, global::maxtrack.pb.mxt1xx.mxt1xx_u_gps_modem_utm_coordinate.Builder> internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_gps_modem_utm_coordinate__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_gps_modem__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_gps_modem, global::maxtrack.pb.mxt1xx.mxt1xx_u_gps_modem.Builder> internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_gps_modem__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_outputs__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_outputs, global::maxtrack.pb.mxt1xx.mxt1xx_u_outputs.Builder> internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_outputs__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_inputs__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_inputs, global::maxtrack.pb.mxt1xx.mxt1xx_u_inputs.Builder> internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_inputs__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_hardware_monitor_flag_state__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_hardware_monitor_flag_state, global::maxtrack.pb.mxt1xx.mxt1xx_u_hardware_monitor_flag_state.Builder> internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_hardware_monitor_flag_state__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_hardware_monitor__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_hardware_monitor, global::maxtrack.pb.mxt1xx.mxt1xx_u_hardware_monitor.Builder> internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_hardware_monitor__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_embedded_flag_state__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_embedded_flag_state, global::maxtrack.pb.mxt1xx.mxt1xx_u_embedded_flag_state.Builder> internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_embedded_flag_state__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_embedded__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_embedded, global::maxtrack.pb.mxt1xx.mxt1xx_u_embedded.Builder> internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_embedded__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_cell_id_info__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_cell_id_info, global::maxtrack.pb.mxt1xx.mxt1xx_u_cell_id_info.Builder> internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_cell_id_info__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_wt100__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt100, global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt100.Builder> internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_wt100__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_wt110__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt110, global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt110.Builder> internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_wt110__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_wt111__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt111, global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt111.Builder> internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_wt111__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_wt112__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt112, global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt112.Builder> internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_wt112__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_wt200_inputs__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt200_inputs, global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt200_inputs.Builder> internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_wt200_inputs__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_wt200_outputs__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt200_outputs, global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt200_outputs.Builder> internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_wt200_outputs__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_wt200__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt200, global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt200.Builder> internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_wt200__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_wt300__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt300, global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt300.Builder> internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_wt300__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_wt400__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt400, global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt400.Builder> internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_wt400__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_mxt101__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_mxt101, global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_mxt101.Builder> internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_mxt101__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_mxt151__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_mxt151, global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_mxt151.Builder> internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_mxt151__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_rpm_virtual__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_rpm_virtual, global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_rpm_virtual.Builder> internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_rpm_virtual__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_gps_speed__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_gps_speed, global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_gps_speed.Builder> internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_gps_speed__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_tag_info__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_tag_info, global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_tag_info.Builder> internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_tag_info__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_tag__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_tag, global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_tag.Builder> internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_tag__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_rfid_driver__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_rfid_driver, global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_rfid_driver.Builder> internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_rfid_driver__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_rfid_passenger__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_rfid_passenger, global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_rfid_passenger.Builder> internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_rfid_passenger__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory, global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory.Builder> internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_lbs_gsm_cell_tower__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_lbs_gsm_cell_tower, global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_lbs_gsm_cell_tower.Builder> internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_lbs_gsm_cell_tower__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_lbs_gsm__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_lbs_gsm, global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_lbs_gsm.Builder> internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_lbs_gsm__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_wifi_access_point__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_wifi_access_point, global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_wifi_access_point.Builder> internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_wifi_access_point__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_speed_details__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_speed_details, global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_speed_details.Builder> internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_speed_details__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_speed_histogram__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_speed_histogram, global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_speed_histogram.Builder> internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_speed_histogram__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_telemetry_events_calibration_status__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_calibration_status, global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_calibration_status.Builder> internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_telemetry_events_calibration_status__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_telemetry_events_hard_acceleration__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_hard_acceleration, global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_hard_acceleration.Builder> internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_telemetry_events_hard_acceleration__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_telemetry_events_hard_braking__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_hard_braking, global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_hard_braking.Builder> internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_telemetry_events_hard_braking__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_telemetry_events_hard_lateral__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_hard_lateral, global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_hard_lateral.Builder> internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_telemetry_events_hard_lateral__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_telemetry_events_impact_detected__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_impact_detected, global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_impact_detected.Builder> internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_telemetry_events_impact_detected__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_telemetry_events__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events, global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events.Builder> internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_telemetry_events__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_journey_deltas_rpm_delta__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas_rpm_delta, global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas_rpm_delta.Builder> internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_journey_deltas_rpm_delta__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_journey_deltas_speed_delta__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas_speed_delta, global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas_speed_delta.Builder> internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_journey_deltas_speed_delta__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_journey_deltas_mean_journey_timer_delta__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas_mean_journey_timer_delta, global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas_mean_journey_timer_delta.Builder> internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_journey_deltas_mean_journey_timer_delta__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_journey_deltas_location_delta__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas_location_delta, global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas_location_delta.Builder> internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_journey_deltas_location_delta__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_journey_deltas_accelerometer_delta__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas_accelerometer_delta, global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas_accelerometer_delta.Builder> internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_journey_deltas_accelerometer_delta__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_journey_deltas__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas, global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas.Builder> internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_journey_deltas__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_crash_reconstruction_second__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_crash_reconstruction_second, global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_crash_reconstruction_second.Builder> internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_crash_reconstruction_second__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_crash_reconstruction__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_crash_reconstruction, global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_crash_reconstruction.Builder> internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_crash_reconstruction__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_route_reconstruction_section__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_route_reconstruction_section, global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_route_reconstruction_section.Builder> internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_route_reconstruction_section__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_route_reconstruction__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_route_reconstruction, global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_route_reconstruction.Builder> internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_route_reconstruction__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_position_information_digital_data__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_position_information_digital_data, global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_position_information_digital_data.Builder> internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_position_information_digital_data__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_position_information_analogic_data_dtc_packets__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_position_information_analogic_data_dtc_packets, global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_position_information_analogic_data_dtc_packets.Builder> internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_position_information_analogic_data_dtc_packets__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_position_information_analogic_data__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_position_information_analogic_data, global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_position_information_analogic_data.Builder> internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_position_information_analogic_data__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_position_information__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_position_information, global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_position_information.Builder> internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_position_information__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data, global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data.Builder> internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_transparent_data__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_transparent_data, global::maxtrack.pb.mxt1xx.mxt1xx_u_transparent_data.Builder> internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_transparent_data__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_transparent_response_rs232_status__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_transparent_response_rs232_status, global::maxtrack.pb.mxt1xx.mxt1xx_u_transparent_response_rs232_status.Builder> internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_transparent_response_rs232_status__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_transparent_response__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_transparent_response, global::maxtrack.pb.mxt1xx.mxt1xx_u_transparent_response.Builder> internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_transparent_response__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_icc_id_answer__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_icc_id_answer, global::maxtrack.pb.mxt1xx.mxt1xx_u_icc_id_answer.Builder> internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_icc_id_answer__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_version__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_version, global::maxtrack.pb.mxt1xx.mxt1xx_u_version.Builder> internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_version__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accelerometer_event__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_accelerometer_event, global::maxtrack.pb.mxt1xx.mxt1xx_u_accelerometer_event.Builder> internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accelerometer_event__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_position__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_position, global::maxtrack.pb.mxt1xx.mxt1xx_u_position.Builder> internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_position__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_setup_header__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_setup_header, global::maxtrack.pb.mxt1xx.mxt1xx_u_setup_header.Builder> internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_setup_header__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_device_info__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_device_info, global::maxtrack.pb.mxt1xx.mxt1xx_u_device_info.Builder> internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_device_info__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_net_attributes__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_net_attributes, global::maxtrack.pb.mxt1xx.mxt1xx_u_net_attributes.Builder> internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_net_attributes__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_ip_address__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_ip_address, global::maxtrack.pb.mxt1xx.mxt1xx_u_ip_address.Builder> internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_ip_address__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_report_interval__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_report_interval, global::maxtrack.pb.mxt1xx.mxt1xx_u_report_interval.Builder> internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_report_interval__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_gsr__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_gsr, global::maxtrack.pb.mxt1xx.mxt1xx_u_gsr.Builder> internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_gsr__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_gps__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_gps, global::maxtrack.pb.mxt1xx.mxt1xx_u_gps.Builder> internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_gps__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_sms__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_sms, global::maxtrack.pb.mxt1xx.mxt1xx_u_sms.Builder> internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_sms__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_zig_info__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_zig_info, global::maxtrack.pb.mxt1xx.mxt1xx_u_zig_info.Builder> internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_zig_info__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_other_info__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_other_info, global::maxtrack.pb.mxt1xx.mxt1xx_u_other_info.Builder> internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_other_info__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_ver_info__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_ver_info, global::maxtrack.pb.mxt1xx.mxt1xx_u_ver_info.Builder> internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_ver_info__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_zig_ver_info__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_zig_ver_info, global::maxtrack.pb.mxt1xx.mxt1xx_u_zig_ver_info.Builder> internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_zig_ver_info__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_zig_info_ext__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_zig_info_ext, global::maxtrack.pb.mxt1xx.mxt1xx_u_zig_info_ext.Builder> internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_zig_info_ext__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_setup__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_setup, global::maxtrack.pb.mxt1xx.mxt1xx_u_setup.Builder> internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_setup__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_g100_return_code__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_g100_return_code, global::maxtrack.pb.mxt1xx.mxt1xx_u_g100_return_code.Builder> internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_g100_return_code__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_g100_config__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_g100_config, global::maxtrack.pb.mxt1xx.mxt1xx_u_g100_config.Builder> internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_g100_config__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_g100__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_g100, global::maxtrack.pb.mxt1xx.mxt1xx_u_g100.Builder> internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_g100__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_ip_gprs_connect__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_ip_gprs_connect, global::maxtrack.pb.mxt1xx.mxt1xx_u_ip_gprs_connect.Builder> internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_ip_gprs_connect__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_keep_alive__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_keep_alive, global::maxtrack.pb.mxt1xx.mxt1xx_u_keep_alive.Builder> internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_keep_alive__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_request_old_pos_status__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_request_old_pos_status, global::maxtrack.pb.mxt1xx.mxt1xx_u_request_old_pos_status.Builder> internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_request_old_pos_status__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_device_information__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_device_information, global::maxtrack.pb.mxt1xx.mxt1xx_u_device_information.Builder> internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_device_information__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_dynamic_setup_connection__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_connection, global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_connection.Builder> internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_dynamic_setup_connection__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_dynamic_setup_position__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_position, global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_position.Builder> internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_dynamic_setup_position__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_dynamic_setup_gps__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_gps, global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_gps.Builder> internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_dynamic_setup_gps__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_dynamic_setup_gsensor__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_gsensor, global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_gsensor.Builder> internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_dynamic_setup_gsensor__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_dynamic_setup_sms__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_sms, global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_sms.Builder> internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_dynamic_setup_sms__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_dynamic_setup_input_and_output__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_input_and_output, global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_input_and_output.Builder> internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_dynamic_setup_input_and_output__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_dynamic_setup_debounce_timer__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_debounce_timer, global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_debounce_timer.Builder> internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_dynamic_setup_debounce_timer__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_dynamic_setup_event__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_event, global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_event.Builder> internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_dynamic_setup_event__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_dynamic_setup_info_group__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_info_group, global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_info_group.Builder> internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_dynamic_setup_info_group__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_dynamic_setup_anti_theft__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_anti_theft, global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_anti_theft.Builder> internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_dynamic_setup_anti_theft__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_dynamic_setup_rs232__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_rs232, global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_rs232.Builder> internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_dynamic_setup_rs232__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_dynamic_setup_others__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_others, global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_others.Builder> internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_dynamic_setup_others__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_dynamic_setup_can__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_can, global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_can.Builder> internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_dynamic_setup_can__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_dynamic_setup__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup, global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup.Builder> internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_dynamic_setup__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static Mxt1Xx() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChdQcm90b0ZpbGVzL214dDF4eC5wcm90bxISbWF4dHJhY2sucGIubXh0MXh4", 
            "IksKDW14dDF4eF91X2luZm8SFwoPZ2VuZXJhdGlvbl9kYXRlGAEgAigJEhMK", 
            "C3BhY2tldF9zaXplGAIgAigNEgwKBGlwdjQYAyACKAkikwEKEW14dDF4eF91", 
            "X2Zpcm13YXJlEg4KBnNlcmlhbBgBIAIoDRIQCghwcm90b2NvbBgCIAIoDRIU", 
            "CgxtZW1vcnlfaW5kZXgYAyACKA0SEQoJbGlmZV90aW1lGAQgASgNEhUKDXBh", 
            "Y2tldF9yZWFzb24YBSABKA0SHAoUcG9zaXRpb25faW5mb3JtYXRpb24YBiAB", 
            "KA0igwIKHW14dDF4eF91X2dwc19tb2RlbV9mbGFnX3N0YXRlEhcKD2dwcnNf", 
            "Y29ubmVjdGlvbhgBIAIoCBISCgp2b2ljZV9jYWxsGAIgAigIEhIKCmdwc19z", 
            "aWduYWwYAyACKAgSGwoTZ3BzX2FudGVubmFfZmFpbHVyZRgEIAIoCBIgChhn", 
            "cHNfYW50ZW5uYV9kaXNjb25uZWN0ZWQYBSACKAgSFAoMZXhjZXNzX3NwZWVk", 
            "GAYgAigIEhEKCWdwc19zbGVlcBgHIAIoCBITCgtnc21famFtbWluZxgIIAIo", 
            "CBIOCgZtb3ZpbmcYCSACKAgSFAoMY2VsbF9wcmVzZW50GAogAigIIlEKHm14", 
            "dDF4eF91X2dwc19tb2RlbV9zYWQ2OV9kYXR1bRIWCg5sYXRpdHVkZV9zYWQ2", 
            "ORgBIAEoARIXCg9sb25naXR1ZGVfc2FkNjkYAiABKAEiUwohbXh0MXh4X3Vf", 
            "Z3BzX21vZGVtX3V0bV9jb29yZGluYXRlEgsKA3V0bRgBIAEoCRIPCgdlYXN0", 
            "aW5nGAIgASgBEhAKCG5vcnRoaW5nGAMgASgBIscDChJteHQxeHhfdV9ncHNf", 
            "bW9kZW0SDAoEZGF0ZRgBIAIoCRIQCghsYXRpdHVkZRgCIAIoARIRCglsb25n", 
            "aXR1ZGUYAyACKAESDQoFc3BlZWQYBCACKAESDgoGY291cnNlGAUgAigNEgsK", 
            "A3N2bhgGIAEoDRIMCgRoZG9wGAcgASgNEgsKA3NuchgIIAEoDRILCgNjc3EY", 
            "CSABKA0SGwoTYWNjZWxlcm9tZXRlcl9ldmVudBgKIAEoDRIbChNhY2NlbGVy", 
            "b21ldGVyX3ZhbHVlGAsgASgNEhEKCWhvZG9tZXRlchgMIAEoDRJFCgpmbGFn", 
            "X3N0YXRlGA0gAigLMjEubWF4dHJhY2sucGIubXh0MXh4Lm14dDF4eF91X2dw", 
            "c19tb2RlbV9mbGFnX3N0YXRlEkcKC3NhZDY5X2RhdHVtGA4gASgLMjIubWF4", 
            "dHJhY2sucGIubXh0MXh4Lm14dDF4eF91X2dwc19tb2RlbV9zYWQ2OV9kYXR1", 
            "bRJNCg51dG1fY29vcmRpbmF0ZRgPIAEoCzI1Lm1heHRyYWNrLnBiLm14dDF4", 
            "eC5teHQxeHhfdV9ncHNfbW9kZW1fdXRtX2Nvb3JkaW5hdGUiSAoQbXh0MXh4", 
            "X3Vfb3V0cHV0cxIQCghvdXRwdXRfMRgBIAIoCBIQCghvdXRwdXRfMhgCIAIo", 
            "CBIQCghvdXRwdXRfMxgDIAIoCCJ2Cg9teHQxeHhfdV9pbnB1dHMSEAoIaWdu", 
            "aXRpb24YASACKAgSDQoFcGFuaWMYAiACKAgSDwoHaW5wdXRfMRgDIAIoCBIP", 
            "CgdpbnB1dF8yGAQgAigIEg8KB2lucHV0XzMYBSACKBESDwoHaW5wdXRfNBgG", 
            "IAIoCCLCAQokbXh0MXh4X3VfaGFyZHdhcmVfbW9uaXRvcl9mbGFnX3N0YXRl", 
            "EhkKEXRhbXBlcmluZ19pc19vcGVuGAEgAigIEhgKEGJhdHRlcnlfY2hhcmdp", 
            "bmcYAiACKAgSFwoPYmF0dGVyeV9mYWlsdXJlGAMgAigIEhYKDmludGVybmFs", 
            "X2FsYXJtGAQgAigIEhkKEWFudGlfdGhlZnRfc3RhdHVzGAUgAigNEhkKEWFj", 
            "Y2Vzc29yeV9taXNzaW5nGAYgAigIIs0DChlteHQxeHhfdV9oYXJkd2FyZV9t", 
            "b25pdG9yEjMKBmlucHV0cxgBIAIoCzIjLm1heHRyYWNrLnBiLm14dDF4eC5t", 
            "eHQxeHhfdV9pbnB1dHMSNQoHb3V0cHV0cxgCIAIoCzIkLm1heHRyYWNrLnBi", 
            "Lm14dDF4eC5teHQxeHhfdV9vdXRwdXRzEj8KEnNlY3VyZV9pbnB1dF9zdGF0", 
            "ZRgDIAIoCzIjLm1heHRyYWNrLnBiLm14dDF4eC5teHQxeHhfdV9pbnB1dHMS", 
            "FwoPYWNjZXNzb3J5X2NvdW50GAQgAigNEkwKCmZsYWdfc3RhdGUYBSACKAsy", 
            "OC5tYXh0cmFjay5wYi5teHQxeHgubXh0MXh4X3VfaGFyZHdhcmVfbW9uaXRv", 
            "cl9mbGFnX3N0YXRlEgsKA3JwbRgGIAEoDRITCgt0ZW1wZXJhdHVyZRgHIAEo", 
            "ARIUCgxwb3dlcl9zdXBwbHkYCCABKAESFwoPZGV0YWlsZWRfc3VwcGx5GAkg", 
            "ASgBEhQKDGJhdHRlcnlfdXNlZBgKIAEoDRIRCglob3VybWV0ZXIYCyABKA0S", 
            "CwoDYWQ0GAwgASgBEhUKDWhvdXJtZXRlcl9taW4YDSABKA0iWgocbXh0MXh4", 
            "X3VfZW1iZWRkZWRfZmxhZ19zdGF0ZRIVCg1wb2ludF9hbmFsaXNlGAEgAigI", 
            "EhAKCHBvaW50X2luGAIgAigIEhEKCXBvaW50X291dBgDIAIoCCKQAQoRbXh0", 
            "MXh4X3VfZW1iZWRkZWQSEQoJZHJpdmVyX2lkGAEgASgNEhAKCHBvaW50X2lk", 
            "GAIgASgNEhAKCHJvdXRlX2lkGAMgASgNEkQKCmZsYWdfc3RhdGUYBCACKAsy", 
            "MC5tYXh0cmFjay5wYi5teHQxeHgubXh0MXh4X3VfZW1iZWRkZWRfZmxhZ19z", 
            "dGF0ZSJtChVteHQxeHhfdV9jZWxsX2lkX2luZm8SDwoHY2VsbF9pZBgBIAIo", 
            "CRIUCgxjb3VudHJ5X2NvZGUYAiACKAkSFAoMbmV0d29ya19jb2RlGAMgAigJ", 
            "EhcKD2xvY2FsX2FyZWFfY29kZRgEIAIoCSLbAQoYbXh0MXh4X3VfYWNjZXNz", 
            "b3J5X3d0MTAwEg4KBnNlcmlhbBgBIAIoDRIVCg1iYXR0ZXJ5X2xldmVsGAIg", 
            "AigNEhUKDWJ1dHRvbl9zdGF0dXMYAyACKA0SGwoTdG91Y2hfc2Vuc29yX3N0", 
            "YXR1cxgEIAIoCBIZChF3cmlzdF9sb29wMV9ldmVudBgFIAIoCBIZChF3cmlz", 
            "dF9sb29wMl9ldmVudBgGIAIoCBIcChRpbnRlcm5hbF90ZW1wZXJhdHVyZRgH", 
            "IAIoDRIQCghyYXdfZGF0YRgIIAIoCSKIAQoYbXh0MXh4X3VfYWNjZXNzb3J5", 
            "X3d0MTEwEg4KBnNlcmlhbBgBIAIoDRIVCg1iYXR0ZXJ5X2xldmVsGAIgAigN", 
            "EhUKDWJ1dHRvbl9zdGF0dXMYAyACKA0SHAoUaW50ZXJuYWxfdGVtcGVyYXR1", 
            "cmUYBCACKA0SEAoIcmF3X2RhdGEYBSACKAkivQEKGG14dDF4eF91X2FjY2Vz", 
            "c29yeV93dDExMRIOCgZzZXJpYWwYASACKA0SFQoNYmF0dGVyeV9sZXZlbBgC", 
            "IAIoDRIVCg1idXR0b25fc3RhdHVzGAMgAigNEhkKEXVuZGVyX3RlbXBlcmF0", 
            "dXJlGAQgAigIEhgKEG92ZXJfdGVtcGVyYXR1cmUYBSACKAgSHAoUZXh0ZXJu", 
            "YWxfdGVtcGVyYXR1cmUYBiACKA0SEAoIcmF3X2RhdGEYByACKAkiqAEKGG14", 
            "dDF4eF91X2FjY2Vzc29yeV93dDExMhIOCgZzZXJpYWwYASACKA0SFQoNYmF0", 
            "dGVyeV9sZXZlbBgCIAIoDRIVCg1idXR0b25fc3RhdHVzGAMgAigNEg4KBmxv", 
            "b3BfMRgEIAIoCBIOCgZsb29wXzIYBSACKAgSHAoUaW50ZXJuYWxfdGVtcGVy", 
            "YXR1cmUYBiACKA0SEAoIcmF3X2RhdGEYByACKAkivQEKH214dDF4eF91X2Fj", 
            "Y2Vzc29yeV93dDIwMF9pbnB1dHMSDwoHaW5wdXRfYRgBIAIoCBIPCgdpbnB1", 
            "dF9iGAIgAigIEg8KB2lucHV0X2MYAyACKAgSDwoHaW5wdXRfZBgEIAIoCBIU", 
            "CgxtYXNrX2lucHV0X2EYBSACKAgSFAoMbWFza19pbnB1dF9iGAYgAigIEhQK", 
            "DG1hc2tfaW5wdXRfYxgHIAIoCBIUCgxtYXNrX2lucHV0X2QYCCACKAgiWAog", 
            "bXh0MXh4X3VfYWNjZXNzb3J5X3d0MjAwX291dHB1dHMSEAoIb3V0cHV0X2EY", 
            "ASACKA0SEAoIb3V0cHV0X2IYAiACKA0SEAoIb3V0cHV0X2MYAyACKA0ioAIK", 
            "GG14dDF4eF91X2FjY2Vzc29yeV93dDIwMBIOCgZzZXJpYWwYASACKA0SDQoF", 
            "aW5kZXgYAiACKA0SSQoMaW5wdXRfc3RhdHVzGAMgAigLMjMubWF4dHJhY2su", 
            "cGIubXh0MXh4Lm14dDF4eF91X2FjY2Vzc29yeV93dDIwMF9pbnB1dHMSSwoN", 
            "b3V0cHV0X3N0YXR1cxgEIAIoCzI0Lm1heHRyYWNrLnBiLm14dDF4eC5teHQx", 
            "eHhfdV9hY2Nlc3Nvcnlfd3QyMDBfb3V0cHV0cxIXCg9nX3NlbnNvcl9zdGF0", 
            "dXMYBSACKAgSEAoIb25ld2lyZTEYBiACKA0SEAoIb25ld2lyZTIYByACKA0S", 
            "EAoIcmF3X2RhdGEYCCACKAkiyQEKGG14dDF4eF91X2FjY2Vzc29yeV93dDMw", 
            "MBIOCgZzZXJpYWwYASACKA0SFQoNYnV0dG9uX3N0YXR1cxgCIAIoDRIZChF1", 
            "bmRlcl90ZW1wZXJhdHVyZRgDIAIoCBIYChBvdmVyX3RlbXBlcmF0dXJlGAQg", 
            "AigIEhIKCmV2ZW50X2NvZGUYBSACKA0SFQoNbWVzc2FnZV9ncm91cBgGIAIo", 
            "DRIUCgxtZXNzYWdlX2NvZGUYByACKA0SEAoIcmF3X2RhdGEYCCACKAkiyAEK", 
            "GG14dDF4eF91X2FjY2Vzc29yeV93dDQwMBIOCgZzZXJpYWwYASACKA0SHAoU", 
            "ZXh0ZXJuYWxfdGVtcGVyYXR1cmUYAiACKA0SFQoNYmF0dGVyeV9sZXZlbBgD", 
            "IAIoDRIVCg1tb3Zpbmdfc3RhdHVzGAQgAigIEhMKC2Rvb3Jfc3RhdHVzGAUg", 
            "AigIEhUKDWJ1dHRvbl9zdGF0dXMYBiACKA0SEgoKcG93ZXJfZmFpbBgHIAIo", 
            "CBIQCghyYXdfZGF0YRgIIAIoCSKhAQoZbXh0MXh4X3VfYWNjZXNzb3J5X214", 
            "dDEwMRIOCgZzZXJpYWwYASACKA0SFgoOZ3Byc19pbmRpY2F0b3IYAiACKAgS", 
            "FQoNYmF0dGVyeV9sZXZlbBgDIAIoDRIVCg1idXR0b25fc3RhdHVzGAQgAigN", 
            "EhwKFGludGVybmFsX3RlbXBlcmF0dXJlGAUgAigREhAKCHJhd19kYXRhGAYg", 
            "AigJIqsCChlteHQxeHhfdV9hY2Nlc3NvcnlfbXh0MTUxEg4KBnNlcmlhbBgB", 
            "IAIoDRIXCg9pZ25pdGlvbl9zdGF0dXMYAiACKAgSFQoNYnV0dG9uX3N0YXR1", 
            "cxgDIAIoDRITCgtkb29yX3N0YXR1cxgEIAIoCBIMCgRtb2RlGAUgAigNEhgK", 
            "EGhpZ2hfc2lkZV9vdXRwdXQYBiACKA0SGAoQbG93X3NpZGVfb3V0cHV0MRgH", 
            "IAIoDRIYChBsb3dfc2lkZV9vdXRwdXQyGAggAigNEhkKEXVuZGVyX3RlbXBl", 
            "cmF0dXJlGAkgAigIEhgKEG92ZXJfdGVtcGVyYXR1cmUYCiACKAgSFgoOZ3By", 
            "c19pbmRpY2F0b3IYCyACKAgSEAoIcmF3X2RhdGEYDCACKAkiTwoebXh0MXh4", 
            "X3VfYWNjZXNzb3J5X3JwbV92aXJ0dWFsEg4KBnNlcmlhbBgBIAIoDRILCgNy", 
            "cG0YAiACKA0SEAoIcmF3X2RhdGEYAyACKAkiTwocbXh0MXh4X3VfYWNjZXNz", 
            "b3J5X2dwc19zcGVlZBIOCgZzZXJpYWwYASACKA0SDQoFc3BlZWQYAiACKA0S", 
            "EAoIcmF3X2RhdGEYAyACKAkiQQobbXh0MXh4X3VfYWNjZXNzb3J5X3RhZ19p", 
            "bmZvEg4KBnRhZ19pZBgBIAIoDRISCgp0YWdfc3RhdHVzGAIgAigIIo4BChZt", 
            "eHQxeHhfdV9hY2Nlc3NvcnlfdGFnEg4KBnNlcmlhbBgBIAIoDRJBCgh0YWdf", 
            "aW5mbxgCIAMoCzIvLm1heHRyYWNrLnBiLm14dDF4eC5teHQxeHhfdV9hY2Nl", 
            "c3NvcnlfdGFnX2luZm8SEAoIcmF3X2RhdGEYAyACKAkSDwoHYml0X21hcBgE", 
            "IAIoBCI/Ch5teHQxeHhfdV9hY2Nlc3NvcnlfcmZpZF9kcml2ZXISEQoJZHJp", 
            "dmVyX2lkGAEgAigNEgoKAmlkGAIgAigNIlcKIW14dDF4eF91X2FjY2Vzc29y", 
            "eV9yZmlkX3Bhc3NlbmdlchIUCgxwYXNzZW5nZXJfaWQYASACKA0SHAoUcGFz", 
            "c2VuZ2VyX2F1dGhvcml6ZWQYAiACKAgisAgKEm14dDF4eF91X2FjY2Vzc29y", 
            "eRJACgp3dDEwMF9saXN0GAEgAygLMiwubWF4dHJhY2sucGIubXh0MXh4Lm14", 
            "dDF4eF91X2FjY2Vzc29yeV93dDEwMBJACgp3dDExMF9saXN0GAIgAygLMiwu", 
            "bWF4dHJhY2sucGIubXh0MXh4Lm14dDF4eF91X2FjY2Vzc29yeV93dDExMBJA", 
            "Cgp3dDExMV9saXN0GAMgAygLMiwubWF4dHJhY2sucGIubXh0MXh4Lm14dDF4", 
            "eF91X2FjY2Vzc29yeV93dDExMRJACgp3dDExMl9saXN0GAQgAygLMiwubWF4", 
            "dHJhY2sucGIubXh0MXh4Lm14dDF4eF91X2FjY2Vzc29yeV93dDExMhJACgp3", 
            "dDIwMF9saXN0GAUgAygLMiwubWF4dHJhY2sucGIubXh0MXh4Lm14dDF4eF91", 
            "X2FjY2Vzc29yeV93dDIwMBJACgp3dDMwMF9saXN0GAYgAygLMiwubWF4dHJh", 
            "Y2sucGIubXh0MXh4Lm14dDF4eF91X2FjY2Vzc29yeV93dDMwMBJACgp3dDQw", 
            "MF9saXN0GAcgAygLMiwubWF4dHJhY2sucGIubXh0MXh4Lm14dDF4eF91X2Fj", 
            "Y2Vzc29yeV93dDQwMBJCCgtteHQxMDFfbGlzdBgIIAMoCzItLm1heHRyYWNr", 
            "LnBiLm14dDF4eC5teHQxeHhfdV9hY2Nlc3NvcnlfbXh0MTAxEkIKC214dDE1", 
            "MV9saXN0GAkgAygLMi0ubWF4dHJhY2sucGIubXh0MXh4Lm14dDF4eF91X2Fj", 
            "Y2Vzc29yeV9teHQxNTESTAoQcnBtX3ZpcnR1YWxfbGlzdBgKIAMoCzIyLm1h", 
            "eHRyYWNrLnBiLm14dDF4eC5teHQxeHhfdV9hY2Nlc3NvcnlfcnBtX3ZpcnR1", 
            "YWwSRAoQbWlzc2luZ190YWdfbGlzdBgLIAMoCzIqLm1heHRyYWNrLnBiLm14", 
            "dDF4eC5teHQxeHhfdV9hY2Nlc3NvcnlfdGFnEkQKEGxvd19iYXR0ZXJ5X2xp", 
            "c3QYDCADKAsyKi5tYXh0cmFjay5wYi5teHQxeHgubXh0MXh4X3VfYWNjZXNz", 
            "b3J5X3RhZxJICg5ncHNfc3BlZWRfbGlzdBgNIAMoCzIwLm1heHRyYWNrLnBi", 
            "Lm14dDF4eC5teHQxeHhfdV9hY2Nlc3NvcnlfZ3BzX3NwZWVkEkwKEHJmaWRf", 
            "ZHJpdmVyX2xpc3QYDiADKAsyMi5tYXh0cmFjay5wYi5teHQxeHgubXh0MXh4", 
            "X3VfYWNjZXNzb3J5X3JmaWRfZHJpdmVyElIKE3JmaWRfcGFzc2VuZ2VyX2xp", 
            "c3QYDyADKAsyNS5tYXh0cmFjay5wYi5teHQxeHgubXh0MXh4X3VfYWNjZXNz", 
            "b3J5X3JmaWRfcGFzc2VuZ2VyInkKK214dDF4eF91X2FkZGl0aW9uYWxfZGF0", 
            "YV9sYnNfZ3NtX2NlbGxfdG93ZXISDwoHY2VsbF9pZBgBIAIoDRILCgNtY2MY", 
            "AiACKA0SCwoDbW5jGAMgAigNEgsKA2xhYxgEIAIoDRISCgpzaWduYWxfc3Ry", 
            "GAUgAigNIrUBCiBteHQxeHhfdV9hZGRpdGlvbmFsX2RhdGFfbGJzX2dzbRIS", 
            "CgpyYWRpb190eXBlGAEgAigJEgsKA2FnZRgCIAIoDRIWCg50aW1pbmdfYWR2", 
            "YW5jZRgDIAIoDRJYCg9jZWxsX3Rvd2VyX2xpc3QYBCADKAsyPy5tYXh0cmFj", 
            "ay5wYi5teHQxeHgubXh0MXh4X3VfYWRkaXRpb25hbF9kYXRhX2xic19nc21f", 
            "Y2VsbF90b3dlciJ9CipteHQxeHhfdV9hZGRpdGlvbmFsX2RhdGFfd2lmaV9h", 
            "Y2Nlc3NfcG9pbnQSEAoIbWFjX2FkZHIYASACKAkSEgoKc2lnbmFsX3N0chgC", 
            "IAIoDRILCgNhZ2UYAyACKA0SCwoDc25yGAQgAigNEg8KB2NoYW5uZWwYBSAC", 
            "KA0iawombXh0MXh4X3VfYWRkaXRpb25hbF9kYXRhX3NwZWVkX2RldGFpbHMS", 
            "FQoNYXZlcmFnZV9zcGVlZBgBIAIoDRIRCgltYXhfc3BlZWQYAiACKA0SFwoP", 
            "b3Zlcl9zcGVlZF90aW1lGAMgAigNIqkBCihteHQxeHhfdV9hZGRpdGlvbmFs", 
            "X2RhdGFfc3BlZWRfaGlzdG9ncmFtEh0KFWxhc3RfcGFja2FnZV9kYXRldGlt", 
            "ZRgBIAIoCRIfChdhY3R1YWxfcGFja2FnZV9kYXRldGltZRgCIAIoCRITCgtz", 
            "cGVlZF9yYW5nZRgDIAIoDRIOCgZncm91cHMYBCADKA0SGAoQdGltZV93aXRo", 
            "b3V0X2dwcxgFIAIoDSJiCjxteHQxeHhfdV9hZGRpdGlvbmFsX2RhdGFfdGVs", 
            "ZW1ldHJ5X2V2ZW50c19jYWxpYnJhdGlvbl9zdGF0dXMSDgoGc3RhdHVzGAEg", 
            "AigNEhIKCnRpbWVfc3BlbnQYAiACKA0idQo7bXh0MXh4X3VfYWRkaXRpb25h", 
            "bF9kYXRhX3RlbGVtZXRyeV9ldmVudHNfaGFyZF9hY2NlbGVyYXRpb24SDQoF", 
            "bWF4X2cYASACKA0SEwoLdGltZV90b19tYXgYAiACKA0SEgoKdG90YWxfdGlt", 
            "ZRgDIAIoDSJwCjZteHQxeHhfdV9hZGRpdGlvbmFsX2RhdGFfdGVsZW1ldHJ5", 
            "X2V2ZW50c19oYXJkX2JyYWtpbmcSDQoFbWF4X2cYASACKA0SEwoLdGltZV90", 
            "b19tYXgYAiACKA0SEgoKdG90YWxfdGltZRgDIAIoDSJ+CjZteHQxeHhfdV9h", 
            "ZGRpdGlvbmFsX2RhdGFfdGVsZW1ldHJ5X2V2ZW50c19oYXJkX2xhdGVyYWwS", 
            "DQoFbWF4X2cYASACKA0SEwoLdGltZV90b19tYXgYAiACKA0SEgoKdG90YWxf", 
            "dGltZRgDIAIoDRIMCgRzaWRlGAQgAigNInMKOW14dDF4eF91X2FkZGl0aW9u", 
            "YWxfZGF0YV90ZWxlbWV0cnlfZXZlbnRzX2ltcGFjdF9kZXRlY3RlZBINCgVt", 
            "YXhfZxgBIAIoDRITCgt0aW1lX3RvX21heBgCIAIoDRISCgp0b3RhbF90aW1l", 
            "GAMgAigNIsoECilteHQxeHhfdV9hZGRpdGlvbmFsX2RhdGFfdGVsZW1ldHJ5", 
            "X2V2ZW50cxJxChdjYWxpYnJhdGlvbl9zdGF0dXNfbGlzdBgBIAMoCzJQLm1h", 
            "eHRyYWNrLnBiLm14dDF4eC5teHQxeHhfdV9hZGRpdGlvbmFsX2RhdGFfdGVs", 
            "ZW1ldHJ5X2V2ZW50c19jYWxpYnJhdGlvbl9zdGF0dXMSbwoWaGFyZF9hY2Nl", 
            "bGVyYXRpb25fbGlzdBgCIAMoCzJPLm1heHRyYWNrLnBiLm14dDF4eC5teHQx", 
            "eHhfdV9hZGRpdGlvbmFsX2RhdGFfdGVsZW1ldHJ5X2V2ZW50c19oYXJkX2Fj", 
            "Y2VsZXJhdGlvbhJlChFoYXJkX2JyYWtpbmdfbGlzdBgDIAMoCzJKLm1heHRy", 
            "YWNrLnBiLm14dDF4eC5teHQxeHhfdV9hZGRpdGlvbmFsX2RhdGFfdGVsZW1l", 
            "dHJ5X2V2ZW50c19oYXJkX2JyYWtpbmcSZQoRaGFyZF9sYXRlcmFsX2xpc3QY", 
            "BCADKAsySi5tYXh0cmFjay5wYi5teHQxeHgubXh0MXh4X3VfYWRkaXRpb25h", 
            "bF9kYXRhX3RlbGVtZXRyeV9ldmVudHNfaGFyZF9sYXRlcmFsEmsKFGltcGFj", 
            "dF9kZXRlY3RlZF9saXN0GAUgAygLMk0ubWF4dHJhY2sucGIubXh0MXh4Lm14", 
            "dDF4eF91X2FkZGl0aW9uYWxfZGF0YV90ZWxlbWV0cnlfZXZlbnRzX2ltcGFj", 
            "dF9kZXRlY3RlZCK8AQoxbXh0MXh4X3VfYWRkaXRpb25hbF9kYXRhX2pvdXJu", 
            "ZXlfZGVsdGFzX3JwbV9kZWx0YRIWCg5ycG1fcmFuZ2VfYmx1ZRgBIAIoDRIX", 
            "Cg9ycG1fcmFuZ2VfZ3JlZW4YAiACKA0SGAoQcnBtX3JhbmdlX3llbGxvdxgD", 
            "IAIoDRIVCg1ycG1fcmFuZ2VfcmVkGAQgAigNEhMKC3JwbV9tYXhpbXVtGAUg", 
            "AigNEhAKCHJwbV9tZWFuGAYgAigNIn8KM214dDF4eF91X2FkZGl0aW9uYWxf", 
            "ZGF0YV9qb3VybmV5X2RlbHRhc19zcGVlZF9kZWx0YRIVCg1tYXhpbXVtX3Nw", 
            "ZWVkGAEgAigNEhIKCm1lYW5fc3BlZWQYAiACKA0SHQoVaG9kb21ldGVyX2Fj", 
            "Y3VtdWxhdGVkGAMgAigNIp4BCkBteHQxeHhfdV9hZGRpdGlvbmFsX2RhdGFf", 
            "am91cm5leV9kZWx0YXNfbWVhbl9qb3VybmV5X3RpbWVyX2RlbHRhEhcKD3Rp", 
            "bWVfb2Zfam91cm5leRgBIAIoDRITCgt0aW1lX21vdmluZxgCIAIoDRIUCgx0", 
            "aW1lX3N0b3BwZWQYAyACKA0SFgoOdGltZV9lbmdpbmVfb24YBCACKA0izgEK", 
            "Nm14dDF4eF91X2FkZGl0aW9uYWxfZGF0YV9qb3VybmV5X2RlbHRhc19sb2Nh", 
            "dGlvbl9kZWx0YRIUCgxlbmRfZGF0ZXRpbWUYASACKAkSGgoSc3RhcnRfbWVt", 
            "b3J5X2luZGV4GAIgAigNEhgKEGVuZF9tZW1vcnlfaW5kZXgYAyACKA0SEQoJ", 
            "c3RhcnRfbGF0GAQgAigBEhIKCnN0YXJ0X2xvbmcYBSACKAESDwoHZW5kX2xh", 
            "dBgGIAIoARIQCghlbmRfbG9uZxgHIAIoASKNAgo7bXh0MXh4X3VfYWRkaXRp", 
            "b25hbF9kYXRhX2pvdXJuZXlfZGVsdGFzX2FjY2VsZXJvbWV0ZXJfZGVsdGES", 
            "HgoWbWF4X3JvbGxpbmdfYXhpc19mcm9udBgBIAIoDRIdChVtYXhfcm9sbGlu", 
            "Z19heGlzX2JhY2sYAiACKA0SIQoZbWF4X2xhdGVyYWxfYXhpc19hYnNvbHV0", 
            "ZRgDIAIoDRIiChphdmVyYWdlX3JvbGxpbmdfYXhpc19mcm9udBgEIAIoDRIh", 
            "ChlhdmVyYWdlX3JvbGxpbmdfYXhpc19iYWNrGAUgAigNEiUKHWF2ZXJhZ2Vf", 
            "bGF0ZXJhbF9heGlzX2Fic29sdXRlGAYgAigNIswECidteHQxeHhfdV9hZGRp", 
            "dGlvbmFsX2RhdGFfam91cm5leV9kZWx0YXMSDwoHdmVyc2lvbhgBIAIoDRIO", 
            "CgZyZWFzb24YAiACKA0SWAoJcnBtX2RlbHRhGAMgASgLMkUubWF4dHJhY2su", 
            "cGIubXh0MXh4Lm14dDF4eF91X2FkZGl0aW9uYWxfZGF0YV9qb3VybmV5X2Rl", 
            "bHRhc19ycG1fZGVsdGESXAoLc3BlZWRfZGVsdGEYBCABKAsyRy5tYXh0cmFj", 
            "ay5wYi5teHQxeHgubXh0MXh4X3VfYWRkaXRpb25hbF9kYXRhX2pvdXJuZXlf", 
            "ZGVsdGFzX3NwZWVkX2RlbHRhEnYKGG1lYW5fam91cm5leV90aW1lcl9kZWx0", 
            "YRgFIAEoCzJULm1heHRyYWNrLnBiLm14dDF4eC5teHQxeHhfdV9hZGRpdGlv", 
            "bmFsX2RhdGFfam91cm5leV9kZWx0YXNfbWVhbl9qb3VybmV5X3RpbWVyX2Rl", 
            "bHRhEmIKDmxvY2F0aW9uX2RlbHRhGAYgASgLMkoubWF4dHJhY2sucGIubXh0", 
            "MXh4Lm14dDF4eF91X2FkZGl0aW9uYWxfZGF0YV9qb3VybmV5X2RlbHRhc19s", 
            "b2NhdGlvbl9kZWx0YRJsChNhY2NlbGVyb21ldGVyX2RlbHRhGAcgASgLMk8u", 
            "bWF4dHJhY2sucGIubXh0MXh4Lm14dDF4eF91X2FkZGl0aW9uYWxfZGF0YV9q", 
            "b3VybmV5X2RlbHRhc19hY2NlbGVyb21ldGVyX2RlbHRhIp8CCjRteHQxeHhf", 
            "dV9hZGRpdGlvbmFsX2RhdGFfY3Jhc2hfcmVjb25zdHJ1Y3Rpb25fc2Vjb25k", 
            "EhoKEnJvbGxpbmdfYXhpc19mcm9udBgBIAEoDRIZChFyb2xsaW5nX2F4aXNf", 
            "YmFjaxgCIAEoDRIaChJsYXRlcmFsX2F4aXNfcmlnaHQYAyABKA0SGQoRbGF0", 
            "ZXJhbF9heGlzX2xlZnQYBCABKA0SHQoVbGF0ZXJhbF9heGlzX2Fic29sdXRl", 
            "GAUgASgNEh4KFnZlcnRpY2FsX2F4aXNfcG9zaXRpdmUYBiABKA0SHgoWdmVy", 
            "dGljYWxfYXhpc19uZWdhdGl2ZRgHIAEoERINCgVzcGVlZBgIIAEoDRILCgNy", 
            "cG0YCSABKA0iigEKLW14dDF4eF91X2FkZGl0aW9uYWxfZGF0YV9jcmFzaF9y", 
            "ZWNvbnN0cnVjdGlvbhJZCgdzZWNvbmRzGAEgAygLMkgubWF4dHJhY2sucGIu", 
            "bXh0MXh4Lm14dDF4eF91X2FkZGl0aW9uYWxfZGF0YV9jcmFzaF9yZWNvbnN0", 
            "cnVjdGlvbl9zZWNvbmQiawo1bXh0MXh4X3VfYWRkaXRpb25hbF9kYXRhX3Jv", 
            "dXRlX3JlY29uc3RydWN0aW9uX3NlY3Rpb24SEAoIbGF0aXR1ZGUYASACKAES", 
            "EQoJbG9uZ2l0dWRlGAIgAigBEg0KBXNwZWVkGAMgAigNIowBCi1teHQxeHhf", 
            "dV9hZGRpdGlvbmFsX2RhdGFfcm91dGVfcmVjb25zdHJ1Y3Rpb24SWwoIc2Vj", 
            "dGlvbnMYASADKAsySS5tYXh0cmFjay5wYi5teHQxeHgubXh0MXh4X3VfYWRk", 
            "aXRpb25hbF9kYXRhX3JvdXRlX3JlY29uc3RydWN0aW9uX3NlY3Rpb24ipgIK", 
            "Om14dDF4eF91X2FkZGl0aW9uYWxfZGF0YV9wb3NpdGlvbl9pbmZvcm1hdGlv", 
            "bl9kaWdpdGFsX2RhdGESDgoGY2x1dGNoGAEgASgIEg0KBWJyYWtlGAIgASgI", 
            "EhUKDXBhcmtpbmdfYnJha2UYAyABKAgSEwoLbW90b3JfYnJha2UYBCABKAgS", 
            "GQoRd2luZHNoaWVsZF93aXBlcnMYBSABKAgSEwoLZG9vcl9jbG9zZWQYBiAB", 
            "KAgSEwoLZG9vcl9sb2NrZWQYByABKAgSDQoFdHJ1bmsYCCABKAgSEQoJc2Vh", 
            "dF9iZWx0GAkgASgIEhIKCmhlYWRsaWdodHMYCiABKAgSIgoabWFsZnVuY3Rp", 
            "b25faW5kaWNhdG9yX2xhbXAYCyABKAgiXQpHbXh0MXh4X3VfYWRkaXRpb25h", 
            "bF9kYXRhX3Bvc2l0aW9uX2luZm9ybWF0aW9uX2FuYWxvZ2ljX2RhdGFfZHRj", 
            "X3BhY2tldHMSEgoKZHRjX3BhY2tldBgBIAIoDSKhBQo7bXh0MXh4X3VfYWRk", 
            "aXRpb25hbF9kYXRhX3Bvc2l0aW9uX2luZm9ybWF0aW9uX2FuYWxvZ2ljX2Rh", 
            "dGESDQoFc3BlZWQYASABKA0SCwoDcnBtGAIgASgNEhAKCG9kb21ldGVyGAMg", 
            "ASgNEhMKC2Z1ZWxfbGV2ZWwxGAQgASgNEhMKC2Z1ZWxfbGV2ZWwyGAUgASgN", 
            "EhgKEGZ1ZWxfY29uc3VtcHRpb24YBiABKA0SFwoPaW50YWtlX2Fpcl90ZW1w", 
            "GAcgASgNEhcKD2ludGFrZV9haXJfZmxvdxgIIAEoDRIZChF0aHJvdHRsZV9w", 
            "b3NpdGlvbhgJIAEoDRIbChNiYXJvbWV0cmljX3ByZXNzdXJlGAogASgNEh4K", 
            "FmNvbnRyb2xfbW9kdWxlX3ZvbHRhZ2UYCyABKA0SFwoPYWlyX3RlbXBlcmF0", 
            "dXJlGAwgASgNEhEKCWZ1ZWxfdHlwZRgNIAEoDRIVCg1ldGhhbm9sX3JhdGlv", 
            "GA4gASgNEhcKD29pbF90ZW1wZXJhdHVyZRgPIAEoDRIaChJlbmdpbmVfdGVt", 
            "cGVyYXR1cmUYECABKA0SGQoRZW5naW5lX3JlZl90b3JxdWUYESABKA0SFAoM", 
            "Y3VycmVudF9nZWFyGBIgASgNEhgKEGVuZ2luZV9mdWVsX3JhdGUYEyABKA0S", 
            "GQoRbnVtX2R0Y19hdmFpbGFibGUYFCABKA0SFgoObnVtX2R0Y19wYWNrZXQY", 
            "FSABKA0ScAoLZHRjX3BhY2tldHMYFiADKAsyWy5tYXh0cmFjay5wYi5teHQx", 
            "eHgubXh0MXh4X3VfYWRkaXRpb25hbF9kYXRhX3Bvc2l0aW9uX2luZm9ybWF0", 
            "aW9uX2FuYWxvZ2ljX2RhdGFfZHRjX3BhY2tldHMi/QEKLW14dDF4eF91X2Fk", 
            "ZGl0aW9uYWxfZGF0YV9wb3NpdGlvbl9pbmZvcm1hdGlvbhJkCgxkaWdpdGFs", 
            "X2RhdGEYASABKAsyTi5tYXh0cmFjay5wYi5teHQxeHgubXh0MXh4X3VfYWRk", 
            "aXRpb25hbF9kYXRhX3Bvc2l0aW9uX2luZm9ybWF0aW9uX2RpZ2l0YWxfZGF0", 
            "YRJmCg1hbmFsb2dpY19kYXRhGAIgASgLMk8ubWF4dHJhY2sucGIubXh0MXh4", 
            "Lm14dDF4eF91X2FkZGl0aW9uYWxfZGF0YV9wb3NpdGlvbl9pbmZvcm1hdGlv", 
            "bl9hbmFsb2dpY19kYXRhIr0GChhteHQxeHhfdV9hZGRpdGlvbmFsX2RhdGES", 
            "RQoHbGJzX2dzbRgBIAEoCzI0Lm1heHRyYWNrLnBiLm14dDF4eC5teHQxeHhf", 
            "dV9hZGRpdGlvbmFsX2RhdGFfbGJzX2dzbRJfChd3aWZpX2FjY2Vzc19wb2lu", 
            "dHNfbGlzdBgCIAMoCzI+Lm1heHRyYWNrLnBiLm14dDF4eC5teHQxeHhfdV9h", 
            "ZGRpdGlvbmFsX2RhdGFfd2lmaV9hY2Nlc3NfcG9pbnQSUQoNc3BlZWRfZGV0", 
            "YWlscxgDIAEoCzI6Lm1heHRyYWNrLnBiLm14dDF4eC5teHQxeHhfdV9hZGRp", 
            "dGlvbmFsX2RhdGFfc3BlZWRfZGV0YWlscxJVCg9zcGVlZF9oaXN0b2dyYW0Y", 
            "BCABKAsyPC5tYXh0cmFjay5wYi5teHQxeHgubXh0MXh4X3VfYWRkaXRpb25h", 
            "bF9kYXRhX3NwZWVkX2hpc3RvZ3JhbRJXChB0ZWxlbWV0cnlfZXZlbnRzGAUg", 
            "ASgLMj0ubWF4dHJhY2sucGIubXh0MXh4Lm14dDF4eF91X2FkZGl0aW9uYWxf", 
            "ZGF0YV90ZWxlbWV0cnlfZXZlbnRzElMKDmpvdXJuZXlfZGVsdGFzGAYgASgL", 
            "MjsubWF4dHJhY2sucGIubXh0MXh4Lm14dDF4eF91X2FkZGl0aW9uYWxfZGF0", 
            "YV9qb3VybmV5X2RlbHRhcxJfChRjcmFzaF9yZWNvbnN0cnVjdGlvbhgHIAEo", 
            "CzJBLm1heHRyYWNrLnBiLm14dDF4eC5teHQxeHhfdV9hZGRpdGlvbmFsX2Rh", 
            "dGFfY3Jhc2hfcmVjb25zdHJ1Y3Rpb24SXwoUcm91dGVfcmVjb25zdHJ1Y3Rp", 
            "b24YCCABKAsyQS5tYXh0cmFjay5wYi5teHQxeHgubXh0MXh4X3VfYWRkaXRp", 
            "b25hbF9kYXRhX3JvdXRlX3JlY29uc3RydWN0aW9uEl8KFHBvc2l0aW9uX2lu", 
            "Zm9ybWF0aW9uGAkgASgLMkEubWF4dHJhY2sucGIubXh0MXh4Lm14dDF4eF91", 
            "X2FkZGl0aW9uYWxfZGF0YV9wb3NpdGlvbl9pbmZvcm1hdGlvbiIpChlteHQx", 
            "eHhfdV90cmFuc3BhcmVudF9kYXRhEgwKBGRhdGEYASACKAkiPAoqbXh0MXh4", 
            "X3VfdHJhbnNwYXJlbnRfcmVzcG9uc2VfcnMyMzJfc3RhdHVzEg4KBnN0YXR1", 
            "cxgBIAIoDSKlAQodbXh0MXh4X3VfdHJhbnNwYXJlbnRfcmVzcG9uc2USEAoI", 
            "cHJvdG9jb2wYASACKA0SDgoGc2VyaWFsGAIgAigNEgwKBGRhdGUYAyACKAkS", 
            "VAoMcnMyMzJfc3RhdHVzGAQgASgLMj4ubWF4dHJhY2sucGIubXh0MXh4Lm14", 
            "dDF4eF91X3RyYW5zcGFyZW50X3Jlc3BvbnNlX3JzMjMyX3N0YXR1cyJYChZt", 
            "eHQxeHhfdV9pY2NfaWRfYW5zd2VyEhAKCHByb3RvY29sGAEgAigNEg4KBnNl", 
            "cmlhbBgCIAIoDRIOCgZpY2NfaWQYAyACKAkSDAoEZGF0ZRgEIAIoCSKGAQoQ", 
            "bXh0MXh4X3VfdmVyc2lvbhIQCghwcm90b2NvbBgBIAIoDRIOCgZzZXJpYWwY", 
            "AiACKA0SFQoNbW9kZW1fdmVyc2lvbhgDIAIoCRITCgthcHBfdmVyc2lvbhgE", 
            "IAIoCRIWCg56aWdiZWVfdmVyc2lvbhgFIAIoCRIMCgRkYXRlGAYgAigJIm4K", 
            "HG14dDF4eF91X2FjY2VsZXJvbWV0ZXJfZXZlbnQSDAoEYXhpcxgBIAIoCRIN", 
            "CgVtYXhfZxgCIAIoARIWCg5zaWRlX2dfYXZlcmFnZRgDIAIoARIZChFyb2xs", 
            "aW5nX2dfYXZlcmFnZRgEIAIoASKUBQoRbXh0MXh4X3VfcG9zaXRpb24SNwoI", 
            "ZmlybXdhcmUYASACKAsyJS5tYXh0cmFjay5wYi5teHQxeHgubXh0MXh4X3Vf", 
            "ZmlybXdhcmUSOQoJZ3BzX21vZGVtGAIgAigLMiYubWF4dHJhY2sucGIubXh0", 
            "MXh4Lm14dDF4eF91X2dwc19tb2RlbRJHChBoYXJkd2FyZV9tb25pdG9yGAMg", 
            "AigLMi0ubWF4dHJhY2sucGIubXh0MXh4Lm14dDF4eF91X2hhcmR3YXJlX21v", 
            "bml0b3ISNwoIZW1iZWRkZWQYBCACKAsyJS5tYXh0cmFjay5wYi5teHQxeHgu", 
            "bXh0MXh4X3VfZW1iZWRkZWQSLwoEaW5mbxgFIAIoCzIhLm1heHRyYWNrLnBi", 
            "Lm14dDF4eC5teHQxeHhfdV9pbmZvEjwKCWNlbGxfaW5mbxgGIAEoCzIpLm1h", 
            "eHRyYWNrLnBiLm14dDF4eC5teHQxeHhfdV9jZWxsX2lkX2luZm8SOwoLYWNj", 
            "ZXNzb3JpZXMYByABKAsyJi5tYXh0cmFjay5wYi5teHQxeHgubXh0MXh4X3Vf", 
            "YWNjZXNzb3J5EkcKEHRyYW5zcGFyZW50X2RhdGEYCCABKAsyLS5tYXh0cmFj", 
            "ay5wYi5teHQxeHgubXh0MXh4X3VfdHJhbnNwYXJlbnRfZGF0YRJFCg9hZGRp", 
            "dGlvbmFsX2RhdGEYCSABKAsyLC5tYXh0cmFjay5wYi5teHQxeHgubXh0MXh4", 
            "X3VfYWRkaXRpb25hbF9kYXRhEk0KE2FjY2VsZXJvbWV0ZXJfZXZlbnQYCiAB", 
            "KAsyMC5tYXh0cmFjay5wYi5teHQxeHgubXh0MXh4X3VfYWNjZWxlcm9tZXRl", 
            "cl9ldmVudCJzChVteHQxeHhfdV9zZXR1cF9oZWFkZXISDgoGc2VyaWFsGAEg", 
            "AigNEhAKCHByb3RvY29sGAIgAigNEhEKCXRpbWVzdGFtcBgDIAIoCRIRCglz", 
            "ZW5kZXJfaWQYBCABKA0SEgoKcmVjZWl2ZV9pZBgFIAEoDSI9ChRteHQxeHhf", 
            "dV9kZXZpY2VfaW5mbxIRCglkZXZpY2VfaWQYASACKA0SEgoKc3dfdmVyc2lv", 
            "bhgCIAIoCSKpAQoXbXh0MXh4X3VfbmV0X2F0dHJpYnV0ZXMSFwoPY29ubmVj", 
            "dGlvbl90eXBlGAEgAigNEhgKEGtlZXBfYWxpdmVfdGltZXIYAiACKA0SCwoD", 
            "YXBuGAMgAigJEgwKBHVzZXIYBCACKAkSEAoIcGFzc3dvcmQYBSACKAkSDAoE", 
            "YXBuMhgGIAEoCRINCgV1c2VyMhgHIAEoCRIRCglwYXNzd29yZDIYCCABKAki", 
            "fQoTbXh0MXh4X3VfaXBfYWRkcmVzcxIXCg9wcmltYXJ5X2lwX2FkZHIYASAC", 
            "KAkSGQoRc2Vjb25kYXJ5X2lwX2FkZHIYAiACKAkSFwoPcHJpbWFyeV9pcF9w", 
            "b3J0GAMgAigNEhkKEXNlY29uZGFyeV9pcF9wb3J0GAQgAigNIuUBChhteHQx", 
            "eHhfdV9yZXBvcnRfaW50ZXJ2YWwSHQoVdGltZXJfb2ZfaWduaXRpb25fb2Zm", 
            "GAEgAigNEhkKEXRpbWVyX29mX21vdmVtZW50GAIgAigNEhYKDnRpbWVyX29m", 
            "X3BhbmljGAMgAigNEhcKD3Jlc2VuZF9hdHRlbXB0cxgEIAIoDRIWCg5yZXNl", 
            "bmRfdGltZW91dBgFIAIoDRISCgppbmZvX2dyb3VwGAYgAigNEhoKEmtlZXBf", 
            "d29ya2luZ190aW1lchgHIAIoDRIWCg50aW1lb3V0X21vdmluZxgIIAIoDSLF", 
            "AQoMbXh0MXh4X3VfZ3NyEhgKEHNlbmRfaW1tZWRpYXRlbHkYASACKA0SEgoK", 
            "ZGViX21vdmluZxgCIAIoDRITCgtkZWJfc3RvcHBlZBgDIAIoDRIVCg1kZXRl", 
            "Y3RfbW92aW5nGAQgAigNEg8KB3JzX21vZGUYBSACKA0SGQoRcm9sbGluZ190", 
            "aHJlc2hvbGQYBiACKA0SFgoOc2lkZV90aHJlc2hvbGQYByACKA0SFwoPc2hv", 
            "Y2tfdGhyZXNob2xkGAggAigNIuMBCgxteHQxeHhfdV9ncHMSGgoSa2VlcF93", 
            "b3JraW5nX3RpbWVyGAEgAigNEhUKDXVuZml4X3RpbWVvdXQYAiACKA0SGgoS", 
            "dW5maXhfY29sZF90aW1lb3V0GAMgAigNEhoKEm9wZW5fYmZfdHJhbnNfbW92", 
            "ZRgEIAIoDRIaChJvcGVuX2JmX3RyYW5zX3N0b3AYBSACKA0SEgoKYWNjX2Zp", 
            "bHRlchgGIAIoDRIbChNhZ3BzX3NlcnZlcl9pcF9hZGRyGAcgAigJEhsKE2Fn", 
            "cHNfc2VydmVyX2lwX3BvcnQYCCACKA0i1gEKDG14dDF4eF91X3NtcxIRCglz", 
            "ZW5kX21vZGUYASACKA0SEgoKYWxpYXNfbmFtZRgCIAIoCRITCgtkZXN0aW5h", 
            "dGlvbhgDIAIoCRIZChFhbGxvd19udW1iZXJfbW9kZRgEIAIoDRIaChJzbXNf", 
            "bWF4X3NlbmRfY291bnQYBSACKA0SFAoMc21zX2ludGVydmFsGAYgAigNEhMK", 
            "C3Ntc19udW1iZXIxGAcgAigJEhMKC3Ntc19udW1iZXIyGAggAigJEhMKC3Nt", 
            "c19udW1iZXIzGAkgAigJIq4BChFteHQxeHhfdV96aWdfaW5mbxIbChNtYXN0", 
            "ZXJfc2xlZXBfZW5hYmxlGAEgAigNEhsKE2tlZXBfYWxpdmVfaW50ZXJ2YWwY", 
            "AiACKA0SGwoTa2VlcF9hbGl2ZV9kdXJhdGlvbhgDIAIoDRIRCglhY2NfcmV0", 
            "cnkYBCACKA0SFgoOYWNjX3J4X3RpbWVvdXQYBSACKA0SFwoPYWNjX2VuY3J5", 
            "cHRfa2V5GAYgAigJIqgUChNteHQxeHhfdV9vdGhlcl9pbmZvEhIKCmxlZF9l", 
            "bmFibGUYASACKA0SFAoMY2hhcmluZ19vbmx5GAIgAigNEhUKDWlucHV0MV9l", 
            "bmFibGUYAyACKA0SFQoNaW5wdXQyX2VuYWJsZRgEIAIoDRIVCg1pbnB1dDNf", 
            "ZW5hYmxlGAUgAigNEhcKD2xvd19wb3dlcl9hbGVydBgGIAIoDRIQCgh0aW1l", 
            "em9uZRgHIAIoDRIXCg9tYXhfc3BlZWRfbGltaXQYCCACKA0SEAoIb2RvbWV0", 
            "ZXIYCSACKA0SEAoIY2VsbGluZm8YCiACKA0SFQoNZHRtZl9wYXNzd29yZBgL", 
            "IAIoCRIVCg1pbnB1dDRfZW5hYmxlGAwgAigNEhEKCWhvdXJtZXRlchgNIAIo", 
            "DRIXCg9iX3NtYXJ0X291dHB1dDIYDiACKA0SGQoRYW50aV90aGVmdF9lbmFi", 
            "bGUYDyACKA0SEwoLZG9vcl9kZXRlY3QYECACKA0SGgoSbG9jYWxfcGFya2lu", 
            "Z19tb2RlGBEgAigNEhkKEWJfZGlzYWJsZV96aWdfYmVlGBIgAigNEhcKD2Jf", 
            "b2RvbWV0ZXJfY2FsYxgTIAIoDRIbChNiX21pY3JvcGhvbmVfZW5hYmxlGBQg", 
            "AigNEhwKFGJfbW92ZV90cmlnZ2VyX2FsYXJtGBUgAigNEhUKDWlnbl9kZWJf", 
            "dGltZXIYFiACKA0SFwoPcGFuaWNfZGViX3RpbWVyGBcgAigNEhYKDmlwdDFf", 
            "ZGViX3RpbWVyGBggAigNEhYKDmlwdDJfZGViX3RpbWVyGBkgAigNEhYKDmlw", 
            "dDNfZGViX3RpbWVyGBogAigNEhYKDmlwdDRfZGViX3RpbWVyGBsgAigNEhsK", 
            "E21heF9zcGVlZF9kZWJfdGltZXIYHCACKA0SFAoMd3BfZGViX3RpbWVyGB0g", 
            "AigNEhoKEmV4X3Bvd2VyX2RlYl90aW1lchgeIAIoDRIRCglvcHQxX21hc2sY", 
            "HyACKA0SEQoJb3B0Ml9tYXNrGCAgAigNEhEKCW9wdDNfbWFzaxghIAIoDRIb", 
            "ChNvbGRfcG9zX3RyYW5zX2NvdW50GCIgAigNEhAKCGJhY2tkb29yGCMgAigN", 
            "EhkKEWlnbl92b2xfdGhyZXNob2xkGCQgAigNEhMKC29wdDFfaW52ZXJ0GCUg", 
            "AigNEhgKEGNoYXJnaW5nX2lnbl9vZmYYJiACKA0SFgoOc3BlYWtlcl9lbmFi", 
            "bGUYJyACKA0SFgoOb2RvX3JwbV9lbmFibGUYKCACKA0SEgoKb2RvX3B1bHNl", 
            "cxgpIAIoDRISCgpycG1fcHVsc2VzGCogAigNEhUKDXJwbV90aHJlc2hvbGQY", 
            "KyACKA0SHAoUYnV6emVyX2luY29taW5nX2NhbGwYLCACKA0SEQoJY2ZnX2Fs", 
            "aWFzGC0gAigJEhMKC3NwZWFrZXJfdm9sGC4gAigNEhYKDm1ha2VfY2FsbF90", 
            "aW1lGC8gAigNEhEKCXJpbmdfbW9kZRgwIAIoDRIXCg9pbmNvbWluZ19udW1i", 
            "ZXIYMSADKAkSFwoPb3V0Z29pbmdfbnVtYmVyGDIgAygJEhAKCGlnbl9jb2Rl", 
            "GDMgAigNEh8KF3BhbmljX2FuZF9kb29yX2FzX2lucHV0GDQgAigNEhIKCmdw", 
            "c19maWx0ZXIYNSACKA0SEgoKYWdwc190aW1lchg2IAIoDRIWCg56aWdfbGlu", 
            "a190aW1lchg3IAIoDRIZChFuZXV0cmFsX21heF9zcGVlZBg4IAIoDRITCgtu", 
            "ZXV0cmFsX3JwbRg5IAIoDRIdChVuZXV0cmFsX2V4Y2Vzc2l2ZV9ycG0YOiAC", 
            "KA0SHAoUZ3BzX2ZhaWx1cmVfZGVib3VuY2UYOyACKA0SGAoQbGlua19mYWls", 
            "X291dHB1dBg8IAIoDRIhChlleGNlZWRlZF9tYXhfc3BlZWRfb3V0cHV0GD0g", 
            "AigNEhYKDmphbW1pbmdfb3V0cHV0GD4gAigNEhUKDWphbW1pbmdfYWxlcnQY", 
            "PyACKA0SFgoOc2lyZW5fYWN0aXZhdGUYQCACKA0SGAoQc2lyZW5fZGVhY3Rp", 
            "dmF0ZRhBIAIoDRIUCgxzaXJlbl9jeWNsZXMYQiACKA0SGAoQb3V0cHV0X2Zv", 
            "cl9zaXJlbhhDIAIoDRIaChJkaXN0YW5jZV90aHJlc2hvbGQYRCACKA0SGwoT", 
            "ZGlyZWN0aW9uX3RocmVzaG9sZBhFIAIoDRITCgtpcF9wcmlvcml0eRhGIAIo", 
            "DRIXCg9saW5rX2ZhaWxfdGltZXMYRyACKA0SGgoScGFja2V0X2VuY3J5cHRf", 
            "a2V5GEggAigJEhMKC2FsZXJ0X3RpbWVyGEkgAigNEhgKEGRlYm91bmNlX3Jv", 
            "bGxpbmcYSiACKA0SFQoNZGVib3VuY2Vfc2lkZRhLIAIoDRIWCg5kZWJvdW5j", 
            "ZV9zaG9jaxhMIAIoDRIeChZncHNfYW5kX29kb21ldGVyX3NwZWVkGE0gAigN", 
            "EhYKDnBhcmtpbmdfb3V0cHV0GE4gAigNEhYKDnJvbGxpbmdfb3V0cHV0GE8g", 
            "AigNEhMKC3NpZGVfb3V0cHV0GFAgAigNEhQKDHNob2NrX291dHB1dBhRIAIo", 
            "DRIVCg1zZW5kaW5nX29yZGVyGFIgAigNEhoKEmFsbG93X3NldF9hcG5faW14", 
            "dBhTIAIoDRIUCgx0YWdfaW50ZXJ2YWwYVCACKA0SEQoJcGFuaWNfdmlhGFUg", 
            "AigNEhcKD3RhZ19mYWlsX291dHB1dBhWIAIoDRIcChRlbmFibGVfYXBfc2V0", 
            "X291dHB1dBhXIAIoDRIeChZkZWJvdW5jZV9zcGVlZF9uZXV0cmFsGFggAigN", 
            "EhgKEGRlYm91bmNlX21heF9ycG0YWSACKA0SIAoYZGVib3VuY2VfbWF4X3Jw", 
            "bV9uZXV0cmFsGFogAigNEh0KFXBhcmtpbmdfb3V0cHV0X2FjdGl2ZRhbIAIo", 
            "DRIfChdwYXJraW5nX291dHB1dF9kZWFjdGl2ZRhcIAIoDRIdChVwYXJraW5n", 
            "X291dHB1dF9jaXJjbGUYXSACKA0SHwoXcGFya2luZ19vdXRwdXRfaW50ZXJ2", 
            "YWwYXiACKA0SFQoNZ3BzX2Zvcl9hbGVydBhfIAIoDRISCgpycG1fZmFjdG9y", 
            "GGAgAigNEh8KF2dzZW5zb3JfZGVib3VuY2VfZmFjdG9yGGEgAigNEhMKC3Jw", 
            "bV90cmlnZ2VyGGIgAigNEhkKEXJwbV9ldmVudF9vdXRwdXQxGGMgAigNEhkK", 
            "EXJwbV9ldmVudF9vdXRwdXQyGGQgAigNEhkKEXJwbV9ldmVudF9vdXRwdXQz", 
            "GGUgAigNEh4KFmltcHJvcGVyX21vdmluZ19vdXRwdXQYZiACKA0SGQoRYWxs", 
            "b3dfYW55X3RhZ19hY2MYZyACKA0SHAoUbG9uZ190aW1lcl9ub19tb3ZpbmcY", 
            "aCACKA0ijgEKEW14dDF4eF91X3Zlcl9pbmZvEg4KBnNlcmlhbBgBIAIoDRIV", 
            "Cg1tb2RlbV92ZXJzaW9uGAIgAigJEhMKC2FwcF92ZXJzaW9uGAMgAigJEhIK", 
            "CnBpbl9zdGF0dXMYBCACKA0SDQoFZmxhZ3MYBSACKA0SDAoEaW1zaRgGIAIo", 
            "CRIMCgRpbWVpGAcgAigJIi8KFW14dDF4eF91X3ppZ192ZXJfaW5mbxIWCg56", 
            "aWdiZWVfdmVyc2lvbhgBIAIoCSK8AgoVbXh0MXh4X3VfemlnX2luZm9fZXh0", 
            "EhYKDmFwX3Bvd2VyX2xldmVsGAEgAigNEhUKDWFwX3JhZGlvX2NoYW4YAiAC", 
            "KA0SGgoSZWRfcmVsaW5rX2ludGVydmFsGAMgAigNEhcKD2VkX2NtZF9pbnRl", 
            "cnZhbBgEIAIoDRIVCg1hcF9yZXZfYWxsX2JjGAUgAigNEhkKEWVkX3RpbWVf", 
            "cmV0cnlfbWF4GAYgAigNEhIKCmxpbmtfdG9rZW4YByACKA0SFgoOdXBkX2J5", 
            "X3ppZ19iZWUYCCACKA0SGAoQdGltZV93aXRob3V0X2dzbRgJIAIoDRIWCg56", 
            "aWdfYWxhcm1fdGltZRgKIAIoDRIXCg96aWdfcnNzaV9maWx0ZXIYCyACKA0S", 
            "FgoOemlnX2FsYXJtX2luZm8YDCACKAki5wYKDm14dDF4eF91X3NldHVwEjkK", 
            "BmhlYWRlchgBIAIoCzIpLm1heHRyYWNrLnBiLm14dDF4eC5teHQxeHhfdV9z", 
            "ZXR1cF9oZWFkZXISPQoLZGV2aWNlX2luZm8YAiABKAsyKC5tYXh0cmFjay5w", 
            "Yi5teHQxeHgubXh0MXh4X3VfZGV2aWNlX2luZm8SQwoObmV0X2F0dHJpYnV0", 
            "ZXMYAyABKAsyKy5tYXh0cmFjay5wYi5teHQxeHgubXh0MXh4X3VfbmV0X2F0", 
            "dHJpYnV0ZXMSOwoKaXBfYWRkcmVzcxgEIAEoCzInLm1heHRyYWNrLnBiLm14", 
            "dDF4eC5teHQxeHhfdV9pcF9hZGRyZXNzEkUKD3JlcG9ydF9pbnRlcnZhbBgF", 
            "IAEoCzIsLm1heHRyYWNrLnBiLm14dDF4eC5teHQxeHhfdV9yZXBvcnRfaW50", 
            "ZXJ2YWwSLQoDZ3NyGAYgASgLMiAubWF4dHJhY2sucGIubXh0MXh4Lm14dDF4", 
            "eF91X2dzchItCgNncHMYByABKAsyIC5tYXh0cmFjay5wYi5teHQxeHgubXh0", 
            "MXh4X3VfZ3BzEi0KA3NtcxgIIAEoCzIgLm1heHRyYWNrLnBiLm14dDF4eC5t", 
            "eHQxeHhfdV9zbXMSNwoIemlnX2luZm8YCSABKAsyJS5tYXh0cmFjay5wYi5t", 
            "eHQxeHgubXh0MXh4X3VfemlnX2luZm8SOwoKb3RoZXJfaW5mbxgKIAEoCzIn", 
            "Lm1heHRyYWNrLnBiLm14dDF4eC5teHQxeHhfdV9vdGhlcl9pbmZvEjcKCHZl", 
            "cl9pbmZvGAsgASgLMiUubWF4dHJhY2sucGIubXh0MXh4Lm14dDF4eF91X3Zl", 
            "cl9pbmZvEhIKCnBhbmljX21vZGUYDCABKA0SPwoMemlnX2luZm9fZXh0GA0g", 
            "ASgLMikubWF4dHJhY2sucGIubXh0MXh4Lm14dDF4eF91X3ppZ19pbmZvX2V4", 
            "dBI/Cgx6aWdfdmVyX2luZm8YDiABKAsyKS5tYXh0cmFjay5wYi5teHQxeHgu", 
            "bXh0MXh4X3VfemlnX3Zlcl9pbmZvEkAKBmV2ZW50cxgPIAEoCzIwLm1heHRy", 
            "YWNrLnBiLm14dDF4eC5teHQxeHhfdV9keW5hbWljX3NldHVwX2V2ZW50IlYK", 
            "GW14dDF4eF91X2cxMDBfcmV0dXJuX2NvZGUSDQoFZXJyb3IYASABKAgSCwoD", 
            "Y3JjGAIgASgNEgwKBHR5cGUYAyABKA0SDwoHb3BlcmF0ZRgEIAEoDSKvBAoU", 
            "bXh0MXh4X3VfZzEwMF9jb25maWcSEgoKdG90YWxfc2l6ZRgBIAIoDRIXCg9j", 
            "YW1fdmlkZW9fd2lkdGgYAiACKA0SGAoQY2FtX3ZpZGVvX2hlaWdodBgDIAIo", 
            "DRIXCg9jYW1fc3RhbmRhcmRfaWQYBCACKAgSFgoOY2FtX2ZyYW1lX3JhdGUY", 
            "BSACKA0SCgoCaXAYBiACKAkSDAoEcG9ydBgHIAIoDRIQCghiaXRfcmF0ZRgI", 
            "IAIoDRIfChdyZWNfYXV0b19zYXZlX3BhdGhfc2l6ZRgJIAIoDRIaChJyZWNf", 
            "YXV0b19zYXZlX3BhdGgYCiACKAkSIQoZcmVjX21hbnVhbF9zYXZlX3BhdGhf", 
            "c2l6ZRgLIAIoDRIcChRyZWNfbWFudWFsX3NhdmVfcGF0aBgMIAIoCRIfChdj", 
            "YXBfYXV0b19zYXZlX3BhdGhfc2l6ZRgNIAIoDRIaChJjYXBfYXV0b19zYXZl", 
            "X3BhdGgYDiACKAkSIQoZY2FwX21hbnVhbF9zYXZlX3BhdGhfc2l6ZRgPIAIo", 
            "DRIcChRjYXBfbWFudWFsX3NhdmVfcGF0aBgQIAIoCRIVCg1yZWNvcmRfbGVu", 
            "Z2h0GBEgAigNEhwKFGRlZmF1bHRfc3RyZWFtX3N0YXRlGBIgAigIEhwKFGRl", 
            "ZmF1bHRfcmVjb3JkX3N0YXRlGBMgAigIEhIKCmRlYnVnX21vZGUYFCACKAgS", 
            "EAoIZHZyX21vZGUYFSACKA0ixQEKDW14dDF4eF91X2cxMDASOQoGaGVhZGVy", 
            "GAEgAigLMikubWF4dHJhY2sucGIubXh0MXh4Lm14dDF4eF91X3NldHVwX2hl", 
            "YWRlchI/CghyZXRfY29kZRgCIAEoCzItLm1heHRyYWNrLnBiLm14dDF4eC5t", 
            "eHQxeHhfdV9nMTAwX3JldHVybl9jb2RlEjgKBmNvbmZpZxgDIAEoCzIoLm1h", 
            "eHRyYWNrLnBiLm14dDF4eC5teHQxeHhfdV9nMTAwX2NvbmZpZyJbChhteHQx", 
            "eHhfdV9pcF9ncHJzX2Nvbm5lY3QSDgoGc2VyaWFsGAEgAigNEhAKCHByb3Rv", 
            "Y29sGAIgAigNEhEKCXRpbWVzdGFtcBgDIAIoCRIKCgJpcBgEIAIoCSJKChNt", 
            "eHQxeHhfdV9rZWVwX2FsaXZlEg4KBnNlcmlhbBgBIAIoDRIQCghwcm90b2Nv", 
            "bBgCIAIoDRIRCgl0aW1lc3RhbXAYAyACKAkieQofbXh0MXh4X3VfcmVxdWVz", 
            "dF9vbGRfcG9zX3N0YXR1cxIOCgZzZXJpYWwYASACKA0SEAoIcHJvdG9jb2wY", 
            "AiACKA0SEQoJdGltZXN0YW1wGAMgAigJEhAKCGZpbmlzaGVkGAQgAigIEg8K", 
            "B3BhY2tldHMYBSACKA0ipwMKG214dDF4eF91X2RldmljZV9pbmZvcm1hdGlv", 
            "bhI5CgZoZWFkZXIYASACKAsyKS5tYXh0cmFjay5wYi5teHQxeHgubXh0MXh4", 
            "X3Vfc2V0dXBfaGVhZGVyEhUKDW1vZGVtX3ZlcnNpb24YAiABKAkSGwoTYXBw", 
            "bGljYXRpb25fdmVyc2lvbhgDIAEoCRISCgptb2RlbV9uYW1lGAQgASgJEhgK", 
            "EGFwcGxpY2F0aW9uX25hbWUYBSABKAkSFwoPYXBsaWNhdGlvbl9mbGFnGAYg", 
            "ASgJEhgKEGhhcmR3YXJlX3ZlcnNpb24YByABKA0SFgoOaGFyZHdhcmVfbW9k", 
            "ZWwYCCABKA0SFAoMaGFzX3Bhc3N3b3JkGAkgASgNEgwKBGltZWkYCiABKAkS", 
            "GQoRYmx1ZXRvb3RoX2FkZHJlc3MYCyABKAkSFgoOZW5jcnlwdGlvbl9rZXkY", 
            "DCABKA0SEwoLc3lzdGVtX3RpbWUYDSABKAkSFwoPc2ltX2NhcmRfc3RhdHVz", 
            "GA4gASgJEgwKBGltc2kYDyABKAkSDQoFaWNjaWQYECABKAkikwMKIW14dDF4", 
            "eF91X2R5bmFtaWNfc2V0dXBfY29ubmVjdGlvbhIQCghwcm90b2NvbBgBIAEo", 
            "DRITCgtwcmltYXJ5X2FwbhgCIAEoCRIUCgxwcmltYXJ5X3VzZXIYAyABKAkS", 
            "GAoQcHJpbWFyeV9wYXNzd29yZBgEIAEoCRIVCg1zZWNvbmRhcnlfYXBuGAUg", 
            "ASgJEhYKDnNlY29uZGFyeV91c2VyGAYgASgJEhoKEnNlY29uZGFyeV9wYXNz", 
            "d29yZBgHIAEoCRITCgtpcF9wcmlvcml0eRgIIAEoDRIaChJwcmltYXJ5X2lw", 
            "X2FkZHJlc3MYCSABKAkSFwoPcHJpbWFyeV9pcF9wb3J0GAogASgNEhwKFHNl", 
            "Y29uZGFyeV9pcF9hZGRyZXNzGAsgASgJEhkKEXNlY29uZGFyeV9pcF9wb3J0", 
            "GAwgASgNEhgKEGtlZXBfYWxpdmVfdGltZXIYDSABKA0SFQoNa2VlcF91ZHBf", 
            "cG9ydBgOIAEoCBIYChBrZWVwX2FsaXZlX2Nsb3VkGA8gASgNIqUCCh9teHQx", 
            "eHhfdV9keW5hbWljX3NldHVwX3Bvc2l0aW9uEhgKEHN0b3BwZWRfaW50ZXJ2", 
            "YWwYASABKA0SGQoRc3RvcF90aW1lcl9mYWN0b3IYAiABKA0SFwoPbW92aW5n", 
            "X2ludGVydmFsGAMgASgNEhYKDnRpbWVvdXRfbW92aW5nGAQgASgNEhYKDnBh", 
            "bmljX2ludGVydmFsGAUgASgNEhcKD3Jlc2VuZF9hdHRlbXB0cxgGIAEoDRIa", 
            "ChJ0aW1lb3V0X2Zvcl9yZXNlbmQYByABKA0SGgoSZGlzdGFuY2VfdGhyZXNo", 
            "b2xkGAggASgNEhsKE2RpcmVjdGlvbl90aHJlc2hvbGQYCSABKA0SFgoOZGlz", 
            "Y2hhcmdlX21vZGUYCiABKA0iuQEKGm14dDF4eF91X2R5bmFtaWNfc2V0dXBf", 
            "Z3BzEhoKEmtlZXBfd29ya2luZ190aW1lchgBIAEoDRIVCg11bmZpeF90aW1l", 
            "b3V0GAIgASgNEh8KF3VuZml4X3RpbWVvdXRfY29sZHN0YXJ0GAMgASgNEhkK", 
            "EWFjY2VsZXJhdGVfZmlsdGVyGAQgASgNEhIKCmdwc19maWx0ZXIYBSABKA0S", 
            "GAoQZ3BzX2ZhaWx1cmVfdGltZRgGIAEoDSKvCwoebXh0MXh4X3VfZHluYW1p", 
            "Y19zZXR1cF9nc2Vuc29yEhQKDHN0b3BfdG9fbW92ZRgBIAEoDRIUCgxtb3Zl", 
            "X3RvX3N0b3AYAiABKA0SFwoPZGV0ZWN0X2ludGVydmFsGAMgASgNEhIKCnNl", 
            "bmRfZXZlbnQYBCABKAgSHwoXaGFyZF9hY2NlbGVyYXRpb25fbWluX2cYBSAB", 
            "KA0SIwobaGFyZF9hY2NlbGVyYXRpb25fdGhyZXNob2xkGAYgASgNEhsKE2hh", 
            "cmRfYnJlYWtpbmdfbWluX2cYByABKA0SHwoXaGFyZF9icmVha2luZ190aHJl", 
            "c2hvbGQYCCABKA0SGAoQaGFyZF9jdXJ2ZV9taW5fZxgJIAEoDRIcChRoYXJk", 
            "X2N1cnZlX3RocmVzaG9sZBgKIAEoDRITCgtjcmFzaF9taW5fZxgLIAEoDRIX", 
            "Cg9jcmFzaF90aHJlc2hvbGQYDCABKA0SIAoYaGFyZF9hY2NlbGVyYXRpb25f", 
            "b3V0cHV0GA0gASgNEiAKGGhhcmRfYWNjZWxlcmF0aW9uX2N5Y2xlcxgOIAEo", 
            "DRIhChloYXJkX2FjY2VsZXJhdGlvbl90aW1lX29uGA8gASgNEiIKGmhhcmRf", 
            "YWNjZWxlcmF0aW9uX3RpbWVfb2ZmGBAgASgNEhwKFGhhcmRfYnJlYWtpbmdf", 
            "b3V0cHV0GBEgASgNEhwKFGhhcmRfYnJlYWtpbmdfY3ljbGVzGBIgASgNEh0K", 
            "FWhhcmRfYnJlYWtpbmdfdGltZV9vbhgTIAEoDRIeChZoYXJkX2JyZWFraW5n", 
            "X3RpbWVfb2ZmGBQgASgNEiYKHnJpZ2h0X3R1cm5fYWNjZWxlcmF0aW9uX291", 
            "dHB1dBgVIAEoDRImCh5yaWdodF90dXJuX2FjY2VsZXJhdGlvbl9jeWNsZXMY", 
            "FiABKA0SJwofcmlnaHRfdHVybl9hY2NlbGVyYXRpb25fdGltZV9vbhgXIAEo", 
            "DRIoCiByaWdodF90dXJuX2FjY2VsZXJhdGlvbl90aW1lX29mZhgYIAEoDRIl", 
            "Ch1sZWZ0X3R1cm5fYWNjZWxlcmF0aW9uX291dHB1dBgZIAEoDRIlCh1sZWZ0", 
            "X3R1cm5fYWNjZWxlcmF0aW9uX2N5Y2xlcxgaIAEoDRImCh5sZWZ0X3R1cm5f", 
            "YWNjZWxlcmF0aW9uX3RpbWVfb24YGyABKA0SJwofbGVmdF90dXJuX2FjY2Vs", 
            "ZXJhdGlvbl90aW1lX29mZhgcIAEoDRIiChppbml0aWFsX2NhbGlicmF0aW9u", 
            "X291dHB1dBgdIAEoDRIiChppbml0aWFsX2NhbGlicmF0aW9uX2N5Y2xlcxge", 
            "IAEoDRIjChtpbml0aWFsX2NhbGlicmF0aW9uX3RpbWVfb24YHyABKA0SJAoc", 
            "aW5pdGlhbF9jYWxpYnJhdGlvbl90aW1lX29mZhggIAEoDRIgChhmaW5hbF9j", 
            "YWxpYnJhdGlvbl9vdXRwdXQYISABKA0SIAoYZmluYWxfY2FsaWJyYXRpb25f", 
            "Y3ljbGVzGCIgASgNEiEKGWZpbmFsX2NhbGlicmF0aW9uX3RpbWVfb24YIyAB", 
            "KA0SIgoaZmluYWxfY2FsaWJyYXRpb25fdGltZV9vZmYYJCABKA0SIAoYY2Fs", 
            "aWJyYXRpb25fcmVzZXRfb3V0cHV0GCUgASgNEiAKGGNhbGlicmF0aW9uX3Jl", 
            "c2V0X2N5Y2xlcxgmIAEoDRIhChljYWxpYnJhdGlvbl9yZXNldF90aW1lX29u", 
            "GCcgASgNEiIKGmNhbGlicmF0aW9uX3Jlc2V0X3RpbWVfb2ZmGCggASgNEhQK", 
            "DGNyYXNoX291dHB1dBgpIAEoDRIUCgxjcmFzaF9jeWNsZXMYKiABKA0SFQoN", 
            "Y3Jhc2hfdGltZV9vbhgrIAEoDRIWCg5jcmFzaF90aW1lX29mZhgsIAEoDSLH", 
            "AgoabXh0MXh4X3VfZHluYW1pY19zZXR1cF9zbXMSEgoKYWxpYXNfbmFtZRgB", 
            "IAEoCRIQCghwYXNzd29yZBgCIAEoCBITCgtkZXN0aW5hdGlvbhgDIAEoCRIY", 
            "ChBzZW5kX3BhY2tldF9tb2RlGAQgASgNEhgKEGFsbG93X2FueV9udW1iZXIY", 
            "BSABKA0SEAoIZmVlZGJhY2sYBiABKAgSFAoMc21zX2ludGVydmFsGAcgASgN", 
            "EhYKDm1heF9zZW5kX2NvdW50GAggASgNEhwKFHBhbmljX2FsZXJ0X251bWJl", 
            "cl8xGAkgASgJEhwKFHBhbmljX2FsZXJ0X251bWJlcl8yGAogASgJEhwKFHBh", 
            "bmljX2FsZXJ0X251bWJlcl8zGAsgASgJEiAKGHNwZWVkX2FsZXJ0X3Bob25l", 
            "X251bWJlchgMIAEoCSLtAQonbXh0MXh4X3VfZHluYW1pY19zZXR1cF9pbnB1", 
            "dF9hbmRfb3V0cHV0EhUKDWlucHV0MV9lbmFibGUYASABKAgSEgoKcGFuaWNf", 
            "bW9kZRgCIAEoDRIVCg1pbnB1dDFfYWN0aW9uGAMgASgIEh8KF3BhbmljX2Fu", 
            "ZF9kb29yX2FzX2lucHV0GAQgASgIEhYKDm91dHB1dDFfaW52ZXJ0GAUgASgI", 
            "EhUKDXNtYXJ0X291dHB1dDEYBiABKAgSGAoQbWF4X3NwZWVkX291dHB1dBgH", 
            "IAEoDRIWCg5qYW1taW5nX291dHB1dBgIIAEoDSLHAQolbXh0MXh4X3VfZHlu", 
            "YW1pY19zZXR1cF9kZWJvdW5jZV90aW1lchIZChFpZ25pdGlvbl9kZWJvdW5j", 
            "ZRgBIAEoDRIZChFleF9wb3dlcl9kZWJvdW5jZRgCIAEoDRIYChBqYW1taW5n", 
            "X2RlYm91bmNlGAMgASgNEhoKEm1heF9zcGVlZF9kZWJvdW5jZRgEIAEoDRIZ", 
            "ChF3YXlwb2ludF9kZWJvdW5jZRgFIAEoDRIXCg9pbnB1dDFfZGVib3VuY2UY", 
            "BiABKA0i7BoKHG14dDF4eF91X2R5bmFtaWNfc2V0dXBfZXZlbnQSGwoTZXZ0", 
            "XzJfZ3Byc19hdHRhY2hlZBgCIAEoCBIpCiFldnRfOF9ncHNfdmFsaWRfYWZ0", 
            "ZXJfdHhfaW50ZXJ2YWwYCCABKAgSGQoRZXZ0XzlfaWduaXRpb25fb24YCSAB", 
            "KAgSGwoTZXZ0XzEwX2lnbml0aW9uX29mZhgKIAEoCBIeChZldnRfMTFfcGFu", 
            "aWNfYWN0aXZhdGVkGAsgASgIEiAKGGV2dF8xMl9wYW5pY19kZWFjdGl2YXRl", 
            "ZBgMIAEoCBIgChhldnRfMTNfaW5wdXRfMV9hY3RpdmF0ZWQYDSABKAgSIgoa", 
            "ZXZ0XzE0X2lucHV0XzFfZGVhY3RpdmF0ZWQYDiABKAgSIAoYZXZ0XzE1X2lu", 
            "cHV0XzJfYWN0aXZhdGVkGA8gASgIEiIKGmV2dF8xNl9pbnB1dF8yX2RlYWN0", 
            "aXZhdGVkGBAgASgIEiAKGGV2dF8xN19pbnB1dF8zX2FjdGl2YXRlZBgRIAEo", 
            "CBIiChpldnRfMThfaW5wdXRfM19kZWFjdGl2YXRlZBgSIAEoCBIgChhldnRf", 
            "MTlfaW5wdXRfNF9hY3RpdmF0ZWQYEyABKAgSIgoaZXZ0XzIwX2lucHV0XzRf", 
            "ZGVhY3RpdmF0ZWQYFCABKAgSHAoUZXZ0XzIxX21vdmluZ19kZXRlY3QYFSAB", 
            "KAgSHQoVZXZ0XzIyX3N0b3BwZWRfZGV0ZWN0GBYgASgIEiIKGmV2dF8yM19h", 
            "bnRpX3RoZWZ0X3Zpb2xhdGVkGBcgASgIEiIKGmV2dF8yNV9leHRlcm5hbF9w", 
            "b3dlcl9mYWlsGBkgASgIEiAKGGV2dF8yNl9leHRlcm5hbF9wb3dlcl9vaxga", 
            "IAEoCBIfChdldnRfMjdfZ3BzX2FudGVubmFfZmFpbBgbIAEoCBIdChVldnRf", 
            "MjhfZ3BzX2FudGVubmFfb2sYHCABKAgSFAoMZXZ0XzMwX3NsZWVwGB4gASgI", 
            "EiEKGWV2dF8zMV9vdXRwdXRfMV9hY3RpdmF0ZWQYHyABKAgSIwobZXZ0XzMy", 
            "X291dHB1dF8xX2RlYWN0aXZhdGVkGCAgASgIEiEKGWV2dF8zM19vdXRwdXRf", 
            "Ml9hY3RpdmF0ZWQYISABKAgSIwobZXZ0XzM0X291dHB1dF8yX2RlYWN0aXZh", 
            "dGVkGCIgASgIEiEKGWV2dF8zNV9vdXRwdXRfM19hY3RpdmF0ZWQYIyABKAgS", 
            "IwobZXZ0XzM2X291dHB1dF8zX2RlYWN0aXZhdGVkGCQgASgIEiEKGWV2dF8z", 
            "N19tYXhfc3BlZWRfZXhjZWVkZWQYJSABKAgSGwoTZXZ0XzM4X21heF9zcGVl", 
            "ZF9vaxgmIAEoCBIgChhldnRfMzlfZW50ZXJpbmdfd2F5cG9pbnQYJyABKAgS", 
            "HwoXZXZ0XzQwX2xlYXZpbmdfd2F5cG9pbnQYKCABKAgSIAoYZXZ0XzQxX2Jh", 
            "dHRlcnlfaXNfZmFpbGVkGCkgASgIEhwKFGV2dF80Ml9iYXR0ZXJ5X2lzX29r", 
            "GCogASgIEhwKFGV2dF80M19kZWxpdmVyeV9mYWlsGCsgASgIEigKIGV2dF80", 
            "Nl9nc2Vuc29yX3JvbGxpbmdfdGhyZXNob2xkGC4gASgIEiUKHWV2dF80N19n", 
            "c2Vuc29yX3NpZGVfdGhyZXNob2xkGC8gASgIEiYKHmV2dF80OF9nc2Vuc29y", 
            "X3Nob2NrX3RocmVzaG9sZBgwIAEoCBIgChhldnRfNDlfZGlyZWN0aW9uX2No", 
            "YW5nZWQYMSABKAgSIwobZXZ0XzUwX3Ntc19pbnRlcnZhbF9yZWFjaGVkGDIg", 
            "ASgIEigKIGV2dF81Ml9hbnRpX3RoZWZ0X2JhY2tfdG9fbm9ybWFsGDQgASgI", 
            "EiAKGGV2dF81M19nc21famFtbWluZ19zdGFydBg1IAEoCBIfChdldnRfNTRf", 
            "Z3NtX2phbW1pbmdfc3RvcBg2IAEoCBIcChRldnRfNTVfZXhjZXNzaXZlX3Jw", 
            "bRg3IAEoCBInCh9ldnRfNTZfZXhjZXNzaXZlX3JwbV9vbl9uZXV0cmFsGDgg", 
            "ASgIEiIKGmV2dF81N19zcGVlZGluZ19vbl9uZXV0cmFsGDkgASgIEhoKEmV2", 
            "dF81OF9ncHNfZmFpbHVyZRg6IAEoCBIgChhldnRfNTlfZGlzdGFuY2VfYXR0", 
            "YWNoZWQYOyABKAgSIgoaZXZ0XzYwX3Bvd2VyX2ZhaWxfZ3BzX2ZhaWwYPCAB", 
            "KAgSGwoTZXZ0XzYxX2FncHNfcmVxdWVzdBg9IAEoCBItCiVldnRfNjJfdGFn", 
            "X2FjY2Vzc29yaWVzX3N0YXR1c19jaGFuZ2VkGD4gASgIEjUKLWV2dF82M190", 
            "YWdfYWNjZXNzb3JpZXNfYmF0dGVyeV9zdGF0dXNfY2hhbmdlZBg/IAEoCBIa", 
            "ChJldnRfNjRfbGlua19icm9rZW4YQCABKAgSIwobZXZ0XzY1X2V4cGFuZF9p", 
            "bnB1dF9jaGFuZ2VkGEEgASgIEjIKKmV2dF82Nl90YWdfYWNjZXNzb3JpZXNf", 
            "c3RhdHVzX2NoYW5nZWRfYmFjaxhCIAEoCBIsCiRldnRfNjdfb25seV9oYXZl", 
            "XzMwX3Bvd2VyX2luX2JhdHRlcnkYQyABKAgSLAokZXZ0XzY4X29ubHlfaGF2", 
            "ZV8yMF9wb3dlcl9pbl9iYXR0ZXJ5GEQgASgIEjMKK2V2dF82OV9rZWVwX3N0", 
            "b3BwZWRfd2l0aF9pZ25pdGlvbl9vbl9zdGF0dXMYRSABKAgSHgoWZXZ0Xzcw", 
            "X2ltcHJvcGVyX21vdmluZxhGIAEoCBIbChNldnRfNzFfY2FtZXJhX2JsaW5k", 
            "GEcgASgIEhwKFGV2dF83Ml9ibGluZF9yZWNvdmVyGEggASgIEhkKEWV2dF83", 
            "M192aWRlb19sb3N0GEkgASgIEhcKD2V2dF83NF92aWRlb19vaxhKIAEoCBIi", 
            "ChpldnRfNzVfcnMyMzJfZGF0YV9pbmNvbWluZxhLIAEoCBIyCipldnRfNzZf", 
            "Y2FsaWJyYXRlX2lnbml0aW9uX3ZvbHRhZ2VfZmluaXNoZWQYTCABKAgSIAoY", 
            "ZXZ0Xzc3X2JlZm9yZV9kZWVwX3NsZWVwGE0gASgIEioKImV2dF83OF9leGNl", 
            "ZWRfbWF4X3NwZWVkX2luX3JhaW5pbmcYTiABKAgSMworZXZ0Xzc5X3Jlc3Vt", 
            "ZV9zcGVlZF9hZnRlcl9leGNlZWRfaW5fcmFpbmluZxhPIAEoCBIiChpldnRf", 
            "ODBfYWNjZWxlcmF0aW9uX2V4Y2VlZBhQIAEoCBIvCidldnRfODFfYWNjZWxl", 
            "cmF0aW9uX3Jlc3VtZV9hZnRlcl9leGNlZWQYUSABKAgSIgoaZXZ0XzgyX2Rl", 
            "Y2VsZXJhdGlvbl9leGNlZWQYUiABKAgSLwonZXZ0XzgzX2RlY2VsZXJhdGlv", 
            "bl9yZXN1bWVfYWZ0ZXJfZXhjZWVkGFMgASgIEiAKGGV2dF84NF9yZmlkX2Ry", 
            "aXZlcl9sb2dpbhhUIAEoCBIhChlldnRfODVfcmZpZF9kcml2ZXJfbG9nb3V0", 
            "GFUgASgIEiMKG2V2dF84Nl9yZmlkX3Bhc3Nlbmdlcl9sb2dpbhhWIAEoCBIn", 
            "Ch9ldnRfODdfZ2VuZXJpY19leGNlZWRfbWF4X3NwZWVkGFcgASgIEjAKKGV2", 
            "dF84OF9nZW5lcmljX3Jlc3VtZV9zcGVlZF9hZnRlcl9leGNlZWQYWCABKAgS", 
            "OQoxZXZ0Xzg5X2ZhaWxfdHJ5X2RldmljZV9wYXNzd29yZF9tb3JlX3RoYW5f", 
            "M190aW1lcxhZIAEoCBIzCitldnRfOTBfcmVjZWl2ZV9lbmdpbmVfc2VhbF9h", 
            "Y3RpdmF0ZV9jb21tYW5kGFogASgIEiQKHGV2dF85MV9lbmdpbmVfc2VhbF9h", 
            "Y3RpdmF0ZWQYWyABKAgSJgoeZXZ0XzkyX2VuZ2luZV9zZWFsX2RlYWN0aXZh", 
            "dGVkGFwgASgIEi0KJWV2dF85M19lbmdpbmVfc2VhbF9hY3RpdmF0ZWRfYnlf", 
            "cmVsYXkYXSABKAgSLAokZXZ0Xzk0X2VuZ2luZV9zZWFsX2RlYWN0aXZhdGVk", 
            "X3JlbGF5GF4gASgIEi4KJmV2dF85NV9lbmdpbmVfc2VhbF9hY3RpdmF0ZWRf", 
            "YnlfaW5wdXQxGF8gASgIEjAKKGV2dF85Nl9lbmdpbmVfc2VhbF9kZWFjdGl2", 
            "YXRlZF9ieV9pbnB1dDEYYCABKAgSJAocZXZ0Xzk3X25ldHdvcmtfc2Nhbl9y", 
            "ZXNwb25zZRhhIAEoCBIeChZldnRfOThfc3BlZWRfaGlzdG9ncmFtGGIgASgI", 
            "EicKH2V2dF85OV90cmlwX3N1bW1hcml6YXRpb25fZXZlbnQYYyABKAgSIAoY", 
            "ZXZ0XzEwMF90ZWxlbWV0cnlfZXZlbnRzGGQgASgIEiYKHmV2dF8xMDFfZ3Nl", 
            "bnNvcl9oaXN0b3JpY19ldmVudBhlIAEoCBIqCiJldnRfMTAyX3JvdXRlX3Jl", 
            "Y29uc3RydWN0aW9uX2V2ZW50GGYgASgIIqcBCiFteHQxeHhfdV9keW5hbWlj", 
            "X3NldHVwX2luZm9fZ3JvdXASEAoId2F5cG9pbnQYASABKAgSEAoId2lyZWxl", 
            "c3MYAiABKAgSDwoHZ2VuZXJhbBgDIAEoCBIQCghvZG9tZXRlchgEIAEoCBIR", 
            "Cglob3VybWV0ZXIYBSABKAgSEAoIZXZlbnRfaWQYBiABKAgSFgoOZGV0YWls", 
            "X3ZvbHRhZ2UYByABKAgisQIKIW14dDF4eF91X2R5bmFtaWNfc2V0dXBfYW50", 
            "aV90aGVmdBIZChFhbnRpX3RoZWZ0X2VuYWJsZRgBIAEoCBIXCg9pbXByb3Bl", 
            "cl9tb3ZpbmcYAiABKAgSHAoUaW1wcm9wZXJfbW92ZV9vdXRwdXQYAyABKA0S", 
            "FQoNbG9jYWxfcGFya2luZxgEIAEoCBIUCgxvdXRwdXQxX21hc2sYBSABKAgS", 
            "FAoMb3V0cHV0Ml9tYXNrGAYgASgIEhQKDG91dHB1dDNfbWFzaxgHIAEoCBIV", 
            "Cg1pZ25pdGlvbl9jb2RlGAggASgNEhgKEGFsYXJtX21vZGVfdGltZXIYCSAB", 
            "KA0SGwoTYWxhcm1lZF9hZnRlcl90aW1lchgKIAEoCBITCgtzaWxlbmNlX2xh", 
            "dxgLIAEoCCKlAQocbXh0MXh4X3VfZHluYW1pY19zZXR1cF9yczIzMhIUCgx3", 
            "b3JraW5nX21vZGUYASABKAgSGgoSa2VlcF93b3JraW5nX3RpbWVyGAIgASgN", 
            "EhEKCWJhdWRfcmF0ZRgDIAEoDRIUCgxzZXJpYWxfYWxlcnQYBCABKAgSFQoN", 
            "YW55X3JmaWRfY2FyZBgFIAEoCBITCgtsb2dvdXRfbW9kZRgGIAEoDSLkAwod", 
            "bXh0MXh4X3VfZHluYW1pY19zZXR1cF9vdGhlcnMSEgoKYWxpYXNfbmFtZRgB", 
            "IAEoCRIXCg9kZXZpY2VfcGFzc3dvcmQYAiABKAgSCwoDcGluGAMgASgJEgsK", 
            "A3B1axgEIAEoCRIVCg1zd2l0Y2hfbGVkX29uGAUgASgIEhAKCHRpbWV6b25l", 
            "GAYgASgREhgKEGNlbGxfaW5mb19pbl9wb3MYByABKAgSFwoPbWF4X3NwZWVk", 
            "X2xpbWl0GAggASgNEhoKEmNhbGN1bGF0ZV9vZG9tZXRlchgJIAEoCBIZChFt", 
            "YXhpbXVtX2xvZ19jb3VudBgKIAEoDRIYChBpZ25pdGlvbl92b2x0YWdlGAsg", 
            "ASgNEh8KF2lnbml0aW9uX3ZvbHRhZ2VfZmFjdG9yGAwgASgNEhYKDmlnbml0", 
            "aW9uX3RpbWVyGA0gASgNEhYKDmNoYXJnaW5nX2FsbG93GA4gASgIEhwKFHdv", 
            "cmtpbmdfYmVmb3JlX3NsZWVwGA8gASgNEhgKEGhpc3RvZ3JhbV9ncm91cHMY", 
            "ECABKA0SIAoYc3BlZWRfaGlzdG9ncmFtX2ludGVydmFsGBEgASgNEiQKHHBv", 
            "c2l0aW9uX3NwZWVkX3N1bW1hcml6YXRpb24YEiABKAgi3QQKGm14dDF4eF91", 
            "X2R5bmFtaWNfc2V0dXBfY2FuEhIKCmNhbl9lbmFibGUYASABKAgSHQoVY2Fu", 
            "X2FkZGl0aW9uYWxfcGFja2V0GAIgASgIEg4KBmNsdXRjaBgDIAEoCBINCgVi", 
            "cmFrZRgEIAEoCBIVCg1wYXJraW5nX2JyYWtlGAUgASgIEhMKC21vdG9yX2Jy", 
            "YWtlGAYgASgIEhUKDXdpbmRvd193aXBlcnMYByABKAgSFAoMZG9vcnNfY2xv", 
            "c2VkGAggASgIEhQKDGRvb3JzX2xvY2tlZBgJIAEoCBIUCgx0cnVua19jbG9z", 
            "ZWQYCiABKAgSGQoRc2VhdF9iZWx0X2J1Y2tsZWQYCyABKAgSFQoNaGVhZGxp", 
            "Z2h0c19vbhgMIAEoCBIbChNtYWxmdW5jdGlvbl9sYW1wX29uGA0gASgIEg0K", 
            "BXNwZWVkGA4gASgIEgsKA3JwbRgPIAEoCBIUCgxmdWVsX2xldmVsXzEYECAB", 
            "KAgSFAoMZnVlbF9sZXZlbF8yGBEgASgIEhgKEGZ1ZWxfY29uc3VtcHRpb24Y", 
            "EiABKAgSFwoPaW50YWtlX2Fpcl90ZW1wGBMgASgIEhcKD2ludGFrZV9haXJf", 
            "ZmxvdxgUIAEoCBIRCglmdWVsX3R5cGUYFSABKAgSFQoNZXRoYW5vbF9yYXRp", 
            "bxgWIAEoCBIXCg9vaWxfdGVtcGVyYXR1cmUYFyABKAgSHwoXZW5naW5lX3Jl", 
            "ZmVyZW5jZV90b3JxdWUYGCABKAgSFAoMY3VycmVudF9nZWFyGBkgASgIEgsK", 
            "A2R0YxgaIAEoCCLmBwoWbXh0MXh4X3VfZHluYW1pY19zZXR1cBI5CgZoZWFk", 
            "ZXIYASACKAsyKS5tYXh0cmFjay5wYi5teHQxeHgubXh0MXh4X3Vfc2V0dXBf", 
            "aGVhZGVyEkkKCmNvbm5lY3Rpb24YAiABKAsyNS5tYXh0cmFjay5wYi5teHQx", 
            "eHgubXh0MXh4X3VfZHluYW1pY19zZXR1cF9jb25uZWN0aW9uEkUKCHBvc2l0", 
            "aW9uGAMgASgLMjMubWF4dHJhY2sucGIubXh0MXh4Lm14dDF4eF91X2R5bmFt", 
            "aWNfc2V0dXBfcG9zaXRpb24SOwoDZ3BzGAQgASgLMi4ubWF4dHJhY2sucGIu", 
            "bXh0MXh4Lm14dDF4eF91X2R5bmFtaWNfc2V0dXBfZ3BzEkMKB2dzZW5zb3IY", 
            "BSABKAsyMi5tYXh0cmFjay5wYi5teHQxeHgubXh0MXh4X3VfZHluYW1pY19z", 
            "ZXR1cF9nc2Vuc29yEjsKA3NtcxgGIAEoCzIuLm1heHRyYWNrLnBiLm14dDF4", 
            "eC5teHQxeHhfdV9keW5hbWljX3NldHVwX3NtcxJVChBpbnB1dF9hbmRfb3V0", 
            "cHV0GAcgASgLMjsubWF4dHJhY2sucGIubXh0MXh4Lm14dDF4eF91X2R5bmFt", 
            "aWNfc2V0dXBfaW5wdXRfYW5kX291dHB1dBJRCg5kZWJvdW5jZV90aW1lchgI", 
            "IAEoCzI5Lm1heHRyYWNrLnBiLm14dDF4eC5teHQxeHhfdV9keW5hbWljX3Nl", 
            "dHVwX2RlYm91bmNlX3RpbWVyEj8KBWV2ZW50GAkgASgLMjAubWF4dHJhY2su", 
            "cGIubXh0MXh4Lm14dDF4eF91X2R5bmFtaWNfc2V0dXBfZXZlbnQSSQoKaW5m", 
            "b19ncm91cBgKIAEoCzI1Lm1heHRyYWNrLnBiLm14dDF4eC5teHQxeHhfdV9k", 
            "eW5hbWljX3NldHVwX2luZm9fZ3JvdXASSQoKYW50aV90aGVmdBgLIAEoCzI1", 
            "Lm1heHRyYWNrLnBiLm14dDF4eC5teHQxeHhfdV9keW5hbWljX3NldHVwX2Fu", 
            "dGlfdGhlZnQSPwoFcnMyMzIYDCABKAsyMC5tYXh0cmFjay5wYi5teHQxeHgu", 
            "bXh0MXh4X3VfZHluYW1pY19zZXR1cF9yczIzMhJBCgZvdGhlcnMYDSABKAsy", 
            "MS5tYXh0cmFjay5wYi5teHQxeHgubXh0MXh4X3VfZHluYW1pY19zZXR1cF9v", 
            "dGhlcnMSOwoDY2FuGA4gASgLMi4ubWF4dHJhY2sucGIubXh0MXh4Lm14dDF4", 
          "eF91X2R5bmFtaWNfc2V0dXBfY2Fu"));
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_info__Descriptor = Descriptor.MessageTypes[0];
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_info__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_info, global::maxtrack.pb.mxt1xx.mxt1xx_u_info.Builder>(internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_info__Descriptor,
                new string[] { "GenerationDate", "PacketSize", "Ipv4", });
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_firmware__Descriptor = Descriptor.MessageTypes[1];
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_firmware__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_firmware, global::maxtrack.pb.mxt1xx.mxt1xx_u_firmware.Builder>(internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_firmware__Descriptor,
                new string[] { "Serial", "Protocol", "MemoryIndex", "LifeTime", "PacketReason", "PositionInformation", });
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_gps_modem_flag_state__Descriptor = Descriptor.MessageTypes[2];
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_gps_modem_flag_state__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_gps_modem_flag_state, global::maxtrack.pb.mxt1xx.mxt1xx_u_gps_modem_flag_state.Builder>(internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_gps_modem_flag_state__Descriptor,
                new string[] { "GprsConnection", "VoiceCall", "GpsSignal", "GpsAntennaFailure", "GpsAntennaDisconnected", "ExcessSpeed", "GpsSleep", "GsmJamming", "Moving", "CellPresent", });
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_gps_modem_sad69_datum__Descriptor = Descriptor.MessageTypes[3];
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_gps_modem_sad69_datum__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_gps_modem_sad69_datum, global::maxtrack.pb.mxt1xx.mxt1xx_u_gps_modem_sad69_datum.Builder>(internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_gps_modem_sad69_datum__Descriptor,
                new string[] { "LatitudeSad69", "LongitudeSad69", });
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_gps_modem_utm_coordinate__Descriptor = Descriptor.MessageTypes[4];
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_gps_modem_utm_coordinate__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_gps_modem_utm_coordinate, global::maxtrack.pb.mxt1xx.mxt1xx_u_gps_modem_utm_coordinate.Builder>(internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_gps_modem_utm_coordinate__Descriptor,
                new string[] { "Utm", "Easting", "Northing", });
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_gps_modem__Descriptor = Descriptor.MessageTypes[5];
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_gps_modem__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_gps_modem, global::maxtrack.pb.mxt1xx.mxt1xx_u_gps_modem.Builder>(internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_gps_modem__Descriptor,
                new string[] { "Date", "Latitude", "Longitude", "Speed", "Course", "Svn", "Hdop", "Snr", "Csq", "AccelerometerEvent", "AccelerometerValue", "Hodometer", "FlagState", "Sad69Datum", "UtmCoordinate", });
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_outputs__Descriptor = Descriptor.MessageTypes[6];
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_outputs__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_outputs, global::maxtrack.pb.mxt1xx.mxt1xx_u_outputs.Builder>(internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_outputs__Descriptor,
                new string[] { "Output1", "Output2", "Output3", });
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_inputs__Descriptor = Descriptor.MessageTypes[7];
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_inputs__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_inputs, global::maxtrack.pb.mxt1xx.mxt1xx_u_inputs.Builder>(internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_inputs__Descriptor,
                new string[] { "Ignition", "Panic", "Input1", "Input2", "Input3", "Input4", });
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_hardware_monitor_flag_state__Descriptor = Descriptor.MessageTypes[8];
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_hardware_monitor_flag_state__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_hardware_monitor_flag_state, global::maxtrack.pb.mxt1xx.mxt1xx_u_hardware_monitor_flag_state.Builder>(internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_hardware_monitor_flag_state__Descriptor,
                new string[] { "TamperingIsOpen", "BatteryCharging", "BatteryFailure", "InternalAlarm", "AntiTheftStatus", "AccessoryMissing", });
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_hardware_monitor__Descriptor = Descriptor.MessageTypes[9];
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_hardware_monitor__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_hardware_monitor, global::maxtrack.pb.mxt1xx.mxt1xx_u_hardware_monitor.Builder>(internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_hardware_monitor__Descriptor,
                new string[] { "Inputs", "Outputs", "SecureInputState", "AccessoryCount", "FlagState", "Rpm", "Temperature", "PowerSupply", "DetailedSupply", "BatteryUsed", "Hourmeter", "Ad4", "HourmeterMin", });
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_embedded_flag_state__Descriptor = Descriptor.MessageTypes[10];
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_embedded_flag_state__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_embedded_flag_state, global::maxtrack.pb.mxt1xx.mxt1xx_u_embedded_flag_state.Builder>(internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_embedded_flag_state__Descriptor,
                new string[] { "PointAnalise", "PointIn", "PointOut", });
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_embedded__Descriptor = Descriptor.MessageTypes[11];
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_embedded__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_embedded, global::maxtrack.pb.mxt1xx.mxt1xx_u_embedded.Builder>(internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_embedded__Descriptor,
                new string[] { "DriverId", "PointId", "RouteId", "FlagState", });
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_cell_id_info__Descriptor = Descriptor.MessageTypes[12];
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_cell_id_info__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_cell_id_info, global::maxtrack.pb.mxt1xx.mxt1xx_u_cell_id_info.Builder>(internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_cell_id_info__Descriptor,
                new string[] { "CellId", "CountryCode", "NetworkCode", "LocalAreaCode", });
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_wt100__Descriptor = Descriptor.MessageTypes[13];
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_wt100__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt100, global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt100.Builder>(internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_wt100__Descriptor,
                new string[] { "Serial", "BatteryLevel", "ButtonStatus", "TouchSensorStatus", "WristLoop1Event", "WristLoop2Event", "InternalTemperature", "RawData", });
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_wt110__Descriptor = Descriptor.MessageTypes[14];
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_wt110__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt110, global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt110.Builder>(internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_wt110__Descriptor,
                new string[] { "Serial", "BatteryLevel", "ButtonStatus", "InternalTemperature", "RawData", });
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_wt111__Descriptor = Descriptor.MessageTypes[15];
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_wt111__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt111, global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt111.Builder>(internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_wt111__Descriptor,
                new string[] { "Serial", "BatteryLevel", "ButtonStatus", "UnderTemperature", "OverTemperature", "ExternalTemperature", "RawData", });
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_wt112__Descriptor = Descriptor.MessageTypes[16];
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_wt112__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt112, global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt112.Builder>(internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_wt112__Descriptor,
                new string[] { "Serial", "BatteryLevel", "ButtonStatus", "Loop1", "Loop2", "InternalTemperature", "RawData", });
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_wt200_inputs__Descriptor = Descriptor.MessageTypes[17];
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_wt200_inputs__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt200_inputs, global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt200_inputs.Builder>(internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_wt200_inputs__Descriptor,
                new string[] { "InputA", "InputB", "InputC", "InputD", "MaskInputA", "MaskInputB", "MaskInputC", "MaskInputD", });
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_wt200_outputs__Descriptor = Descriptor.MessageTypes[18];
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_wt200_outputs__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt200_outputs, global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt200_outputs.Builder>(internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_wt200_outputs__Descriptor,
                new string[] { "OutputA", "OutputB", "OutputC", });
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_wt200__Descriptor = Descriptor.MessageTypes[19];
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_wt200__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt200, global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt200.Builder>(internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_wt200__Descriptor,
                new string[] { "Serial", "Index", "InputStatus", "OutputStatus", "GSensorStatus", "Onewire1", "Onewire2", "RawData", });
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_wt300__Descriptor = Descriptor.MessageTypes[20];
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_wt300__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt300, global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt300.Builder>(internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_wt300__Descriptor,
                new string[] { "Serial", "ButtonStatus", "UnderTemperature", "OverTemperature", "EventCode", "MessageGroup", "MessageCode", "RawData", });
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_wt400__Descriptor = Descriptor.MessageTypes[21];
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_wt400__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt400, global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt400.Builder>(internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_wt400__Descriptor,
                new string[] { "Serial", "ExternalTemperature", "BatteryLevel", "MovingStatus", "DoorStatus", "ButtonStatus", "PowerFail", "RawData", });
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_mxt101__Descriptor = Descriptor.MessageTypes[22];
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_mxt101__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_mxt101, global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_mxt101.Builder>(internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_mxt101__Descriptor,
                new string[] { "Serial", "GprsIndicator", "BatteryLevel", "ButtonStatus", "InternalTemperature", "RawData", });
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_mxt151__Descriptor = Descriptor.MessageTypes[23];
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_mxt151__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_mxt151, global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_mxt151.Builder>(internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_mxt151__Descriptor,
                new string[] { "Serial", "IgnitionStatus", "ButtonStatus", "DoorStatus", "Mode", "HighSideOutput", "LowSideOutput1", "LowSideOutput2", "UnderTemperature", "OverTemperature", "GprsIndicator", "RawData", });
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_rpm_virtual__Descriptor = Descriptor.MessageTypes[24];
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_rpm_virtual__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_rpm_virtual, global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_rpm_virtual.Builder>(internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_rpm_virtual__Descriptor,
                new string[] { "Serial", "Rpm", "RawData", });
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_gps_speed__Descriptor = Descriptor.MessageTypes[25];
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_gps_speed__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_gps_speed, global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_gps_speed.Builder>(internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_gps_speed__Descriptor,
                new string[] { "Serial", "Speed", "RawData", });
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_tag_info__Descriptor = Descriptor.MessageTypes[26];
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_tag_info__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_tag_info, global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_tag_info.Builder>(internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_tag_info__Descriptor,
                new string[] { "TagId", "TagStatus", });
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_tag__Descriptor = Descriptor.MessageTypes[27];
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_tag__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_tag, global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_tag.Builder>(internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_tag__Descriptor,
                new string[] { "Serial", "TagInfo", "RawData", "BitMap", });
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_rfid_driver__Descriptor = Descriptor.MessageTypes[28];
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_rfid_driver__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_rfid_driver, global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_rfid_driver.Builder>(internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_rfid_driver__Descriptor,
                new string[] { "DriverId", "Id", });
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_rfid_passenger__Descriptor = Descriptor.MessageTypes[29];
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_rfid_passenger__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_rfid_passenger, global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_rfid_passenger.Builder>(internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_rfid_passenger__Descriptor,
                new string[] { "PassengerId", "PassengerAuthorized", });
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory__Descriptor = Descriptor.MessageTypes[30];
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory, global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory.Builder>(internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory__Descriptor,
                new string[] { "Wt100List", "Wt110List", "Wt111List", "Wt112List", "Wt200List", "Wt300List", "Wt400List", "Mxt101List", "Mxt151List", "RpmVirtualList", "MissingTagList", "LowBatteryList", "GpsSpeedList", "RfidDriverList", "RfidPassengerList", });
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_lbs_gsm_cell_tower__Descriptor = Descriptor.MessageTypes[31];
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_lbs_gsm_cell_tower__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_lbs_gsm_cell_tower, global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_lbs_gsm_cell_tower.Builder>(internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_lbs_gsm_cell_tower__Descriptor,
                new string[] { "CellId", "Mcc", "Mnc", "Lac", "SignalStr", });
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_lbs_gsm__Descriptor = Descriptor.MessageTypes[32];
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_lbs_gsm__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_lbs_gsm, global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_lbs_gsm.Builder>(internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_lbs_gsm__Descriptor,
                new string[] { "RadioType", "Age", "TimingAdvance", "CellTowerList", });
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_wifi_access_point__Descriptor = Descriptor.MessageTypes[33];
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_wifi_access_point__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_wifi_access_point, global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_wifi_access_point.Builder>(internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_wifi_access_point__Descriptor,
                new string[] { "MacAddr", "SignalStr", "Age", "Snr", "Channel", });
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_speed_details__Descriptor = Descriptor.MessageTypes[34];
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_speed_details__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_speed_details, global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_speed_details.Builder>(internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_speed_details__Descriptor,
                new string[] { "AverageSpeed", "MaxSpeed", "OverSpeedTime", });
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_speed_histogram__Descriptor = Descriptor.MessageTypes[35];
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_speed_histogram__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_speed_histogram, global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_speed_histogram.Builder>(internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_speed_histogram__Descriptor,
                new string[] { "LastPackageDatetime", "ActualPackageDatetime", "SpeedRange", "Groups", "TimeWithoutGps", });
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_telemetry_events_calibration_status__Descriptor = Descriptor.MessageTypes[36];
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_telemetry_events_calibration_status__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_calibration_status, global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_calibration_status.Builder>(internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_telemetry_events_calibration_status__Descriptor,
                new string[] { "Status", "TimeSpent", });
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_telemetry_events_hard_acceleration__Descriptor = Descriptor.MessageTypes[37];
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_telemetry_events_hard_acceleration__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_hard_acceleration, global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_hard_acceleration.Builder>(internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_telemetry_events_hard_acceleration__Descriptor,
                new string[] { "MaxG", "TimeToMax", "TotalTime", });
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_telemetry_events_hard_braking__Descriptor = Descriptor.MessageTypes[38];
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_telemetry_events_hard_braking__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_hard_braking, global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_hard_braking.Builder>(internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_telemetry_events_hard_braking__Descriptor,
                new string[] { "MaxG", "TimeToMax", "TotalTime", });
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_telemetry_events_hard_lateral__Descriptor = Descriptor.MessageTypes[39];
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_telemetry_events_hard_lateral__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_hard_lateral, global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_hard_lateral.Builder>(internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_telemetry_events_hard_lateral__Descriptor,
                new string[] { "MaxG", "TimeToMax", "TotalTime", "Side", });
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_telemetry_events_impact_detected__Descriptor = Descriptor.MessageTypes[40];
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_telemetry_events_impact_detected__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_impact_detected, global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_impact_detected.Builder>(internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_telemetry_events_impact_detected__Descriptor,
                new string[] { "MaxG", "TimeToMax", "TotalTime", });
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_telemetry_events__Descriptor = Descriptor.MessageTypes[41];
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_telemetry_events__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events, global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events.Builder>(internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_telemetry_events__Descriptor,
                new string[] { "CalibrationStatusList", "HardAccelerationList", "HardBrakingList", "HardLateralList", "ImpactDetectedList", });
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_journey_deltas_rpm_delta__Descriptor = Descriptor.MessageTypes[42];
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_journey_deltas_rpm_delta__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas_rpm_delta, global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas_rpm_delta.Builder>(internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_journey_deltas_rpm_delta__Descriptor,
                new string[] { "RpmRangeBlue", "RpmRangeGreen", "RpmRangeYellow", "RpmRangeRed", "RpmMaximum", "RpmMean", });
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_journey_deltas_speed_delta__Descriptor = Descriptor.MessageTypes[43];
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_journey_deltas_speed_delta__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas_speed_delta, global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas_speed_delta.Builder>(internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_journey_deltas_speed_delta__Descriptor,
                new string[] { "MaximumSpeed", "MeanSpeed", "HodometerAccumulated", });
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_journey_deltas_mean_journey_timer_delta__Descriptor = Descriptor.MessageTypes[44];
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_journey_deltas_mean_journey_timer_delta__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas_mean_journey_timer_delta, global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas_mean_journey_timer_delta.Builder>(internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_journey_deltas_mean_journey_timer_delta__Descriptor,
                new string[] { "TimeOfJourney", "TimeMoving", "TimeStopped", "TimeEngineOn", });
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_journey_deltas_location_delta__Descriptor = Descriptor.MessageTypes[45];
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_journey_deltas_location_delta__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas_location_delta, global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas_location_delta.Builder>(internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_journey_deltas_location_delta__Descriptor,
                new string[] { "EndDatetime", "StartMemoryIndex", "EndMemoryIndex", "StartLat", "StartLong", "EndLat", "EndLong", });
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_journey_deltas_accelerometer_delta__Descriptor = Descriptor.MessageTypes[46];
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_journey_deltas_accelerometer_delta__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas_accelerometer_delta, global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas_accelerometer_delta.Builder>(internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_journey_deltas_accelerometer_delta__Descriptor,
                new string[] { "MaxRollingAxisFront", "MaxRollingAxisBack", "MaxLateralAxisAbsolute", "AverageRollingAxisFront", "AverageRollingAxisBack", "AverageLateralAxisAbsolute", });
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_journey_deltas__Descriptor = Descriptor.MessageTypes[47];
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_journey_deltas__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas, global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas.Builder>(internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_journey_deltas__Descriptor,
                new string[] { "Version", "Reason", "RpmDelta", "SpeedDelta", "MeanJourneyTimerDelta", "LocationDelta", "AccelerometerDelta", });
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_crash_reconstruction_second__Descriptor = Descriptor.MessageTypes[48];
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_crash_reconstruction_second__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_crash_reconstruction_second, global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_crash_reconstruction_second.Builder>(internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_crash_reconstruction_second__Descriptor,
                new string[] { "RollingAxisFront", "RollingAxisBack", "LateralAxisRight", "LateralAxisLeft", "LateralAxisAbsolute", "VerticalAxisPositive", "VerticalAxisNegative", "Speed", "Rpm", });
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_crash_reconstruction__Descriptor = Descriptor.MessageTypes[49];
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_crash_reconstruction__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_crash_reconstruction, global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_crash_reconstruction.Builder>(internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_crash_reconstruction__Descriptor,
                new string[] { "Seconds", });
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_route_reconstruction_section__Descriptor = Descriptor.MessageTypes[50];
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_route_reconstruction_section__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_route_reconstruction_section, global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_route_reconstruction_section.Builder>(internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_route_reconstruction_section__Descriptor,
                new string[] { "Latitude", "Longitude", "Speed", });
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_route_reconstruction__Descriptor = Descriptor.MessageTypes[51];
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_route_reconstruction__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_route_reconstruction, global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_route_reconstruction.Builder>(internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_route_reconstruction__Descriptor,
                new string[] { "Sections", });
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_position_information_digital_data__Descriptor = Descriptor.MessageTypes[52];
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_position_information_digital_data__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_position_information_digital_data, global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_position_information_digital_data.Builder>(internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_position_information_digital_data__Descriptor,
                new string[] { "Clutch", "Brake", "ParkingBrake", "MotorBrake", "WindshieldWipers", "DoorClosed", "DoorLocked", "Trunk", "SeatBelt", "Headlights", "MalfunctionIndicatorLamp", });
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_position_information_analogic_data_dtc_packets__Descriptor = Descriptor.MessageTypes[53];
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_position_information_analogic_data_dtc_packets__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_position_information_analogic_data_dtc_packets, global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_position_information_analogic_data_dtc_packets.Builder>(internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_position_information_analogic_data_dtc_packets__Descriptor,
                new string[] { "DtcPacket", });
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_position_information_analogic_data__Descriptor = Descriptor.MessageTypes[54];
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_position_information_analogic_data__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_position_information_analogic_data, global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_position_information_analogic_data.Builder>(internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_position_information_analogic_data__Descriptor,
                new string[] { "Speed", "Rpm", "Odometer", "FuelLevel1", "FuelLevel2", "FuelConsumption", "IntakeAirTemp", "IntakeAirFlow", "ThrottlePosition", "BarometricPressure", "ControlModuleVoltage", "AirTemperature", "FuelType", "EthanolRatio", "OilTemperature", "EngineTemperature", "EngineRefTorque", "CurrentGear", "EngineFuelRate", "NumDtcAvailable", "NumDtcPacket", "DtcPackets", });
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_position_information__Descriptor = Descriptor.MessageTypes[55];
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_position_information__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_position_information, global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_position_information.Builder>(internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_position_information__Descriptor,
                new string[] { "DigitalData", "AnalogicData", });
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data__Descriptor = Descriptor.MessageTypes[56];
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data, global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data.Builder>(internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data__Descriptor,
                new string[] { "LbsGsm", "WifiAccessPointsList", "SpeedDetails", "SpeedHistogram", "TelemetryEvents", "JourneyDeltas", "CrashReconstruction", "RouteReconstruction", "PositionInformation", });
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_transparent_data__Descriptor = Descriptor.MessageTypes[57];
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_transparent_data__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_transparent_data, global::maxtrack.pb.mxt1xx.mxt1xx_u_transparent_data.Builder>(internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_transparent_data__Descriptor,
                new string[] { "Data", });
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_transparent_response_rs232_status__Descriptor = Descriptor.MessageTypes[58];
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_transparent_response_rs232_status__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_transparent_response_rs232_status, global::maxtrack.pb.mxt1xx.mxt1xx_u_transparent_response_rs232_status.Builder>(internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_transparent_response_rs232_status__Descriptor,
                new string[] { "Status", });
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_transparent_response__Descriptor = Descriptor.MessageTypes[59];
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_transparent_response__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_transparent_response, global::maxtrack.pb.mxt1xx.mxt1xx_u_transparent_response.Builder>(internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_transparent_response__Descriptor,
                new string[] { "Protocol", "Serial", "Date", "Rs232Status", });
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_icc_id_answer__Descriptor = Descriptor.MessageTypes[60];
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_icc_id_answer__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_icc_id_answer, global::maxtrack.pb.mxt1xx.mxt1xx_u_icc_id_answer.Builder>(internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_icc_id_answer__Descriptor,
                new string[] { "Protocol", "Serial", "IccId", "Date", });
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_version__Descriptor = Descriptor.MessageTypes[61];
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_version__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_version, global::maxtrack.pb.mxt1xx.mxt1xx_u_version.Builder>(internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_version__Descriptor,
                new string[] { "Protocol", "Serial", "ModemVersion", "AppVersion", "ZigbeeVersion", "Date", });
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accelerometer_event__Descriptor = Descriptor.MessageTypes[62];
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accelerometer_event__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_accelerometer_event, global::maxtrack.pb.mxt1xx.mxt1xx_u_accelerometer_event.Builder>(internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accelerometer_event__Descriptor,
                new string[] { "Axis", "MaxG", "SideGAverage", "RollingGAverage", });
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_position__Descriptor = Descriptor.MessageTypes[63];
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_position__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_position, global::maxtrack.pb.mxt1xx.mxt1xx_u_position.Builder>(internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_position__Descriptor,
                new string[] { "Firmware", "GpsModem", "HardwareMonitor", "Embedded", "Info", "CellInfo", "Accessories", "TransparentData", "AdditionalData", "AccelerometerEvent", });
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_setup_header__Descriptor = Descriptor.MessageTypes[64];
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_setup_header__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_setup_header, global::maxtrack.pb.mxt1xx.mxt1xx_u_setup_header.Builder>(internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_setup_header__Descriptor,
                new string[] { "Serial", "Protocol", "Timestamp", "SenderId", "ReceiveId", });
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_device_info__Descriptor = Descriptor.MessageTypes[65];
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_device_info__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_device_info, global::maxtrack.pb.mxt1xx.mxt1xx_u_device_info.Builder>(internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_device_info__Descriptor,
                new string[] { "DeviceId", "SwVersion", });
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_net_attributes__Descriptor = Descriptor.MessageTypes[66];
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_net_attributes__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_net_attributes, global::maxtrack.pb.mxt1xx.mxt1xx_u_net_attributes.Builder>(internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_net_attributes__Descriptor,
                new string[] { "ConnectionType", "KeepAliveTimer", "Apn", "User", "Password", "Apn2", "User2", "Password2", });
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_ip_address__Descriptor = Descriptor.MessageTypes[67];
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_ip_address__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_ip_address, global::maxtrack.pb.mxt1xx.mxt1xx_u_ip_address.Builder>(internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_ip_address__Descriptor,
                new string[] { "PrimaryIpAddr", "SecondaryIpAddr", "PrimaryIpPort", "SecondaryIpPort", });
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_report_interval__Descriptor = Descriptor.MessageTypes[68];
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_report_interval__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_report_interval, global::maxtrack.pb.mxt1xx.mxt1xx_u_report_interval.Builder>(internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_report_interval__Descriptor,
                new string[] { "TimerOfIgnitionOff", "TimerOfMovement", "TimerOfPanic", "ResendAttempts", "ResendTimeout", "InfoGroup", "KeepWorkingTimer", "TimeoutMoving", });
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_gsr__Descriptor = Descriptor.MessageTypes[69];
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_gsr__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_gsr, global::maxtrack.pb.mxt1xx.mxt1xx_u_gsr.Builder>(internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_gsr__Descriptor,
                new string[] { "SendImmediately", "DebMoving", "DebStopped", "DetectMoving", "RsMode", "RollingThreshold", "SideThreshold", "ShockThreshold", });
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_gps__Descriptor = Descriptor.MessageTypes[70];
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_gps__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_gps, global::maxtrack.pb.mxt1xx.mxt1xx_u_gps.Builder>(internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_gps__Descriptor,
                new string[] { "KeepWorkingTimer", "UnfixTimeout", "UnfixColdTimeout", "OpenBfTransMove", "OpenBfTransStop", "AccFilter", "AgpsServerIpAddr", "AgpsServerIpPort", });
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_sms__Descriptor = Descriptor.MessageTypes[71];
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_sms__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_sms, global::maxtrack.pb.mxt1xx.mxt1xx_u_sms.Builder>(internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_sms__Descriptor,
                new string[] { "SendMode", "AliasName", "Destination", "AllowNumberMode", "SmsMaxSendCount", "SmsInterval", "SmsNumber1", "SmsNumber2", "SmsNumber3", });
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_zig_info__Descriptor = Descriptor.MessageTypes[72];
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_zig_info__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_zig_info, global::maxtrack.pb.mxt1xx.mxt1xx_u_zig_info.Builder>(internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_zig_info__Descriptor,
                new string[] { "MasterSleepEnable", "KeepAliveInterval", "KeepAliveDuration", "AccRetry", "AccRxTimeout", "AccEncryptKey", });
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_other_info__Descriptor = Descriptor.MessageTypes[73];
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_other_info__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_other_info, global::maxtrack.pb.mxt1xx.mxt1xx_u_other_info.Builder>(internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_other_info__Descriptor,
                new string[] { "LedEnable", "CharingOnly", "Input1Enable", "Input2Enable", "Input3Enable", "LowPowerAlert", "Timezone", "MaxSpeedLimit", "Odometer", "Cellinfo", "DtmfPassword", "Input4Enable", "Hourmeter", "BSmartOutput2", "AntiTheftEnable", "DoorDetect", "LocalParkingMode", "BDisableZigBee", "BOdometerCalc", "BMicrophoneEnable", "BMoveTriggerAlarm", "IgnDebTimer", "PanicDebTimer", "Ipt1DebTimer", "Ipt2DebTimer", "Ipt3DebTimer", "Ipt4DebTimer", "MaxSpeedDebTimer", "WpDebTimer", "ExPowerDebTimer", "Opt1Mask", "Opt2Mask", "Opt3Mask", "OldPosTransCount", "Backdoor", "IgnVolThreshold", "Opt1Invert", "ChargingIgnOff", "SpeakerEnable", "OdoRpmEnable", "OdoPulses", "RpmPulses", "RpmThreshold", "BuzzerIncomingCall", "CfgAlias", "SpeakerVol", "MakeCallTime", "RingMode", "IncomingNumber", "OutgoingNumber", "IgnCode", "PanicAndDoorAsInput", "GpsFilter", "AgpsTimer", "ZigLinkTimer", "NeutralMaxSpeed", "NeutralRpm", "NeutralExcessiveRpm", "GpsFailureDebounce", "LinkFailOutput", "ExceededMaxSpeedOutput", "JammingOutput", "JammingAlert", "SirenActivate", "SirenDeactivate", "SirenCycles", "OutputForSiren", "DistanceThreshold", "DirectionThreshold", "IpPriority", "LinkFailTimes", "PacketEncryptKey", "AlertTimer", "DebounceRolling", "DebounceSide", "DebounceShock", "GpsAndOdometerSpeed", "ParkingOutput", "RollingOutput", "SideOutput", "ShockOutput", "SendingOrder", "AllowSetApnImxt", "TagInterval", "PanicVia", "TagFailOutput", "EnableApSetOutput", "DebounceSpeedNeutral", "DebounceMaxRpm", "DebounceMaxRpmNeutral", "ParkingOutputActive", "ParkingOutputDeactive", "ParkingOutputCircle", "ParkingOutputInterval", "GpsForAlert", "RpmFactor", "GsensorDebounceFactor", "RpmTrigger", "RpmEventOutput1", "RpmEventOutput2", "RpmEventOutput3", "ImproperMovingOutput", "AllowAnyTagAcc", "LongTimerNoMoving", });
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_ver_info__Descriptor = Descriptor.MessageTypes[74];
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_ver_info__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_ver_info, global::maxtrack.pb.mxt1xx.mxt1xx_u_ver_info.Builder>(internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_ver_info__Descriptor,
                new string[] { "Serial", "ModemVersion", "AppVersion", "PinStatus", "Flags", "Imsi", "Imei", });
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_zig_ver_info__Descriptor = Descriptor.MessageTypes[75];
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_zig_ver_info__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_zig_ver_info, global::maxtrack.pb.mxt1xx.mxt1xx_u_zig_ver_info.Builder>(internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_zig_ver_info__Descriptor,
                new string[] { "ZigbeeVersion", });
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_zig_info_ext__Descriptor = Descriptor.MessageTypes[76];
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_zig_info_ext__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_zig_info_ext, global::maxtrack.pb.mxt1xx.mxt1xx_u_zig_info_ext.Builder>(internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_zig_info_ext__Descriptor,
                new string[] { "ApPowerLevel", "ApRadioChan", "EdRelinkInterval", "EdCmdInterval", "ApRevAllBc", "EdTimeRetryMax", "LinkToken", "UpdByZigBee", "TimeWithoutGsm", "ZigAlarmTime", "ZigRssiFilter", "ZigAlarmInfo", });
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_setup__Descriptor = Descriptor.MessageTypes[77];
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_setup__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_setup, global::maxtrack.pb.mxt1xx.mxt1xx_u_setup.Builder>(internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_setup__Descriptor,
                new string[] { "Header", "DeviceInfo", "NetAttributes", "IpAddress", "ReportInterval", "Gsr", "Gps", "Sms", "ZigInfo", "OtherInfo", "VerInfo", "PanicMode", "ZigInfoExt", "ZigVerInfo", "Events", });
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_g100_return_code__Descriptor = Descriptor.MessageTypes[78];
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_g100_return_code__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_g100_return_code, global::maxtrack.pb.mxt1xx.mxt1xx_u_g100_return_code.Builder>(internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_g100_return_code__Descriptor,
                new string[] { "Error", "Crc", "Type", "Operate", });
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_g100_config__Descriptor = Descriptor.MessageTypes[79];
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_g100_config__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_g100_config, global::maxtrack.pb.mxt1xx.mxt1xx_u_g100_config.Builder>(internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_g100_config__Descriptor,
                new string[] { "TotalSize", "CamVideoWidth", "CamVideoHeight", "CamStandardId", "CamFrameRate", "Ip", "Port", "BitRate", "RecAutoSavePathSize", "RecAutoSavePath", "RecManualSavePathSize", "RecManualSavePath", "CapAutoSavePathSize", "CapAutoSavePath", "CapManualSavePathSize", "CapManualSavePath", "RecordLenght", "DefaultStreamState", "DefaultRecordState", "DebugMode", "DvrMode", });
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_g100__Descriptor = Descriptor.MessageTypes[80];
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_g100__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_g100, global::maxtrack.pb.mxt1xx.mxt1xx_u_g100.Builder>(internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_g100__Descriptor,
                new string[] { "Header", "RetCode", "Config", });
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_ip_gprs_connect__Descriptor = Descriptor.MessageTypes[81];
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_ip_gprs_connect__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_ip_gprs_connect, global::maxtrack.pb.mxt1xx.mxt1xx_u_ip_gprs_connect.Builder>(internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_ip_gprs_connect__Descriptor,
                new string[] { "Serial", "Protocol", "Timestamp", "Ip", });
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_keep_alive__Descriptor = Descriptor.MessageTypes[82];
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_keep_alive__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_keep_alive, global::maxtrack.pb.mxt1xx.mxt1xx_u_keep_alive.Builder>(internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_keep_alive__Descriptor,
                new string[] { "Serial", "Protocol", "Timestamp", });
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_request_old_pos_status__Descriptor = Descriptor.MessageTypes[83];
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_request_old_pos_status__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_request_old_pos_status, global::maxtrack.pb.mxt1xx.mxt1xx_u_request_old_pos_status.Builder>(internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_request_old_pos_status__Descriptor,
                new string[] { "Serial", "Protocol", "Timestamp", "Finished", "Packets", });
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_device_information__Descriptor = Descriptor.MessageTypes[84];
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_device_information__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_device_information, global::maxtrack.pb.mxt1xx.mxt1xx_u_device_information.Builder>(internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_device_information__Descriptor,
                new string[] { "Header", "ModemVersion", "ApplicationVersion", "ModemName", "ApplicationName", "AplicationFlag", "HardwareVersion", "HardwareModel", "HasPassword", "Imei", "BluetoothAddress", "EncryptionKey", "SystemTime", "SimCardStatus", "Imsi", "Iccid", });
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_dynamic_setup_connection__Descriptor = Descriptor.MessageTypes[85];
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_dynamic_setup_connection__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_connection, global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_connection.Builder>(internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_dynamic_setup_connection__Descriptor,
                new string[] { "Protocol", "PrimaryApn", "PrimaryUser", "PrimaryPassword", "SecondaryApn", "SecondaryUser", "SecondaryPassword", "IpPriority", "PrimaryIpAddress", "PrimaryIpPort", "SecondaryIpAddress", "SecondaryIpPort", "KeepAliveTimer", "KeepUdpPort", "KeepAliveCloud", });
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_dynamic_setup_position__Descriptor = Descriptor.MessageTypes[86];
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_dynamic_setup_position__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_position, global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_position.Builder>(internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_dynamic_setup_position__Descriptor,
                new string[] { "StoppedInterval", "StopTimerFactor", "MovingInterval", "TimeoutMoving", "PanicInterval", "ResendAttempts", "TimeoutForResend", "DistanceThreshold", "DirectionThreshold", "DischargeMode", });
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_dynamic_setup_gps__Descriptor = Descriptor.MessageTypes[87];
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_dynamic_setup_gps__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_gps, global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_gps.Builder>(internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_dynamic_setup_gps__Descriptor,
                new string[] { "KeepWorkingTimer", "UnfixTimeout", "UnfixTimeoutColdstart", "AccelerateFilter", "GpsFilter", "GpsFailureTime", });
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_dynamic_setup_gsensor__Descriptor = Descriptor.MessageTypes[88];
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_dynamic_setup_gsensor__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_gsensor, global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_gsensor.Builder>(internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_dynamic_setup_gsensor__Descriptor,
                new string[] { "StopToMove", "MoveToStop", "DetectInterval", "SendEvent", "HardAccelerationMinG", "HardAccelerationThreshold", "HardBreakingMinG", "HardBreakingThreshold", "HardCurveMinG", "HardCurveThreshold", "CrashMinG", "CrashThreshold", "HardAccelerationOutput", "HardAccelerationCycles", "HardAccelerationTimeOn", "HardAccelerationTimeOff", "HardBreakingOutput", "HardBreakingCycles", "HardBreakingTimeOn", "HardBreakingTimeOff", "RightTurnAccelerationOutput", "RightTurnAccelerationCycles", "RightTurnAccelerationTimeOn", "RightTurnAccelerationTimeOff", "LeftTurnAccelerationOutput", "LeftTurnAccelerationCycles", "LeftTurnAccelerationTimeOn", "LeftTurnAccelerationTimeOff", "InitialCalibrationOutput", "InitialCalibrationCycles", "InitialCalibrationTimeOn", "InitialCalibrationTimeOff", "FinalCalibrationOutput", "FinalCalibrationCycles", "FinalCalibrationTimeOn", "FinalCalibrationTimeOff", "CalibrationResetOutput", "CalibrationResetCycles", "CalibrationResetTimeOn", "CalibrationResetTimeOff", "CrashOutput", "CrashCycles", "CrashTimeOn", "CrashTimeOff", });
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_dynamic_setup_sms__Descriptor = Descriptor.MessageTypes[89];
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_dynamic_setup_sms__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_sms, global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_sms.Builder>(internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_dynamic_setup_sms__Descriptor,
                new string[] { "AliasName", "Password", "Destination", "SendPacketMode", "AllowAnyNumber", "Feedback", "SmsInterval", "MaxSendCount", "PanicAlertNumber1", "PanicAlertNumber2", "PanicAlertNumber3", "SpeedAlertPhoneNumber", });
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_dynamic_setup_input_and_output__Descriptor = Descriptor.MessageTypes[90];
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_dynamic_setup_input_and_output__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_input_and_output, global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_input_and_output.Builder>(internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_dynamic_setup_input_and_output__Descriptor,
                new string[] { "Input1Enable", "PanicMode", "Input1Action", "PanicAndDoorAsInput", "Output1Invert", "SmartOutput1", "MaxSpeedOutput", "JammingOutput", });
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_dynamic_setup_debounce_timer__Descriptor = Descriptor.MessageTypes[91];
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_dynamic_setup_debounce_timer__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_debounce_timer, global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_debounce_timer.Builder>(internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_dynamic_setup_debounce_timer__Descriptor,
                new string[] { "IgnitionDebounce", "ExPowerDebounce", "JammingDebounce", "MaxSpeedDebounce", "WaypointDebounce", "Input1Debounce", });
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_dynamic_setup_event__Descriptor = Descriptor.MessageTypes[92];
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_dynamic_setup_event__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_event, global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_event.Builder>(internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_dynamic_setup_event__Descriptor,
                new string[] { "Evt2GprsAttached", "Evt8GpsValidAfterTxInterval", "Evt9IgnitionOn", "Evt10IgnitionOff", "Evt11PanicActivated", "Evt12PanicDeactivated", "Evt13Input1Activated", "Evt14Input1Deactivated", "Evt15Input2Activated", "Evt16Input2Deactivated", "Evt17Input3Activated", "Evt18Input3Deactivated", "Evt19Input4Activated", "Evt20Input4Deactivated", "Evt21MovingDetect", "Evt22StoppedDetect", "Evt23AntiTheftViolated", "Evt25ExternalPowerFail", "Evt26ExternalPowerOk", "Evt27GpsAntennaFail", "Evt28GpsAntennaOk", "Evt30Sleep", "Evt31Output1Activated", "Evt32Output1Deactivated", "Evt33Output2Activated", "Evt34Output2Deactivated", "Evt35Output3Activated", "Evt36Output3Deactivated", "Evt37MaxSpeedExceeded", "Evt38MaxSpeedOk", "Evt39EnteringWaypoint", "Evt40LeavingWaypoint", "Evt41BatteryIsFailed", "Evt42BatteryIsOk", "Evt43DeliveryFail", "Evt46GsensorRollingThreshold", "Evt47GsensorSideThreshold", "Evt48GsensorShockThreshold", "Evt49DirectionChanged", "Evt50SmsIntervalReached", "Evt52AntiTheftBackToNormal", "Evt53GsmJammingStart", "Evt54GsmJammingStop", "Evt55ExcessiveRpm", "Evt56ExcessiveRpmOnNeutral", "Evt57SpeedingOnNeutral", "Evt58GpsFailure", "Evt59DistanceAttached", "Evt60PowerFailGpsFail", "Evt61AgpsRequest", "Evt62TagAccessoriesStatusChanged", "Evt63TagAccessoriesBatteryStatusChanged", "Evt64LinkBroken", "Evt65ExpandInputChanged", "Evt66TagAccessoriesStatusChangedBack", "Evt67OnlyHave30PowerInBattery", "Evt68OnlyHave20PowerInBattery", "Evt69KeepStoppedWithIgnitionOnStatus", "Evt70ImproperMoving", "Evt71CameraBlind", "Evt72BlindRecover", "Evt73VideoLost", "Evt74VideoOk", "Evt75Rs232DataIncoming", "Evt76CalibrateIgnitionVoltageFinished", "Evt77BeforeDeepSleep", "Evt78ExceedMaxSpeedInRaining", "Evt79ResumeSpeedAfterExceedInRaining", "Evt80AccelerationExceed", "Evt81AccelerationResumeAfterExceed", "Evt82DecelerationExceed", "Evt83DecelerationResumeAfterExceed", "Evt84RfidDriverLogin", "Evt85RfidDriverLogout", "Evt86RfidPassengerLogin", "Evt87GenericExceedMaxSpeed", "Evt88GenericResumeSpeedAfterExceed", "Evt89FailTryDevicePasswordMoreThan3Times", "Evt90ReceiveEngineSealActivateCommand", "Evt91EngineSealActivated", "Evt92EngineSealDeactivated", "Evt93EngineSealActivatedByRelay", "Evt94EngineSealDeactivatedRelay", "Evt95EngineSealActivatedByInput1", "Evt96EngineSealDeactivatedByInput1", "Evt97NetworkScanResponse", "Evt98SpeedHistogram", "Evt99TripSummarizationEvent", "Evt100TelemetryEvents", "Evt101GsensorHistoricEvent", "Evt102RouteReconstructionEvent", });
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_dynamic_setup_info_group__Descriptor = Descriptor.MessageTypes[93];
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_dynamic_setup_info_group__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_info_group, global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_info_group.Builder>(internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_dynamic_setup_info_group__Descriptor,
                new string[] { "Waypoint", "Wireless", "General", "Odometer", "Hourmeter", "EventId", "DetailVoltage", });
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_dynamic_setup_anti_theft__Descriptor = Descriptor.MessageTypes[94];
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_dynamic_setup_anti_theft__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_anti_theft, global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_anti_theft.Builder>(internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_dynamic_setup_anti_theft__Descriptor,
                new string[] { "AntiTheftEnable", "ImproperMoving", "ImproperMoveOutput", "LocalParking", "Output1Mask", "Output2Mask", "Output3Mask", "IgnitionCode", "AlarmModeTimer", "AlarmedAfterTimer", "SilenceLaw", });
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_dynamic_setup_rs232__Descriptor = Descriptor.MessageTypes[95];
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_dynamic_setup_rs232__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_rs232, global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_rs232.Builder>(internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_dynamic_setup_rs232__Descriptor,
                new string[] { "WorkingMode", "KeepWorkingTimer", "BaudRate", "SerialAlert", "AnyRfidCard", "LogoutMode", });
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_dynamic_setup_others__Descriptor = Descriptor.MessageTypes[96];
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_dynamic_setup_others__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_others, global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_others.Builder>(internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_dynamic_setup_others__Descriptor,
                new string[] { "AliasName", "DevicePassword", "Pin", "Puk", "SwitchLedOn", "Timezone", "CellInfoInPos", "MaxSpeedLimit", "CalculateOdometer", "MaximumLogCount", "IgnitionVoltage", "IgnitionVoltageFactor", "IgnitionTimer", "ChargingAllow", "WorkingBeforeSleep", "HistogramGroups", "SpeedHistogramInterval", "PositionSpeedSummarization", });
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_dynamic_setup_can__Descriptor = Descriptor.MessageTypes[97];
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_dynamic_setup_can__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_can, global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_can.Builder>(internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_dynamic_setup_can__Descriptor,
                new string[] { "CanEnable", "CanAdditionalPacket", "Clutch", "Brake", "ParkingBrake", "MotorBrake", "WindowWipers", "DoorsClosed", "DoorsLocked", "TrunkClosed", "SeatBeltBuckled", "HeadlightsOn", "MalfunctionLampOn", "Speed", "Rpm", "FuelLevel1", "FuelLevel2", "FuelConsumption", "IntakeAirTemp", "IntakeAirFlow", "FuelType", "EthanolRatio", "OilTemperature", "EngineReferenceTorque", "CurrentGear", "Dtc", });
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_dynamic_setup__Descriptor = Descriptor.MessageTypes[98];
        internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_dynamic_setup__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup, global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup.Builder>(internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_dynamic_setup__Descriptor,
                new string[] { "Header", "Connection", "Position", "Gps", "Gsensor", "Sms", "InputAndOutput", "DebounceTimer", "Event", "InfoGroup", "AntiTheft", "Rs232", "Others", "Can", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mxt1xx_u_info : pb::GeneratedMessage<mxt1xx_u_info, mxt1xx_u_info.Builder> {
    private mxt1xx_u_info() { }
    private static readonly mxt1xx_u_info defaultInstance = new mxt1xx_u_info().MakeReadOnly();
    private static readonly string[] _mxt1XxUInfoFieldNames = new string[] { "generation_date", "ipv4", "packet_size" };
    private static readonly uint[] _mxt1XxUInfoFieldTags = new uint[] { 10, 26, 16 };
    public static mxt1xx_u_info DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mxt1xx_u_info DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mxt1xx_u_info ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_info__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mxt1xx_u_info, mxt1xx_u_info.Builder> InternalFieldAccessors {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_info__FieldAccessorTable; }
    }
    
    public const int GenerationDateFieldNumber = 1;
    private bool hasGenerationDate;
    private string generationDate_ = "";
    public bool HasGenerationDate {
      get { return hasGenerationDate; }
    }
    public string GenerationDate {
      get { return generationDate_; }
    }
    
    public const int PacketSizeFieldNumber = 2;
    private bool hasPacketSize;
    private uint packetSize_;
    public bool HasPacketSize {
      get { return hasPacketSize; }
    }
    [global::System.CLSCompliant(false)]
    public uint PacketSize {
      get { return packetSize_; }
    }
    
    public const int Ipv4FieldNumber = 3;
    private bool hasIpv4;
    private string ipv4_ = "";
    public bool HasIpv4 {
      get { return hasIpv4; }
    }
    public string Ipv4 {
      get { return ipv4_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasGenerationDate) return false;
        if (!hasPacketSize) return false;
        if (!hasIpv4) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mxt1XxUInfoFieldNames;
      if (hasGenerationDate) {
        output.WriteString(1, field_names[0], GenerationDate);
      }
      if (hasPacketSize) {
        output.WriteUInt32(2, field_names[2], PacketSize);
      }
      if (hasIpv4) {
        output.WriteString(3, field_names[1], Ipv4);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasGenerationDate) {
        size += pb::CodedOutputStream.ComputeStringSize(1, GenerationDate);
      }
      if (hasPacketSize) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, PacketSize);
      }
      if (hasIpv4) {
        size += pb::CodedOutputStream.ComputeStringSize(3, Ipv4);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mxt1xx_u_info ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_info ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_info ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_info ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_info ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_info ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_info ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mxt1xx_u_info ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mxt1xx_u_info ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_info ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mxt1xx_u_info MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mxt1xx_u_info prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mxt1xx_u_info, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mxt1xx_u_info cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mxt1xx_u_info result;
      
      private mxt1xx_u_info PrepareBuilder() {
        if (resultIsReadOnly) {
          mxt1xx_u_info original = result;
          result = new mxt1xx_u_info();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mxt1xx_u_info MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_info.Descriptor; }
      }
      
      public override mxt1xx_u_info DefaultInstanceForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_info.DefaultInstance; }
      }
      
      public override mxt1xx_u_info BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mxt1xx_u_info) {
          return MergeFrom((mxt1xx_u_info) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mxt1xx_u_info other) {
        if (other == global::maxtrack.pb.mxt1xx.mxt1xx_u_info.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGenerationDate) {
          GenerationDate = other.GenerationDate;
        }
        if (other.HasPacketSize) {
          PacketSize = other.PacketSize;
        }
        if (other.HasIpv4) {
          Ipv4 = other.Ipv4;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mxt1XxUInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mxt1XxUInfoFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasGenerationDate = input.ReadString(ref result.generationDate_);
              break;
            }
            case 16: {
              result.hasPacketSize = input.ReadUInt32(ref result.packetSize_);
              break;
            }
            case 26: {
              result.hasIpv4 = input.ReadString(ref result.ipv4_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGenerationDate {
        get { return result.hasGenerationDate; }
      }
      public string GenerationDate {
        get { return result.GenerationDate; }
        set { SetGenerationDate(value); }
      }
      public Builder SetGenerationDate(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGenerationDate = true;
        result.generationDate_ = value;
        return this;
      }
      public Builder ClearGenerationDate() {
        PrepareBuilder();
        result.hasGenerationDate = false;
        result.generationDate_ = "";
        return this;
      }
      
      public bool HasPacketSize {
        get { return result.hasPacketSize; }
      }
      [global::System.CLSCompliant(false)]
      public uint PacketSize {
        get { return result.PacketSize; }
        set { SetPacketSize(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetPacketSize(uint value) {
        PrepareBuilder();
        result.hasPacketSize = true;
        result.packetSize_ = value;
        return this;
      }
      public Builder ClearPacketSize() {
        PrepareBuilder();
        result.hasPacketSize = false;
        result.packetSize_ = 0;
        return this;
      }
      
      public bool HasIpv4 {
        get { return result.hasIpv4; }
      }
      public string Ipv4 {
        get { return result.Ipv4; }
        set { SetIpv4(value); }
      }
      public Builder SetIpv4(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasIpv4 = true;
        result.ipv4_ = value;
        return this;
      }
      public Builder ClearIpv4() {
        PrepareBuilder();
        result.hasIpv4 = false;
        result.ipv4_ = "";
        return this;
      }
    }
    static mxt1xx_u_info() {
      object.ReferenceEquals(global::maxtrack.pb.mxt1xx.Mxt1Xx.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mxt1xx_u_firmware : pb::GeneratedMessage<mxt1xx_u_firmware, mxt1xx_u_firmware.Builder> {
    private mxt1xx_u_firmware() { }
    private static readonly mxt1xx_u_firmware defaultInstance = new mxt1xx_u_firmware().MakeReadOnly();
    private static readonly string[] _mxt1XxUFirmwareFieldNames = new string[] { "life_time", "memory_index", "packet_reason", "position_information", "protocol", "serial" };
    private static readonly uint[] _mxt1XxUFirmwareFieldTags = new uint[] { 32, 24, 40, 48, 16, 8 };
    public static mxt1xx_u_firmware DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mxt1xx_u_firmware DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mxt1xx_u_firmware ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_firmware__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mxt1xx_u_firmware, mxt1xx_u_firmware.Builder> InternalFieldAccessors {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_firmware__FieldAccessorTable; }
    }
    
    public const int SerialFieldNumber = 1;
    private bool hasSerial;
    private uint serial_;
    public bool HasSerial {
      get { return hasSerial; }
    }
    [global::System.CLSCompliant(false)]
    public uint Serial {
      get { return serial_; }
    }
    
    public const int ProtocolFieldNumber = 2;
    private bool hasProtocol;
    private uint protocol_;
    public bool HasProtocol {
      get { return hasProtocol; }
    }
    [global::System.CLSCompliant(false)]
    public uint Protocol {
      get { return protocol_; }
    }
    
    public const int MemoryIndexFieldNumber = 3;
    private bool hasMemoryIndex;
    private uint memoryIndex_;
    public bool HasMemoryIndex {
      get { return hasMemoryIndex; }
    }
    [global::System.CLSCompliant(false)]
    public uint MemoryIndex {
      get { return memoryIndex_; }
    }
    
    public const int LifeTimeFieldNumber = 4;
    private bool hasLifeTime;
    private uint lifeTime_;
    public bool HasLifeTime {
      get { return hasLifeTime; }
    }
    [global::System.CLSCompliant(false)]
    public uint LifeTime {
      get { return lifeTime_; }
    }
    
    public const int PacketReasonFieldNumber = 5;
    private bool hasPacketReason;
    private uint packetReason_;
    public bool HasPacketReason {
      get { return hasPacketReason; }
    }
    [global::System.CLSCompliant(false)]
    public uint PacketReason {
      get { return packetReason_; }
    }
    
    public const int PositionInformationFieldNumber = 6;
    private bool hasPositionInformation;
    private uint positionInformation_;
    public bool HasPositionInformation {
      get { return hasPositionInformation; }
    }
    [global::System.CLSCompliant(false)]
    public uint PositionInformation {
      get { return positionInformation_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSerial) return false;
        if (!hasProtocol) return false;
        if (!hasMemoryIndex) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mxt1XxUFirmwareFieldNames;
      if (hasSerial) {
        output.WriteUInt32(1, field_names[5], Serial);
      }
      if (hasProtocol) {
        output.WriteUInt32(2, field_names[4], Protocol);
      }
      if (hasMemoryIndex) {
        output.WriteUInt32(3, field_names[1], MemoryIndex);
      }
      if (hasLifeTime) {
        output.WriteUInt32(4, field_names[0], LifeTime);
      }
      if (hasPacketReason) {
        output.WriteUInt32(5, field_names[2], PacketReason);
      }
      if (hasPositionInformation) {
        output.WriteUInt32(6, field_names[3], PositionInformation);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasSerial) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, Serial);
      }
      if (hasProtocol) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, Protocol);
      }
      if (hasMemoryIndex) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, MemoryIndex);
      }
      if (hasLifeTime) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, LifeTime);
      }
      if (hasPacketReason) {
        size += pb::CodedOutputStream.ComputeUInt32Size(5, PacketReason);
      }
      if (hasPositionInformation) {
        size += pb::CodedOutputStream.ComputeUInt32Size(6, PositionInformation);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mxt1xx_u_firmware ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_firmware ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_firmware ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_firmware ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_firmware ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_firmware ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_firmware ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mxt1xx_u_firmware ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mxt1xx_u_firmware ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_firmware ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mxt1xx_u_firmware MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mxt1xx_u_firmware prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mxt1xx_u_firmware, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mxt1xx_u_firmware cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mxt1xx_u_firmware result;
      
      private mxt1xx_u_firmware PrepareBuilder() {
        if (resultIsReadOnly) {
          mxt1xx_u_firmware original = result;
          result = new mxt1xx_u_firmware();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mxt1xx_u_firmware MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_firmware.Descriptor; }
      }
      
      public override mxt1xx_u_firmware DefaultInstanceForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_firmware.DefaultInstance; }
      }
      
      public override mxt1xx_u_firmware BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mxt1xx_u_firmware) {
          return MergeFrom((mxt1xx_u_firmware) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mxt1xx_u_firmware other) {
        if (other == global::maxtrack.pb.mxt1xx.mxt1xx_u_firmware.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSerial) {
          Serial = other.Serial;
        }
        if (other.HasProtocol) {
          Protocol = other.Protocol;
        }
        if (other.HasMemoryIndex) {
          MemoryIndex = other.MemoryIndex;
        }
        if (other.HasLifeTime) {
          LifeTime = other.LifeTime;
        }
        if (other.HasPacketReason) {
          PacketReason = other.PacketReason;
        }
        if (other.HasPositionInformation) {
          PositionInformation = other.PositionInformation;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mxt1XxUFirmwareFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mxt1XxUFirmwareFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasSerial = input.ReadUInt32(ref result.serial_);
              break;
            }
            case 16: {
              result.hasProtocol = input.ReadUInt32(ref result.protocol_);
              break;
            }
            case 24: {
              result.hasMemoryIndex = input.ReadUInt32(ref result.memoryIndex_);
              break;
            }
            case 32: {
              result.hasLifeTime = input.ReadUInt32(ref result.lifeTime_);
              break;
            }
            case 40: {
              result.hasPacketReason = input.ReadUInt32(ref result.packetReason_);
              break;
            }
            case 48: {
              result.hasPositionInformation = input.ReadUInt32(ref result.positionInformation_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSerial {
        get { return result.hasSerial; }
      }
      [global::System.CLSCompliant(false)]
      public uint Serial {
        get { return result.Serial; }
        set { SetSerial(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSerial(uint value) {
        PrepareBuilder();
        result.hasSerial = true;
        result.serial_ = value;
        return this;
      }
      public Builder ClearSerial() {
        PrepareBuilder();
        result.hasSerial = false;
        result.serial_ = 0;
        return this;
      }
      
      public bool HasProtocol {
        get { return result.hasProtocol; }
      }
      [global::System.CLSCompliant(false)]
      public uint Protocol {
        get { return result.Protocol; }
        set { SetProtocol(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetProtocol(uint value) {
        PrepareBuilder();
        result.hasProtocol = true;
        result.protocol_ = value;
        return this;
      }
      public Builder ClearProtocol() {
        PrepareBuilder();
        result.hasProtocol = false;
        result.protocol_ = 0;
        return this;
      }
      
      public bool HasMemoryIndex {
        get { return result.hasMemoryIndex; }
      }
      [global::System.CLSCompliant(false)]
      public uint MemoryIndex {
        get { return result.MemoryIndex; }
        set { SetMemoryIndex(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetMemoryIndex(uint value) {
        PrepareBuilder();
        result.hasMemoryIndex = true;
        result.memoryIndex_ = value;
        return this;
      }
      public Builder ClearMemoryIndex() {
        PrepareBuilder();
        result.hasMemoryIndex = false;
        result.memoryIndex_ = 0;
        return this;
      }
      
      public bool HasLifeTime {
        get { return result.hasLifeTime; }
      }
      [global::System.CLSCompliant(false)]
      public uint LifeTime {
        get { return result.LifeTime; }
        set { SetLifeTime(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetLifeTime(uint value) {
        PrepareBuilder();
        result.hasLifeTime = true;
        result.lifeTime_ = value;
        return this;
      }
      public Builder ClearLifeTime() {
        PrepareBuilder();
        result.hasLifeTime = false;
        result.lifeTime_ = 0;
        return this;
      }
      
      public bool HasPacketReason {
        get { return result.hasPacketReason; }
      }
      [global::System.CLSCompliant(false)]
      public uint PacketReason {
        get { return result.PacketReason; }
        set { SetPacketReason(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetPacketReason(uint value) {
        PrepareBuilder();
        result.hasPacketReason = true;
        result.packetReason_ = value;
        return this;
      }
      public Builder ClearPacketReason() {
        PrepareBuilder();
        result.hasPacketReason = false;
        result.packetReason_ = 0;
        return this;
      }
      
      public bool HasPositionInformation {
        get { return result.hasPositionInformation; }
      }
      [global::System.CLSCompliant(false)]
      public uint PositionInformation {
        get { return result.PositionInformation; }
        set { SetPositionInformation(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetPositionInformation(uint value) {
        PrepareBuilder();
        result.hasPositionInformation = true;
        result.positionInformation_ = value;
        return this;
      }
      public Builder ClearPositionInformation() {
        PrepareBuilder();
        result.hasPositionInformation = false;
        result.positionInformation_ = 0;
        return this;
      }
    }
    static mxt1xx_u_firmware() {
      object.ReferenceEquals(global::maxtrack.pb.mxt1xx.Mxt1Xx.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mxt1xx_u_gps_modem_flag_state : pb::GeneratedMessage<mxt1xx_u_gps_modem_flag_state, mxt1xx_u_gps_modem_flag_state.Builder> {
    private mxt1xx_u_gps_modem_flag_state() { }
    private static readonly mxt1xx_u_gps_modem_flag_state defaultInstance = new mxt1xx_u_gps_modem_flag_state().MakeReadOnly();
    private static readonly string[] _mxt1XxUGpsModemFlagStateFieldNames = new string[] { "cell_present", "excess_speed", "gprs_connection", "gps_antenna_disconnected", "gps_antenna_failure", "gps_signal", "gps_sleep", "gsm_jamming", "moving", "voice_call" };
    private static readonly uint[] _mxt1XxUGpsModemFlagStateFieldTags = new uint[] { 80, 48, 8, 40, 32, 24, 56, 64, 72, 16 };
    public static mxt1xx_u_gps_modem_flag_state DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mxt1xx_u_gps_modem_flag_state DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mxt1xx_u_gps_modem_flag_state ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_gps_modem_flag_state__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mxt1xx_u_gps_modem_flag_state, mxt1xx_u_gps_modem_flag_state.Builder> InternalFieldAccessors {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_gps_modem_flag_state__FieldAccessorTable; }
    }
    
    public const int GprsConnectionFieldNumber = 1;
    private bool hasGprsConnection;
    private bool gprsConnection_;
    public bool HasGprsConnection {
      get { return hasGprsConnection; }
    }
    public bool GprsConnection {
      get { return gprsConnection_; }
    }
    
    public const int VoiceCallFieldNumber = 2;
    private bool hasVoiceCall;
    private bool voiceCall_;
    public bool HasVoiceCall {
      get { return hasVoiceCall; }
    }
    public bool VoiceCall {
      get { return voiceCall_; }
    }
    
    public const int GpsSignalFieldNumber = 3;
    private bool hasGpsSignal;
    private bool gpsSignal_;
    public bool HasGpsSignal {
      get { return hasGpsSignal; }
    }
    public bool GpsSignal {
      get { return gpsSignal_; }
    }
    
    public const int GpsAntennaFailureFieldNumber = 4;
    private bool hasGpsAntennaFailure;
    private bool gpsAntennaFailure_;
    public bool HasGpsAntennaFailure {
      get { return hasGpsAntennaFailure; }
    }
    public bool GpsAntennaFailure {
      get { return gpsAntennaFailure_; }
    }
    
    public const int GpsAntennaDisconnectedFieldNumber = 5;
    private bool hasGpsAntennaDisconnected;
    private bool gpsAntennaDisconnected_;
    public bool HasGpsAntennaDisconnected {
      get { return hasGpsAntennaDisconnected; }
    }
    public bool GpsAntennaDisconnected {
      get { return gpsAntennaDisconnected_; }
    }
    
    public const int ExcessSpeedFieldNumber = 6;
    private bool hasExcessSpeed;
    private bool excessSpeed_;
    public bool HasExcessSpeed {
      get { return hasExcessSpeed; }
    }
    public bool ExcessSpeed {
      get { return excessSpeed_; }
    }
    
    public const int GpsSleepFieldNumber = 7;
    private bool hasGpsSleep;
    private bool gpsSleep_;
    public bool HasGpsSleep {
      get { return hasGpsSleep; }
    }
    public bool GpsSleep {
      get { return gpsSleep_; }
    }
    
    public const int GsmJammingFieldNumber = 8;
    private bool hasGsmJamming;
    private bool gsmJamming_;
    public bool HasGsmJamming {
      get { return hasGsmJamming; }
    }
    public bool GsmJamming {
      get { return gsmJamming_; }
    }
    
    public const int MovingFieldNumber = 9;
    private bool hasMoving;
    private bool moving_;
    public bool HasMoving {
      get { return hasMoving; }
    }
    public bool Moving {
      get { return moving_; }
    }
    
    public const int CellPresentFieldNumber = 10;
    private bool hasCellPresent;
    private bool cellPresent_;
    public bool HasCellPresent {
      get { return hasCellPresent; }
    }
    public bool CellPresent {
      get { return cellPresent_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasGprsConnection) return false;
        if (!hasVoiceCall) return false;
        if (!hasGpsSignal) return false;
        if (!hasGpsAntennaFailure) return false;
        if (!hasGpsAntennaDisconnected) return false;
        if (!hasExcessSpeed) return false;
        if (!hasGpsSleep) return false;
        if (!hasGsmJamming) return false;
        if (!hasMoving) return false;
        if (!hasCellPresent) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mxt1XxUGpsModemFlagStateFieldNames;
      if (hasGprsConnection) {
        output.WriteBool(1, field_names[2], GprsConnection);
      }
      if (hasVoiceCall) {
        output.WriteBool(2, field_names[9], VoiceCall);
      }
      if (hasGpsSignal) {
        output.WriteBool(3, field_names[5], GpsSignal);
      }
      if (hasGpsAntennaFailure) {
        output.WriteBool(4, field_names[4], GpsAntennaFailure);
      }
      if (hasGpsAntennaDisconnected) {
        output.WriteBool(5, field_names[3], GpsAntennaDisconnected);
      }
      if (hasExcessSpeed) {
        output.WriteBool(6, field_names[1], ExcessSpeed);
      }
      if (hasGpsSleep) {
        output.WriteBool(7, field_names[6], GpsSleep);
      }
      if (hasGsmJamming) {
        output.WriteBool(8, field_names[7], GsmJamming);
      }
      if (hasMoving) {
        output.WriteBool(9, field_names[8], Moving);
      }
      if (hasCellPresent) {
        output.WriteBool(10, field_names[0], CellPresent);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasGprsConnection) {
        size += pb::CodedOutputStream.ComputeBoolSize(1, GprsConnection);
      }
      if (hasVoiceCall) {
        size += pb::CodedOutputStream.ComputeBoolSize(2, VoiceCall);
      }
      if (hasGpsSignal) {
        size += pb::CodedOutputStream.ComputeBoolSize(3, GpsSignal);
      }
      if (hasGpsAntennaFailure) {
        size += pb::CodedOutputStream.ComputeBoolSize(4, GpsAntennaFailure);
      }
      if (hasGpsAntennaDisconnected) {
        size += pb::CodedOutputStream.ComputeBoolSize(5, GpsAntennaDisconnected);
      }
      if (hasExcessSpeed) {
        size += pb::CodedOutputStream.ComputeBoolSize(6, ExcessSpeed);
      }
      if (hasGpsSleep) {
        size += pb::CodedOutputStream.ComputeBoolSize(7, GpsSleep);
      }
      if (hasGsmJamming) {
        size += pb::CodedOutputStream.ComputeBoolSize(8, GsmJamming);
      }
      if (hasMoving) {
        size += pb::CodedOutputStream.ComputeBoolSize(9, Moving);
      }
      if (hasCellPresent) {
        size += pb::CodedOutputStream.ComputeBoolSize(10, CellPresent);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mxt1xx_u_gps_modem_flag_state ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_gps_modem_flag_state ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_gps_modem_flag_state ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_gps_modem_flag_state ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_gps_modem_flag_state ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_gps_modem_flag_state ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_gps_modem_flag_state ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mxt1xx_u_gps_modem_flag_state ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mxt1xx_u_gps_modem_flag_state ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_gps_modem_flag_state ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mxt1xx_u_gps_modem_flag_state MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mxt1xx_u_gps_modem_flag_state prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mxt1xx_u_gps_modem_flag_state, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mxt1xx_u_gps_modem_flag_state cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mxt1xx_u_gps_modem_flag_state result;
      
      private mxt1xx_u_gps_modem_flag_state PrepareBuilder() {
        if (resultIsReadOnly) {
          mxt1xx_u_gps_modem_flag_state original = result;
          result = new mxt1xx_u_gps_modem_flag_state();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mxt1xx_u_gps_modem_flag_state MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_gps_modem_flag_state.Descriptor; }
      }
      
      public override mxt1xx_u_gps_modem_flag_state DefaultInstanceForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_gps_modem_flag_state.DefaultInstance; }
      }
      
      public override mxt1xx_u_gps_modem_flag_state BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mxt1xx_u_gps_modem_flag_state) {
          return MergeFrom((mxt1xx_u_gps_modem_flag_state) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mxt1xx_u_gps_modem_flag_state other) {
        if (other == global::maxtrack.pb.mxt1xx.mxt1xx_u_gps_modem_flag_state.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGprsConnection) {
          GprsConnection = other.GprsConnection;
        }
        if (other.HasVoiceCall) {
          VoiceCall = other.VoiceCall;
        }
        if (other.HasGpsSignal) {
          GpsSignal = other.GpsSignal;
        }
        if (other.HasGpsAntennaFailure) {
          GpsAntennaFailure = other.GpsAntennaFailure;
        }
        if (other.HasGpsAntennaDisconnected) {
          GpsAntennaDisconnected = other.GpsAntennaDisconnected;
        }
        if (other.HasExcessSpeed) {
          ExcessSpeed = other.ExcessSpeed;
        }
        if (other.HasGpsSleep) {
          GpsSleep = other.GpsSleep;
        }
        if (other.HasGsmJamming) {
          GsmJamming = other.GsmJamming;
        }
        if (other.HasMoving) {
          Moving = other.Moving;
        }
        if (other.HasCellPresent) {
          CellPresent = other.CellPresent;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mxt1XxUGpsModemFlagStateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mxt1XxUGpsModemFlagStateFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasGprsConnection = input.ReadBool(ref result.gprsConnection_);
              break;
            }
            case 16: {
              result.hasVoiceCall = input.ReadBool(ref result.voiceCall_);
              break;
            }
            case 24: {
              result.hasGpsSignal = input.ReadBool(ref result.gpsSignal_);
              break;
            }
            case 32: {
              result.hasGpsAntennaFailure = input.ReadBool(ref result.gpsAntennaFailure_);
              break;
            }
            case 40: {
              result.hasGpsAntennaDisconnected = input.ReadBool(ref result.gpsAntennaDisconnected_);
              break;
            }
            case 48: {
              result.hasExcessSpeed = input.ReadBool(ref result.excessSpeed_);
              break;
            }
            case 56: {
              result.hasGpsSleep = input.ReadBool(ref result.gpsSleep_);
              break;
            }
            case 64: {
              result.hasGsmJamming = input.ReadBool(ref result.gsmJamming_);
              break;
            }
            case 72: {
              result.hasMoving = input.ReadBool(ref result.moving_);
              break;
            }
            case 80: {
              result.hasCellPresent = input.ReadBool(ref result.cellPresent_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGprsConnection {
        get { return result.hasGprsConnection; }
      }
      public bool GprsConnection {
        get { return result.GprsConnection; }
        set { SetGprsConnection(value); }
      }
      public Builder SetGprsConnection(bool value) {
        PrepareBuilder();
        result.hasGprsConnection = true;
        result.gprsConnection_ = value;
        return this;
      }
      public Builder ClearGprsConnection() {
        PrepareBuilder();
        result.hasGprsConnection = false;
        result.gprsConnection_ = false;
        return this;
      }
      
      public bool HasVoiceCall {
        get { return result.hasVoiceCall; }
      }
      public bool VoiceCall {
        get { return result.VoiceCall; }
        set { SetVoiceCall(value); }
      }
      public Builder SetVoiceCall(bool value) {
        PrepareBuilder();
        result.hasVoiceCall = true;
        result.voiceCall_ = value;
        return this;
      }
      public Builder ClearVoiceCall() {
        PrepareBuilder();
        result.hasVoiceCall = false;
        result.voiceCall_ = false;
        return this;
      }
      
      public bool HasGpsSignal {
        get { return result.hasGpsSignal; }
      }
      public bool GpsSignal {
        get { return result.GpsSignal; }
        set { SetGpsSignal(value); }
      }
      public Builder SetGpsSignal(bool value) {
        PrepareBuilder();
        result.hasGpsSignal = true;
        result.gpsSignal_ = value;
        return this;
      }
      public Builder ClearGpsSignal() {
        PrepareBuilder();
        result.hasGpsSignal = false;
        result.gpsSignal_ = false;
        return this;
      }
      
      public bool HasGpsAntennaFailure {
        get { return result.hasGpsAntennaFailure; }
      }
      public bool GpsAntennaFailure {
        get { return result.GpsAntennaFailure; }
        set { SetGpsAntennaFailure(value); }
      }
      public Builder SetGpsAntennaFailure(bool value) {
        PrepareBuilder();
        result.hasGpsAntennaFailure = true;
        result.gpsAntennaFailure_ = value;
        return this;
      }
      public Builder ClearGpsAntennaFailure() {
        PrepareBuilder();
        result.hasGpsAntennaFailure = false;
        result.gpsAntennaFailure_ = false;
        return this;
      }
      
      public bool HasGpsAntennaDisconnected {
        get { return result.hasGpsAntennaDisconnected; }
      }
      public bool GpsAntennaDisconnected {
        get { return result.GpsAntennaDisconnected; }
        set { SetGpsAntennaDisconnected(value); }
      }
      public Builder SetGpsAntennaDisconnected(bool value) {
        PrepareBuilder();
        result.hasGpsAntennaDisconnected = true;
        result.gpsAntennaDisconnected_ = value;
        return this;
      }
      public Builder ClearGpsAntennaDisconnected() {
        PrepareBuilder();
        result.hasGpsAntennaDisconnected = false;
        result.gpsAntennaDisconnected_ = false;
        return this;
      }
      
      public bool HasExcessSpeed {
        get { return result.hasExcessSpeed; }
      }
      public bool ExcessSpeed {
        get { return result.ExcessSpeed; }
        set { SetExcessSpeed(value); }
      }
      public Builder SetExcessSpeed(bool value) {
        PrepareBuilder();
        result.hasExcessSpeed = true;
        result.excessSpeed_ = value;
        return this;
      }
      public Builder ClearExcessSpeed() {
        PrepareBuilder();
        result.hasExcessSpeed = false;
        result.excessSpeed_ = false;
        return this;
      }
      
      public bool HasGpsSleep {
        get { return result.hasGpsSleep; }
      }
      public bool GpsSleep {
        get { return result.GpsSleep; }
        set { SetGpsSleep(value); }
      }
      public Builder SetGpsSleep(bool value) {
        PrepareBuilder();
        result.hasGpsSleep = true;
        result.gpsSleep_ = value;
        return this;
      }
      public Builder ClearGpsSleep() {
        PrepareBuilder();
        result.hasGpsSleep = false;
        result.gpsSleep_ = false;
        return this;
      }
      
      public bool HasGsmJamming {
        get { return result.hasGsmJamming; }
      }
      public bool GsmJamming {
        get { return result.GsmJamming; }
        set { SetGsmJamming(value); }
      }
      public Builder SetGsmJamming(bool value) {
        PrepareBuilder();
        result.hasGsmJamming = true;
        result.gsmJamming_ = value;
        return this;
      }
      public Builder ClearGsmJamming() {
        PrepareBuilder();
        result.hasGsmJamming = false;
        result.gsmJamming_ = false;
        return this;
      }
      
      public bool HasMoving {
        get { return result.hasMoving; }
      }
      public bool Moving {
        get { return result.Moving; }
        set { SetMoving(value); }
      }
      public Builder SetMoving(bool value) {
        PrepareBuilder();
        result.hasMoving = true;
        result.moving_ = value;
        return this;
      }
      public Builder ClearMoving() {
        PrepareBuilder();
        result.hasMoving = false;
        result.moving_ = false;
        return this;
      }
      
      public bool HasCellPresent {
        get { return result.hasCellPresent; }
      }
      public bool CellPresent {
        get { return result.CellPresent; }
        set { SetCellPresent(value); }
      }
      public Builder SetCellPresent(bool value) {
        PrepareBuilder();
        result.hasCellPresent = true;
        result.cellPresent_ = value;
        return this;
      }
      public Builder ClearCellPresent() {
        PrepareBuilder();
        result.hasCellPresent = false;
        result.cellPresent_ = false;
        return this;
      }
    }
    static mxt1xx_u_gps_modem_flag_state() {
      object.ReferenceEquals(global::maxtrack.pb.mxt1xx.Mxt1Xx.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mxt1xx_u_gps_modem_sad69_datum : pb::GeneratedMessage<mxt1xx_u_gps_modem_sad69_datum, mxt1xx_u_gps_modem_sad69_datum.Builder> {
    private mxt1xx_u_gps_modem_sad69_datum() { }
    private static readonly mxt1xx_u_gps_modem_sad69_datum defaultInstance = new mxt1xx_u_gps_modem_sad69_datum().MakeReadOnly();
    private static readonly string[] _mxt1XxUGpsModemSad69DatumFieldNames = new string[] { "latitude_sad69", "longitude_sad69" };
    private static readonly uint[] _mxt1XxUGpsModemSad69DatumFieldTags = new uint[] { 9, 17 };
    public static mxt1xx_u_gps_modem_sad69_datum DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mxt1xx_u_gps_modem_sad69_datum DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mxt1xx_u_gps_modem_sad69_datum ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_gps_modem_sad69_datum__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mxt1xx_u_gps_modem_sad69_datum, mxt1xx_u_gps_modem_sad69_datum.Builder> InternalFieldAccessors {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_gps_modem_sad69_datum__FieldAccessorTable; }
    }
    
    public const int LatitudeSad69FieldNumber = 1;
    private bool hasLatitudeSad69;
    private double latitudeSad69_;
    public bool HasLatitudeSad69 {
      get { return hasLatitudeSad69; }
    }
    public double LatitudeSad69 {
      get { return latitudeSad69_; }
    }
    
    public const int LongitudeSad69FieldNumber = 2;
    private bool hasLongitudeSad69;
    private double longitudeSad69_;
    public bool HasLongitudeSad69 {
      get { return hasLongitudeSad69; }
    }
    public double LongitudeSad69 {
      get { return longitudeSad69_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mxt1XxUGpsModemSad69DatumFieldNames;
      if (hasLatitudeSad69) {
        output.WriteDouble(1, field_names[0], LatitudeSad69);
      }
      if (hasLongitudeSad69) {
        output.WriteDouble(2, field_names[1], LongitudeSad69);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasLatitudeSad69) {
        size += pb::CodedOutputStream.ComputeDoubleSize(1, LatitudeSad69);
      }
      if (hasLongitudeSad69) {
        size += pb::CodedOutputStream.ComputeDoubleSize(2, LongitudeSad69);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mxt1xx_u_gps_modem_sad69_datum ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_gps_modem_sad69_datum ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_gps_modem_sad69_datum ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_gps_modem_sad69_datum ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_gps_modem_sad69_datum ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_gps_modem_sad69_datum ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_gps_modem_sad69_datum ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mxt1xx_u_gps_modem_sad69_datum ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mxt1xx_u_gps_modem_sad69_datum ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_gps_modem_sad69_datum ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mxt1xx_u_gps_modem_sad69_datum MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mxt1xx_u_gps_modem_sad69_datum prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mxt1xx_u_gps_modem_sad69_datum, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mxt1xx_u_gps_modem_sad69_datum cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mxt1xx_u_gps_modem_sad69_datum result;
      
      private mxt1xx_u_gps_modem_sad69_datum PrepareBuilder() {
        if (resultIsReadOnly) {
          mxt1xx_u_gps_modem_sad69_datum original = result;
          result = new mxt1xx_u_gps_modem_sad69_datum();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mxt1xx_u_gps_modem_sad69_datum MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_gps_modem_sad69_datum.Descriptor; }
      }
      
      public override mxt1xx_u_gps_modem_sad69_datum DefaultInstanceForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_gps_modem_sad69_datum.DefaultInstance; }
      }
      
      public override mxt1xx_u_gps_modem_sad69_datum BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mxt1xx_u_gps_modem_sad69_datum) {
          return MergeFrom((mxt1xx_u_gps_modem_sad69_datum) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mxt1xx_u_gps_modem_sad69_datum other) {
        if (other == global::maxtrack.pb.mxt1xx.mxt1xx_u_gps_modem_sad69_datum.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasLatitudeSad69) {
          LatitudeSad69 = other.LatitudeSad69;
        }
        if (other.HasLongitudeSad69) {
          LongitudeSad69 = other.LongitudeSad69;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mxt1XxUGpsModemSad69DatumFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mxt1XxUGpsModemSad69DatumFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 9: {
              result.hasLatitudeSad69 = input.ReadDouble(ref result.latitudeSad69_);
              break;
            }
            case 17: {
              result.hasLongitudeSad69 = input.ReadDouble(ref result.longitudeSad69_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasLatitudeSad69 {
        get { return result.hasLatitudeSad69; }
      }
      public double LatitudeSad69 {
        get { return result.LatitudeSad69; }
        set { SetLatitudeSad69(value); }
      }
      public Builder SetLatitudeSad69(double value) {
        PrepareBuilder();
        result.hasLatitudeSad69 = true;
        result.latitudeSad69_ = value;
        return this;
      }
      public Builder ClearLatitudeSad69() {
        PrepareBuilder();
        result.hasLatitudeSad69 = false;
        result.latitudeSad69_ = 0D;
        return this;
      }
      
      public bool HasLongitudeSad69 {
        get { return result.hasLongitudeSad69; }
      }
      public double LongitudeSad69 {
        get { return result.LongitudeSad69; }
        set { SetLongitudeSad69(value); }
      }
      public Builder SetLongitudeSad69(double value) {
        PrepareBuilder();
        result.hasLongitudeSad69 = true;
        result.longitudeSad69_ = value;
        return this;
      }
      public Builder ClearLongitudeSad69() {
        PrepareBuilder();
        result.hasLongitudeSad69 = false;
        result.longitudeSad69_ = 0D;
        return this;
      }
    }
    static mxt1xx_u_gps_modem_sad69_datum() {
      object.ReferenceEquals(global::maxtrack.pb.mxt1xx.Mxt1Xx.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mxt1xx_u_gps_modem_utm_coordinate : pb::GeneratedMessage<mxt1xx_u_gps_modem_utm_coordinate, mxt1xx_u_gps_modem_utm_coordinate.Builder> {
    private mxt1xx_u_gps_modem_utm_coordinate() { }
    private static readonly mxt1xx_u_gps_modem_utm_coordinate defaultInstance = new mxt1xx_u_gps_modem_utm_coordinate().MakeReadOnly();
    private static readonly string[] _mxt1XxUGpsModemUtmCoordinateFieldNames = new string[] { "easting", "northing", "utm" };
    private static readonly uint[] _mxt1XxUGpsModemUtmCoordinateFieldTags = new uint[] { 17, 25, 10 };
    public static mxt1xx_u_gps_modem_utm_coordinate DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mxt1xx_u_gps_modem_utm_coordinate DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mxt1xx_u_gps_modem_utm_coordinate ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_gps_modem_utm_coordinate__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mxt1xx_u_gps_modem_utm_coordinate, mxt1xx_u_gps_modem_utm_coordinate.Builder> InternalFieldAccessors {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_gps_modem_utm_coordinate__FieldAccessorTable; }
    }
    
    public const int UtmFieldNumber = 1;
    private bool hasUtm;
    private string utm_ = "";
    public bool HasUtm {
      get { return hasUtm; }
    }
    public string Utm {
      get { return utm_; }
    }
    
    public const int EastingFieldNumber = 2;
    private bool hasEasting;
    private double easting_;
    public bool HasEasting {
      get { return hasEasting; }
    }
    public double Easting {
      get { return easting_; }
    }
    
    public const int NorthingFieldNumber = 3;
    private bool hasNorthing;
    private double northing_;
    public bool HasNorthing {
      get { return hasNorthing; }
    }
    public double Northing {
      get { return northing_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mxt1XxUGpsModemUtmCoordinateFieldNames;
      if (hasUtm) {
        output.WriteString(1, field_names[2], Utm);
      }
      if (hasEasting) {
        output.WriteDouble(2, field_names[0], Easting);
      }
      if (hasNorthing) {
        output.WriteDouble(3, field_names[1], Northing);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasUtm) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Utm);
      }
      if (hasEasting) {
        size += pb::CodedOutputStream.ComputeDoubleSize(2, Easting);
      }
      if (hasNorthing) {
        size += pb::CodedOutputStream.ComputeDoubleSize(3, Northing);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mxt1xx_u_gps_modem_utm_coordinate ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_gps_modem_utm_coordinate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_gps_modem_utm_coordinate ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_gps_modem_utm_coordinate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_gps_modem_utm_coordinate ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_gps_modem_utm_coordinate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_gps_modem_utm_coordinate ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mxt1xx_u_gps_modem_utm_coordinate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mxt1xx_u_gps_modem_utm_coordinate ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_gps_modem_utm_coordinate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mxt1xx_u_gps_modem_utm_coordinate MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mxt1xx_u_gps_modem_utm_coordinate prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mxt1xx_u_gps_modem_utm_coordinate, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mxt1xx_u_gps_modem_utm_coordinate cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mxt1xx_u_gps_modem_utm_coordinate result;
      
      private mxt1xx_u_gps_modem_utm_coordinate PrepareBuilder() {
        if (resultIsReadOnly) {
          mxt1xx_u_gps_modem_utm_coordinate original = result;
          result = new mxt1xx_u_gps_modem_utm_coordinate();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mxt1xx_u_gps_modem_utm_coordinate MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_gps_modem_utm_coordinate.Descriptor; }
      }
      
      public override mxt1xx_u_gps_modem_utm_coordinate DefaultInstanceForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_gps_modem_utm_coordinate.DefaultInstance; }
      }
      
      public override mxt1xx_u_gps_modem_utm_coordinate BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mxt1xx_u_gps_modem_utm_coordinate) {
          return MergeFrom((mxt1xx_u_gps_modem_utm_coordinate) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mxt1xx_u_gps_modem_utm_coordinate other) {
        if (other == global::maxtrack.pb.mxt1xx.mxt1xx_u_gps_modem_utm_coordinate.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasUtm) {
          Utm = other.Utm;
        }
        if (other.HasEasting) {
          Easting = other.Easting;
        }
        if (other.HasNorthing) {
          Northing = other.Northing;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mxt1XxUGpsModemUtmCoordinateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mxt1XxUGpsModemUtmCoordinateFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasUtm = input.ReadString(ref result.utm_);
              break;
            }
            case 17: {
              result.hasEasting = input.ReadDouble(ref result.easting_);
              break;
            }
            case 25: {
              result.hasNorthing = input.ReadDouble(ref result.northing_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasUtm {
        get { return result.hasUtm; }
      }
      public string Utm {
        get { return result.Utm; }
        set { SetUtm(value); }
      }
      public Builder SetUtm(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUtm = true;
        result.utm_ = value;
        return this;
      }
      public Builder ClearUtm() {
        PrepareBuilder();
        result.hasUtm = false;
        result.utm_ = "";
        return this;
      }
      
      public bool HasEasting {
        get { return result.hasEasting; }
      }
      public double Easting {
        get { return result.Easting; }
        set { SetEasting(value); }
      }
      public Builder SetEasting(double value) {
        PrepareBuilder();
        result.hasEasting = true;
        result.easting_ = value;
        return this;
      }
      public Builder ClearEasting() {
        PrepareBuilder();
        result.hasEasting = false;
        result.easting_ = 0D;
        return this;
      }
      
      public bool HasNorthing {
        get { return result.hasNorthing; }
      }
      public double Northing {
        get { return result.Northing; }
        set { SetNorthing(value); }
      }
      public Builder SetNorthing(double value) {
        PrepareBuilder();
        result.hasNorthing = true;
        result.northing_ = value;
        return this;
      }
      public Builder ClearNorthing() {
        PrepareBuilder();
        result.hasNorthing = false;
        result.northing_ = 0D;
        return this;
      }
    }
    static mxt1xx_u_gps_modem_utm_coordinate() {
      object.ReferenceEquals(global::maxtrack.pb.mxt1xx.Mxt1Xx.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mxt1xx_u_gps_modem : pb::GeneratedMessage<mxt1xx_u_gps_modem, mxt1xx_u_gps_modem.Builder> {
    private mxt1xx_u_gps_modem() { }
    private static readonly mxt1xx_u_gps_modem defaultInstance = new mxt1xx_u_gps_modem().MakeReadOnly();
    private static readonly string[] _mxt1XxUGpsModemFieldNames = new string[] { "accelerometer_event", "accelerometer_value", "course", "csq", "date", "flag_state", "hdop", "hodometer", "latitude", "longitude", "sad69_datum", "snr", "speed", "svn", "utm_coordinate" };
    private static readonly uint[] _mxt1XxUGpsModemFieldTags = new uint[] { 80, 88, 40, 72, 10, 106, 56, 96, 17, 25, 114, 64, 33, 48, 122 };
    public static mxt1xx_u_gps_modem DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mxt1xx_u_gps_modem DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mxt1xx_u_gps_modem ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_gps_modem__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mxt1xx_u_gps_modem, mxt1xx_u_gps_modem.Builder> InternalFieldAccessors {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_gps_modem__FieldAccessorTable; }
    }
    
    public const int DateFieldNumber = 1;
    private bool hasDate;
    private string date_ = "";
    public bool HasDate {
      get { return hasDate; }
    }
    public string Date {
      get { return date_; }
    }
    
    public const int LatitudeFieldNumber = 2;
    private bool hasLatitude;
    private double latitude_;
    public bool HasLatitude {
      get { return hasLatitude; }
    }
    public double Latitude {
      get { return latitude_; }
    }
    
    public const int LongitudeFieldNumber = 3;
    private bool hasLongitude;
    private double longitude_;
    public bool HasLongitude {
      get { return hasLongitude; }
    }
    public double Longitude {
      get { return longitude_; }
    }
    
    public const int SpeedFieldNumber = 4;
    private bool hasSpeed;
    private double speed_;
    public bool HasSpeed {
      get { return hasSpeed; }
    }
    public double Speed {
      get { return speed_; }
    }
    
    public const int CourseFieldNumber = 5;
    private bool hasCourse;
    private uint course_;
    public bool HasCourse {
      get { return hasCourse; }
    }
    [global::System.CLSCompliant(false)]
    public uint Course {
      get { return course_; }
    }
    
    public const int SvnFieldNumber = 6;
    private bool hasSvn;
    private uint svn_;
    public bool HasSvn {
      get { return hasSvn; }
    }
    [global::System.CLSCompliant(false)]
    public uint Svn {
      get { return svn_; }
    }
    
    public const int HdopFieldNumber = 7;
    private bool hasHdop;
    private uint hdop_;
    public bool HasHdop {
      get { return hasHdop; }
    }
    [global::System.CLSCompliant(false)]
    public uint Hdop {
      get { return hdop_; }
    }
    
    public const int SnrFieldNumber = 8;
    private bool hasSnr;
    private uint snr_;
    public bool HasSnr {
      get { return hasSnr; }
    }
    [global::System.CLSCompliant(false)]
    public uint Snr {
      get { return snr_; }
    }
    
    public const int CsqFieldNumber = 9;
    private bool hasCsq;
    private uint csq_;
    public bool HasCsq {
      get { return hasCsq; }
    }
    [global::System.CLSCompliant(false)]
    public uint Csq {
      get { return csq_; }
    }
    
    public const int AccelerometerEventFieldNumber = 10;
    private bool hasAccelerometerEvent;
    private uint accelerometerEvent_;
    public bool HasAccelerometerEvent {
      get { return hasAccelerometerEvent; }
    }
    [global::System.CLSCompliant(false)]
    public uint AccelerometerEvent {
      get { return accelerometerEvent_; }
    }
    
    public const int AccelerometerValueFieldNumber = 11;
    private bool hasAccelerometerValue;
    private uint accelerometerValue_;
    public bool HasAccelerometerValue {
      get { return hasAccelerometerValue; }
    }
    [global::System.CLSCompliant(false)]
    public uint AccelerometerValue {
      get { return accelerometerValue_; }
    }
    
    public const int HodometerFieldNumber = 12;
    private bool hasHodometer;
    private uint hodometer_;
    public bool HasHodometer {
      get { return hasHodometer; }
    }
    [global::System.CLSCompliant(false)]
    public uint Hodometer {
      get { return hodometer_; }
    }
    
    public const int FlagStateFieldNumber = 13;
    private bool hasFlagState;
    private global::maxtrack.pb.mxt1xx.mxt1xx_u_gps_modem_flag_state flagState_;
    public bool HasFlagState {
      get { return hasFlagState; }
    }
    public global::maxtrack.pb.mxt1xx.mxt1xx_u_gps_modem_flag_state FlagState {
      get { return flagState_ ?? global::maxtrack.pb.mxt1xx.mxt1xx_u_gps_modem_flag_state.DefaultInstance; }
    }
    
    public const int Sad69DatumFieldNumber = 14;
    private bool hasSad69Datum;
    private global::maxtrack.pb.mxt1xx.mxt1xx_u_gps_modem_sad69_datum sad69Datum_;
    public bool HasSad69Datum {
      get { return hasSad69Datum; }
    }
    public global::maxtrack.pb.mxt1xx.mxt1xx_u_gps_modem_sad69_datum Sad69Datum {
      get { return sad69Datum_ ?? global::maxtrack.pb.mxt1xx.mxt1xx_u_gps_modem_sad69_datum.DefaultInstance; }
    }
    
    public const int UtmCoordinateFieldNumber = 15;
    private bool hasUtmCoordinate;
    private global::maxtrack.pb.mxt1xx.mxt1xx_u_gps_modem_utm_coordinate utmCoordinate_;
    public bool HasUtmCoordinate {
      get { return hasUtmCoordinate; }
    }
    public global::maxtrack.pb.mxt1xx.mxt1xx_u_gps_modem_utm_coordinate UtmCoordinate {
      get { return utmCoordinate_ ?? global::maxtrack.pb.mxt1xx.mxt1xx_u_gps_modem_utm_coordinate.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasDate) return false;
        if (!hasLatitude) return false;
        if (!hasLongitude) return false;
        if (!hasSpeed) return false;
        if (!hasCourse) return false;
        if (!hasFlagState) return false;
        if (!FlagState.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mxt1XxUGpsModemFieldNames;
      if (hasDate) {
        output.WriteString(1, field_names[4], Date);
      }
      if (hasLatitude) {
        output.WriteDouble(2, field_names[8], Latitude);
      }
      if (hasLongitude) {
        output.WriteDouble(3, field_names[9], Longitude);
      }
      if (hasSpeed) {
        output.WriteDouble(4, field_names[12], Speed);
      }
      if (hasCourse) {
        output.WriteUInt32(5, field_names[2], Course);
      }
      if (hasSvn) {
        output.WriteUInt32(6, field_names[13], Svn);
      }
      if (hasHdop) {
        output.WriteUInt32(7, field_names[6], Hdop);
      }
      if (hasSnr) {
        output.WriteUInt32(8, field_names[11], Snr);
      }
      if (hasCsq) {
        output.WriteUInt32(9, field_names[3], Csq);
      }
      if (hasAccelerometerEvent) {
        output.WriteUInt32(10, field_names[0], AccelerometerEvent);
      }
      if (hasAccelerometerValue) {
        output.WriteUInt32(11, field_names[1], AccelerometerValue);
      }
      if (hasHodometer) {
        output.WriteUInt32(12, field_names[7], Hodometer);
      }
      if (hasFlagState) {
        output.WriteMessage(13, field_names[5], FlagState);
      }
      if (hasSad69Datum) {
        output.WriteMessage(14, field_names[10], Sad69Datum);
      }
      if (hasUtmCoordinate) {
        output.WriteMessage(15, field_names[14], UtmCoordinate);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasDate) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Date);
      }
      if (hasLatitude) {
        size += pb::CodedOutputStream.ComputeDoubleSize(2, Latitude);
      }
      if (hasLongitude) {
        size += pb::CodedOutputStream.ComputeDoubleSize(3, Longitude);
      }
      if (hasSpeed) {
        size += pb::CodedOutputStream.ComputeDoubleSize(4, Speed);
      }
      if (hasCourse) {
        size += pb::CodedOutputStream.ComputeUInt32Size(5, Course);
      }
      if (hasSvn) {
        size += pb::CodedOutputStream.ComputeUInt32Size(6, Svn);
      }
      if (hasHdop) {
        size += pb::CodedOutputStream.ComputeUInt32Size(7, Hdop);
      }
      if (hasSnr) {
        size += pb::CodedOutputStream.ComputeUInt32Size(8, Snr);
      }
      if (hasCsq) {
        size += pb::CodedOutputStream.ComputeUInt32Size(9, Csq);
      }
      if (hasAccelerometerEvent) {
        size += pb::CodedOutputStream.ComputeUInt32Size(10, AccelerometerEvent);
      }
      if (hasAccelerometerValue) {
        size += pb::CodedOutputStream.ComputeUInt32Size(11, AccelerometerValue);
      }
      if (hasHodometer) {
        size += pb::CodedOutputStream.ComputeUInt32Size(12, Hodometer);
      }
      if (hasFlagState) {
        size += pb::CodedOutputStream.ComputeMessageSize(13, FlagState);
      }
      if (hasSad69Datum) {
        size += pb::CodedOutputStream.ComputeMessageSize(14, Sad69Datum);
      }
      if (hasUtmCoordinate) {
        size += pb::CodedOutputStream.ComputeMessageSize(15, UtmCoordinate);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mxt1xx_u_gps_modem ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_gps_modem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_gps_modem ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_gps_modem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_gps_modem ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_gps_modem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_gps_modem ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mxt1xx_u_gps_modem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mxt1xx_u_gps_modem ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_gps_modem ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mxt1xx_u_gps_modem MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mxt1xx_u_gps_modem prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mxt1xx_u_gps_modem, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mxt1xx_u_gps_modem cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mxt1xx_u_gps_modem result;
      
      private mxt1xx_u_gps_modem PrepareBuilder() {
        if (resultIsReadOnly) {
          mxt1xx_u_gps_modem original = result;
          result = new mxt1xx_u_gps_modem();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mxt1xx_u_gps_modem MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_gps_modem.Descriptor; }
      }
      
      public override mxt1xx_u_gps_modem DefaultInstanceForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_gps_modem.DefaultInstance; }
      }
      
      public override mxt1xx_u_gps_modem BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mxt1xx_u_gps_modem) {
          return MergeFrom((mxt1xx_u_gps_modem) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mxt1xx_u_gps_modem other) {
        if (other == global::maxtrack.pb.mxt1xx.mxt1xx_u_gps_modem.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasDate) {
          Date = other.Date;
        }
        if (other.HasLatitude) {
          Latitude = other.Latitude;
        }
        if (other.HasLongitude) {
          Longitude = other.Longitude;
        }
        if (other.HasSpeed) {
          Speed = other.Speed;
        }
        if (other.HasCourse) {
          Course = other.Course;
        }
        if (other.HasSvn) {
          Svn = other.Svn;
        }
        if (other.HasHdop) {
          Hdop = other.Hdop;
        }
        if (other.HasSnr) {
          Snr = other.Snr;
        }
        if (other.HasCsq) {
          Csq = other.Csq;
        }
        if (other.HasAccelerometerEvent) {
          AccelerometerEvent = other.AccelerometerEvent;
        }
        if (other.HasAccelerometerValue) {
          AccelerometerValue = other.AccelerometerValue;
        }
        if (other.HasHodometer) {
          Hodometer = other.Hodometer;
        }
        if (other.HasFlagState) {
          MergeFlagState(other.FlagState);
        }
        if (other.HasSad69Datum) {
          MergeSad69Datum(other.Sad69Datum);
        }
        if (other.HasUtmCoordinate) {
          MergeUtmCoordinate(other.UtmCoordinate);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mxt1XxUGpsModemFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mxt1XxUGpsModemFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasDate = input.ReadString(ref result.date_);
              break;
            }
            case 17: {
              result.hasLatitude = input.ReadDouble(ref result.latitude_);
              break;
            }
            case 25: {
              result.hasLongitude = input.ReadDouble(ref result.longitude_);
              break;
            }
            case 33: {
              result.hasSpeed = input.ReadDouble(ref result.speed_);
              break;
            }
            case 40: {
              result.hasCourse = input.ReadUInt32(ref result.course_);
              break;
            }
            case 48: {
              result.hasSvn = input.ReadUInt32(ref result.svn_);
              break;
            }
            case 56: {
              result.hasHdop = input.ReadUInt32(ref result.hdop_);
              break;
            }
            case 64: {
              result.hasSnr = input.ReadUInt32(ref result.snr_);
              break;
            }
            case 72: {
              result.hasCsq = input.ReadUInt32(ref result.csq_);
              break;
            }
            case 80: {
              result.hasAccelerometerEvent = input.ReadUInt32(ref result.accelerometerEvent_);
              break;
            }
            case 88: {
              result.hasAccelerometerValue = input.ReadUInt32(ref result.accelerometerValue_);
              break;
            }
            case 96: {
              result.hasHodometer = input.ReadUInt32(ref result.hodometer_);
              break;
            }
            case 106: {
              global::maxtrack.pb.mxt1xx.mxt1xx_u_gps_modem_flag_state.Builder subBuilder = global::maxtrack.pb.mxt1xx.mxt1xx_u_gps_modem_flag_state.CreateBuilder();
              if (result.hasFlagState) {
                subBuilder.MergeFrom(FlagState);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              FlagState = subBuilder.BuildPartial();
              break;
            }
            case 114: {
              global::maxtrack.pb.mxt1xx.mxt1xx_u_gps_modem_sad69_datum.Builder subBuilder = global::maxtrack.pb.mxt1xx.mxt1xx_u_gps_modem_sad69_datum.CreateBuilder();
              if (result.hasSad69Datum) {
                subBuilder.MergeFrom(Sad69Datum);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Sad69Datum = subBuilder.BuildPartial();
              break;
            }
            case 122: {
              global::maxtrack.pb.mxt1xx.mxt1xx_u_gps_modem_utm_coordinate.Builder subBuilder = global::maxtrack.pb.mxt1xx.mxt1xx_u_gps_modem_utm_coordinate.CreateBuilder();
              if (result.hasUtmCoordinate) {
                subBuilder.MergeFrom(UtmCoordinate);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              UtmCoordinate = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasDate {
        get { return result.hasDate; }
      }
      public string Date {
        get { return result.Date; }
        set { SetDate(value); }
      }
      public Builder SetDate(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDate = true;
        result.date_ = value;
        return this;
      }
      public Builder ClearDate() {
        PrepareBuilder();
        result.hasDate = false;
        result.date_ = "";
        return this;
      }
      
      public bool HasLatitude {
        get { return result.hasLatitude; }
      }
      public double Latitude {
        get { return result.Latitude; }
        set { SetLatitude(value); }
      }
      public Builder SetLatitude(double value) {
        PrepareBuilder();
        result.hasLatitude = true;
        result.latitude_ = value;
        return this;
      }
      public Builder ClearLatitude() {
        PrepareBuilder();
        result.hasLatitude = false;
        result.latitude_ = 0D;
        return this;
      }
      
      public bool HasLongitude {
        get { return result.hasLongitude; }
      }
      public double Longitude {
        get { return result.Longitude; }
        set { SetLongitude(value); }
      }
      public Builder SetLongitude(double value) {
        PrepareBuilder();
        result.hasLongitude = true;
        result.longitude_ = value;
        return this;
      }
      public Builder ClearLongitude() {
        PrepareBuilder();
        result.hasLongitude = false;
        result.longitude_ = 0D;
        return this;
      }
      
      public bool HasSpeed {
        get { return result.hasSpeed; }
      }
      public double Speed {
        get { return result.Speed; }
        set { SetSpeed(value); }
      }
      public Builder SetSpeed(double value) {
        PrepareBuilder();
        result.hasSpeed = true;
        result.speed_ = value;
        return this;
      }
      public Builder ClearSpeed() {
        PrepareBuilder();
        result.hasSpeed = false;
        result.speed_ = 0D;
        return this;
      }
      
      public bool HasCourse {
        get { return result.hasCourse; }
      }
      [global::System.CLSCompliant(false)]
      public uint Course {
        get { return result.Course; }
        set { SetCourse(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetCourse(uint value) {
        PrepareBuilder();
        result.hasCourse = true;
        result.course_ = value;
        return this;
      }
      public Builder ClearCourse() {
        PrepareBuilder();
        result.hasCourse = false;
        result.course_ = 0;
        return this;
      }
      
      public bool HasSvn {
        get { return result.hasSvn; }
      }
      [global::System.CLSCompliant(false)]
      public uint Svn {
        get { return result.Svn; }
        set { SetSvn(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSvn(uint value) {
        PrepareBuilder();
        result.hasSvn = true;
        result.svn_ = value;
        return this;
      }
      public Builder ClearSvn() {
        PrepareBuilder();
        result.hasSvn = false;
        result.svn_ = 0;
        return this;
      }
      
      public bool HasHdop {
        get { return result.hasHdop; }
      }
      [global::System.CLSCompliant(false)]
      public uint Hdop {
        get { return result.Hdop; }
        set { SetHdop(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetHdop(uint value) {
        PrepareBuilder();
        result.hasHdop = true;
        result.hdop_ = value;
        return this;
      }
      public Builder ClearHdop() {
        PrepareBuilder();
        result.hasHdop = false;
        result.hdop_ = 0;
        return this;
      }
      
      public bool HasSnr {
        get { return result.hasSnr; }
      }
      [global::System.CLSCompliant(false)]
      public uint Snr {
        get { return result.Snr; }
        set { SetSnr(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSnr(uint value) {
        PrepareBuilder();
        result.hasSnr = true;
        result.snr_ = value;
        return this;
      }
      public Builder ClearSnr() {
        PrepareBuilder();
        result.hasSnr = false;
        result.snr_ = 0;
        return this;
      }
      
      public bool HasCsq {
        get { return result.hasCsq; }
      }
      [global::System.CLSCompliant(false)]
      public uint Csq {
        get { return result.Csq; }
        set { SetCsq(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetCsq(uint value) {
        PrepareBuilder();
        result.hasCsq = true;
        result.csq_ = value;
        return this;
      }
      public Builder ClearCsq() {
        PrepareBuilder();
        result.hasCsq = false;
        result.csq_ = 0;
        return this;
      }
      
      public bool HasAccelerometerEvent {
        get { return result.hasAccelerometerEvent; }
      }
      [global::System.CLSCompliant(false)]
      public uint AccelerometerEvent {
        get { return result.AccelerometerEvent; }
        set { SetAccelerometerEvent(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetAccelerometerEvent(uint value) {
        PrepareBuilder();
        result.hasAccelerometerEvent = true;
        result.accelerometerEvent_ = value;
        return this;
      }
      public Builder ClearAccelerometerEvent() {
        PrepareBuilder();
        result.hasAccelerometerEvent = false;
        result.accelerometerEvent_ = 0;
        return this;
      }
      
      public bool HasAccelerometerValue {
        get { return result.hasAccelerometerValue; }
      }
      [global::System.CLSCompliant(false)]
      public uint AccelerometerValue {
        get { return result.AccelerometerValue; }
        set { SetAccelerometerValue(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetAccelerometerValue(uint value) {
        PrepareBuilder();
        result.hasAccelerometerValue = true;
        result.accelerometerValue_ = value;
        return this;
      }
      public Builder ClearAccelerometerValue() {
        PrepareBuilder();
        result.hasAccelerometerValue = false;
        result.accelerometerValue_ = 0;
        return this;
      }
      
      public bool HasHodometer {
        get { return result.hasHodometer; }
      }
      [global::System.CLSCompliant(false)]
      public uint Hodometer {
        get { return result.Hodometer; }
        set { SetHodometer(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetHodometer(uint value) {
        PrepareBuilder();
        result.hasHodometer = true;
        result.hodometer_ = value;
        return this;
      }
      public Builder ClearHodometer() {
        PrepareBuilder();
        result.hasHodometer = false;
        result.hodometer_ = 0;
        return this;
      }
      
      public bool HasFlagState {
       get { return result.hasFlagState; }
      }
      public global::maxtrack.pb.mxt1xx.mxt1xx_u_gps_modem_flag_state FlagState {
        get { return result.FlagState; }
        set { SetFlagState(value); }
      }
      public Builder SetFlagState(global::maxtrack.pb.mxt1xx.mxt1xx_u_gps_modem_flag_state value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFlagState = true;
        result.flagState_ = value;
        return this;
      }
      public Builder SetFlagState(global::maxtrack.pb.mxt1xx.mxt1xx_u_gps_modem_flag_state.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasFlagState = true;
        result.flagState_ = builderForValue.Build();
        return this;
      }
      public Builder MergeFlagState(global::maxtrack.pb.mxt1xx.mxt1xx_u_gps_modem_flag_state value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasFlagState &&
            result.flagState_ != global::maxtrack.pb.mxt1xx.mxt1xx_u_gps_modem_flag_state.DefaultInstance) {
            result.flagState_ = global::maxtrack.pb.mxt1xx.mxt1xx_u_gps_modem_flag_state.CreateBuilder(result.flagState_).MergeFrom(value).BuildPartial();
        } else {
          result.flagState_ = value;
        }
        result.hasFlagState = true;
        return this;
      }
      public Builder ClearFlagState() {
        PrepareBuilder();
        result.hasFlagState = false;
        result.flagState_ = null;
        return this;
      }
      
      public bool HasSad69Datum {
       get { return result.hasSad69Datum; }
      }
      public global::maxtrack.pb.mxt1xx.mxt1xx_u_gps_modem_sad69_datum Sad69Datum {
        get { return result.Sad69Datum; }
        set { SetSad69Datum(value); }
      }
      public Builder SetSad69Datum(global::maxtrack.pb.mxt1xx.mxt1xx_u_gps_modem_sad69_datum value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSad69Datum = true;
        result.sad69Datum_ = value;
        return this;
      }
      public Builder SetSad69Datum(global::maxtrack.pb.mxt1xx.mxt1xx_u_gps_modem_sad69_datum.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSad69Datum = true;
        result.sad69Datum_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSad69Datum(global::maxtrack.pb.mxt1xx.mxt1xx_u_gps_modem_sad69_datum value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSad69Datum &&
            result.sad69Datum_ != global::maxtrack.pb.mxt1xx.mxt1xx_u_gps_modem_sad69_datum.DefaultInstance) {
            result.sad69Datum_ = global::maxtrack.pb.mxt1xx.mxt1xx_u_gps_modem_sad69_datum.CreateBuilder(result.sad69Datum_).MergeFrom(value).BuildPartial();
        } else {
          result.sad69Datum_ = value;
        }
        result.hasSad69Datum = true;
        return this;
      }
      public Builder ClearSad69Datum() {
        PrepareBuilder();
        result.hasSad69Datum = false;
        result.sad69Datum_ = null;
        return this;
      }
      
      public bool HasUtmCoordinate {
       get { return result.hasUtmCoordinate; }
      }
      public global::maxtrack.pb.mxt1xx.mxt1xx_u_gps_modem_utm_coordinate UtmCoordinate {
        get { return result.UtmCoordinate; }
        set { SetUtmCoordinate(value); }
      }
      public Builder SetUtmCoordinate(global::maxtrack.pb.mxt1xx.mxt1xx_u_gps_modem_utm_coordinate value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUtmCoordinate = true;
        result.utmCoordinate_ = value;
        return this;
      }
      public Builder SetUtmCoordinate(global::maxtrack.pb.mxt1xx.mxt1xx_u_gps_modem_utm_coordinate.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasUtmCoordinate = true;
        result.utmCoordinate_ = builderForValue.Build();
        return this;
      }
      public Builder MergeUtmCoordinate(global::maxtrack.pb.mxt1xx.mxt1xx_u_gps_modem_utm_coordinate value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasUtmCoordinate &&
            result.utmCoordinate_ != global::maxtrack.pb.mxt1xx.mxt1xx_u_gps_modem_utm_coordinate.DefaultInstance) {
            result.utmCoordinate_ = global::maxtrack.pb.mxt1xx.mxt1xx_u_gps_modem_utm_coordinate.CreateBuilder(result.utmCoordinate_).MergeFrom(value).BuildPartial();
        } else {
          result.utmCoordinate_ = value;
        }
        result.hasUtmCoordinate = true;
        return this;
      }
      public Builder ClearUtmCoordinate() {
        PrepareBuilder();
        result.hasUtmCoordinate = false;
        result.utmCoordinate_ = null;
        return this;
      }
    }
    static mxt1xx_u_gps_modem() {
      object.ReferenceEquals(global::maxtrack.pb.mxt1xx.Mxt1Xx.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mxt1xx_u_outputs : pb::GeneratedMessage<mxt1xx_u_outputs, mxt1xx_u_outputs.Builder> {
    private mxt1xx_u_outputs() { }
    private static readonly mxt1xx_u_outputs defaultInstance = new mxt1xx_u_outputs().MakeReadOnly();
    private static readonly string[] _mxt1XxUOutputsFieldNames = new string[] { "output_1", "output_2", "output_3" };
    private static readonly uint[] _mxt1XxUOutputsFieldTags = new uint[] { 8, 16, 24 };
    public static mxt1xx_u_outputs DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mxt1xx_u_outputs DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mxt1xx_u_outputs ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_outputs__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mxt1xx_u_outputs, mxt1xx_u_outputs.Builder> InternalFieldAccessors {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_outputs__FieldAccessorTable; }
    }
    
    public const int Output1FieldNumber = 1;
    private bool hasOutput1;
    private bool output1_;
    public bool HasOutput1 {
      get { return hasOutput1; }
    }
    public bool Output1 {
      get { return output1_; }
    }
    
    public const int Output2FieldNumber = 2;
    private bool hasOutput2;
    private bool output2_;
    public bool HasOutput2 {
      get { return hasOutput2; }
    }
    public bool Output2 {
      get { return output2_; }
    }
    
    public const int Output3FieldNumber = 3;
    private bool hasOutput3;
    private bool output3_;
    public bool HasOutput3 {
      get { return hasOutput3; }
    }
    public bool Output3 {
      get { return output3_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasOutput1) return false;
        if (!hasOutput2) return false;
        if (!hasOutput3) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mxt1XxUOutputsFieldNames;
      if (hasOutput1) {
        output.WriteBool(1, field_names[0], Output1);
      }
      if (hasOutput2) {
        output.WriteBool(2, field_names[1], Output2);
      }
      if (hasOutput3) {
        output.WriteBool(3, field_names[2], Output3);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasOutput1) {
        size += pb::CodedOutputStream.ComputeBoolSize(1, Output1);
      }
      if (hasOutput2) {
        size += pb::CodedOutputStream.ComputeBoolSize(2, Output2);
      }
      if (hasOutput3) {
        size += pb::CodedOutputStream.ComputeBoolSize(3, Output3);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mxt1xx_u_outputs ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_outputs ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_outputs ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_outputs ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_outputs ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_outputs ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_outputs ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mxt1xx_u_outputs ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mxt1xx_u_outputs ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_outputs ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mxt1xx_u_outputs MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mxt1xx_u_outputs prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mxt1xx_u_outputs, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mxt1xx_u_outputs cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mxt1xx_u_outputs result;
      
      private mxt1xx_u_outputs PrepareBuilder() {
        if (resultIsReadOnly) {
          mxt1xx_u_outputs original = result;
          result = new mxt1xx_u_outputs();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mxt1xx_u_outputs MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_outputs.Descriptor; }
      }
      
      public override mxt1xx_u_outputs DefaultInstanceForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_outputs.DefaultInstance; }
      }
      
      public override mxt1xx_u_outputs BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mxt1xx_u_outputs) {
          return MergeFrom((mxt1xx_u_outputs) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mxt1xx_u_outputs other) {
        if (other == global::maxtrack.pb.mxt1xx.mxt1xx_u_outputs.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasOutput1) {
          Output1 = other.Output1;
        }
        if (other.HasOutput2) {
          Output2 = other.Output2;
        }
        if (other.HasOutput3) {
          Output3 = other.Output3;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mxt1XxUOutputsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mxt1XxUOutputsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasOutput1 = input.ReadBool(ref result.output1_);
              break;
            }
            case 16: {
              result.hasOutput2 = input.ReadBool(ref result.output2_);
              break;
            }
            case 24: {
              result.hasOutput3 = input.ReadBool(ref result.output3_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasOutput1 {
        get { return result.hasOutput1; }
      }
      public bool Output1 {
        get { return result.Output1; }
        set { SetOutput1(value); }
      }
      public Builder SetOutput1(bool value) {
        PrepareBuilder();
        result.hasOutput1 = true;
        result.output1_ = value;
        return this;
      }
      public Builder ClearOutput1() {
        PrepareBuilder();
        result.hasOutput1 = false;
        result.output1_ = false;
        return this;
      }
      
      public bool HasOutput2 {
        get { return result.hasOutput2; }
      }
      public bool Output2 {
        get { return result.Output2; }
        set { SetOutput2(value); }
      }
      public Builder SetOutput2(bool value) {
        PrepareBuilder();
        result.hasOutput2 = true;
        result.output2_ = value;
        return this;
      }
      public Builder ClearOutput2() {
        PrepareBuilder();
        result.hasOutput2 = false;
        result.output2_ = false;
        return this;
      }
      
      public bool HasOutput3 {
        get { return result.hasOutput3; }
      }
      public bool Output3 {
        get { return result.Output3; }
        set { SetOutput3(value); }
      }
      public Builder SetOutput3(bool value) {
        PrepareBuilder();
        result.hasOutput3 = true;
        result.output3_ = value;
        return this;
      }
      public Builder ClearOutput3() {
        PrepareBuilder();
        result.hasOutput3 = false;
        result.output3_ = false;
        return this;
      }
    }
    static mxt1xx_u_outputs() {
      object.ReferenceEquals(global::maxtrack.pb.mxt1xx.Mxt1Xx.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mxt1xx_u_inputs : pb::GeneratedMessage<mxt1xx_u_inputs, mxt1xx_u_inputs.Builder> {
    private mxt1xx_u_inputs() { }
    private static readonly mxt1xx_u_inputs defaultInstance = new mxt1xx_u_inputs().MakeReadOnly();
    private static readonly string[] _mxt1XxUInputsFieldNames = new string[] { "ignition", "input_1", "input_2", "input_3", "input_4", "panic" };
    private static readonly uint[] _mxt1XxUInputsFieldTags = new uint[] { 8, 24, 32, 40, 48, 16 };
    public static mxt1xx_u_inputs DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mxt1xx_u_inputs DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mxt1xx_u_inputs ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_inputs__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mxt1xx_u_inputs, mxt1xx_u_inputs.Builder> InternalFieldAccessors {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_inputs__FieldAccessorTable; }
    }
    
    public const int IgnitionFieldNumber = 1;
    private bool hasIgnition;
    private bool ignition_;
    public bool HasIgnition {
      get { return hasIgnition; }
    }
    public bool Ignition {
      get { return ignition_; }
    }
    
    public const int PanicFieldNumber = 2;
    private bool hasPanic;
    private bool panic_;
    public bool HasPanic {
      get { return hasPanic; }
    }
    public bool Panic {
      get { return panic_; }
    }
    
    public const int Input1FieldNumber = 3;
    private bool hasInput1;
    private bool input1_;
    public bool HasInput1 {
      get { return hasInput1; }
    }
    public bool Input1 {
      get { return input1_; }
    }
    
    public const int Input2FieldNumber = 4;
    private bool hasInput2;
    private bool input2_;
    public bool HasInput2 {
      get { return hasInput2; }
    }
    public bool Input2 {
      get { return input2_; }
    }
    
    public const int Input3FieldNumber = 5;
    private bool hasInput3;
    private int input3_;
    public bool HasInput3 {
      get { return hasInput3; }
    }
    public int Input3 {
      get { return input3_; }
    }
    
    public const int Input4FieldNumber = 6;
    private bool hasInput4;
    private bool input4_;
    public bool HasInput4 {
      get { return hasInput4; }
    }
    public bool Input4 {
      get { return input4_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIgnition) return false;
        if (!hasPanic) return false;
        if (!hasInput1) return false;
        if (!hasInput2) return false;
        if (!hasInput3) return false;
        if (!hasInput4) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mxt1XxUInputsFieldNames;
      if (hasIgnition) {
        output.WriteBool(1, field_names[0], Ignition);
      }
      if (hasPanic) {
        output.WriteBool(2, field_names[5], Panic);
      }
      if (hasInput1) {
        output.WriteBool(3, field_names[1], Input1);
      }
      if (hasInput2) {
        output.WriteBool(4, field_names[2], Input2);
      }
      if (hasInput3) {
        output.WriteSInt32(5, field_names[3], Input3);
      }
      if (hasInput4) {
        output.WriteBool(6, field_names[4], Input4);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIgnition) {
        size += pb::CodedOutputStream.ComputeBoolSize(1, Ignition);
      }
      if (hasPanic) {
        size += pb::CodedOutputStream.ComputeBoolSize(2, Panic);
      }
      if (hasInput1) {
        size += pb::CodedOutputStream.ComputeBoolSize(3, Input1);
      }
      if (hasInput2) {
        size += pb::CodedOutputStream.ComputeBoolSize(4, Input2);
      }
      if (hasInput3) {
        size += pb::CodedOutputStream.ComputeSInt32Size(5, Input3);
      }
      if (hasInput4) {
        size += pb::CodedOutputStream.ComputeBoolSize(6, Input4);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mxt1xx_u_inputs ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_inputs ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_inputs ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_inputs ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_inputs ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_inputs ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_inputs ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mxt1xx_u_inputs ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mxt1xx_u_inputs ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_inputs ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mxt1xx_u_inputs MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mxt1xx_u_inputs prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mxt1xx_u_inputs, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mxt1xx_u_inputs cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mxt1xx_u_inputs result;
      
      private mxt1xx_u_inputs PrepareBuilder() {
        if (resultIsReadOnly) {
          mxt1xx_u_inputs original = result;
          result = new mxt1xx_u_inputs();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mxt1xx_u_inputs MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_inputs.Descriptor; }
      }
      
      public override mxt1xx_u_inputs DefaultInstanceForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_inputs.DefaultInstance; }
      }
      
      public override mxt1xx_u_inputs BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mxt1xx_u_inputs) {
          return MergeFrom((mxt1xx_u_inputs) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mxt1xx_u_inputs other) {
        if (other == global::maxtrack.pb.mxt1xx.mxt1xx_u_inputs.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIgnition) {
          Ignition = other.Ignition;
        }
        if (other.HasPanic) {
          Panic = other.Panic;
        }
        if (other.HasInput1) {
          Input1 = other.Input1;
        }
        if (other.HasInput2) {
          Input2 = other.Input2;
        }
        if (other.HasInput3) {
          Input3 = other.Input3;
        }
        if (other.HasInput4) {
          Input4 = other.Input4;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mxt1XxUInputsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mxt1XxUInputsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIgnition = input.ReadBool(ref result.ignition_);
              break;
            }
            case 16: {
              result.hasPanic = input.ReadBool(ref result.panic_);
              break;
            }
            case 24: {
              result.hasInput1 = input.ReadBool(ref result.input1_);
              break;
            }
            case 32: {
              result.hasInput2 = input.ReadBool(ref result.input2_);
              break;
            }
            case 40: {
              result.hasInput3 = input.ReadSInt32(ref result.input3_);
              break;
            }
            case 48: {
              result.hasInput4 = input.ReadBool(ref result.input4_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIgnition {
        get { return result.hasIgnition; }
      }
      public bool Ignition {
        get { return result.Ignition; }
        set { SetIgnition(value); }
      }
      public Builder SetIgnition(bool value) {
        PrepareBuilder();
        result.hasIgnition = true;
        result.ignition_ = value;
        return this;
      }
      public Builder ClearIgnition() {
        PrepareBuilder();
        result.hasIgnition = false;
        result.ignition_ = false;
        return this;
      }
      
      public bool HasPanic {
        get { return result.hasPanic; }
      }
      public bool Panic {
        get { return result.Panic; }
        set { SetPanic(value); }
      }
      public Builder SetPanic(bool value) {
        PrepareBuilder();
        result.hasPanic = true;
        result.panic_ = value;
        return this;
      }
      public Builder ClearPanic() {
        PrepareBuilder();
        result.hasPanic = false;
        result.panic_ = false;
        return this;
      }
      
      public bool HasInput1 {
        get { return result.hasInput1; }
      }
      public bool Input1 {
        get { return result.Input1; }
        set { SetInput1(value); }
      }
      public Builder SetInput1(bool value) {
        PrepareBuilder();
        result.hasInput1 = true;
        result.input1_ = value;
        return this;
      }
      public Builder ClearInput1() {
        PrepareBuilder();
        result.hasInput1 = false;
        result.input1_ = false;
        return this;
      }
      
      public bool HasInput2 {
        get { return result.hasInput2; }
      }
      public bool Input2 {
        get { return result.Input2; }
        set { SetInput2(value); }
      }
      public Builder SetInput2(bool value) {
        PrepareBuilder();
        result.hasInput2 = true;
        result.input2_ = value;
        return this;
      }
      public Builder ClearInput2() {
        PrepareBuilder();
        result.hasInput2 = false;
        result.input2_ = false;
        return this;
      }
      
      public bool HasInput3 {
        get { return result.hasInput3; }
      }
      public int Input3 {
        get { return result.Input3; }
        set { SetInput3(value); }
      }
      public Builder SetInput3(int value) {
        PrepareBuilder();
        result.hasInput3 = true;
        result.input3_ = value;
        return this;
      }
      public Builder ClearInput3() {
        PrepareBuilder();
        result.hasInput3 = false;
        result.input3_ = 0;
        return this;
      }
      
      public bool HasInput4 {
        get { return result.hasInput4; }
      }
      public bool Input4 {
        get { return result.Input4; }
        set { SetInput4(value); }
      }
      public Builder SetInput4(bool value) {
        PrepareBuilder();
        result.hasInput4 = true;
        result.input4_ = value;
        return this;
      }
      public Builder ClearInput4() {
        PrepareBuilder();
        result.hasInput4 = false;
        result.input4_ = false;
        return this;
      }
    }
    static mxt1xx_u_inputs() {
      object.ReferenceEquals(global::maxtrack.pb.mxt1xx.Mxt1Xx.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mxt1xx_u_hardware_monitor_flag_state : pb::GeneratedMessage<mxt1xx_u_hardware_monitor_flag_state, mxt1xx_u_hardware_monitor_flag_state.Builder> {
    private mxt1xx_u_hardware_monitor_flag_state() { }
    private static readonly mxt1xx_u_hardware_monitor_flag_state defaultInstance = new mxt1xx_u_hardware_monitor_flag_state().MakeReadOnly();
    private static readonly string[] _mxt1XxUHardwareMonitorFlagStateFieldNames = new string[] { "accessory_missing", "anti_theft_status", "battery_charging", "battery_failure", "internal_alarm", "tampering_is_open" };
    private static readonly uint[] _mxt1XxUHardwareMonitorFlagStateFieldTags = new uint[] { 48, 40, 16, 24, 32, 8 };
    public static mxt1xx_u_hardware_monitor_flag_state DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mxt1xx_u_hardware_monitor_flag_state DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mxt1xx_u_hardware_monitor_flag_state ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_hardware_monitor_flag_state__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mxt1xx_u_hardware_monitor_flag_state, mxt1xx_u_hardware_monitor_flag_state.Builder> InternalFieldAccessors {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_hardware_monitor_flag_state__FieldAccessorTable; }
    }
    
    public const int TamperingIsOpenFieldNumber = 1;
    private bool hasTamperingIsOpen;
    private bool tamperingIsOpen_;
    public bool HasTamperingIsOpen {
      get { return hasTamperingIsOpen; }
    }
    public bool TamperingIsOpen {
      get { return tamperingIsOpen_; }
    }
    
    public const int BatteryChargingFieldNumber = 2;
    private bool hasBatteryCharging;
    private bool batteryCharging_;
    public bool HasBatteryCharging {
      get { return hasBatteryCharging; }
    }
    public bool BatteryCharging {
      get { return batteryCharging_; }
    }
    
    public const int BatteryFailureFieldNumber = 3;
    private bool hasBatteryFailure;
    private bool batteryFailure_;
    public bool HasBatteryFailure {
      get { return hasBatteryFailure; }
    }
    public bool BatteryFailure {
      get { return batteryFailure_; }
    }
    
    public const int InternalAlarmFieldNumber = 4;
    private bool hasInternalAlarm;
    private bool internalAlarm_;
    public bool HasInternalAlarm {
      get { return hasInternalAlarm; }
    }
    public bool InternalAlarm {
      get { return internalAlarm_; }
    }
    
    public const int AntiTheftStatusFieldNumber = 5;
    private bool hasAntiTheftStatus;
    private uint antiTheftStatus_;
    public bool HasAntiTheftStatus {
      get { return hasAntiTheftStatus; }
    }
    [global::System.CLSCompliant(false)]
    public uint AntiTheftStatus {
      get { return antiTheftStatus_; }
    }
    
    public const int AccessoryMissingFieldNumber = 6;
    private bool hasAccessoryMissing;
    private bool accessoryMissing_;
    public bool HasAccessoryMissing {
      get { return hasAccessoryMissing; }
    }
    public bool AccessoryMissing {
      get { return accessoryMissing_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTamperingIsOpen) return false;
        if (!hasBatteryCharging) return false;
        if (!hasBatteryFailure) return false;
        if (!hasInternalAlarm) return false;
        if (!hasAntiTheftStatus) return false;
        if (!hasAccessoryMissing) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mxt1XxUHardwareMonitorFlagStateFieldNames;
      if (hasTamperingIsOpen) {
        output.WriteBool(1, field_names[5], TamperingIsOpen);
      }
      if (hasBatteryCharging) {
        output.WriteBool(2, field_names[2], BatteryCharging);
      }
      if (hasBatteryFailure) {
        output.WriteBool(3, field_names[3], BatteryFailure);
      }
      if (hasInternalAlarm) {
        output.WriteBool(4, field_names[4], InternalAlarm);
      }
      if (hasAntiTheftStatus) {
        output.WriteUInt32(5, field_names[1], AntiTheftStatus);
      }
      if (hasAccessoryMissing) {
        output.WriteBool(6, field_names[0], AccessoryMissing);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasTamperingIsOpen) {
        size += pb::CodedOutputStream.ComputeBoolSize(1, TamperingIsOpen);
      }
      if (hasBatteryCharging) {
        size += pb::CodedOutputStream.ComputeBoolSize(2, BatteryCharging);
      }
      if (hasBatteryFailure) {
        size += pb::CodedOutputStream.ComputeBoolSize(3, BatteryFailure);
      }
      if (hasInternalAlarm) {
        size += pb::CodedOutputStream.ComputeBoolSize(4, InternalAlarm);
      }
      if (hasAntiTheftStatus) {
        size += pb::CodedOutputStream.ComputeUInt32Size(5, AntiTheftStatus);
      }
      if (hasAccessoryMissing) {
        size += pb::CodedOutputStream.ComputeBoolSize(6, AccessoryMissing);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mxt1xx_u_hardware_monitor_flag_state ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_hardware_monitor_flag_state ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_hardware_monitor_flag_state ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_hardware_monitor_flag_state ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_hardware_monitor_flag_state ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_hardware_monitor_flag_state ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_hardware_monitor_flag_state ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mxt1xx_u_hardware_monitor_flag_state ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mxt1xx_u_hardware_monitor_flag_state ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_hardware_monitor_flag_state ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mxt1xx_u_hardware_monitor_flag_state MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mxt1xx_u_hardware_monitor_flag_state prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mxt1xx_u_hardware_monitor_flag_state, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mxt1xx_u_hardware_monitor_flag_state cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mxt1xx_u_hardware_monitor_flag_state result;
      
      private mxt1xx_u_hardware_monitor_flag_state PrepareBuilder() {
        if (resultIsReadOnly) {
          mxt1xx_u_hardware_monitor_flag_state original = result;
          result = new mxt1xx_u_hardware_monitor_flag_state();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mxt1xx_u_hardware_monitor_flag_state MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_hardware_monitor_flag_state.Descriptor; }
      }
      
      public override mxt1xx_u_hardware_monitor_flag_state DefaultInstanceForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_hardware_monitor_flag_state.DefaultInstance; }
      }
      
      public override mxt1xx_u_hardware_monitor_flag_state BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mxt1xx_u_hardware_monitor_flag_state) {
          return MergeFrom((mxt1xx_u_hardware_monitor_flag_state) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mxt1xx_u_hardware_monitor_flag_state other) {
        if (other == global::maxtrack.pb.mxt1xx.mxt1xx_u_hardware_monitor_flag_state.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTamperingIsOpen) {
          TamperingIsOpen = other.TamperingIsOpen;
        }
        if (other.HasBatteryCharging) {
          BatteryCharging = other.BatteryCharging;
        }
        if (other.HasBatteryFailure) {
          BatteryFailure = other.BatteryFailure;
        }
        if (other.HasInternalAlarm) {
          InternalAlarm = other.InternalAlarm;
        }
        if (other.HasAntiTheftStatus) {
          AntiTheftStatus = other.AntiTheftStatus;
        }
        if (other.HasAccessoryMissing) {
          AccessoryMissing = other.AccessoryMissing;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mxt1XxUHardwareMonitorFlagStateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mxt1XxUHardwareMonitorFlagStateFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasTamperingIsOpen = input.ReadBool(ref result.tamperingIsOpen_);
              break;
            }
            case 16: {
              result.hasBatteryCharging = input.ReadBool(ref result.batteryCharging_);
              break;
            }
            case 24: {
              result.hasBatteryFailure = input.ReadBool(ref result.batteryFailure_);
              break;
            }
            case 32: {
              result.hasInternalAlarm = input.ReadBool(ref result.internalAlarm_);
              break;
            }
            case 40: {
              result.hasAntiTheftStatus = input.ReadUInt32(ref result.antiTheftStatus_);
              break;
            }
            case 48: {
              result.hasAccessoryMissing = input.ReadBool(ref result.accessoryMissing_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTamperingIsOpen {
        get { return result.hasTamperingIsOpen; }
      }
      public bool TamperingIsOpen {
        get { return result.TamperingIsOpen; }
        set { SetTamperingIsOpen(value); }
      }
      public Builder SetTamperingIsOpen(bool value) {
        PrepareBuilder();
        result.hasTamperingIsOpen = true;
        result.tamperingIsOpen_ = value;
        return this;
      }
      public Builder ClearTamperingIsOpen() {
        PrepareBuilder();
        result.hasTamperingIsOpen = false;
        result.tamperingIsOpen_ = false;
        return this;
      }
      
      public bool HasBatteryCharging {
        get { return result.hasBatteryCharging; }
      }
      public bool BatteryCharging {
        get { return result.BatteryCharging; }
        set { SetBatteryCharging(value); }
      }
      public Builder SetBatteryCharging(bool value) {
        PrepareBuilder();
        result.hasBatteryCharging = true;
        result.batteryCharging_ = value;
        return this;
      }
      public Builder ClearBatteryCharging() {
        PrepareBuilder();
        result.hasBatteryCharging = false;
        result.batteryCharging_ = false;
        return this;
      }
      
      public bool HasBatteryFailure {
        get { return result.hasBatteryFailure; }
      }
      public bool BatteryFailure {
        get { return result.BatteryFailure; }
        set { SetBatteryFailure(value); }
      }
      public Builder SetBatteryFailure(bool value) {
        PrepareBuilder();
        result.hasBatteryFailure = true;
        result.batteryFailure_ = value;
        return this;
      }
      public Builder ClearBatteryFailure() {
        PrepareBuilder();
        result.hasBatteryFailure = false;
        result.batteryFailure_ = false;
        return this;
      }
      
      public bool HasInternalAlarm {
        get { return result.hasInternalAlarm; }
      }
      public bool InternalAlarm {
        get { return result.InternalAlarm; }
        set { SetInternalAlarm(value); }
      }
      public Builder SetInternalAlarm(bool value) {
        PrepareBuilder();
        result.hasInternalAlarm = true;
        result.internalAlarm_ = value;
        return this;
      }
      public Builder ClearInternalAlarm() {
        PrepareBuilder();
        result.hasInternalAlarm = false;
        result.internalAlarm_ = false;
        return this;
      }
      
      public bool HasAntiTheftStatus {
        get { return result.hasAntiTheftStatus; }
      }
      [global::System.CLSCompliant(false)]
      public uint AntiTheftStatus {
        get { return result.AntiTheftStatus; }
        set { SetAntiTheftStatus(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetAntiTheftStatus(uint value) {
        PrepareBuilder();
        result.hasAntiTheftStatus = true;
        result.antiTheftStatus_ = value;
        return this;
      }
      public Builder ClearAntiTheftStatus() {
        PrepareBuilder();
        result.hasAntiTheftStatus = false;
        result.antiTheftStatus_ = 0;
        return this;
      }
      
      public bool HasAccessoryMissing {
        get { return result.hasAccessoryMissing; }
      }
      public bool AccessoryMissing {
        get { return result.AccessoryMissing; }
        set { SetAccessoryMissing(value); }
      }
      public Builder SetAccessoryMissing(bool value) {
        PrepareBuilder();
        result.hasAccessoryMissing = true;
        result.accessoryMissing_ = value;
        return this;
      }
      public Builder ClearAccessoryMissing() {
        PrepareBuilder();
        result.hasAccessoryMissing = false;
        result.accessoryMissing_ = false;
        return this;
      }
    }
    static mxt1xx_u_hardware_monitor_flag_state() {
      object.ReferenceEquals(global::maxtrack.pb.mxt1xx.Mxt1Xx.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mxt1xx_u_hardware_monitor : pb::GeneratedMessage<mxt1xx_u_hardware_monitor, mxt1xx_u_hardware_monitor.Builder> {
    private mxt1xx_u_hardware_monitor() { }
    private static readonly mxt1xx_u_hardware_monitor defaultInstance = new mxt1xx_u_hardware_monitor().MakeReadOnly();
    private static readonly string[] _mxt1XxUHardwareMonitorFieldNames = new string[] { "accessory_count", "ad4", "battery_used", "detailed_supply", "flag_state", "hourmeter", "hourmeter_min", "inputs", "outputs", "power_supply", "rpm", "secure_input_state", "temperature" };
    private static readonly uint[] _mxt1XxUHardwareMonitorFieldTags = new uint[] { 32, 97, 80, 73, 42, 88, 104, 10, 18, 65, 48, 26, 57 };
    public static mxt1xx_u_hardware_monitor DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mxt1xx_u_hardware_monitor DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mxt1xx_u_hardware_monitor ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_hardware_monitor__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mxt1xx_u_hardware_monitor, mxt1xx_u_hardware_monitor.Builder> InternalFieldAccessors {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_hardware_monitor__FieldAccessorTable; }
    }
    
    public const int InputsFieldNumber = 1;
    private bool hasInputs;
    private global::maxtrack.pb.mxt1xx.mxt1xx_u_inputs inputs_;
    public bool HasInputs {
      get { return hasInputs; }
    }
    public global::maxtrack.pb.mxt1xx.mxt1xx_u_inputs Inputs {
      get { return inputs_ ?? global::maxtrack.pb.mxt1xx.mxt1xx_u_inputs.DefaultInstance; }
    }
    
    public const int OutputsFieldNumber = 2;
    private bool hasOutputs;
    private global::maxtrack.pb.mxt1xx.mxt1xx_u_outputs outputs_;
    public bool HasOutputs {
      get { return hasOutputs; }
    }
    public global::maxtrack.pb.mxt1xx.mxt1xx_u_outputs Outputs {
      get { return outputs_ ?? global::maxtrack.pb.mxt1xx.mxt1xx_u_outputs.DefaultInstance; }
    }
    
    public const int SecureInputStateFieldNumber = 3;
    private bool hasSecureInputState;
    private global::maxtrack.pb.mxt1xx.mxt1xx_u_inputs secureInputState_;
    public bool HasSecureInputState {
      get { return hasSecureInputState; }
    }
    public global::maxtrack.pb.mxt1xx.mxt1xx_u_inputs SecureInputState {
      get { return secureInputState_ ?? global::maxtrack.pb.mxt1xx.mxt1xx_u_inputs.DefaultInstance; }
    }
    
    public const int AccessoryCountFieldNumber = 4;
    private bool hasAccessoryCount;
    private uint accessoryCount_;
    public bool HasAccessoryCount {
      get { return hasAccessoryCount; }
    }
    [global::System.CLSCompliant(false)]
    public uint AccessoryCount {
      get { return accessoryCount_; }
    }
    
    public const int FlagStateFieldNumber = 5;
    private bool hasFlagState;
    private global::maxtrack.pb.mxt1xx.mxt1xx_u_hardware_monitor_flag_state flagState_;
    public bool HasFlagState {
      get { return hasFlagState; }
    }
    public global::maxtrack.pb.mxt1xx.mxt1xx_u_hardware_monitor_flag_state FlagState {
      get { return flagState_ ?? global::maxtrack.pb.mxt1xx.mxt1xx_u_hardware_monitor_flag_state.DefaultInstance; }
    }
    
    public const int RpmFieldNumber = 6;
    private bool hasRpm;
    private uint rpm_;
    public bool HasRpm {
      get { return hasRpm; }
    }
    [global::System.CLSCompliant(false)]
    public uint Rpm {
      get { return rpm_; }
    }
    
    public const int TemperatureFieldNumber = 7;
    private bool hasTemperature;
    private double temperature_;
    public bool HasTemperature {
      get { return hasTemperature; }
    }
    public double Temperature {
      get { return temperature_; }
    }
    
    public const int PowerSupplyFieldNumber = 8;
    private bool hasPowerSupply;
    private double powerSupply_;
    public bool HasPowerSupply {
      get { return hasPowerSupply; }
    }
    public double PowerSupply {
      get { return powerSupply_; }
    }
    
    public const int DetailedSupplyFieldNumber = 9;
    private bool hasDetailedSupply;
    private double detailedSupply_;
    public bool HasDetailedSupply {
      get { return hasDetailedSupply; }
    }
    public double DetailedSupply {
      get { return detailedSupply_; }
    }
    
    public const int BatteryUsedFieldNumber = 10;
    private bool hasBatteryUsed;
    private uint batteryUsed_;
    public bool HasBatteryUsed {
      get { return hasBatteryUsed; }
    }
    [global::System.CLSCompliant(false)]
    public uint BatteryUsed {
      get { return batteryUsed_; }
    }
    
    public const int HourmeterFieldNumber = 11;
    private bool hasHourmeter;
    private uint hourmeter_;
    public bool HasHourmeter {
      get { return hasHourmeter; }
    }
    [global::System.CLSCompliant(false)]
    public uint Hourmeter {
      get { return hourmeter_; }
    }
    
    public const int Ad4FieldNumber = 12;
    private bool hasAd4;
    private double ad4_;
    public bool HasAd4 {
      get { return hasAd4; }
    }
    public double Ad4 {
      get { return ad4_; }
    }
    
    public const int HourmeterMinFieldNumber = 13;
    private bool hasHourmeterMin;
    private uint hourmeterMin_;
    public bool HasHourmeterMin {
      get { return hasHourmeterMin; }
    }
    [global::System.CLSCompliant(false)]
    public uint HourmeterMin {
      get { return hourmeterMin_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasInputs) return false;
        if (!hasOutputs) return false;
        if (!hasSecureInputState) return false;
        if (!hasAccessoryCount) return false;
        if (!hasFlagState) return false;
        if (!Inputs.IsInitialized) return false;
        if (!Outputs.IsInitialized) return false;
        if (!SecureInputState.IsInitialized) return false;
        if (!FlagState.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mxt1XxUHardwareMonitorFieldNames;
      if (hasInputs) {
        output.WriteMessage(1, field_names[7], Inputs);
      }
      if (hasOutputs) {
        output.WriteMessage(2, field_names[8], Outputs);
      }
      if (hasSecureInputState) {
        output.WriteMessage(3, field_names[11], SecureInputState);
      }
      if (hasAccessoryCount) {
        output.WriteUInt32(4, field_names[0], AccessoryCount);
      }
      if (hasFlagState) {
        output.WriteMessage(5, field_names[4], FlagState);
      }
      if (hasRpm) {
        output.WriteUInt32(6, field_names[10], Rpm);
      }
      if (hasTemperature) {
        output.WriteDouble(7, field_names[12], Temperature);
      }
      if (hasPowerSupply) {
        output.WriteDouble(8, field_names[9], PowerSupply);
      }
      if (hasDetailedSupply) {
        output.WriteDouble(9, field_names[3], DetailedSupply);
      }
      if (hasBatteryUsed) {
        output.WriteUInt32(10, field_names[2], BatteryUsed);
      }
      if (hasHourmeter) {
        output.WriteUInt32(11, field_names[5], Hourmeter);
      }
      if (hasAd4) {
        output.WriteDouble(12, field_names[1], Ad4);
      }
      if (hasHourmeterMin) {
        output.WriteUInt32(13, field_names[6], HourmeterMin);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasInputs) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, Inputs);
      }
      if (hasOutputs) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, Outputs);
      }
      if (hasSecureInputState) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, SecureInputState);
      }
      if (hasAccessoryCount) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, AccessoryCount);
      }
      if (hasFlagState) {
        size += pb::CodedOutputStream.ComputeMessageSize(5, FlagState);
      }
      if (hasRpm) {
        size += pb::CodedOutputStream.ComputeUInt32Size(6, Rpm);
      }
      if (hasTemperature) {
        size += pb::CodedOutputStream.ComputeDoubleSize(7, Temperature);
      }
      if (hasPowerSupply) {
        size += pb::CodedOutputStream.ComputeDoubleSize(8, PowerSupply);
      }
      if (hasDetailedSupply) {
        size += pb::CodedOutputStream.ComputeDoubleSize(9, DetailedSupply);
      }
      if (hasBatteryUsed) {
        size += pb::CodedOutputStream.ComputeUInt32Size(10, BatteryUsed);
      }
      if (hasHourmeter) {
        size += pb::CodedOutputStream.ComputeUInt32Size(11, Hourmeter);
      }
      if (hasAd4) {
        size += pb::CodedOutputStream.ComputeDoubleSize(12, Ad4);
      }
      if (hasHourmeterMin) {
        size += pb::CodedOutputStream.ComputeUInt32Size(13, HourmeterMin);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mxt1xx_u_hardware_monitor ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_hardware_monitor ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_hardware_monitor ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_hardware_monitor ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_hardware_monitor ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_hardware_monitor ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_hardware_monitor ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mxt1xx_u_hardware_monitor ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mxt1xx_u_hardware_monitor ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_hardware_monitor ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mxt1xx_u_hardware_monitor MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mxt1xx_u_hardware_monitor prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mxt1xx_u_hardware_monitor, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mxt1xx_u_hardware_monitor cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mxt1xx_u_hardware_monitor result;
      
      private mxt1xx_u_hardware_monitor PrepareBuilder() {
        if (resultIsReadOnly) {
          mxt1xx_u_hardware_monitor original = result;
          result = new mxt1xx_u_hardware_monitor();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mxt1xx_u_hardware_monitor MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_hardware_monitor.Descriptor; }
      }
      
      public override mxt1xx_u_hardware_monitor DefaultInstanceForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_hardware_monitor.DefaultInstance; }
      }
      
      public override mxt1xx_u_hardware_monitor BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mxt1xx_u_hardware_monitor) {
          return MergeFrom((mxt1xx_u_hardware_monitor) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mxt1xx_u_hardware_monitor other) {
        if (other == global::maxtrack.pb.mxt1xx.mxt1xx_u_hardware_monitor.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasInputs) {
          MergeInputs(other.Inputs);
        }
        if (other.HasOutputs) {
          MergeOutputs(other.Outputs);
        }
        if (other.HasSecureInputState) {
          MergeSecureInputState(other.SecureInputState);
        }
        if (other.HasAccessoryCount) {
          AccessoryCount = other.AccessoryCount;
        }
        if (other.HasFlagState) {
          MergeFlagState(other.FlagState);
        }
        if (other.HasRpm) {
          Rpm = other.Rpm;
        }
        if (other.HasTemperature) {
          Temperature = other.Temperature;
        }
        if (other.HasPowerSupply) {
          PowerSupply = other.PowerSupply;
        }
        if (other.HasDetailedSupply) {
          DetailedSupply = other.DetailedSupply;
        }
        if (other.HasBatteryUsed) {
          BatteryUsed = other.BatteryUsed;
        }
        if (other.HasHourmeter) {
          Hourmeter = other.Hourmeter;
        }
        if (other.HasAd4) {
          Ad4 = other.Ad4;
        }
        if (other.HasHourmeterMin) {
          HourmeterMin = other.HourmeterMin;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mxt1XxUHardwareMonitorFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mxt1XxUHardwareMonitorFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::maxtrack.pb.mxt1xx.mxt1xx_u_inputs.Builder subBuilder = global::maxtrack.pb.mxt1xx.mxt1xx_u_inputs.CreateBuilder();
              if (result.hasInputs) {
                subBuilder.MergeFrom(Inputs);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Inputs = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::maxtrack.pb.mxt1xx.mxt1xx_u_outputs.Builder subBuilder = global::maxtrack.pb.mxt1xx.mxt1xx_u_outputs.CreateBuilder();
              if (result.hasOutputs) {
                subBuilder.MergeFrom(Outputs);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Outputs = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::maxtrack.pb.mxt1xx.mxt1xx_u_inputs.Builder subBuilder = global::maxtrack.pb.mxt1xx.mxt1xx_u_inputs.CreateBuilder();
              if (result.hasSecureInputState) {
                subBuilder.MergeFrom(SecureInputState);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SecureInputState = subBuilder.BuildPartial();
              break;
            }
            case 32: {
              result.hasAccessoryCount = input.ReadUInt32(ref result.accessoryCount_);
              break;
            }
            case 42: {
              global::maxtrack.pb.mxt1xx.mxt1xx_u_hardware_monitor_flag_state.Builder subBuilder = global::maxtrack.pb.mxt1xx.mxt1xx_u_hardware_monitor_flag_state.CreateBuilder();
              if (result.hasFlagState) {
                subBuilder.MergeFrom(FlagState);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              FlagState = subBuilder.BuildPartial();
              break;
            }
            case 48: {
              result.hasRpm = input.ReadUInt32(ref result.rpm_);
              break;
            }
            case 57: {
              result.hasTemperature = input.ReadDouble(ref result.temperature_);
              break;
            }
            case 65: {
              result.hasPowerSupply = input.ReadDouble(ref result.powerSupply_);
              break;
            }
            case 73: {
              result.hasDetailedSupply = input.ReadDouble(ref result.detailedSupply_);
              break;
            }
            case 80: {
              result.hasBatteryUsed = input.ReadUInt32(ref result.batteryUsed_);
              break;
            }
            case 88: {
              result.hasHourmeter = input.ReadUInt32(ref result.hourmeter_);
              break;
            }
            case 97: {
              result.hasAd4 = input.ReadDouble(ref result.ad4_);
              break;
            }
            case 104: {
              result.hasHourmeterMin = input.ReadUInt32(ref result.hourmeterMin_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasInputs {
       get { return result.hasInputs; }
      }
      public global::maxtrack.pb.mxt1xx.mxt1xx_u_inputs Inputs {
        get { return result.Inputs; }
        set { SetInputs(value); }
      }
      public Builder SetInputs(global::maxtrack.pb.mxt1xx.mxt1xx_u_inputs value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasInputs = true;
        result.inputs_ = value;
        return this;
      }
      public Builder SetInputs(global::maxtrack.pb.mxt1xx.mxt1xx_u_inputs.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasInputs = true;
        result.inputs_ = builderForValue.Build();
        return this;
      }
      public Builder MergeInputs(global::maxtrack.pb.mxt1xx.mxt1xx_u_inputs value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasInputs &&
            result.inputs_ != global::maxtrack.pb.mxt1xx.mxt1xx_u_inputs.DefaultInstance) {
            result.inputs_ = global::maxtrack.pb.mxt1xx.mxt1xx_u_inputs.CreateBuilder(result.inputs_).MergeFrom(value).BuildPartial();
        } else {
          result.inputs_ = value;
        }
        result.hasInputs = true;
        return this;
      }
      public Builder ClearInputs() {
        PrepareBuilder();
        result.hasInputs = false;
        result.inputs_ = null;
        return this;
      }
      
      public bool HasOutputs {
       get { return result.hasOutputs; }
      }
      public global::maxtrack.pb.mxt1xx.mxt1xx_u_outputs Outputs {
        get { return result.Outputs; }
        set { SetOutputs(value); }
      }
      public Builder SetOutputs(global::maxtrack.pb.mxt1xx.mxt1xx_u_outputs value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOutputs = true;
        result.outputs_ = value;
        return this;
      }
      public Builder SetOutputs(global::maxtrack.pb.mxt1xx.mxt1xx_u_outputs.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasOutputs = true;
        result.outputs_ = builderForValue.Build();
        return this;
      }
      public Builder MergeOutputs(global::maxtrack.pb.mxt1xx.mxt1xx_u_outputs value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasOutputs &&
            result.outputs_ != global::maxtrack.pb.mxt1xx.mxt1xx_u_outputs.DefaultInstance) {
            result.outputs_ = global::maxtrack.pb.mxt1xx.mxt1xx_u_outputs.CreateBuilder(result.outputs_).MergeFrom(value).BuildPartial();
        } else {
          result.outputs_ = value;
        }
        result.hasOutputs = true;
        return this;
      }
      public Builder ClearOutputs() {
        PrepareBuilder();
        result.hasOutputs = false;
        result.outputs_ = null;
        return this;
      }
      
      public bool HasSecureInputState {
       get { return result.hasSecureInputState; }
      }
      public global::maxtrack.pb.mxt1xx.mxt1xx_u_inputs SecureInputState {
        get { return result.SecureInputState; }
        set { SetSecureInputState(value); }
      }
      public Builder SetSecureInputState(global::maxtrack.pb.mxt1xx.mxt1xx_u_inputs value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSecureInputState = true;
        result.secureInputState_ = value;
        return this;
      }
      public Builder SetSecureInputState(global::maxtrack.pb.mxt1xx.mxt1xx_u_inputs.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSecureInputState = true;
        result.secureInputState_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSecureInputState(global::maxtrack.pb.mxt1xx.mxt1xx_u_inputs value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSecureInputState &&
            result.secureInputState_ != global::maxtrack.pb.mxt1xx.mxt1xx_u_inputs.DefaultInstance) {
            result.secureInputState_ = global::maxtrack.pb.mxt1xx.mxt1xx_u_inputs.CreateBuilder(result.secureInputState_).MergeFrom(value).BuildPartial();
        } else {
          result.secureInputState_ = value;
        }
        result.hasSecureInputState = true;
        return this;
      }
      public Builder ClearSecureInputState() {
        PrepareBuilder();
        result.hasSecureInputState = false;
        result.secureInputState_ = null;
        return this;
      }
      
      public bool HasAccessoryCount {
        get { return result.hasAccessoryCount; }
      }
      [global::System.CLSCompliant(false)]
      public uint AccessoryCount {
        get { return result.AccessoryCount; }
        set { SetAccessoryCount(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetAccessoryCount(uint value) {
        PrepareBuilder();
        result.hasAccessoryCount = true;
        result.accessoryCount_ = value;
        return this;
      }
      public Builder ClearAccessoryCount() {
        PrepareBuilder();
        result.hasAccessoryCount = false;
        result.accessoryCount_ = 0;
        return this;
      }
      
      public bool HasFlagState {
       get { return result.hasFlagState; }
      }
      public global::maxtrack.pb.mxt1xx.mxt1xx_u_hardware_monitor_flag_state FlagState {
        get { return result.FlagState; }
        set { SetFlagState(value); }
      }
      public Builder SetFlagState(global::maxtrack.pb.mxt1xx.mxt1xx_u_hardware_monitor_flag_state value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFlagState = true;
        result.flagState_ = value;
        return this;
      }
      public Builder SetFlagState(global::maxtrack.pb.mxt1xx.mxt1xx_u_hardware_monitor_flag_state.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasFlagState = true;
        result.flagState_ = builderForValue.Build();
        return this;
      }
      public Builder MergeFlagState(global::maxtrack.pb.mxt1xx.mxt1xx_u_hardware_monitor_flag_state value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasFlagState &&
            result.flagState_ != global::maxtrack.pb.mxt1xx.mxt1xx_u_hardware_monitor_flag_state.DefaultInstance) {
            result.flagState_ = global::maxtrack.pb.mxt1xx.mxt1xx_u_hardware_monitor_flag_state.CreateBuilder(result.flagState_).MergeFrom(value).BuildPartial();
        } else {
          result.flagState_ = value;
        }
        result.hasFlagState = true;
        return this;
      }
      public Builder ClearFlagState() {
        PrepareBuilder();
        result.hasFlagState = false;
        result.flagState_ = null;
        return this;
      }
      
      public bool HasRpm {
        get { return result.hasRpm; }
      }
      [global::System.CLSCompliant(false)]
      public uint Rpm {
        get { return result.Rpm; }
        set { SetRpm(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetRpm(uint value) {
        PrepareBuilder();
        result.hasRpm = true;
        result.rpm_ = value;
        return this;
      }
      public Builder ClearRpm() {
        PrepareBuilder();
        result.hasRpm = false;
        result.rpm_ = 0;
        return this;
      }
      
      public bool HasTemperature {
        get { return result.hasTemperature; }
      }
      public double Temperature {
        get { return result.Temperature; }
        set { SetTemperature(value); }
      }
      public Builder SetTemperature(double value) {
        PrepareBuilder();
        result.hasTemperature = true;
        result.temperature_ = value;
        return this;
      }
      public Builder ClearTemperature() {
        PrepareBuilder();
        result.hasTemperature = false;
        result.temperature_ = 0D;
        return this;
      }
      
      public bool HasPowerSupply {
        get { return result.hasPowerSupply; }
      }
      public double PowerSupply {
        get { return result.PowerSupply; }
        set { SetPowerSupply(value); }
      }
      public Builder SetPowerSupply(double value) {
        PrepareBuilder();
        result.hasPowerSupply = true;
        result.powerSupply_ = value;
        return this;
      }
      public Builder ClearPowerSupply() {
        PrepareBuilder();
        result.hasPowerSupply = false;
        result.powerSupply_ = 0D;
        return this;
      }
      
      public bool HasDetailedSupply {
        get { return result.hasDetailedSupply; }
      }
      public double DetailedSupply {
        get { return result.DetailedSupply; }
        set { SetDetailedSupply(value); }
      }
      public Builder SetDetailedSupply(double value) {
        PrepareBuilder();
        result.hasDetailedSupply = true;
        result.detailedSupply_ = value;
        return this;
      }
      public Builder ClearDetailedSupply() {
        PrepareBuilder();
        result.hasDetailedSupply = false;
        result.detailedSupply_ = 0D;
        return this;
      }
      
      public bool HasBatteryUsed {
        get { return result.hasBatteryUsed; }
      }
      [global::System.CLSCompliant(false)]
      public uint BatteryUsed {
        get { return result.BatteryUsed; }
        set { SetBatteryUsed(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetBatteryUsed(uint value) {
        PrepareBuilder();
        result.hasBatteryUsed = true;
        result.batteryUsed_ = value;
        return this;
      }
      public Builder ClearBatteryUsed() {
        PrepareBuilder();
        result.hasBatteryUsed = false;
        result.batteryUsed_ = 0;
        return this;
      }
      
      public bool HasHourmeter {
        get { return result.hasHourmeter; }
      }
      [global::System.CLSCompliant(false)]
      public uint Hourmeter {
        get { return result.Hourmeter; }
        set { SetHourmeter(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetHourmeter(uint value) {
        PrepareBuilder();
        result.hasHourmeter = true;
        result.hourmeter_ = value;
        return this;
      }
      public Builder ClearHourmeter() {
        PrepareBuilder();
        result.hasHourmeter = false;
        result.hourmeter_ = 0;
        return this;
      }
      
      public bool HasAd4 {
        get { return result.hasAd4; }
      }
      public double Ad4 {
        get { return result.Ad4; }
        set { SetAd4(value); }
      }
      public Builder SetAd4(double value) {
        PrepareBuilder();
        result.hasAd4 = true;
        result.ad4_ = value;
        return this;
      }
      public Builder ClearAd4() {
        PrepareBuilder();
        result.hasAd4 = false;
        result.ad4_ = 0D;
        return this;
      }
      
      public bool HasHourmeterMin {
        get { return result.hasHourmeterMin; }
      }
      [global::System.CLSCompliant(false)]
      public uint HourmeterMin {
        get { return result.HourmeterMin; }
        set { SetHourmeterMin(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetHourmeterMin(uint value) {
        PrepareBuilder();
        result.hasHourmeterMin = true;
        result.hourmeterMin_ = value;
        return this;
      }
      public Builder ClearHourmeterMin() {
        PrepareBuilder();
        result.hasHourmeterMin = false;
        result.hourmeterMin_ = 0;
        return this;
      }
    }
    static mxt1xx_u_hardware_monitor() {
      object.ReferenceEquals(global::maxtrack.pb.mxt1xx.Mxt1Xx.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mxt1xx_u_embedded_flag_state : pb::GeneratedMessage<mxt1xx_u_embedded_flag_state, mxt1xx_u_embedded_flag_state.Builder> {
    private mxt1xx_u_embedded_flag_state() { }
    private static readonly mxt1xx_u_embedded_flag_state defaultInstance = new mxt1xx_u_embedded_flag_state().MakeReadOnly();
    private static readonly string[] _mxt1XxUEmbeddedFlagStateFieldNames = new string[] { "point_analise", "point_in", "point_out" };
    private static readonly uint[] _mxt1XxUEmbeddedFlagStateFieldTags = new uint[] { 8, 16, 24 };
    public static mxt1xx_u_embedded_flag_state DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mxt1xx_u_embedded_flag_state DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mxt1xx_u_embedded_flag_state ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_embedded_flag_state__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mxt1xx_u_embedded_flag_state, mxt1xx_u_embedded_flag_state.Builder> InternalFieldAccessors {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_embedded_flag_state__FieldAccessorTable; }
    }
    
    public const int PointAnaliseFieldNumber = 1;
    private bool hasPointAnalise;
    private bool pointAnalise_;
    public bool HasPointAnalise {
      get { return hasPointAnalise; }
    }
    public bool PointAnalise {
      get { return pointAnalise_; }
    }
    
    public const int PointInFieldNumber = 2;
    private bool hasPointIn;
    private bool pointIn_;
    public bool HasPointIn {
      get { return hasPointIn; }
    }
    public bool PointIn {
      get { return pointIn_; }
    }
    
    public const int PointOutFieldNumber = 3;
    private bool hasPointOut;
    private bool pointOut_;
    public bool HasPointOut {
      get { return hasPointOut; }
    }
    public bool PointOut {
      get { return pointOut_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPointAnalise) return false;
        if (!hasPointIn) return false;
        if (!hasPointOut) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mxt1XxUEmbeddedFlagStateFieldNames;
      if (hasPointAnalise) {
        output.WriteBool(1, field_names[0], PointAnalise);
      }
      if (hasPointIn) {
        output.WriteBool(2, field_names[1], PointIn);
      }
      if (hasPointOut) {
        output.WriteBool(3, field_names[2], PointOut);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasPointAnalise) {
        size += pb::CodedOutputStream.ComputeBoolSize(1, PointAnalise);
      }
      if (hasPointIn) {
        size += pb::CodedOutputStream.ComputeBoolSize(2, PointIn);
      }
      if (hasPointOut) {
        size += pb::CodedOutputStream.ComputeBoolSize(3, PointOut);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mxt1xx_u_embedded_flag_state ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_embedded_flag_state ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_embedded_flag_state ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_embedded_flag_state ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_embedded_flag_state ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_embedded_flag_state ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_embedded_flag_state ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mxt1xx_u_embedded_flag_state ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mxt1xx_u_embedded_flag_state ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_embedded_flag_state ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mxt1xx_u_embedded_flag_state MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mxt1xx_u_embedded_flag_state prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mxt1xx_u_embedded_flag_state, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mxt1xx_u_embedded_flag_state cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mxt1xx_u_embedded_flag_state result;
      
      private mxt1xx_u_embedded_flag_state PrepareBuilder() {
        if (resultIsReadOnly) {
          mxt1xx_u_embedded_flag_state original = result;
          result = new mxt1xx_u_embedded_flag_state();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mxt1xx_u_embedded_flag_state MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_embedded_flag_state.Descriptor; }
      }
      
      public override mxt1xx_u_embedded_flag_state DefaultInstanceForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_embedded_flag_state.DefaultInstance; }
      }
      
      public override mxt1xx_u_embedded_flag_state BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mxt1xx_u_embedded_flag_state) {
          return MergeFrom((mxt1xx_u_embedded_flag_state) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mxt1xx_u_embedded_flag_state other) {
        if (other == global::maxtrack.pb.mxt1xx.mxt1xx_u_embedded_flag_state.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPointAnalise) {
          PointAnalise = other.PointAnalise;
        }
        if (other.HasPointIn) {
          PointIn = other.PointIn;
        }
        if (other.HasPointOut) {
          PointOut = other.PointOut;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mxt1XxUEmbeddedFlagStateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mxt1XxUEmbeddedFlagStateFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasPointAnalise = input.ReadBool(ref result.pointAnalise_);
              break;
            }
            case 16: {
              result.hasPointIn = input.ReadBool(ref result.pointIn_);
              break;
            }
            case 24: {
              result.hasPointOut = input.ReadBool(ref result.pointOut_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPointAnalise {
        get { return result.hasPointAnalise; }
      }
      public bool PointAnalise {
        get { return result.PointAnalise; }
        set { SetPointAnalise(value); }
      }
      public Builder SetPointAnalise(bool value) {
        PrepareBuilder();
        result.hasPointAnalise = true;
        result.pointAnalise_ = value;
        return this;
      }
      public Builder ClearPointAnalise() {
        PrepareBuilder();
        result.hasPointAnalise = false;
        result.pointAnalise_ = false;
        return this;
      }
      
      public bool HasPointIn {
        get { return result.hasPointIn; }
      }
      public bool PointIn {
        get { return result.PointIn; }
        set { SetPointIn(value); }
      }
      public Builder SetPointIn(bool value) {
        PrepareBuilder();
        result.hasPointIn = true;
        result.pointIn_ = value;
        return this;
      }
      public Builder ClearPointIn() {
        PrepareBuilder();
        result.hasPointIn = false;
        result.pointIn_ = false;
        return this;
      }
      
      public bool HasPointOut {
        get { return result.hasPointOut; }
      }
      public bool PointOut {
        get { return result.PointOut; }
        set { SetPointOut(value); }
      }
      public Builder SetPointOut(bool value) {
        PrepareBuilder();
        result.hasPointOut = true;
        result.pointOut_ = value;
        return this;
      }
      public Builder ClearPointOut() {
        PrepareBuilder();
        result.hasPointOut = false;
        result.pointOut_ = false;
        return this;
      }
    }
    static mxt1xx_u_embedded_flag_state() {
      object.ReferenceEquals(global::maxtrack.pb.mxt1xx.Mxt1Xx.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mxt1xx_u_embedded : pb::GeneratedMessage<mxt1xx_u_embedded, mxt1xx_u_embedded.Builder> {
    private mxt1xx_u_embedded() { }
    private static readonly mxt1xx_u_embedded defaultInstance = new mxt1xx_u_embedded().MakeReadOnly();
    private static readonly string[] _mxt1XxUEmbeddedFieldNames = new string[] { "driver_id", "flag_state", "point_id", "route_id" };
    private static readonly uint[] _mxt1XxUEmbeddedFieldTags = new uint[] { 8, 34, 16, 24 };
    public static mxt1xx_u_embedded DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mxt1xx_u_embedded DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mxt1xx_u_embedded ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_embedded__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mxt1xx_u_embedded, mxt1xx_u_embedded.Builder> InternalFieldAccessors {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_embedded__FieldAccessorTable; }
    }
    
    public const int DriverIdFieldNumber = 1;
    private bool hasDriverId;
    private uint driverId_;
    public bool HasDriverId {
      get { return hasDriverId; }
    }
    [global::System.CLSCompliant(false)]
    public uint DriverId {
      get { return driverId_; }
    }
    
    public const int PointIdFieldNumber = 2;
    private bool hasPointId;
    private uint pointId_;
    public bool HasPointId {
      get { return hasPointId; }
    }
    [global::System.CLSCompliant(false)]
    public uint PointId {
      get { return pointId_; }
    }
    
    public const int RouteIdFieldNumber = 3;
    private bool hasRouteId;
    private uint routeId_;
    public bool HasRouteId {
      get { return hasRouteId; }
    }
    [global::System.CLSCompliant(false)]
    public uint RouteId {
      get { return routeId_; }
    }
    
    public const int FlagStateFieldNumber = 4;
    private bool hasFlagState;
    private global::maxtrack.pb.mxt1xx.mxt1xx_u_embedded_flag_state flagState_;
    public bool HasFlagState {
      get { return hasFlagState; }
    }
    public global::maxtrack.pb.mxt1xx.mxt1xx_u_embedded_flag_state FlagState {
      get { return flagState_ ?? global::maxtrack.pb.mxt1xx.mxt1xx_u_embedded_flag_state.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasFlagState) return false;
        if (!FlagState.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mxt1XxUEmbeddedFieldNames;
      if (hasDriverId) {
        output.WriteUInt32(1, field_names[0], DriverId);
      }
      if (hasPointId) {
        output.WriteUInt32(2, field_names[2], PointId);
      }
      if (hasRouteId) {
        output.WriteUInt32(3, field_names[3], RouteId);
      }
      if (hasFlagState) {
        output.WriteMessage(4, field_names[1], FlagState);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasDriverId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, DriverId);
      }
      if (hasPointId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, PointId);
      }
      if (hasRouteId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, RouteId);
      }
      if (hasFlagState) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, FlagState);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mxt1xx_u_embedded ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_embedded ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_embedded ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_embedded ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_embedded ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_embedded ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_embedded ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mxt1xx_u_embedded ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mxt1xx_u_embedded ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_embedded ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mxt1xx_u_embedded MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mxt1xx_u_embedded prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mxt1xx_u_embedded, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mxt1xx_u_embedded cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mxt1xx_u_embedded result;
      
      private mxt1xx_u_embedded PrepareBuilder() {
        if (resultIsReadOnly) {
          mxt1xx_u_embedded original = result;
          result = new mxt1xx_u_embedded();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mxt1xx_u_embedded MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_embedded.Descriptor; }
      }
      
      public override mxt1xx_u_embedded DefaultInstanceForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_embedded.DefaultInstance; }
      }
      
      public override mxt1xx_u_embedded BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mxt1xx_u_embedded) {
          return MergeFrom((mxt1xx_u_embedded) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mxt1xx_u_embedded other) {
        if (other == global::maxtrack.pb.mxt1xx.mxt1xx_u_embedded.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasDriverId) {
          DriverId = other.DriverId;
        }
        if (other.HasPointId) {
          PointId = other.PointId;
        }
        if (other.HasRouteId) {
          RouteId = other.RouteId;
        }
        if (other.HasFlagState) {
          MergeFlagState(other.FlagState);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mxt1XxUEmbeddedFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mxt1XxUEmbeddedFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasDriverId = input.ReadUInt32(ref result.driverId_);
              break;
            }
            case 16: {
              result.hasPointId = input.ReadUInt32(ref result.pointId_);
              break;
            }
            case 24: {
              result.hasRouteId = input.ReadUInt32(ref result.routeId_);
              break;
            }
            case 34: {
              global::maxtrack.pb.mxt1xx.mxt1xx_u_embedded_flag_state.Builder subBuilder = global::maxtrack.pb.mxt1xx.mxt1xx_u_embedded_flag_state.CreateBuilder();
              if (result.hasFlagState) {
                subBuilder.MergeFrom(FlagState);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              FlagState = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasDriverId {
        get { return result.hasDriverId; }
      }
      [global::System.CLSCompliant(false)]
      public uint DriverId {
        get { return result.DriverId; }
        set { SetDriverId(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetDriverId(uint value) {
        PrepareBuilder();
        result.hasDriverId = true;
        result.driverId_ = value;
        return this;
      }
      public Builder ClearDriverId() {
        PrepareBuilder();
        result.hasDriverId = false;
        result.driverId_ = 0;
        return this;
      }
      
      public bool HasPointId {
        get { return result.hasPointId; }
      }
      [global::System.CLSCompliant(false)]
      public uint PointId {
        get { return result.PointId; }
        set { SetPointId(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetPointId(uint value) {
        PrepareBuilder();
        result.hasPointId = true;
        result.pointId_ = value;
        return this;
      }
      public Builder ClearPointId() {
        PrepareBuilder();
        result.hasPointId = false;
        result.pointId_ = 0;
        return this;
      }
      
      public bool HasRouteId {
        get { return result.hasRouteId; }
      }
      [global::System.CLSCompliant(false)]
      public uint RouteId {
        get { return result.RouteId; }
        set { SetRouteId(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetRouteId(uint value) {
        PrepareBuilder();
        result.hasRouteId = true;
        result.routeId_ = value;
        return this;
      }
      public Builder ClearRouteId() {
        PrepareBuilder();
        result.hasRouteId = false;
        result.routeId_ = 0;
        return this;
      }
      
      public bool HasFlagState {
       get { return result.hasFlagState; }
      }
      public global::maxtrack.pb.mxt1xx.mxt1xx_u_embedded_flag_state FlagState {
        get { return result.FlagState; }
        set { SetFlagState(value); }
      }
      public Builder SetFlagState(global::maxtrack.pb.mxt1xx.mxt1xx_u_embedded_flag_state value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFlagState = true;
        result.flagState_ = value;
        return this;
      }
      public Builder SetFlagState(global::maxtrack.pb.mxt1xx.mxt1xx_u_embedded_flag_state.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasFlagState = true;
        result.flagState_ = builderForValue.Build();
        return this;
      }
      public Builder MergeFlagState(global::maxtrack.pb.mxt1xx.mxt1xx_u_embedded_flag_state value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasFlagState &&
            result.flagState_ != global::maxtrack.pb.mxt1xx.mxt1xx_u_embedded_flag_state.DefaultInstance) {
            result.flagState_ = global::maxtrack.pb.mxt1xx.mxt1xx_u_embedded_flag_state.CreateBuilder(result.flagState_).MergeFrom(value).BuildPartial();
        } else {
          result.flagState_ = value;
        }
        result.hasFlagState = true;
        return this;
      }
      public Builder ClearFlagState() {
        PrepareBuilder();
        result.hasFlagState = false;
        result.flagState_ = null;
        return this;
      }
    }
    static mxt1xx_u_embedded() {
      object.ReferenceEquals(global::maxtrack.pb.mxt1xx.Mxt1Xx.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mxt1xx_u_cell_id_info : pb::GeneratedMessage<mxt1xx_u_cell_id_info, mxt1xx_u_cell_id_info.Builder> {
    private mxt1xx_u_cell_id_info() { }
    private static readonly mxt1xx_u_cell_id_info defaultInstance = new mxt1xx_u_cell_id_info().MakeReadOnly();
    private static readonly string[] _mxt1XxUCellIdInfoFieldNames = new string[] { "cell_id", "country_code", "local_area_code", "network_code" };
    private static readonly uint[] _mxt1XxUCellIdInfoFieldTags = new uint[] { 10, 18, 34, 26 };
    public static mxt1xx_u_cell_id_info DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mxt1xx_u_cell_id_info DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mxt1xx_u_cell_id_info ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_cell_id_info__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mxt1xx_u_cell_id_info, mxt1xx_u_cell_id_info.Builder> InternalFieldAccessors {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_cell_id_info__FieldAccessorTable; }
    }
    
    public const int CellIdFieldNumber = 1;
    private bool hasCellId;
    private string cellId_ = "";
    public bool HasCellId {
      get { return hasCellId; }
    }
    public string CellId {
      get { return cellId_; }
    }
    
    public const int CountryCodeFieldNumber = 2;
    private bool hasCountryCode;
    private string countryCode_ = "";
    public bool HasCountryCode {
      get { return hasCountryCode; }
    }
    public string CountryCode {
      get { return countryCode_; }
    }
    
    public const int NetworkCodeFieldNumber = 3;
    private bool hasNetworkCode;
    private string networkCode_ = "";
    public bool HasNetworkCode {
      get { return hasNetworkCode; }
    }
    public string NetworkCode {
      get { return networkCode_; }
    }
    
    public const int LocalAreaCodeFieldNumber = 4;
    private bool hasLocalAreaCode;
    private string localAreaCode_ = "";
    public bool HasLocalAreaCode {
      get { return hasLocalAreaCode; }
    }
    public string LocalAreaCode {
      get { return localAreaCode_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCellId) return false;
        if (!hasCountryCode) return false;
        if (!hasNetworkCode) return false;
        if (!hasLocalAreaCode) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mxt1XxUCellIdInfoFieldNames;
      if (hasCellId) {
        output.WriteString(1, field_names[0], CellId);
      }
      if (hasCountryCode) {
        output.WriteString(2, field_names[1], CountryCode);
      }
      if (hasNetworkCode) {
        output.WriteString(3, field_names[3], NetworkCode);
      }
      if (hasLocalAreaCode) {
        output.WriteString(4, field_names[2], LocalAreaCode);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasCellId) {
        size += pb::CodedOutputStream.ComputeStringSize(1, CellId);
      }
      if (hasCountryCode) {
        size += pb::CodedOutputStream.ComputeStringSize(2, CountryCode);
      }
      if (hasNetworkCode) {
        size += pb::CodedOutputStream.ComputeStringSize(3, NetworkCode);
      }
      if (hasLocalAreaCode) {
        size += pb::CodedOutputStream.ComputeStringSize(4, LocalAreaCode);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mxt1xx_u_cell_id_info ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_cell_id_info ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_cell_id_info ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_cell_id_info ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_cell_id_info ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_cell_id_info ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_cell_id_info ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mxt1xx_u_cell_id_info ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mxt1xx_u_cell_id_info ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_cell_id_info ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mxt1xx_u_cell_id_info MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mxt1xx_u_cell_id_info prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mxt1xx_u_cell_id_info, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mxt1xx_u_cell_id_info cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mxt1xx_u_cell_id_info result;
      
      private mxt1xx_u_cell_id_info PrepareBuilder() {
        if (resultIsReadOnly) {
          mxt1xx_u_cell_id_info original = result;
          result = new mxt1xx_u_cell_id_info();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mxt1xx_u_cell_id_info MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_cell_id_info.Descriptor; }
      }
      
      public override mxt1xx_u_cell_id_info DefaultInstanceForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_cell_id_info.DefaultInstance; }
      }
      
      public override mxt1xx_u_cell_id_info BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mxt1xx_u_cell_id_info) {
          return MergeFrom((mxt1xx_u_cell_id_info) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mxt1xx_u_cell_id_info other) {
        if (other == global::maxtrack.pb.mxt1xx.mxt1xx_u_cell_id_info.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCellId) {
          CellId = other.CellId;
        }
        if (other.HasCountryCode) {
          CountryCode = other.CountryCode;
        }
        if (other.HasNetworkCode) {
          NetworkCode = other.NetworkCode;
        }
        if (other.HasLocalAreaCode) {
          LocalAreaCode = other.LocalAreaCode;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mxt1XxUCellIdInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mxt1XxUCellIdInfoFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasCellId = input.ReadString(ref result.cellId_);
              break;
            }
            case 18: {
              result.hasCountryCode = input.ReadString(ref result.countryCode_);
              break;
            }
            case 26: {
              result.hasNetworkCode = input.ReadString(ref result.networkCode_);
              break;
            }
            case 34: {
              result.hasLocalAreaCode = input.ReadString(ref result.localAreaCode_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCellId {
        get { return result.hasCellId; }
      }
      public string CellId {
        get { return result.CellId; }
        set { SetCellId(value); }
      }
      public Builder SetCellId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCellId = true;
        result.cellId_ = value;
        return this;
      }
      public Builder ClearCellId() {
        PrepareBuilder();
        result.hasCellId = false;
        result.cellId_ = "";
        return this;
      }
      
      public bool HasCountryCode {
        get { return result.hasCountryCode; }
      }
      public string CountryCode {
        get { return result.CountryCode; }
        set { SetCountryCode(value); }
      }
      public Builder SetCountryCode(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCountryCode = true;
        result.countryCode_ = value;
        return this;
      }
      public Builder ClearCountryCode() {
        PrepareBuilder();
        result.hasCountryCode = false;
        result.countryCode_ = "";
        return this;
      }
      
      public bool HasNetworkCode {
        get { return result.hasNetworkCode; }
      }
      public string NetworkCode {
        get { return result.NetworkCode; }
        set { SetNetworkCode(value); }
      }
      public Builder SetNetworkCode(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasNetworkCode = true;
        result.networkCode_ = value;
        return this;
      }
      public Builder ClearNetworkCode() {
        PrepareBuilder();
        result.hasNetworkCode = false;
        result.networkCode_ = "";
        return this;
      }
      
      public bool HasLocalAreaCode {
        get { return result.hasLocalAreaCode; }
      }
      public string LocalAreaCode {
        get { return result.LocalAreaCode; }
        set { SetLocalAreaCode(value); }
      }
      public Builder SetLocalAreaCode(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLocalAreaCode = true;
        result.localAreaCode_ = value;
        return this;
      }
      public Builder ClearLocalAreaCode() {
        PrepareBuilder();
        result.hasLocalAreaCode = false;
        result.localAreaCode_ = "";
        return this;
      }
    }
    static mxt1xx_u_cell_id_info() {
      object.ReferenceEquals(global::maxtrack.pb.mxt1xx.Mxt1Xx.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mxt1xx_u_accessory_wt100 : pb::GeneratedMessage<mxt1xx_u_accessory_wt100, mxt1xx_u_accessory_wt100.Builder> {
    private mxt1xx_u_accessory_wt100() { }
    private static readonly mxt1xx_u_accessory_wt100 defaultInstance = new mxt1xx_u_accessory_wt100().MakeReadOnly();
    private static readonly string[] _mxt1XxUAccessoryWt100FieldNames = new string[] { "battery_level", "button_status", "internal_temperature", "raw_data", "serial", "touch_sensor_status", "wrist_loop1_event", "wrist_loop2_event" };
    private static readonly uint[] _mxt1XxUAccessoryWt100FieldTags = new uint[] { 16, 24, 56, 66, 8, 32, 40, 48 };
    public static mxt1xx_u_accessory_wt100 DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mxt1xx_u_accessory_wt100 DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mxt1xx_u_accessory_wt100 ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_wt100__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mxt1xx_u_accessory_wt100, mxt1xx_u_accessory_wt100.Builder> InternalFieldAccessors {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_wt100__FieldAccessorTable; }
    }
    
    public const int SerialFieldNumber = 1;
    private bool hasSerial;
    private uint serial_;
    public bool HasSerial {
      get { return hasSerial; }
    }
    [global::System.CLSCompliant(false)]
    public uint Serial {
      get { return serial_; }
    }
    
    public const int BatteryLevelFieldNumber = 2;
    private bool hasBatteryLevel;
    private uint batteryLevel_;
    public bool HasBatteryLevel {
      get { return hasBatteryLevel; }
    }
    [global::System.CLSCompliant(false)]
    public uint BatteryLevel {
      get { return batteryLevel_; }
    }
    
    public const int ButtonStatusFieldNumber = 3;
    private bool hasButtonStatus;
    private uint buttonStatus_;
    public bool HasButtonStatus {
      get { return hasButtonStatus; }
    }
    [global::System.CLSCompliant(false)]
    public uint ButtonStatus {
      get { return buttonStatus_; }
    }
    
    public const int TouchSensorStatusFieldNumber = 4;
    private bool hasTouchSensorStatus;
    private bool touchSensorStatus_;
    public bool HasTouchSensorStatus {
      get { return hasTouchSensorStatus; }
    }
    public bool TouchSensorStatus {
      get { return touchSensorStatus_; }
    }
    
    public const int WristLoop1EventFieldNumber = 5;
    private bool hasWristLoop1Event;
    private bool wristLoop1Event_;
    public bool HasWristLoop1Event {
      get { return hasWristLoop1Event; }
    }
    public bool WristLoop1Event {
      get { return wristLoop1Event_; }
    }
    
    public const int WristLoop2EventFieldNumber = 6;
    private bool hasWristLoop2Event;
    private bool wristLoop2Event_;
    public bool HasWristLoop2Event {
      get { return hasWristLoop2Event; }
    }
    public bool WristLoop2Event {
      get { return wristLoop2Event_; }
    }
    
    public const int InternalTemperatureFieldNumber = 7;
    private bool hasInternalTemperature;
    private uint internalTemperature_;
    public bool HasInternalTemperature {
      get { return hasInternalTemperature; }
    }
    [global::System.CLSCompliant(false)]
    public uint InternalTemperature {
      get { return internalTemperature_; }
    }
    
    public const int RawDataFieldNumber = 8;
    private bool hasRawData;
    private string rawData_ = "";
    public bool HasRawData {
      get { return hasRawData; }
    }
    public string RawData {
      get { return rawData_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSerial) return false;
        if (!hasBatteryLevel) return false;
        if (!hasButtonStatus) return false;
        if (!hasTouchSensorStatus) return false;
        if (!hasWristLoop1Event) return false;
        if (!hasWristLoop2Event) return false;
        if (!hasInternalTemperature) return false;
        if (!hasRawData) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mxt1XxUAccessoryWt100FieldNames;
      if (hasSerial) {
        output.WriteUInt32(1, field_names[4], Serial);
      }
      if (hasBatteryLevel) {
        output.WriteUInt32(2, field_names[0], BatteryLevel);
      }
      if (hasButtonStatus) {
        output.WriteUInt32(3, field_names[1], ButtonStatus);
      }
      if (hasTouchSensorStatus) {
        output.WriteBool(4, field_names[5], TouchSensorStatus);
      }
      if (hasWristLoop1Event) {
        output.WriteBool(5, field_names[6], WristLoop1Event);
      }
      if (hasWristLoop2Event) {
        output.WriteBool(6, field_names[7], WristLoop2Event);
      }
      if (hasInternalTemperature) {
        output.WriteUInt32(7, field_names[2], InternalTemperature);
      }
      if (hasRawData) {
        output.WriteString(8, field_names[3], RawData);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasSerial) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, Serial);
      }
      if (hasBatteryLevel) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, BatteryLevel);
      }
      if (hasButtonStatus) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, ButtonStatus);
      }
      if (hasTouchSensorStatus) {
        size += pb::CodedOutputStream.ComputeBoolSize(4, TouchSensorStatus);
      }
      if (hasWristLoop1Event) {
        size += pb::CodedOutputStream.ComputeBoolSize(5, WristLoop1Event);
      }
      if (hasWristLoop2Event) {
        size += pb::CodedOutputStream.ComputeBoolSize(6, WristLoop2Event);
      }
      if (hasInternalTemperature) {
        size += pb::CodedOutputStream.ComputeUInt32Size(7, InternalTemperature);
      }
      if (hasRawData) {
        size += pb::CodedOutputStream.ComputeStringSize(8, RawData);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mxt1xx_u_accessory_wt100 ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_accessory_wt100 ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_accessory_wt100 ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_accessory_wt100 ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_accessory_wt100 ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_accessory_wt100 ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_accessory_wt100 ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mxt1xx_u_accessory_wt100 ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mxt1xx_u_accessory_wt100 ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_accessory_wt100 ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mxt1xx_u_accessory_wt100 MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mxt1xx_u_accessory_wt100 prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mxt1xx_u_accessory_wt100, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mxt1xx_u_accessory_wt100 cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mxt1xx_u_accessory_wt100 result;
      
      private mxt1xx_u_accessory_wt100 PrepareBuilder() {
        if (resultIsReadOnly) {
          mxt1xx_u_accessory_wt100 original = result;
          result = new mxt1xx_u_accessory_wt100();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mxt1xx_u_accessory_wt100 MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt100.Descriptor; }
      }
      
      public override mxt1xx_u_accessory_wt100 DefaultInstanceForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt100.DefaultInstance; }
      }
      
      public override mxt1xx_u_accessory_wt100 BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mxt1xx_u_accessory_wt100) {
          return MergeFrom((mxt1xx_u_accessory_wt100) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mxt1xx_u_accessory_wt100 other) {
        if (other == global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt100.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSerial) {
          Serial = other.Serial;
        }
        if (other.HasBatteryLevel) {
          BatteryLevel = other.BatteryLevel;
        }
        if (other.HasButtonStatus) {
          ButtonStatus = other.ButtonStatus;
        }
        if (other.HasTouchSensorStatus) {
          TouchSensorStatus = other.TouchSensorStatus;
        }
        if (other.HasWristLoop1Event) {
          WristLoop1Event = other.WristLoop1Event;
        }
        if (other.HasWristLoop2Event) {
          WristLoop2Event = other.WristLoop2Event;
        }
        if (other.HasInternalTemperature) {
          InternalTemperature = other.InternalTemperature;
        }
        if (other.HasRawData) {
          RawData = other.RawData;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mxt1XxUAccessoryWt100FieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mxt1XxUAccessoryWt100FieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasSerial = input.ReadUInt32(ref result.serial_);
              break;
            }
            case 16: {
              result.hasBatteryLevel = input.ReadUInt32(ref result.batteryLevel_);
              break;
            }
            case 24: {
              result.hasButtonStatus = input.ReadUInt32(ref result.buttonStatus_);
              break;
            }
            case 32: {
              result.hasTouchSensorStatus = input.ReadBool(ref result.touchSensorStatus_);
              break;
            }
            case 40: {
              result.hasWristLoop1Event = input.ReadBool(ref result.wristLoop1Event_);
              break;
            }
            case 48: {
              result.hasWristLoop2Event = input.ReadBool(ref result.wristLoop2Event_);
              break;
            }
            case 56: {
              result.hasInternalTemperature = input.ReadUInt32(ref result.internalTemperature_);
              break;
            }
            case 66: {
              result.hasRawData = input.ReadString(ref result.rawData_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSerial {
        get { return result.hasSerial; }
      }
      [global::System.CLSCompliant(false)]
      public uint Serial {
        get { return result.Serial; }
        set { SetSerial(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSerial(uint value) {
        PrepareBuilder();
        result.hasSerial = true;
        result.serial_ = value;
        return this;
      }
      public Builder ClearSerial() {
        PrepareBuilder();
        result.hasSerial = false;
        result.serial_ = 0;
        return this;
      }
      
      public bool HasBatteryLevel {
        get { return result.hasBatteryLevel; }
      }
      [global::System.CLSCompliant(false)]
      public uint BatteryLevel {
        get { return result.BatteryLevel; }
        set { SetBatteryLevel(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetBatteryLevel(uint value) {
        PrepareBuilder();
        result.hasBatteryLevel = true;
        result.batteryLevel_ = value;
        return this;
      }
      public Builder ClearBatteryLevel() {
        PrepareBuilder();
        result.hasBatteryLevel = false;
        result.batteryLevel_ = 0;
        return this;
      }
      
      public bool HasButtonStatus {
        get { return result.hasButtonStatus; }
      }
      [global::System.CLSCompliant(false)]
      public uint ButtonStatus {
        get { return result.ButtonStatus; }
        set { SetButtonStatus(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetButtonStatus(uint value) {
        PrepareBuilder();
        result.hasButtonStatus = true;
        result.buttonStatus_ = value;
        return this;
      }
      public Builder ClearButtonStatus() {
        PrepareBuilder();
        result.hasButtonStatus = false;
        result.buttonStatus_ = 0;
        return this;
      }
      
      public bool HasTouchSensorStatus {
        get { return result.hasTouchSensorStatus; }
      }
      public bool TouchSensorStatus {
        get { return result.TouchSensorStatus; }
        set { SetTouchSensorStatus(value); }
      }
      public Builder SetTouchSensorStatus(bool value) {
        PrepareBuilder();
        result.hasTouchSensorStatus = true;
        result.touchSensorStatus_ = value;
        return this;
      }
      public Builder ClearTouchSensorStatus() {
        PrepareBuilder();
        result.hasTouchSensorStatus = false;
        result.touchSensorStatus_ = false;
        return this;
      }
      
      public bool HasWristLoop1Event {
        get { return result.hasWristLoop1Event; }
      }
      public bool WristLoop1Event {
        get { return result.WristLoop1Event; }
        set { SetWristLoop1Event(value); }
      }
      public Builder SetWristLoop1Event(bool value) {
        PrepareBuilder();
        result.hasWristLoop1Event = true;
        result.wristLoop1Event_ = value;
        return this;
      }
      public Builder ClearWristLoop1Event() {
        PrepareBuilder();
        result.hasWristLoop1Event = false;
        result.wristLoop1Event_ = false;
        return this;
      }
      
      public bool HasWristLoop2Event {
        get { return result.hasWristLoop2Event; }
      }
      public bool WristLoop2Event {
        get { return result.WristLoop2Event; }
        set { SetWristLoop2Event(value); }
      }
      public Builder SetWristLoop2Event(bool value) {
        PrepareBuilder();
        result.hasWristLoop2Event = true;
        result.wristLoop2Event_ = value;
        return this;
      }
      public Builder ClearWristLoop2Event() {
        PrepareBuilder();
        result.hasWristLoop2Event = false;
        result.wristLoop2Event_ = false;
        return this;
      }
      
      public bool HasInternalTemperature {
        get { return result.hasInternalTemperature; }
      }
      [global::System.CLSCompliant(false)]
      public uint InternalTemperature {
        get { return result.InternalTemperature; }
        set { SetInternalTemperature(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetInternalTemperature(uint value) {
        PrepareBuilder();
        result.hasInternalTemperature = true;
        result.internalTemperature_ = value;
        return this;
      }
      public Builder ClearInternalTemperature() {
        PrepareBuilder();
        result.hasInternalTemperature = false;
        result.internalTemperature_ = 0;
        return this;
      }
      
      public bool HasRawData {
        get { return result.hasRawData; }
      }
      public string RawData {
        get { return result.RawData; }
        set { SetRawData(value); }
      }
      public Builder SetRawData(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRawData = true;
        result.rawData_ = value;
        return this;
      }
      public Builder ClearRawData() {
        PrepareBuilder();
        result.hasRawData = false;
        result.rawData_ = "";
        return this;
      }
    }
    static mxt1xx_u_accessory_wt100() {
      object.ReferenceEquals(global::maxtrack.pb.mxt1xx.Mxt1Xx.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mxt1xx_u_accessory_wt110 : pb::GeneratedMessage<mxt1xx_u_accessory_wt110, mxt1xx_u_accessory_wt110.Builder> {
    private mxt1xx_u_accessory_wt110() { }
    private static readonly mxt1xx_u_accessory_wt110 defaultInstance = new mxt1xx_u_accessory_wt110().MakeReadOnly();
    private static readonly string[] _mxt1XxUAccessoryWt110FieldNames = new string[] { "battery_level", "button_status", "internal_temperature", "raw_data", "serial" };
    private static readonly uint[] _mxt1XxUAccessoryWt110FieldTags = new uint[] { 16, 24, 32, 42, 8 };
    public static mxt1xx_u_accessory_wt110 DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mxt1xx_u_accessory_wt110 DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mxt1xx_u_accessory_wt110 ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_wt110__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mxt1xx_u_accessory_wt110, mxt1xx_u_accessory_wt110.Builder> InternalFieldAccessors {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_wt110__FieldAccessorTable; }
    }
    
    public const int SerialFieldNumber = 1;
    private bool hasSerial;
    private uint serial_;
    public bool HasSerial {
      get { return hasSerial; }
    }
    [global::System.CLSCompliant(false)]
    public uint Serial {
      get { return serial_; }
    }
    
    public const int BatteryLevelFieldNumber = 2;
    private bool hasBatteryLevel;
    private uint batteryLevel_;
    public bool HasBatteryLevel {
      get { return hasBatteryLevel; }
    }
    [global::System.CLSCompliant(false)]
    public uint BatteryLevel {
      get { return batteryLevel_; }
    }
    
    public const int ButtonStatusFieldNumber = 3;
    private bool hasButtonStatus;
    private uint buttonStatus_;
    public bool HasButtonStatus {
      get { return hasButtonStatus; }
    }
    [global::System.CLSCompliant(false)]
    public uint ButtonStatus {
      get { return buttonStatus_; }
    }
    
    public const int InternalTemperatureFieldNumber = 4;
    private bool hasInternalTemperature;
    private uint internalTemperature_;
    public bool HasInternalTemperature {
      get { return hasInternalTemperature; }
    }
    [global::System.CLSCompliant(false)]
    public uint InternalTemperature {
      get { return internalTemperature_; }
    }
    
    public const int RawDataFieldNumber = 5;
    private bool hasRawData;
    private string rawData_ = "";
    public bool HasRawData {
      get { return hasRawData; }
    }
    public string RawData {
      get { return rawData_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSerial) return false;
        if (!hasBatteryLevel) return false;
        if (!hasButtonStatus) return false;
        if (!hasInternalTemperature) return false;
        if (!hasRawData) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mxt1XxUAccessoryWt110FieldNames;
      if (hasSerial) {
        output.WriteUInt32(1, field_names[4], Serial);
      }
      if (hasBatteryLevel) {
        output.WriteUInt32(2, field_names[0], BatteryLevel);
      }
      if (hasButtonStatus) {
        output.WriteUInt32(3, field_names[1], ButtonStatus);
      }
      if (hasInternalTemperature) {
        output.WriteUInt32(4, field_names[2], InternalTemperature);
      }
      if (hasRawData) {
        output.WriteString(5, field_names[3], RawData);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasSerial) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, Serial);
      }
      if (hasBatteryLevel) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, BatteryLevel);
      }
      if (hasButtonStatus) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, ButtonStatus);
      }
      if (hasInternalTemperature) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, InternalTemperature);
      }
      if (hasRawData) {
        size += pb::CodedOutputStream.ComputeStringSize(5, RawData);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mxt1xx_u_accessory_wt110 ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_accessory_wt110 ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_accessory_wt110 ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_accessory_wt110 ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_accessory_wt110 ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_accessory_wt110 ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_accessory_wt110 ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mxt1xx_u_accessory_wt110 ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mxt1xx_u_accessory_wt110 ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_accessory_wt110 ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mxt1xx_u_accessory_wt110 MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mxt1xx_u_accessory_wt110 prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mxt1xx_u_accessory_wt110, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mxt1xx_u_accessory_wt110 cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mxt1xx_u_accessory_wt110 result;
      
      private mxt1xx_u_accessory_wt110 PrepareBuilder() {
        if (resultIsReadOnly) {
          mxt1xx_u_accessory_wt110 original = result;
          result = new mxt1xx_u_accessory_wt110();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mxt1xx_u_accessory_wt110 MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt110.Descriptor; }
      }
      
      public override mxt1xx_u_accessory_wt110 DefaultInstanceForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt110.DefaultInstance; }
      }
      
      public override mxt1xx_u_accessory_wt110 BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mxt1xx_u_accessory_wt110) {
          return MergeFrom((mxt1xx_u_accessory_wt110) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mxt1xx_u_accessory_wt110 other) {
        if (other == global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt110.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSerial) {
          Serial = other.Serial;
        }
        if (other.HasBatteryLevel) {
          BatteryLevel = other.BatteryLevel;
        }
        if (other.HasButtonStatus) {
          ButtonStatus = other.ButtonStatus;
        }
        if (other.HasInternalTemperature) {
          InternalTemperature = other.InternalTemperature;
        }
        if (other.HasRawData) {
          RawData = other.RawData;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mxt1XxUAccessoryWt110FieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mxt1XxUAccessoryWt110FieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasSerial = input.ReadUInt32(ref result.serial_);
              break;
            }
            case 16: {
              result.hasBatteryLevel = input.ReadUInt32(ref result.batteryLevel_);
              break;
            }
            case 24: {
              result.hasButtonStatus = input.ReadUInt32(ref result.buttonStatus_);
              break;
            }
            case 32: {
              result.hasInternalTemperature = input.ReadUInt32(ref result.internalTemperature_);
              break;
            }
            case 42: {
              result.hasRawData = input.ReadString(ref result.rawData_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSerial {
        get { return result.hasSerial; }
      }
      [global::System.CLSCompliant(false)]
      public uint Serial {
        get { return result.Serial; }
        set { SetSerial(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSerial(uint value) {
        PrepareBuilder();
        result.hasSerial = true;
        result.serial_ = value;
        return this;
      }
      public Builder ClearSerial() {
        PrepareBuilder();
        result.hasSerial = false;
        result.serial_ = 0;
        return this;
      }
      
      public bool HasBatteryLevel {
        get { return result.hasBatteryLevel; }
      }
      [global::System.CLSCompliant(false)]
      public uint BatteryLevel {
        get { return result.BatteryLevel; }
        set { SetBatteryLevel(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetBatteryLevel(uint value) {
        PrepareBuilder();
        result.hasBatteryLevel = true;
        result.batteryLevel_ = value;
        return this;
      }
      public Builder ClearBatteryLevel() {
        PrepareBuilder();
        result.hasBatteryLevel = false;
        result.batteryLevel_ = 0;
        return this;
      }
      
      public bool HasButtonStatus {
        get { return result.hasButtonStatus; }
      }
      [global::System.CLSCompliant(false)]
      public uint ButtonStatus {
        get { return result.ButtonStatus; }
        set { SetButtonStatus(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetButtonStatus(uint value) {
        PrepareBuilder();
        result.hasButtonStatus = true;
        result.buttonStatus_ = value;
        return this;
      }
      public Builder ClearButtonStatus() {
        PrepareBuilder();
        result.hasButtonStatus = false;
        result.buttonStatus_ = 0;
        return this;
      }
      
      public bool HasInternalTemperature {
        get { return result.hasInternalTemperature; }
      }
      [global::System.CLSCompliant(false)]
      public uint InternalTemperature {
        get { return result.InternalTemperature; }
        set { SetInternalTemperature(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetInternalTemperature(uint value) {
        PrepareBuilder();
        result.hasInternalTemperature = true;
        result.internalTemperature_ = value;
        return this;
      }
      public Builder ClearInternalTemperature() {
        PrepareBuilder();
        result.hasInternalTemperature = false;
        result.internalTemperature_ = 0;
        return this;
      }
      
      public bool HasRawData {
        get { return result.hasRawData; }
      }
      public string RawData {
        get { return result.RawData; }
        set { SetRawData(value); }
      }
      public Builder SetRawData(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRawData = true;
        result.rawData_ = value;
        return this;
      }
      public Builder ClearRawData() {
        PrepareBuilder();
        result.hasRawData = false;
        result.rawData_ = "";
        return this;
      }
    }
    static mxt1xx_u_accessory_wt110() {
      object.ReferenceEquals(global::maxtrack.pb.mxt1xx.Mxt1Xx.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mxt1xx_u_accessory_wt111 : pb::GeneratedMessage<mxt1xx_u_accessory_wt111, mxt1xx_u_accessory_wt111.Builder> {
    private mxt1xx_u_accessory_wt111() { }
    private static readonly mxt1xx_u_accessory_wt111 defaultInstance = new mxt1xx_u_accessory_wt111().MakeReadOnly();
    private static readonly string[] _mxt1XxUAccessoryWt111FieldNames = new string[] { "battery_level", "button_status", "external_temperature", "over_temperature", "raw_data", "serial", "under_temperature" };
    private static readonly uint[] _mxt1XxUAccessoryWt111FieldTags = new uint[] { 16, 24, 48, 40, 58, 8, 32 };
    public static mxt1xx_u_accessory_wt111 DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mxt1xx_u_accessory_wt111 DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mxt1xx_u_accessory_wt111 ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_wt111__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mxt1xx_u_accessory_wt111, mxt1xx_u_accessory_wt111.Builder> InternalFieldAccessors {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_wt111__FieldAccessorTable; }
    }
    
    public const int SerialFieldNumber = 1;
    private bool hasSerial;
    private uint serial_;
    public bool HasSerial {
      get { return hasSerial; }
    }
    [global::System.CLSCompliant(false)]
    public uint Serial {
      get { return serial_; }
    }
    
    public const int BatteryLevelFieldNumber = 2;
    private bool hasBatteryLevel;
    private uint batteryLevel_;
    public bool HasBatteryLevel {
      get { return hasBatteryLevel; }
    }
    [global::System.CLSCompliant(false)]
    public uint BatteryLevel {
      get { return batteryLevel_; }
    }
    
    public const int ButtonStatusFieldNumber = 3;
    private bool hasButtonStatus;
    private uint buttonStatus_;
    public bool HasButtonStatus {
      get { return hasButtonStatus; }
    }
    [global::System.CLSCompliant(false)]
    public uint ButtonStatus {
      get { return buttonStatus_; }
    }
    
    public const int UnderTemperatureFieldNumber = 4;
    private bool hasUnderTemperature;
    private bool underTemperature_;
    public bool HasUnderTemperature {
      get { return hasUnderTemperature; }
    }
    public bool UnderTemperature {
      get { return underTemperature_; }
    }
    
    public const int OverTemperatureFieldNumber = 5;
    private bool hasOverTemperature;
    private bool overTemperature_;
    public bool HasOverTemperature {
      get { return hasOverTemperature; }
    }
    public bool OverTemperature {
      get { return overTemperature_; }
    }
    
    public const int ExternalTemperatureFieldNumber = 6;
    private bool hasExternalTemperature;
    private uint externalTemperature_;
    public bool HasExternalTemperature {
      get { return hasExternalTemperature; }
    }
    [global::System.CLSCompliant(false)]
    public uint ExternalTemperature {
      get { return externalTemperature_; }
    }
    
    public const int RawDataFieldNumber = 7;
    private bool hasRawData;
    private string rawData_ = "";
    public bool HasRawData {
      get { return hasRawData; }
    }
    public string RawData {
      get { return rawData_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSerial) return false;
        if (!hasBatteryLevel) return false;
        if (!hasButtonStatus) return false;
        if (!hasUnderTemperature) return false;
        if (!hasOverTemperature) return false;
        if (!hasExternalTemperature) return false;
        if (!hasRawData) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mxt1XxUAccessoryWt111FieldNames;
      if (hasSerial) {
        output.WriteUInt32(1, field_names[5], Serial);
      }
      if (hasBatteryLevel) {
        output.WriteUInt32(2, field_names[0], BatteryLevel);
      }
      if (hasButtonStatus) {
        output.WriteUInt32(3, field_names[1], ButtonStatus);
      }
      if (hasUnderTemperature) {
        output.WriteBool(4, field_names[6], UnderTemperature);
      }
      if (hasOverTemperature) {
        output.WriteBool(5, field_names[3], OverTemperature);
      }
      if (hasExternalTemperature) {
        output.WriteUInt32(6, field_names[2], ExternalTemperature);
      }
      if (hasRawData) {
        output.WriteString(7, field_names[4], RawData);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasSerial) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, Serial);
      }
      if (hasBatteryLevel) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, BatteryLevel);
      }
      if (hasButtonStatus) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, ButtonStatus);
      }
      if (hasUnderTemperature) {
        size += pb::CodedOutputStream.ComputeBoolSize(4, UnderTemperature);
      }
      if (hasOverTemperature) {
        size += pb::CodedOutputStream.ComputeBoolSize(5, OverTemperature);
      }
      if (hasExternalTemperature) {
        size += pb::CodedOutputStream.ComputeUInt32Size(6, ExternalTemperature);
      }
      if (hasRawData) {
        size += pb::CodedOutputStream.ComputeStringSize(7, RawData);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mxt1xx_u_accessory_wt111 ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_accessory_wt111 ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_accessory_wt111 ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_accessory_wt111 ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_accessory_wt111 ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_accessory_wt111 ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_accessory_wt111 ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mxt1xx_u_accessory_wt111 ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mxt1xx_u_accessory_wt111 ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_accessory_wt111 ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mxt1xx_u_accessory_wt111 MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mxt1xx_u_accessory_wt111 prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mxt1xx_u_accessory_wt111, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mxt1xx_u_accessory_wt111 cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mxt1xx_u_accessory_wt111 result;
      
      private mxt1xx_u_accessory_wt111 PrepareBuilder() {
        if (resultIsReadOnly) {
          mxt1xx_u_accessory_wt111 original = result;
          result = new mxt1xx_u_accessory_wt111();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mxt1xx_u_accessory_wt111 MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt111.Descriptor; }
      }
      
      public override mxt1xx_u_accessory_wt111 DefaultInstanceForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt111.DefaultInstance; }
      }
      
      public override mxt1xx_u_accessory_wt111 BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mxt1xx_u_accessory_wt111) {
          return MergeFrom((mxt1xx_u_accessory_wt111) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mxt1xx_u_accessory_wt111 other) {
        if (other == global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt111.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSerial) {
          Serial = other.Serial;
        }
        if (other.HasBatteryLevel) {
          BatteryLevel = other.BatteryLevel;
        }
        if (other.HasButtonStatus) {
          ButtonStatus = other.ButtonStatus;
        }
        if (other.HasUnderTemperature) {
          UnderTemperature = other.UnderTemperature;
        }
        if (other.HasOverTemperature) {
          OverTemperature = other.OverTemperature;
        }
        if (other.HasExternalTemperature) {
          ExternalTemperature = other.ExternalTemperature;
        }
        if (other.HasRawData) {
          RawData = other.RawData;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mxt1XxUAccessoryWt111FieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mxt1XxUAccessoryWt111FieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasSerial = input.ReadUInt32(ref result.serial_);
              break;
            }
            case 16: {
              result.hasBatteryLevel = input.ReadUInt32(ref result.batteryLevel_);
              break;
            }
            case 24: {
              result.hasButtonStatus = input.ReadUInt32(ref result.buttonStatus_);
              break;
            }
            case 32: {
              result.hasUnderTemperature = input.ReadBool(ref result.underTemperature_);
              break;
            }
            case 40: {
              result.hasOverTemperature = input.ReadBool(ref result.overTemperature_);
              break;
            }
            case 48: {
              result.hasExternalTemperature = input.ReadUInt32(ref result.externalTemperature_);
              break;
            }
            case 58: {
              result.hasRawData = input.ReadString(ref result.rawData_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSerial {
        get { return result.hasSerial; }
      }
      [global::System.CLSCompliant(false)]
      public uint Serial {
        get { return result.Serial; }
        set { SetSerial(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSerial(uint value) {
        PrepareBuilder();
        result.hasSerial = true;
        result.serial_ = value;
        return this;
      }
      public Builder ClearSerial() {
        PrepareBuilder();
        result.hasSerial = false;
        result.serial_ = 0;
        return this;
      }
      
      public bool HasBatteryLevel {
        get { return result.hasBatteryLevel; }
      }
      [global::System.CLSCompliant(false)]
      public uint BatteryLevel {
        get { return result.BatteryLevel; }
        set { SetBatteryLevel(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetBatteryLevel(uint value) {
        PrepareBuilder();
        result.hasBatteryLevel = true;
        result.batteryLevel_ = value;
        return this;
      }
      public Builder ClearBatteryLevel() {
        PrepareBuilder();
        result.hasBatteryLevel = false;
        result.batteryLevel_ = 0;
        return this;
      }
      
      public bool HasButtonStatus {
        get { return result.hasButtonStatus; }
      }
      [global::System.CLSCompliant(false)]
      public uint ButtonStatus {
        get { return result.ButtonStatus; }
        set { SetButtonStatus(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetButtonStatus(uint value) {
        PrepareBuilder();
        result.hasButtonStatus = true;
        result.buttonStatus_ = value;
        return this;
      }
      public Builder ClearButtonStatus() {
        PrepareBuilder();
        result.hasButtonStatus = false;
        result.buttonStatus_ = 0;
        return this;
      }
      
      public bool HasUnderTemperature {
        get { return result.hasUnderTemperature; }
      }
      public bool UnderTemperature {
        get { return result.UnderTemperature; }
        set { SetUnderTemperature(value); }
      }
      public Builder SetUnderTemperature(bool value) {
        PrepareBuilder();
        result.hasUnderTemperature = true;
        result.underTemperature_ = value;
        return this;
      }
      public Builder ClearUnderTemperature() {
        PrepareBuilder();
        result.hasUnderTemperature = false;
        result.underTemperature_ = false;
        return this;
      }
      
      public bool HasOverTemperature {
        get { return result.hasOverTemperature; }
      }
      public bool OverTemperature {
        get { return result.OverTemperature; }
        set { SetOverTemperature(value); }
      }
      public Builder SetOverTemperature(bool value) {
        PrepareBuilder();
        result.hasOverTemperature = true;
        result.overTemperature_ = value;
        return this;
      }
      public Builder ClearOverTemperature() {
        PrepareBuilder();
        result.hasOverTemperature = false;
        result.overTemperature_ = false;
        return this;
      }
      
      public bool HasExternalTemperature {
        get { return result.hasExternalTemperature; }
      }
      [global::System.CLSCompliant(false)]
      public uint ExternalTemperature {
        get { return result.ExternalTemperature; }
        set { SetExternalTemperature(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetExternalTemperature(uint value) {
        PrepareBuilder();
        result.hasExternalTemperature = true;
        result.externalTemperature_ = value;
        return this;
      }
      public Builder ClearExternalTemperature() {
        PrepareBuilder();
        result.hasExternalTemperature = false;
        result.externalTemperature_ = 0;
        return this;
      }
      
      public bool HasRawData {
        get { return result.hasRawData; }
      }
      public string RawData {
        get { return result.RawData; }
        set { SetRawData(value); }
      }
      public Builder SetRawData(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRawData = true;
        result.rawData_ = value;
        return this;
      }
      public Builder ClearRawData() {
        PrepareBuilder();
        result.hasRawData = false;
        result.rawData_ = "";
        return this;
      }
    }
    static mxt1xx_u_accessory_wt111() {
      object.ReferenceEquals(global::maxtrack.pb.mxt1xx.Mxt1Xx.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mxt1xx_u_accessory_wt112 : pb::GeneratedMessage<mxt1xx_u_accessory_wt112, mxt1xx_u_accessory_wt112.Builder> {
    private mxt1xx_u_accessory_wt112() { }
    private static readonly mxt1xx_u_accessory_wt112 defaultInstance = new mxt1xx_u_accessory_wt112().MakeReadOnly();
    private static readonly string[] _mxt1XxUAccessoryWt112FieldNames = new string[] { "battery_level", "button_status", "internal_temperature", "loop_1", "loop_2", "raw_data", "serial" };
    private static readonly uint[] _mxt1XxUAccessoryWt112FieldTags = new uint[] { 16, 24, 48, 32, 40, 58, 8 };
    public static mxt1xx_u_accessory_wt112 DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mxt1xx_u_accessory_wt112 DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mxt1xx_u_accessory_wt112 ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_wt112__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mxt1xx_u_accessory_wt112, mxt1xx_u_accessory_wt112.Builder> InternalFieldAccessors {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_wt112__FieldAccessorTable; }
    }
    
    public const int SerialFieldNumber = 1;
    private bool hasSerial;
    private uint serial_;
    public bool HasSerial {
      get { return hasSerial; }
    }
    [global::System.CLSCompliant(false)]
    public uint Serial {
      get { return serial_; }
    }
    
    public const int BatteryLevelFieldNumber = 2;
    private bool hasBatteryLevel;
    private uint batteryLevel_;
    public bool HasBatteryLevel {
      get { return hasBatteryLevel; }
    }
    [global::System.CLSCompliant(false)]
    public uint BatteryLevel {
      get { return batteryLevel_; }
    }
    
    public const int ButtonStatusFieldNumber = 3;
    private bool hasButtonStatus;
    private uint buttonStatus_;
    public bool HasButtonStatus {
      get { return hasButtonStatus; }
    }
    [global::System.CLSCompliant(false)]
    public uint ButtonStatus {
      get { return buttonStatus_; }
    }
    
    public const int Loop1FieldNumber = 4;
    private bool hasLoop1;
    private bool loop1_;
    public bool HasLoop1 {
      get { return hasLoop1; }
    }
    public bool Loop1 {
      get { return loop1_; }
    }
    
    public const int Loop2FieldNumber = 5;
    private bool hasLoop2;
    private bool loop2_;
    public bool HasLoop2 {
      get { return hasLoop2; }
    }
    public bool Loop2 {
      get { return loop2_; }
    }
    
    public const int InternalTemperatureFieldNumber = 6;
    private bool hasInternalTemperature;
    private uint internalTemperature_;
    public bool HasInternalTemperature {
      get { return hasInternalTemperature; }
    }
    [global::System.CLSCompliant(false)]
    public uint InternalTemperature {
      get { return internalTemperature_; }
    }
    
    public const int RawDataFieldNumber = 7;
    private bool hasRawData;
    private string rawData_ = "";
    public bool HasRawData {
      get { return hasRawData; }
    }
    public string RawData {
      get { return rawData_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSerial) return false;
        if (!hasBatteryLevel) return false;
        if (!hasButtonStatus) return false;
        if (!hasLoop1) return false;
        if (!hasLoop2) return false;
        if (!hasInternalTemperature) return false;
        if (!hasRawData) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mxt1XxUAccessoryWt112FieldNames;
      if (hasSerial) {
        output.WriteUInt32(1, field_names[6], Serial);
      }
      if (hasBatteryLevel) {
        output.WriteUInt32(2, field_names[0], BatteryLevel);
      }
      if (hasButtonStatus) {
        output.WriteUInt32(3, field_names[1], ButtonStatus);
      }
      if (hasLoop1) {
        output.WriteBool(4, field_names[3], Loop1);
      }
      if (hasLoop2) {
        output.WriteBool(5, field_names[4], Loop2);
      }
      if (hasInternalTemperature) {
        output.WriteUInt32(6, field_names[2], InternalTemperature);
      }
      if (hasRawData) {
        output.WriteString(7, field_names[5], RawData);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasSerial) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, Serial);
      }
      if (hasBatteryLevel) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, BatteryLevel);
      }
      if (hasButtonStatus) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, ButtonStatus);
      }
      if (hasLoop1) {
        size += pb::CodedOutputStream.ComputeBoolSize(4, Loop1);
      }
      if (hasLoop2) {
        size += pb::CodedOutputStream.ComputeBoolSize(5, Loop2);
      }
      if (hasInternalTemperature) {
        size += pb::CodedOutputStream.ComputeUInt32Size(6, InternalTemperature);
      }
      if (hasRawData) {
        size += pb::CodedOutputStream.ComputeStringSize(7, RawData);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mxt1xx_u_accessory_wt112 ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_accessory_wt112 ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_accessory_wt112 ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_accessory_wt112 ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_accessory_wt112 ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_accessory_wt112 ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_accessory_wt112 ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mxt1xx_u_accessory_wt112 ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mxt1xx_u_accessory_wt112 ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_accessory_wt112 ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mxt1xx_u_accessory_wt112 MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mxt1xx_u_accessory_wt112 prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mxt1xx_u_accessory_wt112, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mxt1xx_u_accessory_wt112 cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mxt1xx_u_accessory_wt112 result;
      
      private mxt1xx_u_accessory_wt112 PrepareBuilder() {
        if (resultIsReadOnly) {
          mxt1xx_u_accessory_wt112 original = result;
          result = new mxt1xx_u_accessory_wt112();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mxt1xx_u_accessory_wt112 MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt112.Descriptor; }
      }
      
      public override mxt1xx_u_accessory_wt112 DefaultInstanceForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt112.DefaultInstance; }
      }
      
      public override mxt1xx_u_accessory_wt112 BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mxt1xx_u_accessory_wt112) {
          return MergeFrom((mxt1xx_u_accessory_wt112) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mxt1xx_u_accessory_wt112 other) {
        if (other == global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt112.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSerial) {
          Serial = other.Serial;
        }
        if (other.HasBatteryLevel) {
          BatteryLevel = other.BatteryLevel;
        }
        if (other.HasButtonStatus) {
          ButtonStatus = other.ButtonStatus;
        }
        if (other.HasLoop1) {
          Loop1 = other.Loop1;
        }
        if (other.HasLoop2) {
          Loop2 = other.Loop2;
        }
        if (other.HasInternalTemperature) {
          InternalTemperature = other.InternalTemperature;
        }
        if (other.HasRawData) {
          RawData = other.RawData;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mxt1XxUAccessoryWt112FieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mxt1XxUAccessoryWt112FieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasSerial = input.ReadUInt32(ref result.serial_);
              break;
            }
            case 16: {
              result.hasBatteryLevel = input.ReadUInt32(ref result.batteryLevel_);
              break;
            }
            case 24: {
              result.hasButtonStatus = input.ReadUInt32(ref result.buttonStatus_);
              break;
            }
            case 32: {
              result.hasLoop1 = input.ReadBool(ref result.loop1_);
              break;
            }
            case 40: {
              result.hasLoop2 = input.ReadBool(ref result.loop2_);
              break;
            }
            case 48: {
              result.hasInternalTemperature = input.ReadUInt32(ref result.internalTemperature_);
              break;
            }
            case 58: {
              result.hasRawData = input.ReadString(ref result.rawData_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSerial {
        get { return result.hasSerial; }
      }
      [global::System.CLSCompliant(false)]
      public uint Serial {
        get { return result.Serial; }
        set { SetSerial(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSerial(uint value) {
        PrepareBuilder();
        result.hasSerial = true;
        result.serial_ = value;
        return this;
      }
      public Builder ClearSerial() {
        PrepareBuilder();
        result.hasSerial = false;
        result.serial_ = 0;
        return this;
      }
      
      public bool HasBatteryLevel {
        get { return result.hasBatteryLevel; }
      }
      [global::System.CLSCompliant(false)]
      public uint BatteryLevel {
        get { return result.BatteryLevel; }
        set { SetBatteryLevel(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetBatteryLevel(uint value) {
        PrepareBuilder();
        result.hasBatteryLevel = true;
        result.batteryLevel_ = value;
        return this;
      }
      public Builder ClearBatteryLevel() {
        PrepareBuilder();
        result.hasBatteryLevel = false;
        result.batteryLevel_ = 0;
        return this;
      }
      
      public bool HasButtonStatus {
        get { return result.hasButtonStatus; }
      }
      [global::System.CLSCompliant(false)]
      public uint ButtonStatus {
        get { return result.ButtonStatus; }
        set { SetButtonStatus(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetButtonStatus(uint value) {
        PrepareBuilder();
        result.hasButtonStatus = true;
        result.buttonStatus_ = value;
        return this;
      }
      public Builder ClearButtonStatus() {
        PrepareBuilder();
        result.hasButtonStatus = false;
        result.buttonStatus_ = 0;
        return this;
      }
      
      public bool HasLoop1 {
        get { return result.hasLoop1; }
      }
      public bool Loop1 {
        get { return result.Loop1; }
        set { SetLoop1(value); }
      }
      public Builder SetLoop1(bool value) {
        PrepareBuilder();
        result.hasLoop1 = true;
        result.loop1_ = value;
        return this;
      }
      public Builder ClearLoop1() {
        PrepareBuilder();
        result.hasLoop1 = false;
        result.loop1_ = false;
        return this;
      }
      
      public bool HasLoop2 {
        get { return result.hasLoop2; }
      }
      public bool Loop2 {
        get { return result.Loop2; }
        set { SetLoop2(value); }
      }
      public Builder SetLoop2(bool value) {
        PrepareBuilder();
        result.hasLoop2 = true;
        result.loop2_ = value;
        return this;
      }
      public Builder ClearLoop2() {
        PrepareBuilder();
        result.hasLoop2 = false;
        result.loop2_ = false;
        return this;
      }
      
      public bool HasInternalTemperature {
        get { return result.hasInternalTemperature; }
      }
      [global::System.CLSCompliant(false)]
      public uint InternalTemperature {
        get { return result.InternalTemperature; }
        set { SetInternalTemperature(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetInternalTemperature(uint value) {
        PrepareBuilder();
        result.hasInternalTemperature = true;
        result.internalTemperature_ = value;
        return this;
      }
      public Builder ClearInternalTemperature() {
        PrepareBuilder();
        result.hasInternalTemperature = false;
        result.internalTemperature_ = 0;
        return this;
      }
      
      public bool HasRawData {
        get { return result.hasRawData; }
      }
      public string RawData {
        get { return result.RawData; }
        set { SetRawData(value); }
      }
      public Builder SetRawData(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRawData = true;
        result.rawData_ = value;
        return this;
      }
      public Builder ClearRawData() {
        PrepareBuilder();
        result.hasRawData = false;
        result.rawData_ = "";
        return this;
      }
    }
    static mxt1xx_u_accessory_wt112() {
      object.ReferenceEquals(global::maxtrack.pb.mxt1xx.Mxt1Xx.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mxt1xx_u_accessory_wt200_inputs : pb::GeneratedMessage<mxt1xx_u_accessory_wt200_inputs, mxt1xx_u_accessory_wt200_inputs.Builder> {
    private mxt1xx_u_accessory_wt200_inputs() { }
    private static readonly mxt1xx_u_accessory_wt200_inputs defaultInstance = new mxt1xx_u_accessory_wt200_inputs().MakeReadOnly();
    private static readonly string[] _mxt1XxUAccessoryWt200InputsFieldNames = new string[] { "input_a", "input_b", "input_c", "input_d", "mask_input_a", "mask_input_b", "mask_input_c", "mask_input_d" };
    private static readonly uint[] _mxt1XxUAccessoryWt200InputsFieldTags = new uint[] { 8, 16, 24, 32, 40, 48, 56, 64 };
    public static mxt1xx_u_accessory_wt200_inputs DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mxt1xx_u_accessory_wt200_inputs DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mxt1xx_u_accessory_wt200_inputs ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_wt200_inputs__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mxt1xx_u_accessory_wt200_inputs, mxt1xx_u_accessory_wt200_inputs.Builder> InternalFieldAccessors {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_wt200_inputs__FieldAccessorTable; }
    }
    
    public const int InputAFieldNumber = 1;
    private bool hasInputA;
    private bool inputA_;
    public bool HasInputA {
      get { return hasInputA; }
    }
    public bool InputA {
      get { return inputA_; }
    }
    
    public const int InputBFieldNumber = 2;
    private bool hasInputB;
    private bool inputB_;
    public bool HasInputB {
      get { return hasInputB; }
    }
    public bool InputB {
      get { return inputB_; }
    }
    
    public const int InputCFieldNumber = 3;
    private bool hasInputC;
    private bool inputC_;
    public bool HasInputC {
      get { return hasInputC; }
    }
    public bool InputC {
      get { return inputC_; }
    }
    
    public const int InputDFieldNumber = 4;
    private bool hasInputD;
    private bool inputD_;
    public bool HasInputD {
      get { return hasInputD; }
    }
    public bool InputD {
      get { return inputD_; }
    }
    
    public const int MaskInputAFieldNumber = 5;
    private bool hasMaskInputA;
    private bool maskInputA_;
    public bool HasMaskInputA {
      get { return hasMaskInputA; }
    }
    public bool MaskInputA {
      get { return maskInputA_; }
    }
    
    public const int MaskInputBFieldNumber = 6;
    private bool hasMaskInputB;
    private bool maskInputB_;
    public bool HasMaskInputB {
      get { return hasMaskInputB; }
    }
    public bool MaskInputB {
      get { return maskInputB_; }
    }
    
    public const int MaskInputCFieldNumber = 7;
    private bool hasMaskInputC;
    private bool maskInputC_;
    public bool HasMaskInputC {
      get { return hasMaskInputC; }
    }
    public bool MaskInputC {
      get { return maskInputC_; }
    }
    
    public const int MaskInputDFieldNumber = 8;
    private bool hasMaskInputD;
    private bool maskInputD_;
    public bool HasMaskInputD {
      get { return hasMaskInputD; }
    }
    public bool MaskInputD {
      get { return maskInputD_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasInputA) return false;
        if (!hasInputB) return false;
        if (!hasInputC) return false;
        if (!hasInputD) return false;
        if (!hasMaskInputA) return false;
        if (!hasMaskInputB) return false;
        if (!hasMaskInputC) return false;
        if (!hasMaskInputD) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mxt1XxUAccessoryWt200InputsFieldNames;
      if (hasInputA) {
        output.WriteBool(1, field_names[0], InputA);
      }
      if (hasInputB) {
        output.WriteBool(2, field_names[1], InputB);
      }
      if (hasInputC) {
        output.WriteBool(3, field_names[2], InputC);
      }
      if (hasInputD) {
        output.WriteBool(4, field_names[3], InputD);
      }
      if (hasMaskInputA) {
        output.WriteBool(5, field_names[4], MaskInputA);
      }
      if (hasMaskInputB) {
        output.WriteBool(6, field_names[5], MaskInputB);
      }
      if (hasMaskInputC) {
        output.WriteBool(7, field_names[6], MaskInputC);
      }
      if (hasMaskInputD) {
        output.WriteBool(8, field_names[7], MaskInputD);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasInputA) {
        size += pb::CodedOutputStream.ComputeBoolSize(1, InputA);
      }
      if (hasInputB) {
        size += pb::CodedOutputStream.ComputeBoolSize(2, InputB);
      }
      if (hasInputC) {
        size += pb::CodedOutputStream.ComputeBoolSize(3, InputC);
      }
      if (hasInputD) {
        size += pb::CodedOutputStream.ComputeBoolSize(4, InputD);
      }
      if (hasMaskInputA) {
        size += pb::CodedOutputStream.ComputeBoolSize(5, MaskInputA);
      }
      if (hasMaskInputB) {
        size += pb::CodedOutputStream.ComputeBoolSize(6, MaskInputB);
      }
      if (hasMaskInputC) {
        size += pb::CodedOutputStream.ComputeBoolSize(7, MaskInputC);
      }
      if (hasMaskInputD) {
        size += pb::CodedOutputStream.ComputeBoolSize(8, MaskInputD);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mxt1xx_u_accessory_wt200_inputs ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_accessory_wt200_inputs ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_accessory_wt200_inputs ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_accessory_wt200_inputs ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_accessory_wt200_inputs ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_accessory_wt200_inputs ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_accessory_wt200_inputs ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mxt1xx_u_accessory_wt200_inputs ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mxt1xx_u_accessory_wt200_inputs ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_accessory_wt200_inputs ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mxt1xx_u_accessory_wt200_inputs MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mxt1xx_u_accessory_wt200_inputs prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mxt1xx_u_accessory_wt200_inputs, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mxt1xx_u_accessory_wt200_inputs cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mxt1xx_u_accessory_wt200_inputs result;
      
      private mxt1xx_u_accessory_wt200_inputs PrepareBuilder() {
        if (resultIsReadOnly) {
          mxt1xx_u_accessory_wt200_inputs original = result;
          result = new mxt1xx_u_accessory_wt200_inputs();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mxt1xx_u_accessory_wt200_inputs MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt200_inputs.Descriptor; }
      }
      
      public override mxt1xx_u_accessory_wt200_inputs DefaultInstanceForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt200_inputs.DefaultInstance; }
      }
      
      public override mxt1xx_u_accessory_wt200_inputs BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mxt1xx_u_accessory_wt200_inputs) {
          return MergeFrom((mxt1xx_u_accessory_wt200_inputs) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mxt1xx_u_accessory_wt200_inputs other) {
        if (other == global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt200_inputs.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasInputA) {
          InputA = other.InputA;
        }
        if (other.HasInputB) {
          InputB = other.InputB;
        }
        if (other.HasInputC) {
          InputC = other.InputC;
        }
        if (other.HasInputD) {
          InputD = other.InputD;
        }
        if (other.HasMaskInputA) {
          MaskInputA = other.MaskInputA;
        }
        if (other.HasMaskInputB) {
          MaskInputB = other.MaskInputB;
        }
        if (other.HasMaskInputC) {
          MaskInputC = other.MaskInputC;
        }
        if (other.HasMaskInputD) {
          MaskInputD = other.MaskInputD;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mxt1XxUAccessoryWt200InputsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mxt1XxUAccessoryWt200InputsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasInputA = input.ReadBool(ref result.inputA_);
              break;
            }
            case 16: {
              result.hasInputB = input.ReadBool(ref result.inputB_);
              break;
            }
            case 24: {
              result.hasInputC = input.ReadBool(ref result.inputC_);
              break;
            }
            case 32: {
              result.hasInputD = input.ReadBool(ref result.inputD_);
              break;
            }
            case 40: {
              result.hasMaskInputA = input.ReadBool(ref result.maskInputA_);
              break;
            }
            case 48: {
              result.hasMaskInputB = input.ReadBool(ref result.maskInputB_);
              break;
            }
            case 56: {
              result.hasMaskInputC = input.ReadBool(ref result.maskInputC_);
              break;
            }
            case 64: {
              result.hasMaskInputD = input.ReadBool(ref result.maskInputD_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasInputA {
        get { return result.hasInputA; }
      }
      public bool InputA {
        get { return result.InputA; }
        set { SetInputA(value); }
      }
      public Builder SetInputA(bool value) {
        PrepareBuilder();
        result.hasInputA = true;
        result.inputA_ = value;
        return this;
      }
      public Builder ClearInputA() {
        PrepareBuilder();
        result.hasInputA = false;
        result.inputA_ = false;
        return this;
      }
      
      public bool HasInputB {
        get { return result.hasInputB; }
      }
      public bool InputB {
        get { return result.InputB; }
        set { SetInputB(value); }
      }
      public Builder SetInputB(bool value) {
        PrepareBuilder();
        result.hasInputB = true;
        result.inputB_ = value;
        return this;
      }
      public Builder ClearInputB() {
        PrepareBuilder();
        result.hasInputB = false;
        result.inputB_ = false;
        return this;
      }
      
      public bool HasInputC {
        get { return result.hasInputC; }
      }
      public bool InputC {
        get { return result.InputC; }
        set { SetInputC(value); }
      }
      public Builder SetInputC(bool value) {
        PrepareBuilder();
        result.hasInputC = true;
        result.inputC_ = value;
        return this;
      }
      public Builder ClearInputC() {
        PrepareBuilder();
        result.hasInputC = false;
        result.inputC_ = false;
        return this;
      }
      
      public bool HasInputD {
        get { return result.hasInputD; }
      }
      public bool InputD {
        get { return result.InputD; }
        set { SetInputD(value); }
      }
      public Builder SetInputD(bool value) {
        PrepareBuilder();
        result.hasInputD = true;
        result.inputD_ = value;
        return this;
      }
      public Builder ClearInputD() {
        PrepareBuilder();
        result.hasInputD = false;
        result.inputD_ = false;
        return this;
      }
      
      public bool HasMaskInputA {
        get { return result.hasMaskInputA; }
      }
      public bool MaskInputA {
        get { return result.MaskInputA; }
        set { SetMaskInputA(value); }
      }
      public Builder SetMaskInputA(bool value) {
        PrepareBuilder();
        result.hasMaskInputA = true;
        result.maskInputA_ = value;
        return this;
      }
      public Builder ClearMaskInputA() {
        PrepareBuilder();
        result.hasMaskInputA = false;
        result.maskInputA_ = false;
        return this;
      }
      
      public bool HasMaskInputB {
        get { return result.hasMaskInputB; }
      }
      public bool MaskInputB {
        get { return result.MaskInputB; }
        set { SetMaskInputB(value); }
      }
      public Builder SetMaskInputB(bool value) {
        PrepareBuilder();
        result.hasMaskInputB = true;
        result.maskInputB_ = value;
        return this;
      }
      public Builder ClearMaskInputB() {
        PrepareBuilder();
        result.hasMaskInputB = false;
        result.maskInputB_ = false;
        return this;
      }
      
      public bool HasMaskInputC {
        get { return result.hasMaskInputC; }
      }
      public bool MaskInputC {
        get { return result.MaskInputC; }
        set { SetMaskInputC(value); }
      }
      public Builder SetMaskInputC(bool value) {
        PrepareBuilder();
        result.hasMaskInputC = true;
        result.maskInputC_ = value;
        return this;
      }
      public Builder ClearMaskInputC() {
        PrepareBuilder();
        result.hasMaskInputC = false;
        result.maskInputC_ = false;
        return this;
      }
      
      public bool HasMaskInputD {
        get { return result.hasMaskInputD; }
      }
      public bool MaskInputD {
        get { return result.MaskInputD; }
        set { SetMaskInputD(value); }
      }
      public Builder SetMaskInputD(bool value) {
        PrepareBuilder();
        result.hasMaskInputD = true;
        result.maskInputD_ = value;
        return this;
      }
      public Builder ClearMaskInputD() {
        PrepareBuilder();
        result.hasMaskInputD = false;
        result.maskInputD_ = false;
        return this;
      }
    }
    static mxt1xx_u_accessory_wt200_inputs() {
      object.ReferenceEquals(global::maxtrack.pb.mxt1xx.Mxt1Xx.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mxt1xx_u_accessory_wt200_outputs : pb::GeneratedMessage<mxt1xx_u_accessory_wt200_outputs, mxt1xx_u_accessory_wt200_outputs.Builder> {
    private mxt1xx_u_accessory_wt200_outputs() { }
    private static readonly mxt1xx_u_accessory_wt200_outputs defaultInstance = new mxt1xx_u_accessory_wt200_outputs().MakeReadOnly();
    private static readonly string[] _mxt1XxUAccessoryWt200OutputsFieldNames = new string[] { "output_a", "output_b", "output_c" };
    private static readonly uint[] _mxt1XxUAccessoryWt200OutputsFieldTags = new uint[] { 8, 16, 24 };
    public static mxt1xx_u_accessory_wt200_outputs DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mxt1xx_u_accessory_wt200_outputs DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mxt1xx_u_accessory_wt200_outputs ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_wt200_outputs__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mxt1xx_u_accessory_wt200_outputs, mxt1xx_u_accessory_wt200_outputs.Builder> InternalFieldAccessors {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_wt200_outputs__FieldAccessorTable; }
    }
    
    public const int OutputAFieldNumber = 1;
    private bool hasOutputA;
    private uint outputA_;
    public bool HasOutputA {
      get { return hasOutputA; }
    }
    [global::System.CLSCompliant(false)]
    public uint OutputA {
      get { return outputA_; }
    }
    
    public const int OutputBFieldNumber = 2;
    private bool hasOutputB;
    private uint outputB_;
    public bool HasOutputB {
      get { return hasOutputB; }
    }
    [global::System.CLSCompliant(false)]
    public uint OutputB {
      get { return outputB_; }
    }
    
    public const int OutputCFieldNumber = 3;
    private bool hasOutputC;
    private uint outputC_;
    public bool HasOutputC {
      get { return hasOutputC; }
    }
    [global::System.CLSCompliant(false)]
    public uint OutputC {
      get { return outputC_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasOutputA) return false;
        if (!hasOutputB) return false;
        if (!hasOutputC) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mxt1XxUAccessoryWt200OutputsFieldNames;
      if (hasOutputA) {
        output.WriteUInt32(1, field_names[0], OutputA);
      }
      if (hasOutputB) {
        output.WriteUInt32(2, field_names[1], OutputB);
      }
      if (hasOutputC) {
        output.WriteUInt32(3, field_names[2], OutputC);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasOutputA) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, OutputA);
      }
      if (hasOutputB) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, OutputB);
      }
      if (hasOutputC) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, OutputC);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mxt1xx_u_accessory_wt200_outputs ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_accessory_wt200_outputs ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_accessory_wt200_outputs ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_accessory_wt200_outputs ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_accessory_wt200_outputs ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_accessory_wt200_outputs ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_accessory_wt200_outputs ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mxt1xx_u_accessory_wt200_outputs ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mxt1xx_u_accessory_wt200_outputs ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_accessory_wt200_outputs ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mxt1xx_u_accessory_wt200_outputs MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mxt1xx_u_accessory_wt200_outputs prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mxt1xx_u_accessory_wt200_outputs, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mxt1xx_u_accessory_wt200_outputs cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mxt1xx_u_accessory_wt200_outputs result;
      
      private mxt1xx_u_accessory_wt200_outputs PrepareBuilder() {
        if (resultIsReadOnly) {
          mxt1xx_u_accessory_wt200_outputs original = result;
          result = new mxt1xx_u_accessory_wt200_outputs();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mxt1xx_u_accessory_wt200_outputs MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt200_outputs.Descriptor; }
      }
      
      public override mxt1xx_u_accessory_wt200_outputs DefaultInstanceForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt200_outputs.DefaultInstance; }
      }
      
      public override mxt1xx_u_accessory_wt200_outputs BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mxt1xx_u_accessory_wt200_outputs) {
          return MergeFrom((mxt1xx_u_accessory_wt200_outputs) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mxt1xx_u_accessory_wt200_outputs other) {
        if (other == global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt200_outputs.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasOutputA) {
          OutputA = other.OutputA;
        }
        if (other.HasOutputB) {
          OutputB = other.OutputB;
        }
        if (other.HasOutputC) {
          OutputC = other.OutputC;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mxt1XxUAccessoryWt200OutputsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mxt1XxUAccessoryWt200OutputsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasOutputA = input.ReadUInt32(ref result.outputA_);
              break;
            }
            case 16: {
              result.hasOutputB = input.ReadUInt32(ref result.outputB_);
              break;
            }
            case 24: {
              result.hasOutputC = input.ReadUInt32(ref result.outputC_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasOutputA {
        get { return result.hasOutputA; }
      }
      [global::System.CLSCompliant(false)]
      public uint OutputA {
        get { return result.OutputA; }
        set { SetOutputA(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetOutputA(uint value) {
        PrepareBuilder();
        result.hasOutputA = true;
        result.outputA_ = value;
        return this;
      }
      public Builder ClearOutputA() {
        PrepareBuilder();
        result.hasOutputA = false;
        result.outputA_ = 0;
        return this;
      }
      
      public bool HasOutputB {
        get { return result.hasOutputB; }
      }
      [global::System.CLSCompliant(false)]
      public uint OutputB {
        get { return result.OutputB; }
        set { SetOutputB(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetOutputB(uint value) {
        PrepareBuilder();
        result.hasOutputB = true;
        result.outputB_ = value;
        return this;
      }
      public Builder ClearOutputB() {
        PrepareBuilder();
        result.hasOutputB = false;
        result.outputB_ = 0;
        return this;
      }
      
      public bool HasOutputC {
        get { return result.hasOutputC; }
      }
      [global::System.CLSCompliant(false)]
      public uint OutputC {
        get { return result.OutputC; }
        set { SetOutputC(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetOutputC(uint value) {
        PrepareBuilder();
        result.hasOutputC = true;
        result.outputC_ = value;
        return this;
      }
      public Builder ClearOutputC() {
        PrepareBuilder();
        result.hasOutputC = false;
        result.outputC_ = 0;
        return this;
      }
    }
    static mxt1xx_u_accessory_wt200_outputs() {
      object.ReferenceEquals(global::maxtrack.pb.mxt1xx.Mxt1Xx.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mxt1xx_u_accessory_wt200 : pb::GeneratedMessage<mxt1xx_u_accessory_wt200, mxt1xx_u_accessory_wt200.Builder> {
    private mxt1xx_u_accessory_wt200() { }
    private static readonly mxt1xx_u_accessory_wt200 defaultInstance = new mxt1xx_u_accessory_wt200().MakeReadOnly();
    private static readonly string[] _mxt1XxUAccessoryWt200FieldNames = new string[] { "g_sensor_status", "index", "input_status", "onewire1", "onewire2", "output_status", "raw_data", "serial" };
    private static readonly uint[] _mxt1XxUAccessoryWt200FieldTags = new uint[] { 40, 16, 26, 48, 56, 34, 66, 8 };
    public static mxt1xx_u_accessory_wt200 DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mxt1xx_u_accessory_wt200 DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mxt1xx_u_accessory_wt200 ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_wt200__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mxt1xx_u_accessory_wt200, mxt1xx_u_accessory_wt200.Builder> InternalFieldAccessors {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_wt200__FieldAccessorTable; }
    }
    
    public const int SerialFieldNumber = 1;
    private bool hasSerial;
    private uint serial_;
    public bool HasSerial {
      get { return hasSerial; }
    }
    [global::System.CLSCompliant(false)]
    public uint Serial {
      get { return serial_; }
    }
    
    public const int IndexFieldNumber = 2;
    private bool hasIndex;
    private uint index_;
    public bool HasIndex {
      get { return hasIndex; }
    }
    [global::System.CLSCompliant(false)]
    public uint Index {
      get { return index_; }
    }
    
    public const int InputStatusFieldNumber = 3;
    private bool hasInputStatus;
    private global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt200_inputs inputStatus_;
    public bool HasInputStatus {
      get { return hasInputStatus; }
    }
    public global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt200_inputs InputStatus {
      get { return inputStatus_ ?? global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt200_inputs.DefaultInstance; }
    }
    
    public const int OutputStatusFieldNumber = 4;
    private bool hasOutputStatus;
    private global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt200_outputs outputStatus_;
    public bool HasOutputStatus {
      get { return hasOutputStatus; }
    }
    public global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt200_outputs OutputStatus {
      get { return outputStatus_ ?? global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt200_outputs.DefaultInstance; }
    }
    
    public const int GSensorStatusFieldNumber = 5;
    private bool hasGSensorStatus;
    private bool gSensorStatus_;
    public bool HasGSensorStatus {
      get { return hasGSensorStatus; }
    }
    public bool GSensorStatus {
      get { return gSensorStatus_; }
    }
    
    public const int Onewire1FieldNumber = 6;
    private bool hasOnewire1;
    private uint onewire1_;
    public bool HasOnewire1 {
      get { return hasOnewire1; }
    }
    [global::System.CLSCompliant(false)]
    public uint Onewire1 {
      get { return onewire1_; }
    }
    
    public const int Onewire2FieldNumber = 7;
    private bool hasOnewire2;
    private uint onewire2_;
    public bool HasOnewire2 {
      get { return hasOnewire2; }
    }
    [global::System.CLSCompliant(false)]
    public uint Onewire2 {
      get { return onewire2_; }
    }
    
    public const int RawDataFieldNumber = 8;
    private bool hasRawData;
    private string rawData_ = "";
    public bool HasRawData {
      get { return hasRawData; }
    }
    public string RawData {
      get { return rawData_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSerial) return false;
        if (!hasIndex) return false;
        if (!hasInputStatus) return false;
        if (!hasOutputStatus) return false;
        if (!hasGSensorStatus) return false;
        if (!hasOnewire1) return false;
        if (!hasOnewire2) return false;
        if (!hasRawData) return false;
        if (!InputStatus.IsInitialized) return false;
        if (!OutputStatus.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mxt1XxUAccessoryWt200FieldNames;
      if (hasSerial) {
        output.WriteUInt32(1, field_names[7], Serial);
      }
      if (hasIndex) {
        output.WriteUInt32(2, field_names[1], Index);
      }
      if (hasInputStatus) {
        output.WriteMessage(3, field_names[2], InputStatus);
      }
      if (hasOutputStatus) {
        output.WriteMessage(4, field_names[5], OutputStatus);
      }
      if (hasGSensorStatus) {
        output.WriteBool(5, field_names[0], GSensorStatus);
      }
      if (hasOnewire1) {
        output.WriteUInt32(6, field_names[3], Onewire1);
      }
      if (hasOnewire2) {
        output.WriteUInt32(7, field_names[4], Onewire2);
      }
      if (hasRawData) {
        output.WriteString(8, field_names[6], RawData);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasSerial) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, Serial);
      }
      if (hasIndex) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, Index);
      }
      if (hasInputStatus) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, InputStatus);
      }
      if (hasOutputStatus) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, OutputStatus);
      }
      if (hasGSensorStatus) {
        size += pb::CodedOutputStream.ComputeBoolSize(5, GSensorStatus);
      }
      if (hasOnewire1) {
        size += pb::CodedOutputStream.ComputeUInt32Size(6, Onewire1);
      }
      if (hasOnewire2) {
        size += pb::CodedOutputStream.ComputeUInt32Size(7, Onewire2);
      }
      if (hasRawData) {
        size += pb::CodedOutputStream.ComputeStringSize(8, RawData);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mxt1xx_u_accessory_wt200 ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_accessory_wt200 ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_accessory_wt200 ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_accessory_wt200 ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_accessory_wt200 ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_accessory_wt200 ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_accessory_wt200 ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mxt1xx_u_accessory_wt200 ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mxt1xx_u_accessory_wt200 ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_accessory_wt200 ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mxt1xx_u_accessory_wt200 MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mxt1xx_u_accessory_wt200 prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mxt1xx_u_accessory_wt200, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mxt1xx_u_accessory_wt200 cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mxt1xx_u_accessory_wt200 result;
      
      private mxt1xx_u_accessory_wt200 PrepareBuilder() {
        if (resultIsReadOnly) {
          mxt1xx_u_accessory_wt200 original = result;
          result = new mxt1xx_u_accessory_wt200();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mxt1xx_u_accessory_wt200 MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt200.Descriptor; }
      }
      
      public override mxt1xx_u_accessory_wt200 DefaultInstanceForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt200.DefaultInstance; }
      }
      
      public override mxt1xx_u_accessory_wt200 BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mxt1xx_u_accessory_wt200) {
          return MergeFrom((mxt1xx_u_accessory_wt200) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mxt1xx_u_accessory_wt200 other) {
        if (other == global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt200.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSerial) {
          Serial = other.Serial;
        }
        if (other.HasIndex) {
          Index = other.Index;
        }
        if (other.HasInputStatus) {
          MergeInputStatus(other.InputStatus);
        }
        if (other.HasOutputStatus) {
          MergeOutputStatus(other.OutputStatus);
        }
        if (other.HasGSensorStatus) {
          GSensorStatus = other.GSensorStatus;
        }
        if (other.HasOnewire1) {
          Onewire1 = other.Onewire1;
        }
        if (other.HasOnewire2) {
          Onewire2 = other.Onewire2;
        }
        if (other.HasRawData) {
          RawData = other.RawData;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mxt1XxUAccessoryWt200FieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mxt1XxUAccessoryWt200FieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasSerial = input.ReadUInt32(ref result.serial_);
              break;
            }
            case 16: {
              result.hasIndex = input.ReadUInt32(ref result.index_);
              break;
            }
            case 26: {
              global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt200_inputs.Builder subBuilder = global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt200_inputs.CreateBuilder();
              if (result.hasInputStatus) {
                subBuilder.MergeFrom(InputStatus);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              InputStatus = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt200_outputs.Builder subBuilder = global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt200_outputs.CreateBuilder();
              if (result.hasOutputStatus) {
                subBuilder.MergeFrom(OutputStatus);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              OutputStatus = subBuilder.BuildPartial();
              break;
            }
            case 40: {
              result.hasGSensorStatus = input.ReadBool(ref result.gSensorStatus_);
              break;
            }
            case 48: {
              result.hasOnewire1 = input.ReadUInt32(ref result.onewire1_);
              break;
            }
            case 56: {
              result.hasOnewire2 = input.ReadUInt32(ref result.onewire2_);
              break;
            }
            case 66: {
              result.hasRawData = input.ReadString(ref result.rawData_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSerial {
        get { return result.hasSerial; }
      }
      [global::System.CLSCompliant(false)]
      public uint Serial {
        get { return result.Serial; }
        set { SetSerial(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSerial(uint value) {
        PrepareBuilder();
        result.hasSerial = true;
        result.serial_ = value;
        return this;
      }
      public Builder ClearSerial() {
        PrepareBuilder();
        result.hasSerial = false;
        result.serial_ = 0;
        return this;
      }
      
      public bool HasIndex {
        get { return result.hasIndex; }
      }
      [global::System.CLSCompliant(false)]
      public uint Index {
        get { return result.Index; }
        set { SetIndex(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetIndex(uint value) {
        PrepareBuilder();
        result.hasIndex = true;
        result.index_ = value;
        return this;
      }
      public Builder ClearIndex() {
        PrepareBuilder();
        result.hasIndex = false;
        result.index_ = 0;
        return this;
      }
      
      public bool HasInputStatus {
       get { return result.hasInputStatus; }
      }
      public global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt200_inputs InputStatus {
        get { return result.InputStatus; }
        set { SetInputStatus(value); }
      }
      public Builder SetInputStatus(global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt200_inputs value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasInputStatus = true;
        result.inputStatus_ = value;
        return this;
      }
      public Builder SetInputStatus(global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt200_inputs.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasInputStatus = true;
        result.inputStatus_ = builderForValue.Build();
        return this;
      }
      public Builder MergeInputStatus(global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt200_inputs value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasInputStatus &&
            result.inputStatus_ != global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt200_inputs.DefaultInstance) {
            result.inputStatus_ = global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt200_inputs.CreateBuilder(result.inputStatus_).MergeFrom(value).BuildPartial();
        } else {
          result.inputStatus_ = value;
        }
        result.hasInputStatus = true;
        return this;
      }
      public Builder ClearInputStatus() {
        PrepareBuilder();
        result.hasInputStatus = false;
        result.inputStatus_ = null;
        return this;
      }
      
      public bool HasOutputStatus {
       get { return result.hasOutputStatus; }
      }
      public global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt200_outputs OutputStatus {
        get { return result.OutputStatus; }
        set { SetOutputStatus(value); }
      }
      public Builder SetOutputStatus(global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt200_outputs value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOutputStatus = true;
        result.outputStatus_ = value;
        return this;
      }
      public Builder SetOutputStatus(global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt200_outputs.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasOutputStatus = true;
        result.outputStatus_ = builderForValue.Build();
        return this;
      }
      public Builder MergeOutputStatus(global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt200_outputs value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasOutputStatus &&
            result.outputStatus_ != global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt200_outputs.DefaultInstance) {
            result.outputStatus_ = global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt200_outputs.CreateBuilder(result.outputStatus_).MergeFrom(value).BuildPartial();
        } else {
          result.outputStatus_ = value;
        }
        result.hasOutputStatus = true;
        return this;
      }
      public Builder ClearOutputStatus() {
        PrepareBuilder();
        result.hasOutputStatus = false;
        result.outputStatus_ = null;
        return this;
      }
      
      public bool HasGSensorStatus {
        get { return result.hasGSensorStatus; }
      }
      public bool GSensorStatus {
        get { return result.GSensorStatus; }
        set { SetGSensorStatus(value); }
      }
      public Builder SetGSensorStatus(bool value) {
        PrepareBuilder();
        result.hasGSensorStatus = true;
        result.gSensorStatus_ = value;
        return this;
      }
      public Builder ClearGSensorStatus() {
        PrepareBuilder();
        result.hasGSensorStatus = false;
        result.gSensorStatus_ = false;
        return this;
      }
      
      public bool HasOnewire1 {
        get { return result.hasOnewire1; }
      }
      [global::System.CLSCompliant(false)]
      public uint Onewire1 {
        get { return result.Onewire1; }
        set { SetOnewire1(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetOnewire1(uint value) {
        PrepareBuilder();
        result.hasOnewire1 = true;
        result.onewire1_ = value;
        return this;
      }
      public Builder ClearOnewire1() {
        PrepareBuilder();
        result.hasOnewire1 = false;
        result.onewire1_ = 0;
        return this;
      }
      
      public bool HasOnewire2 {
        get { return result.hasOnewire2; }
      }
      [global::System.CLSCompliant(false)]
      public uint Onewire2 {
        get { return result.Onewire2; }
        set { SetOnewire2(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetOnewire2(uint value) {
        PrepareBuilder();
        result.hasOnewire2 = true;
        result.onewire2_ = value;
        return this;
      }
      public Builder ClearOnewire2() {
        PrepareBuilder();
        result.hasOnewire2 = false;
        result.onewire2_ = 0;
        return this;
      }
      
      public bool HasRawData {
        get { return result.hasRawData; }
      }
      public string RawData {
        get { return result.RawData; }
        set { SetRawData(value); }
      }
      public Builder SetRawData(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRawData = true;
        result.rawData_ = value;
        return this;
      }
      public Builder ClearRawData() {
        PrepareBuilder();
        result.hasRawData = false;
        result.rawData_ = "";
        return this;
      }
    }
    static mxt1xx_u_accessory_wt200() {
      object.ReferenceEquals(global::maxtrack.pb.mxt1xx.Mxt1Xx.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mxt1xx_u_accessory_wt300 : pb::GeneratedMessage<mxt1xx_u_accessory_wt300, mxt1xx_u_accessory_wt300.Builder> {
    private mxt1xx_u_accessory_wt300() { }
    private static readonly mxt1xx_u_accessory_wt300 defaultInstance = new mxt1xx_u_accessory_wt300().MakeReadOnly();
    private static readonly string[] _mxt1XxUAccessoryWt300FieldNames = new string[] { "button_status", "event_code", "message_code", "message_group", "over_temperature", "raw_data", "serial", "under_temperature" };
    private static readonly uint[] _mxt1XxUAccessoryWt300FieldTags = new uint[] { 16, 40, 56, 48, 32, 66, 8, 24 };
    public static mxt1xx_u_accessory_wt300 DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mxt1xx_u_accessory_wt300 DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mxt1xx_u_accessory_wt300 ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_wt300__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mxt1xx_u_accessory_wt300, mxt1xx_u_accessory_wt300.Builder> InternalFieldAccessors {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_wt300__FieldAccessorTable; }
    }
    
    public const int SerialFieldNumber = 1;
    private bool hasSerial;
    private uint serial_;
    public bool HasSerial {
      get { return hasSerial; }
    }
    [global::System.CLSCompliant(false)]
    public uint Serial {
      get { return serial_; }
    }
    
    public const int ButtonStatusFieldNumber = 2;
    private bool hasButtonStatus;
    private uint buttonStatus_;
    public bool HasButtonStatus {
      get { return hasButtonStatus; }
    }
    [global::System.CLSCompliant(false)]
    public uint ButtonStatus {
      get { return buttonStatus_; }
    }
    
    public const int UnderTemperatureFieldNumber = 3;
    private bool hasUnderTemperature;
    private bool underTemperature_;
    public bool HasUnderTemperature {
      get { return hasUnderTemperature; }
    }
    public bool UnderTemperature {
      get { return underTemperature_; }
    }
    
    public const int OverTemperatureFieldNumber = 4;
    private bool hasOverTemperature;
    private bool overTemperature_;
    public bool HasOverTemperature {
      get { return hasOverTemperature; }
    }
    public bool OverTemperature {
      get { return overTemperature_; }
    }
    
    public const int EventCodeFieldNumber = 5;
    private bool hasEventCode;
    private uint eventCode_;
    public bool HasEventCode {
      get { return hasEventCode; }
    }
    [global::System.CLSCompliant(false)]
    public uint EventCode {
      get { return eventCode_; }
    }
    
    public const int MessageGroupFieldNumber = 6;
    private bool hasMessageGroup;
    private uint messageGroup_;
    public bool HasMessageGroup {
      get { return hasMessageGroup; }
    }
    [global::System.CLSCompliant(false)]
    public uint MessageGroup {
      get { return messageGroup_; }
    }
    
    public const int MessageCodeFieldNumber = 7;
    private bool hasMessageCode;
    private uint messageCode_;
    public bool HasMessageCode {
      get { return hasMessageCode; }
    }
    [global::System.CLSCompliant(false)]
    public uint MessageCode {
      get { return messageCode_; }
    }
    
    public const int RawDataFieldNumber = 8;
    private bool hasRawData;
    private string rawData_ = "";
    public bool HasRawData {
      get { return hasRawData; }
    }
    public string RawData {
      get { return rawData_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSerial) return false;
        if (!hasButtonStatus) return false;
        if (!hasUnderTemperature) return false;
        if (!hasOverTemperature) return false;
        if (!hasEventCode) return false;
        if (!hasMessageGroup) return false;
        if (!hasMessageCode) return false;
        if (!hasRawData) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mxt1XxUAccessoryWt300FieldNames;
      if (hasSerial) {
        output.WriteUInt32(1, field_names[6], Serial);
      }
      if (hasButtonStatus) {
        output.WriteUInt32(2, field_names[0], ButtonStatus);
      }
      if (hasUnderTemperature) {
        output.WriteBool(3, field_names[7], UnderTemperature);
      }
      if (hasOverTemperature) {
        output.WriteBool(4, field_names[4], OverTemperature);
      }
      if (hasEventCode) {
        output.WriteUInt32(5, field_names[1], EventCode);
      }
      if (hasMessageGroup) {
        output.WriteUInt32(6, field_names[3], MessageGroup);
      }
      if (hasMessageCode) {
        output.WriteUInt32(7, field_names[2], MessageCode);
      }
      if (hasRawData) {
        output.WriteString(8, field_names[5], RawData);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasSerial) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, Serial);
      }
      if (hasButtonStatus) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, ButtonStatus);
      }
      if (hasUnderTemperature) {
        size += pb::CodedOutputStream.ComputeBoolSize(3, UnderTemperature);
      }
      if (hasOverTemperature) {
        size += pb::CodedOutputStream.ComputeBoolSize(4, OverTemperature);
      }
      if (hasEventCode) {
        size += pb::CodedOutputStream.ComputeUInt32Size(5, EventCode);
      }
      if (hasMessageGroup) {
        size += pb::CodedOutputStream.ComputeUInt32Size(6, MessageGroup);
      }
      if (hasMessageCode) {
        size += pb::CodedOutputStream.ComputeUInt32Size(7, MessageCode);
      }
      if (hasRawData) {
        size += pb::CodedOutputStream.ComputeStringSize(8, RawData);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mxt1xx_u_accessory_wt300 ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_accessory_wt300 ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_accessory_wt300 ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_accessory_wt300 ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_accessory_wt300 ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_accessory_wt300 ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_accessory_wt300 ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mxt1xx_u_accessory_wt300 ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mxt1xx_u_accessory_wt300 ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_accessory_wt300 ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mxt1xx_u_accessory_wt300 MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mxt1xx_u_accessory_wt300 prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mxt1xx_u_accessory_wt300, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mxt1xx_u_accessory_wt300 cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mxt1xx_u_accessory_wt300 result;
      
      private mxt1xx_u_accessory_wt300 PrepareBuilder() {
        if (resultIsReadOnly) {
          mxt1xx_u_accessory_wt300 original = result;
          result = new mxt1xx_u_accessory_wt300();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mxt1xx_u_accessory_wt300 MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt300.Descriptor; }
      }
      
      public override mxt1xx_u_accessory_wt300 DefaultInstanceForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt300.DefaultInstance; }
      }
      
      public override mxt1xx_u_accessory_wt300 BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mxt1xx_u_accessory_wt300) {
          return MergeFrom((mxt1xx_u_accessory_wt300) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mxt1xx_u_accessory_wt300 other) {
        if (other == global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt300.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSerial) {
          Serial = other.Serial;
        }
        if (other.HasButtonStatus) {
          ButtonStatus = other.ButtonStatus;
        }
        if (other.HasUnderTemperature) {
          UnderTemperature = other.UnderTemperature;
        }
        if (other.HasOverTemperature) {
          OverTemperature = other.OverTemperature;
        }
        if (other.HasEventCode) {
          EventCode = other.EventCode;
        }
        if (other.HasMessageGroup) {
          MessageGroup = other.MessageGroup;
        }
        if (other.HasMessageCode) {
          MessageCode = other.MessageCode;
        }
        if (other.HasRawData) {
          RawData = other.RawData;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mxt1XxUAccessoryWt300FieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mxt1XxUAccessoryWt300FieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasSerial = input.ReadUInt32(ref result.serial_);
              break;
            }
            case 16: {
              result.hasButtonStatus = input.ReadUInt32(ref result.buttonStatus_);
              break;
            }
            case 24: {
              result.hasUnderTemperature = input.ReadBool(ref result.underTemperature_);
              break;
            }
            case 32: {
              result.hasOverTemperature = input.ReadBool(ref result.overTemperature_);
              break;
            }
            case 40: {
              result.hasEventCode = input.ReadUInt32(ref result.eventCode_);
              break;
            }
            case 48: {
              result.hasMessageGroup = input.ReadUInt32(ref result.messageGroup_);
              break;
            }
            case 56: {
              result.hasMessageCode = input.ReadUInt32(ref result.messageCode_);
              break;
            }
            case 66: {
              result.hasRawData = input.ReadString(ref result.rawData_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSerial {
        get { return result.hasSerial; }
      }
      [global::System.CLSCompliant(false)]
      public uint Serial {
        get { return result.Serial; }
        set { SetSerial(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSerial(uint value) {
        PrepareBuilder();
        result.hasSerial = true;
        result.serial_ = value;
        return this;
      }
      public Builder ClearSerial() {
        PrepareBuilder();
        result.hasSerial = false;
        result.serial_ = 0;
        return this;
      }
      
      public bool HasButtonStatus {
        get { return result.hasButtonStatus; }
      }
      [global::System.CLSCompliant(false)]
      public uint ButtonStatus {
        get { return result.ButtonStatus; }
        set { SetButtonStatus(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetButtonStatus(uint value) {
        PrepareBuilder();
        result.hasButtonStatus = true;
        result.buttonStatus_ = value;
        return this;
      }
      public Builder ClearButtonStatus() {
        PrepareBuilder();
        result.hasButtonStatus = false;
        result.buttonStatus_ = 0;
        return this;
      }
      
      public bool HasUnderTemperature {
        get { return result.hasUnderTemperature; }
      }
      public bool UnderTemperature {
        get { return result.UnderTemperature; }
        set { SetUnderTemperature(value); }
      }
      public Builder SetUnderTemperature(bool value) {
        PrepareBuilder();
        result.hasUnderTemperature = true;
        result.underTemperature_ = value;
        return this;
      }
      public Builder ClearUnderTemperature() {
        PrepareBuilder();
        result.hasUnderTemperature = false;
        result.underTemperature_ = false;
        return this;
      }
      
      public bool HasOverTemperature {
        get { return result.hasOverTemperature; }
      }
      public bool OverTemperature {
        get { return result.OverTemperature; }
        set { SetOverTemperature(value); }
      }
      public Builder SetOverTemperature(bool value) {
        PrepareBuilder();
        result.hasOverTemperature = true;
        result.overTemperature_ = value;
        return this;
      }
      public Builder ClearOverTemperature() {
        PrepareBuilder();
        result.hasOverTemperature = false;
        result.overTemperature_ = false;
        return this;
      }
      
      public bool HasEventCode {
        get { return result.hasEventCode; }
      }
      [global::System.CLSCompliant(false)]
      public uint EventCode {
        get { return result.EventCode; }
        set { SetEventCode(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetEventCode(uint value) {
        PrepareBuilder();
        result.hasEventCode = true;
        result.eventCode_ = value;
        return this;
      }
      public Builder ClearEventCode() {
        PrepareBuilder();
        result.hasEventCode = false;
        result.eventCode_ = 0;
        return this;
      }
      
      public bool HasMessageGroup {
        get { return result.hasMessageGroup; }
      }
      [global::System.CLSCompliant(false)]
      public uint MessageGroup {
        get { return result.MessageGroup; }
        set { SetMessageGroup(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetMessageGroup(uint value) {
        PrepareBuilder();
        result.hasMessageGroup = true;
        result.messageGroup_ = value;
        return this;
      }
      public Builder ClearMessageGroup() {
        PrepareBuilder();
        result.hasMessageGroup = false;
        result.messageGroup_ = 0;
        return this;
      }
      
      public bool HasMessageCode {
        get { return result.hasMessageCode; }
      }
      [global::System.CLSCompliant(false)]
      public uint MessageCode {
        get { return result.MessageCode; }
        set { SetMessageCode(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetMessageCode(uint value) {
        PrepareBuilder();
        result.hasMessageCode = true;
        result.messageCode_ = value;
        return this;
      }
      public Builder ClearMessageCode() {
        PrepareBuilder();
        result.hasMessageCode = false;
        result.messageCode_ = 0;
        return this;
      }
      
      public bool HasRawData {
        get { return result.hasRawData; }
      }
      public string RawData {
        get { return result.RawData; }
        set { SetRawData(value); }
      }
      public Builder SetRawData(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRawData = true;
        result.rawData_ = value;
        return this;
      }
      public Builder ClearRawData() {
        PrepareBuilder();
        result.hasRawData = false;
        result.rawData_ = "";
        return this;
      }
    }
    static mxt1xx_u_accessory_wt300() {
      object.ReferenceEquals(global::maxtrack.pb.mxt1xx.Mxt1Xx.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mxt1xx_u_accessory_wt400 : pb::GeneratedMessage<mxt1xx_u_accessory_wt400, mxt1xx_u_accessory_wt400.Builder> {
    private mxt1xx_u_accessory_wt400() { }
    private static readonly mxt1xx_u_accessory_wt400 defaultInstance = new mxt1xx_u_accessory_wt400().MakeReadOnly();
    private static readonly string[] _mxt1XxUAccessoryWt400FieldNames = new string[] { "battery_level", "button_status", "door_status", "external_temperature", "moving_status", "power_fail", "raw_data", "serial" };
    private static readonly uint[] _mxt1XxUAccessoryWt400FieldTags = new uint[] { 24, 48, 40, 16, 32, 56, 66, 8 };
    public static mxt1xx_u_accessory_wt400 DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mxt1xx_u_accessory_wt400 DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mxt1xx_u_accessory_wt400 ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_wt400__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mxt1xx_u_accessory_wt400, mxt1xx_u_accessory_wt400.Builder> InternalFieldAccessors {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_wt400__FieldAccessorTable; }
    }
    
    public const int SerialFieldNumber = 1;
    private bool hasSerial;
    private uint serial_;
    public bool HasSerial {
      get { return hasSerial; }
    }
    [global::System.CLSCompliant(false)]
    public uint Serial {
      get { return serial_; }
    }
    
    public const int ExternalTemperatureFieldNumber = 2;
    private bool hasExternalTemperature;
    private uint externalTemperature_;
    public bool HasExternalTemperature {
      get { return hasExternalTemperature; }
    }
    [global::System.CLSCompliant(false)]
    public uint ExternalTemperature {
      get { return externalTemperature_; }
    }
    
    public const int BatteryLevelFieldNumber = 3;
    private bool hasBatteryLevel;
    private uint batteryLevel_;
    public bool HasBatteryLevel {
      get { return hasBatteryLevel; }
    }
    [global::System.CLSCompliant(false)]
    public uint BatteryLevel {
      get { return batteryLevel_; }
    }
    
    public const int MovingStatusFieldNumber = 4;
    private bool hasMovingStatus;
    private bool movingStatus_;
    public bool HasMovingStatus {
      get { return hasMovingStatus; }
    }
    public bool MovingStatus {
      get { return movingStatus_; }
    }
    
    public const int DoorStatusFieldNumber = 5;
    private bool hasDoorStatus;
    private bool doorStatus_;
    public bool HasDoorStatus {
      get { return hasDoorStatus; }
    }
    public bool DoorStatus {
      get { return doorStatus_; }
    }
    
    public const int ButtonStatusFieldNumber = 6;
    private bool hasButtonStatus;
    private uint buttonStatus_;
    public bool HasButtonStatus {
      get { return hasButtonStatus; }
    }
    [global::System.CLSCompliant(false)]
    public uint ButtonStatus {
      get { return buttonStatus_; }
    }
    
    public const int PowerFailFieldNumber = 7;
    private bool hasPowerFail;
    private bool powerFail_;
    public bool HasPowerFail {
      get { return hasPowerFail; }
    }
    public bool PowerFail {
      get { return powerFail_; }
    }
    
    public const int RawDataFieldNumber = 8;
    private bool hasRawData;
    private string rawData_ = "";
    public bool HasRawData {
      get { return hasRawData; }
    }
    public string RawData {
      get { return rawData_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSerial) return false;
        if (!hasExternalTemperature) return false;
        if (!hasBatteryLevel) return false;
        if (!hasMovingStatus) return false;
        if (!hasDoorStatus) return false;
        if (!hasButtonStatus) return false;
        if (!hasPowerFail) return false;
        if (!hasRawData) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mxt1XxUAccessoryWt400FieldNames;
      if (hasSerial) {
        output.WriteUInt32(1, field_names[7], Serial);
      }
      if (hasExternalTemperature) {
        output.WriteUInt32(2, field_names[3], ExternalTemperature);
      }
      if (hasBatteryLevel) {
        output.WriteUInt32(3, field_names[0], BatteryLevel);
      }
      if (hasMovingStatus) {
        output.WriteBool(4, field_names[4], MovingStatus);
      }
      if (hasDoorStatus) {
        output.WriteBool(5, field_names[2], DoorStatus);
      }
      if (hasButtonStatus) {
        output.WriteUInt32(6, field_names[1], ButtonStatus);
      }
      if (hasPowerFail) {
        output.WriteBool(7, field_names[5], PowerFail);
      }
      if (hasRawData) {
        output.WriteString(8, field_names[6], RawData);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasSerial) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, Serial);
      }
      if (hasExternalTemperature) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, ExternalTemperature);
      }
      if (hasBatteryLevel) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, BatteryLevel);
      }
      if (hasMovingStatus) {
        size += pb::CodedOutputStream.ComputeBoolSize(4, MovingStatus);
      }
      if (hasDoorStatus) {
        size += pb::CodedOutputStream.ComputeBoolSize(5, DoorStatus);
      }
      if (hasButtonStatus) {
        size += pb::CodedOutputStream.ComputeUInt32Size(6, ButtonStatus);
      }
      if (hasPowerFail) {
        size += pb::CodedOutputStream.ComputeBoolSize(7, PowerFail);
      }
      if (hasRawData) {
        size += pb::CodedOutputStream.ComputeStringSize(8, RawData);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mxt1xx_u_accessory_wt400 ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_accessory_wt400 ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_accessory_wt400 ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_accessory_wt400 ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_accessory_wt400 ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_accessory_wt400 ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_accessory_wt400 ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mxt1xx_u_accessory_wt400 ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mxt1xx_u_accessory_wt400 ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_accessory_wt400 ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mxt1xx_u_accessory_wt400 MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mxt1xx_u_accessory_wt400 prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mxt1xx_u_accessory_wt400, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mxt1xx_u_accessory_wt400 cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mxt1xx_u_accessory_wt400 result;
      
      private mxt1xx_u_accessory_wt400 PrepareBuilder() {
        if (resultIsReadOnly) {
          mxt1xx_u_accessory_wt400 original = result;
          result = new mxt1xx_u_accessory_wt400();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mxt1xx_u_accessory_wt400 MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt400.Descriptor; }
      }
      
      public override mxt1xx_u_accessory_wt400 DefaultInstanceForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt400.DefaultInstance; }
      }
      
      public override mxt1xx_u_accessory_wt400 BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mxt1xx_u_accessory_wt400) {
          return MergeFrom((mxt1xx_u_accessory_wt400) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mxt1xx_u_accessory_wt400 other) {
        if (other == global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt400.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSerial) {
          Serial = other.Serial;
        }
        if (other.HasExternalTemperature) {
          ExternalTemperature = other.ExternalTemperature;
        }
        if (other.HasBatteryLevel) {
          BatteryLevel = other.BatteryLevel;
        }
        if (other.HasMovingStatus) {
          MovingStatus = other.MovingStatus;
        }
        if (other.HasDoorStatus) {
          DoorStatus = other.DoorStatus;
        }
        if (other.HasButtonStatus) {
          ButtonStatus = other.ButtonStatus;
        }
        if (other.HasPowerFail) {
          PowerFail = other.PowerFail;
        }
        if (other.HasRawData) {
          RawData = other.RawData;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mxt1XxUAccessoryWt400FieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mxt1XxUAccessoryWt400FieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasSerial = input.ReadUInt32(ref result.serial_);
              break;
            }
            case 16: {
              result.hasExternalTemperature = input.ReadUInt32(ref result.externalTemperature_);
              break;
            }
            case 24: {
              result.hasBatteryLevel = input.ReadUInt32(ref result.batteryLevel_);
              break;
            }
            case 32: {
              result.hasMovingStatus = input.ReadBool(ref result.movingStatus_);
              break;
            }
            case 40: {
              result.hasDoorStatus = input.ReadBool(ref result.doorStatus_);
              break;
            }
            case 48: {
              result.hasButtonStatus = input.ReadUInt32(ref result.buttonStatus_);
              break;
            }
            case 56: {
              result.hasPowerFail = input.ReadBool(ref result.powerFail_);
              break;
            }
            case 66: {
              result.hasRawData = input.ReadString(ref result.rawData_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSerial {
        get { return result.hasSerial; }
      }
      [global::System.CLSCompliant(false)]
      public uint Serial {
        get { return result.Serial; }
        set { SetSerial(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSerial(uint value) {
        PrepareBuilder();
        result.hasSerial = true;
        result.serial_ = value;
        return this;
      }
      public Builder ClearSerial() {
        PrepareBuilder();
        result.hasSerial = false;
        result.serial_ = 0;
        return this;
      }
      
      public bool HasExternalTemperature {
        get { return result.hasExternalTemperature; }
      }
      [global::System.CLSCompliant(false)]
      public uint ExternalTemperature {
        get { return result.ExternalTemperature; }
        set { SetExternalTemperature(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetExternalTemperature(uint value) {
        PrepareBuilder();
        result.hasExternalTemperature = true;
        result.externalTemperature_ = value;
        return this;
      }
      public Builder ClearExternalTemperature() {
        PrepareBuilder();
        result.hasExternalTemperature = false;
        result.externalTemperature_ = 0;
        return this;
      }
      
      public bool HasBatteryLevel {
        get { return result.hasBatteryLevel; }
      }
      [global::System.CLSCompliant(false)]
      public uint BatteryLevel {
        get { return result.BatteryLevel; }
        set { SetBatteryLevel(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetBatteryLevel(uint value) {
        PrepareBuilder();
        result.hasBatteryLevel = true;
        result.batteryLevel_ = value;
        return this;
      }
      public Builder ClearBatteryLevel() {
        PrepareBuilder();
        result.hasBatteryLevel = false;
        result.batteryLevel_ = 0;
        return this;
      }
      
      public bool HasMovingStatus {
        get { return result.hasMovingStatus; }
      }
      public bool MovingStatus {
        get { return result.MovingStatus; }
        set { SetMovingStatus(value); }
      }
      public Builder SetMovingStatus(bool value) {
        PrepareBuilder();
        result.hasMovingStatus = true;
        result.movingStatus_ = value;
        return this;
      }
      public Builder ClearMovingStatus() {
        PrepareBuilder();
        result.hasMovingStatus = false;
        result.movingStatus_ = false;
        return this;
      }
      
      public bool HasDoorStatus {
        get { return result.hasDoorStatus; }
      }
      public bool DoorStatus {
        get { return result.DoorStatus; }
        set { SetDoorStatus(value); }
      }
      public Builder SetDoorStatus(bool value) {
        PrepareBuilder();
        result.hasDoorStatus = true;
        result.doorStatus_ = value;
        return this;
      }
      public Builder ClearDoorStatus() {
        PrepareBuilder();
        result.hasDoorStatus = false;
        result.doorStatus_ = false;
        return this;
      }
      
      public bool HasButtonStatus {
        get { return result.hasButtonStatus; }
      }
      [global::System.CLSCompliant(false)]
      public uint ButtonStatus {
        get { return result.ButtonStatus; }
        set { SetButtonStatus(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetButtonStatus(uint value) {
        PrepareBuilder();
        result.hasButtonStatus = true;
        result.buttonStatus_ = value;
        return this;
      }
      public Builder ClearButtonStatus() {
        PrepareBuilder();
        result.hasButtonStatus = false;
        result.buttonStatus_ = 0;
        return this;
      }
      
      public bool HasPowerFail {
        get { return result.hasPowerFail; }
      }
      public bool PowerFail {
        get { return result.PowerFail; }
        set { SetPowerFail(value); }
      }
      public Builder SetPowerFail(bool value) {
        PrepareBuilder();
        result.hasPowerFail = true;
        result.powerFail_ = value;
        return this;
      }
      public Builder ClearPowerFail() {
        PrepareBuilder();
        result.hasPowerFail = false;
        result.powerFail_ = false;
        return this;
      }
      
      public bool HasRawData {
        get { return result.hasRawData; }
      }
      public string RawData {
        get { return result.RawData; }
        set { SetRawData(value); }
      }
      public Builder SetRawData(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRawData = true;
        result.rawData_ = value;
        return this;
      }
      public Builder ClearRawData() {
        PrepareBuilder();
        result.hasRawData = false;
        result.rawData_ = "";
        return this;
      }
    }
    static mxt1xx_u_accessory_wt400() {
      object.ReferenceEquals(global::maxtrack.pb.mxt1xx.Mxt1Xx.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mxt1xx_u_accessory_mxt101 : pb::GeneratedMessage<mxt1xx_u_accessory_mxt101, mxt1xx_u_accessory_mxt101.Builder> {
    private mxt1xx_u_accessory_mxt101() { }
    private static readonly mxt1xx_u_accessory_mxt101 defaultInstance = new mxt1xx_u_accessory_mxt101().MakeReadOnly();
    private static readonly string[] _mxt1XxUAccessoryMxt101FieldNames = new string[] { "battery_level", "button_status", "gprs_indicator", "internal_temperature", "raw_data", "serial" };
    private static readonly uint[] _mxt1XxUAccessoryMxt101FieldTags = new uint[] { 24, 32, 16, 40, 50, 8 };
    public static mxt1xx_u_accessory_mxt101 DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mxt1xx_u_accessory_mxt101 DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mxt1xx_u_accessory_mxt101 ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_mxt101__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mxt1xx_u_accessory_mxt101, mxt1xx_u_accessory_mxt101.Builder> InternalFieldAccessors {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_mxt101__FieldAccessorTable; }
    }
    
    public const int SerialFieldNumber = 1;
    private bool hasSerial;
    private uint serial_;
    public bool HasSerial {
      get { return hasSerial; }
    }
    [global::System.CLSCompliant(false)]
    public uint Serial {
      get { return serial_; }
    }
    
    public const int GprsIndicatorFieldNumber = 2;
    private bool hasGprsIndicator;
    private bool gprsIndicator_;
    public bool HasGprsIndicator {
      get { return hasGprsIndicator; }
    }
    public bool GprsIndicator {
      get { return gprsIndicator_; }
    }
    
    public const int BatteryLevelFieldNumber = 3;
    private bool hasBatteryLevel;
    private uint batteryLevel_;
    public bool HasBatteryLevel {
      get { return hasBatteryLevel; }
    }
    [global::System.CLSCompliant(false)]
    public uint BatteryLevel {
      get { return batteryLevel_; }
    }
    
    public const int ButtonStatusFieldNumber = 4;
    private bool hasButtonStatus;
    private uint buttonStatus_;
    public bool HasButtonStatus {
      get { return hasButtonStatus; }
    }
    [global::System.CLSCompliant(false)]
    public uint ButtonStatus {
      get { return buttonStatus_; }
    }
    
    public const int InternalTemperatureFieldNumber = 5;
    private bool hasInternalTemperature;
    private int internalTemperature_;
    public bool HasInternalTemperature {
      get { return hasInternalTemperature; }
    }
    public int InternalTemperature {
      get { return internalTemperature_; }
    }
    
    public const int RawDataFieldNumber = 6;
    private bool hasRawData;
    private string rawData_ = "";
    public bool HasRawData {
      get { return hasRawData; }
    }
    public string RawData {
      get { return rawData_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSerial) return false;
        if (!hasGprsIndicator) return false;
        if (!hasBatteryLevel) return false;
        if (!hasButtonStatus) return false;
        if (!hasInternalTemperature) return false;
        if (!hasRawData) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mxt1XxUAccessoryMxt101FieldNames;
      if (hasSerial) {
        output.WriteUInt32(1, field_names[5], Serial);
      }
      if (hasGprsIndicator) {
        output.WriteBool(2, field_names[2], GprsIndicator);
      }
      if (hasBatteryLevel) {
        output.WriteUInt32(3, field_names[0], BatteryLevel);
      }
      if (hasButtonStatus) {
        output.WriteUInt32(4, field_names[1], ButtonStatus);
      }
      if (hasInternalTemperature) {
        output.WriteSInt32(5, field_names[3], InternalTemperature);
      }
      if (hasRawData) {
        output.WriteString(6, field_names[4], RawData);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasSerial) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, Serial);
      }
      if (hasGprsIndicator) {
        size += pb::CodedOutputStream.ComputeBoolSize(2, GprsIndicator);
      }
      if (hasBatteryLevel) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, BatteryLevel);
      }
      if (hasButtonStatus) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, ButtonStatus);
      }
      if (hasInternalTemperature) {
        size += pb::CodedOutputStream.ComputeSInt32Size(5, InternalTemperature);
      }
      if (hasRawData) {
        size += pb::CodedOutputStream.ComputeStringSize(6, RawData);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mxt1xx_u_accessory_mxt101 ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_accessory_mxt101 ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_accessory_mxt101 ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_accessory_mxt101 ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_accessory_mxt101 ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_accessory_mxt101 ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_accessory_mxt101 ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mxt1xx_u_accessory_mxt101 ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mxt1xx_u_accessory_mxt101 ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_accessory_mxt101 ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mxt1xx_u_accessory_mxt101 MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mxt1xx_u_accessory_mxt101 prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mxt1xx_u_accessory_mxt101, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mxt1xx_u_accessory_mxt101 cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mxt1xx_u_accessory_mxt101 result;
      
      private mxt1xx_u_accessory_mxt101 PrepareBuilder() {
        if (resultIsReadOnly) {
          mxt1xx_u_accessory_mxt101 original = result;
          result = new mxt1xx_u_accessory_mxt101();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mxt1xx_u_accessory_mxt101 MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_mxt101.Descriptor; }
      }
      
      public override mxt1xx_u_accessory_mxt101 DefaultInstanceForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_mxt101.DefaultInstance; }
      }
      
      public override mxt1xx_u_accessory_mxt101 BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mxt1xx_u_accessory_mxt101) {
          return MergeFrom((mxt1xx_u_accessory_mxt101) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mxt1xx_u_accessory_mxt101 other) {
        if (other == global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_mxt101.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSerial) {
          Serial = other.Serial;
        }
        if (other.HasGprsIndicator) {
          GprsIndicator = other.GprsIndicator;
        }
        if (other.HasBatteryLevel) {
          BatteryLevel = other.BatteryLevel;
        }
        if (other.HasButtonStatus) {
          ButtonStatus = other.ButtonStatus;
        }
        if (other.HasInternalTemperature) {
          InternalTemperature = other.InternalTemperature;
        }
        if (other.HasRawData) {
          RawData = other.RawData;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mxt1XxUAccessoryMxt101FieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mxt1XxUAccessoryMxt101FieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasSerial = input.ReadUInt32(ref result.serial_);
              break;
            }
            case 16: {
              result.hasGprsIndicator = input.ReadBool(ref result.gprsIndicator_);
              break;
            }
            case 24: {
              result.hasBatteryLevel = input.ReadUInt32(ref result.batteryLevel_);
              break;
            }
            case 32: {
              result.hasButtonStatus = input.ReadUInt32(ref result.buttonStatus_);
              break;
            }
            case 40: {
              result.hasInternalTemperature = input.ReadSInt32(ref result.internalTemperature_);
              break;
            }
            case 50: {
              result.hasRawData = input.ReadString(ref result.rawData_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSerial {
        get { return result.hasSerial; }
      }
      [global::System.CLSCompliant(false)]
      public uint Serial {
        get { return result.Serial; }
        set { SetSerial(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSerial(uint value) {
        PrepareBuilder();
        result.hasSerial = true;
        result.serial_ = value;
        return this;
      }
      public Builder ClearSerial() {
        PrepareBuilder();
        result.hasSerial = false;
        result.serial_ = 0;
        return this;
      }
      
      public bool HasGprsIndicator {
        get { return result.hasGprsIndicator; }
      }
      public bool GprsIndicator {
        get { return result.GprsIndicator; }
        set { SetGprsIndicator(value); }
      }
      public Builder SetGprsIndicator(bool value) {
        PrepareBuilder();
        result.hasGprsIndicator = true;
        result.gprsIndicator_ = value;
        return this;
      }
      public Builder ClearGprsIndicator() {
        PrepareBuilder();
        result.hasGprsIndicator = false;
        result.gprsIndicator_ = false;
        return this;
      }
      
      public bool HasBatteryLevel {
        get { return result.hasBatteryLevel; }
      }
      [global::System.CLSCompliant(false)]
      public uint BatteryLevel {
        get { return result.BatteryLevel; }
        set { SetBatteryLevel(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetBatteryLevel(uint value) {
        PrepareBuilder();
        result.hasBatteryLevel = true;
        result.batteryLevel_ = value;
        return this;
      }
      public Builder ClearBatteryLevel() {
        PrepareBuilder();
        result.hasBatteryLevel = false;
        result.batteryLevel_ = 0;
        return this;
      }
      
      public bool HasButtonStatus {
        get { return result.hasButtonStatus; }
      }
      [global::System.CLSCompliant(false)]
      public uint ButtonStatus {
        get { return result.ButtonStatus; }
        set { SetButtonStatus(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetButtonStatus(uint value) {
        PrepareBuilder();
        result.hasButtonStatus = true;
        result.buttonStatus_ = value;
        return this;
      }
      public Builder ClearButtonStatus() {
        PrepareBuilder();
        result.hasButtonStatus = false;
        result.buttonStatus_ = 0;
        return this;
      }
      
      public bool HasInternalTemperature {
        get { return result.hasInternalTemperature; }
      }
      public int InternalTemperature {
        get { return result.InternalTemperature; }
        set { SetInternalTemperature(value); }
      }
      public Builder SetInternalTemperature(int value) {
        PrepareBuilder();
        result.hasInternalTemperature = true;
        result.internalTemperature_ = value;
        return this;
      }
      public Builder ClearInternalTemperature() {
        PrepareBuilder();
        result.hasInternalTemperature = false;
        result.internalTemperature_ = 0;
        return this;
      }
      
      public bool HasRawData {
        get { return result.hasRawData; }
      }
      public string RawData {
        get { return result.RawData; }
        set { SetRawData(value); }
      }
      public Builder SetRawData(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRawData = true;
        result.rawData_ = value;
        return this;
      }
      public Builder ClearRawData() {
        PrepareBuilder();
        result.hasRawData = false;
        result.rawData_ = "";
        return this;
      }
    }
    static mxt1xx_u_accessory_mxt101() {
      object.ReferenceEquals(global::maxtrack.pb.mxt1xx.Mxt1Xx.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mxt1xx_u_accessory_mxt151 : pb::GeneratedMessage<mxt1xx_u_accessory_mxt151, mxt1xx_u_accessory_mxt151.Builder> {
    private mxt1xx_u_accessory_mxt151() { }
    private static readonly mxt1xx_u_accessory_mxt151 defaultInstance = new mxt1xx_u_accessory_mxt151().MakeReadOnly();
    private static readonly string[] _mxt1XxUAccessoryMxt151FieldNames = new string[] { "button_status", "door_status", "gprs_indicator", "high_side_output", "ignition_status", "low_side_output1", "low_side_output2", "mode", "over_temperature", "raw_data", "serial", "under_temperature" };
    private static readonly uint[] _mxt1XxUAccessoryMxt151FieldTags = new uint[] { 24, 32, 88, 48, 16, 56, 64, 40, 80, 98, 8, 72 };
    public static mxt1xx_u_accessory_mxt151 DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mxt1xx_u_accessory_mxt151 DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mxt1xx_u_accessory_mxt151 ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_mxt151__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mxt1xx_u_accessory_mxt151, mxt1xx_u_accessory_mxt151.Builder> InternalFieldAccessors {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_mxt151__FieldAccessorTable; }
    }
    
    public const int SerialFieldNumber = 1;
    private bool hasSerial;
    private uint serial_;
    public bool HasSerial {
      get { return hasSerial; }
    }
    [global::System.CLSCompliant(false)]
    public uint Serial {
      get { return serial_; }
    }
    
    public const int IgnitionStatusFieldNumber = 2;
    private bool hasIgnitionStatus;
    private bool ignitionStatus_;
    public bool HasIgnitionStatus {
      get { return hasIgnitionStatus; }
    }
    public bool IgnitionStatus {
      get { return ignitionStatus_; }
    }
    
    public const int ButtonStatusFieldNumber = 3;
    private bool hasButtonStatus;
    private uint buttonStatus_;
    public bool HasButtonStatus {
      get { return hasButtonStatus; }
    }
    [global::System.CLSCompliant(false)]
    public uint ButtonStatus {
      get { return buttonStatus_; }
    }
    
    public const int DoorStatusFieldNumber = 4;
    private bool hasDoorStatus;
    private bool doorStatus_;
    public bool HasDoorStatus {
      get { return hasDoorStatus; }
    }
    public bool DoorStatus {
      get { return doorStatus_; }
    }
    
    public const int ModeFieldNumber = 5;
    private bool hasMode;
    private uint mode_;
    public bool HasMode {
      get { return hasMode; }
    }
    [global::System.CLSCompliant(false)]
    public uint Mode {
      get { return mode_; }
    }
    
    public const int HighSideOutputFieldNumber = 6;
    private bool hasHighSideOutput;
    private uint highSideOutput_;
    public bool HasHighSideOutput {
      get { return hasHighSideOutput; }
    }
    [global::System.CLSCompliant(false)]
    public uint HighSideOutput {
      get { return highSideOutput_; }
    }
    
    public const int LowSideOutput1FieldNumber = 7;
    private bool hasLowSideOutput1;
    private uint lowSideOutput1_;
    public bool HasLowSideOutput1 {
      get { return hasLowSideOutput1; }
    }
    [global::System.CLSCompliant(false)]
    public uint LowSideOutput1 {
      get { return lowSideOutput1_; }
    }
    
    public const int LowSideOutput2FieldNumber = 8;
    private bool hasLowSideOutput2;
    private uint lowSideOutput2_;
    public bool HasLowSideOutput2 {
      get { return hasLowSideOutput2; }
    }
    [global::System.CLSCompliant(false)]
    public uint LowSideOutput2 {
      get { return lowSideOutput2_; }
    }
    
    public const int UnderTemperatureFieldNumber = 9;
    private bool hasUnderTemperature;
    private bool underTemperature_;
    public bool HasUnderTemperature {
      get { return hasUnderTemperature; }
    }
    public bool UnderTemperature {
      get { return underTemperature_; }
    }
    
    public const int OverTemperatureFieldNumber = 10;
    private bool hasOverTemperature;
    private bool overTemperature_;
    public bool HasOverTemperature {
      get { return hasOverTemperature; }
    }
    public bool OverTemperature {
      get { return overTemperature_; }
    }
    
    public const int GprsIndicatorFieldNumber = 11;
    private bool hasGprsIndicator;
    private bool gprsIndicator_;
    public bool HasGprsIndicator {
      get { return hasGprsIndicator; }
    }
    public bool GprsIndicator {
      get { return gprsIndicator_; }
    }
    
    public const int RawDataFieldNumber = 12;
    private bool hasRawData;
    private string rawData_ = "";
    public bool HasRawData {
      get { return hasRawData; }
    }
    public string RawData {
      get { return rawData_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSerial) return false;
        if (!hasIgnitionStatus) return false;
        if (!hasButtonStatus) return false;
        if (!hasDoorStatus) return false;
        if (!hasMode) return false;
        if (!hasHighSideOutput) return false;
        if (!hasLowSideOutput1) return false;
        if (!hasLowSideOutput2) return false;
        if (!hasUnderTemperature) return false;
        if (!hasOverTemperature) return false;
        if (!hasGprsIndicator) return false;
        if (!hasRawData) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mxt1XxUAccessoryMxt151FieldNames;
      if (hasSerial) {
        output.WriteUInt32(1, field_names[10], Serial);
      }
      if (hasIgnitionStatus) {
        output.WriteBool(2, field_names[4], IgnitionStatus);
      }
      if (hasButtonStatus) {
        output.WriteUInt32(3, field_names[0], ButtonStatus);
      }
      if (hasDoorStatus) {
        output.WriteBool(4, field_names[1], DoorStatus);
      }
      if (hasMode) {
        output.WriteUInt32(5, field_names[7], Mode);
      }
      if (hasHighSideOutput) {
        output.WriteUInt32(6, field_names[3], HighSideOutput);
      }
      if (hasLowSideOutput1) {
        output.WriteUInt32(7, field_names[5], LowSideOutput1);
      }
      if (hasLowSideOutput2) {
        output.WriteUInt32(8, field_names[6], LowSideOutput2);
      }
      if (hasUnderTemperature) {
        output.WriteBool(9, field_names[11], UnderTemperature);
      }
      if (hasOverTemperature) {
        output.WriteBool(10, field_names[8], OverTemperature);
      }
      if (hasGprsIndicator) {
        output.WriteBool(11, field_names[2], GprsIndicator);
      }
      if (hasRawData) {
        output.WriteString(12, field_names[9], RawData);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasSerial) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, Serial);
      }
      if (hasIgnitionStatus) {
        size += pb::CodedOutputStream.ComputeBoolSize(2, IgnitionStatus);
      }
      if (hasButtonStatus) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, ButtonStatus);
      }
      if (hasDoorStatus) {
        size += pb::CodedOutputStream.ComputeBoolSize(4, DoorStatus);
      }
      if (hasMode) {
        size += pb::CodedOutputStream.ComputeUInt32Size(5, Mode);
      }
      if (hasHighSideOutput) {
        size += pb::CodedOutputStream.ComputeUInt32Size(6, HighSideOutput);
      }
      if (hasLowSideOutput1) {
        size += pb::CodedOutputStream.ComputeUInt32Size(7, LowSideOutput1);
      }
      if (hasLowSideOutput2) {
        size += pb::CodedOutputStream.ComputeUInt32Size(8, LowSideOutput2);
      }
      if (hasUnderTemperature) {
        size += pb::CodedOutputStream.ComputeBoolSize(9, UnderTemperature);
      }
      if (hasOverTemperature) {
        size += pb::CodedOutputStream.ComputeBoolSize(10, OverTemperature);
      }
      if (hasGprsIndicator) {
        size += pb::CodedOutputStream.ComputeBoolSize(11, GprsIndicator);
      }
      if (hasRawData) {
        size += pb::CodedOutputStream.ComputeStringSize(12, RawData);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mxt1xx_u_accessory_mxt151 ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_accessory_mxt151 ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_accessory_mxt151 ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_accessory_mxt151 ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_accessory_mxt151 ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_accessory_mxt151 ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_accessory_mxt151 ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mxt1xx_u_accessory_mxt151 ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mxt1xx_u_accessory_mxt151 ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_accessory_mxt151 ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mxt1xx_u_accessory_mxt151 MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mxt1xx_u_accessory_mxt151 prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mxt1xx_u_accessory_mxt151, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mxt1xx_u_accessory_mxt151 cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mxt1xx_u_accessory_mxt151 result;
      
      private mxt1xx_u_accessory_mxt151 PrepareBuilder() {
        if (resultIsReadOnly) {
          mxt1xx_u_accessory_mxt151 original = result;
          result = new mxt1xx_u_accessory_mxt151();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mxt1xx_u_accessory_mxt151 MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_mxt151.Descriptor; }
      }
      
      public override mxt1xx_u_accessory_mxt151 DefaultInstanceForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_mxt151.DefaultInstance; }
      }
      
      public override mxt1xx_u_accessory_mxt151 BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mxt1xx_u_accessory_mxt151) {
          return MergeFrom((mxt1xx_u_accessory_mxt151) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mxt1xx_u_accessory_mxt151 other) {
        if (other == global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_mxt151.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSerial) {
          Serial = other.Serial;
        }
        if (other.HasIgnitionStatus) {
          IgnitionStatus = other.IgnitionStatus;
        }
        if (other.HasButtonStatus) {
          ButtonStatus = other.ButtonStatus;
        }
        if (other.HasDoorStatus) {
          DoorStatus = other.DoorStatus;
        }
        if (other.HasMode) {
          Mode = other.Mode;
        }
        if (other.HasHighSideOutput) {
          HighSideOutput = other.HighSideOutput;
        }
        if (other.HasLowSideOutput1) {
          LowSideOutput1 = other.LowSideOutput1;
        }
        if (other.HasLowSideOutput2) {
          LowSideOutput2 = other.LowSideOutput2;
        }
        if (other.HasUnderTemperature) {
          UnderTemperature = other.UnderTemperature;
        }
        if (other.HasOverTemperature) {
          OverTemperature = other.OverTemperature;
        }
        if (other.HasGprsIndicator) {
          GprsIndicator = other.GprsIndicator;
        }
        if (other.HasRawData) {
          RawData = other.RawData;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mxt1XxUAccessoryMxt151FieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mxt1XxUAccessoryMxt151FieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasSerial = input.ReadUInt32(ref result.serial_);
              break;
            }
            case 16: {
              result.hasIgnitionStatus = input.ReadBool(ref result.ignitionStatus_);
              break;
            }
            case 24: {
              result.hasButtonStatus = input.ReadUInt32(ref result.buttonStatus_);
              break;
            }
            case 32: {
              result.hasDoorStatus = input.ReadBool(ref result.doorStatus_);
              break;
            }
            case 40: {
              result.hasMode = input.ReadUInt32(ref result.mode_);
              break;
            }
            case 48: {
              result.hasHighSideOutput = input.ReadUInt32(ref result.highSideOutput_);
              break;
            }
            case 56: {
              result.hasLowSideOutput1 = input.ReadUInt32(ref result.lowSideOutput1_);
              break;
            }
            case 64: {
              result.hasLowSideOutput2 = input.ReadUInt32(ref result.lowSideOutput2_);
              break;
            }
            case 72: {
              result.hasUnderTemperature = input.ReadBool(ref result.underTemperature_);
              break;
            }
            case 80: {
              result.hasOverTemperature = input.ReadBool(ref result.overTemperature_);
              break;
            }
            case 88: {
              result.hasGprsIndicator = input.ReadBool(ref result.gprsIndicator_);
              break;
            }
            case 98: {
              result.hasRawData = input.ReadString(ref result.rawData_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSerial {
        get { return result.hasSerial; }
      }
      [global::System.CLSCompliant(false)]
      public uint Serial {
        get { return result.Serial; }
        set { SetSerial(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSerial(uint value) {
        PrepareBuilder();
        result.hasSerial = true;
        result.serial_ = value;
        return this;
      }
      public Builder ClearSerial() {
        PrepareBuilder();
        result.hasSerial = false;
        result.serial_ = 0;
        return this;
      }
      
      public bool HasIgnitionStatus {
        get { return result.hasIgnitionStatus; }
      }
      public bool IgnitionStatus {
        get { return result.IgnitionStatus; }
        set { SetIgnitionStatus(value); }
      }
      public Builder SetIgnitionStatus(bool value) {
        PrepareBuilder();
        result.hasIgnitionStatus = true;
        result.ignitionStatus_ = value;
        return this;
      }
      public Builder ClearIgnitionStatus() {
        PrepareBuilder();
        result.hasIgnitionStatus = false;
        result.ignitionStatus_ = false;
        return this;
      }
      
      public bool HasButtonStatus {
        get { return result.hasButtonStatus; }
      }
      [global::System.CLSCompliant(false)]
      public uint ButtonStatus {
        get { return result.ButtonStatus; }
        set { SetButtonStatus(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetButtonStatus(uint value) {
        PrepareBuilder();
        result.hasButtonStatus = true;
        result.buttonStatus_ = value;
        return this;
      }
      public Builder ClearButtonStatus() {
        PrepareBuilder();
        result.hasButtonStatus = false;
        result.buttonStatus_ = 0;
        return this;
      }
      
      public bool HasDoorStatus {
        get { return result.hasDoorStatus; }
      }
      public bool DoorStatus {
        get { return result.DoorStatus; }
        set { SetDoorStatus(value); }
      }
      public Builder SetDoorStatus(bool value) {
        PrepareBuilder();
        result.hasDoorStatus = true;
        result.doorStatus_ = value;
        return this;
      }
      public Builder ClearDoorStatus() {
        PrepareBuilder();
        result.hasDoorStatus = false;
        result.doorStatus_ = false;
        return this;
      }
      
      public bool HasMode {
        get { return result.hasMode; }
      }
      [global::System.CLSCompliant(false)]
      public uint Mode {
        get { return result.Mode; }
        set { SetMode(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetMode(uint value) {
        PrepareBuilder();
        result.hasMode = true;
        result.mode_ = value;
        return this;
      }
      public Builder ClearMode() {
        PrepareBuilder();
        result.hasMode = false;
        result.mode_ = 0;
        return this;
      }
      
      public bool HasHighSideOutput {
        get { return result.hasHighSideOutput; }
      }
      [global::System.CLSCompliant(false)]
      public uint HighSideOutput {
        get { return result.HighSideOutput; }
        set { SetHighSideOutput(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetHighSideOutput(uint value) {
        PrepareBuilder();
        result.hasHighSideOutput = true;
        result.highSideOutput_ = value;
        return this;
      }
      public Builder ClearHighSideOutput() {
        PrepareBuilder();
        result.hasHighSideOutput = false;
        result.highSideOutput_ = 0;
        return this;
      }
      
      public bool HasLowSideOutput1 {
        get { return result.hasLowSideOutput1; }
      }
      [global::System.CLSCompliant(false)]
      public uint LowSideOutput1 {
        get { return result.LowSideOutput1; }
        set { SetLowSideOutput1(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetLowSideOutput1(uint value) {
        PrepareBuilder();
        result.hasLowSideOutput1 = true;
        result.lowSideOutput1_ = value;
        return this;
      }
      public Builder ClearLowSideOutput1() {
        PrepareBuilder();
        result.hasLowSideOutput1 = false;
        result.lowSideOutput1_ = 0;
        return this;
      }
      
      public bool HasLowSideOutput2 {
        get { return result.hasLowSideOutput2; }
      }
      [global::System.CLSCompliant(false)]
      public uint LowSideOutput2 {
        get { return result.LowSideOutput2; }
        set { SetLowSideOutput2(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetLowSideOutput2(uint value) {
        PrepareBuilder();
        result.hasLowSideOutput2 = true;
        result.lowSideOutput2_ = value;
        return this;
      }
      public Builder ClearLowSideOutput2() {
        PrepareBuilder();
        result.hasLowSideOutput2 = false;
        result.lowSideOutput2_ = 0;
        return this;
      }
      
      public bool HasUnderTemperature {
        get { return result.hasUnderTemperature; }
      }
      public bool UnderTemperature {
        get { return result.UnderTemperature; }
        set { SetUnderTemperature(value); }
      }
      public Builder SetUnderTemperature(bool value) {
        PrepareBuilder();
        result.hasUnderTemperature = true;
        result.underTemperature_ = value;
        return this;
      }
      public Builder ClearUnderTemperature() {
        PrepareBuilder();
        result.hasUnderTemperature = false;
        result.underTemperature_ = false;
        return this;
      }
      
      public bool HasOverTemperature {
        get { return result.hasOverTemperature; }
      }
      public bool OverTemperature {
        get { return result.OverTemperature; }
        set { SetOverTemperature(value); }
      }
      public Builder SetOverTemperature(bool value) {
        PrepareBuilder();
        result.hasOverTemperature = true;
        result.overTemperature_ = value;
        return this;
      }
      public Builder ClearOverTemperature() {
        PrepareBuilder();
        result.hasOverTemperature = false;
        result.overTemperature_ = false;
        return this;
      }
      
      public bool HasGprsIndicator {
        get { return result.hasGprsIndicator; }
      }
      public bool GprsIndicator {
        get { return result.GprsIndicator; }
        set { SetGprsIndicator(value); }
      }
      public Builder SetGprsIndicator(bool value) {
        PrepareBuilder();
        result.hasGprsIndicator = true;
        result.gprsIndicator_ = value;
        return this;
      }
      public Builder ClearGprsIndicator() {
        PrepareBuilder();
        result.hasGprsIndicator = false;
        result.gprsIndicator_ = false;
        return this;
      }
      
      public bool HasRawData {
        get { return result.hasRawData; }
      }
      public string RawData {
        get { return result.RawData; }
        set { SetRawData(value); }
      }
      public Builder SetRawData(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRawData = true;
        result.rawData_ = value;
        return this;
      }
      public Builder ClearRawData() {
        PrepareBuilder();
        result.hasRawData = false;
        result.rawData_ = "";
        return this;
      }
    }
    static mxt1xx_u_accessory_mxt151() {
      object.ReferenceEquals(global::maxtrack.pb.mxt1xx.Mxt1Xx.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mxt1xx_u_accessory_rpm_virtual : pb::GeneratedMessage<mxt1xx_u_accessory_rpm_virtual, mxt1xx_u_accessory_rpm_virtual.Builder> {
    private mxt1xx_u_accessory_rpm_virtual() { }
    private static readonly mxt1xx_u_accessory_rpm_virtual defaultInstance = new mxt1xx_u_accessory_rpm_virtual().MakeReadOnly();
    private static readonly string[] _mxt1XxUAccessoryRpmVirtualFieldNames = new string[] { "raw_data", "rpm", "serial" };
    private static readonly uint[] _mxt1XxUAccessoryRpmVirtualFieldTags = new uint[] { 26, 16, 8 };
    public static mxt1xx_u_accessory_rpm_virtual DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mxt1xx_u_accessory_rpm_virtual DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mxt1xx_u_accessory_rpm_virtual ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_rpm_virtual__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mxt1xx_u_accessory_rpm_virtual, mxt1xx_u_accessory_rpm_virtual.Builder> InternalFieldAccessors {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_rpm_virtual__FieldAccessorTable; }
    }
    
    public const int SerialFieldNumber = 1;
    private bool hasSerial;
    private uint serial_;
    public bool HasSerial {
      get { return hasSerial; }
    }
    [global::System.CLSCompliant(false)]
    public uint Serial {
      get { return serial_; }
    }
    
    public const int RpmFieldNumber = 2;
    private bool hasRpm;
    private uint rpm_;
    public bool HasRpm {
      get { return hasRpm; }
    }
    [global::System.CLSCompliant(false)]
    public uint Rpm {
      get { return rpm_; }
    }
    
    public const int RawDataFieldNumber = 3;
    private bool hasRawData;
    private string rawData_ = "";
    public bool HasRawData {
      get { return hasRawData; }
    }
    public string RawData {
      get { return rawData_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSerial) return false;
        if (!hasRpm) return false;
        if (!hasRawData) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mxt1XxUAccessoryRpmVirtualFieldNames;
      if (hasSerial) {
        output.WriteUInt32(1, field_names[2], Serial);
      }
      if (hasRpm) {
        output.WriteUInt32(2, field_names[1], Rpm);
      }
      if (hasRawData) {
        output.WriteString(3, field_names[0], RawData);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasSerial) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, Serial);
      }
      if (hasRpm) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, Rpm);
      }
      if (hasRawData) {
        size += pb::CodedOutputStream.ComputeStringSize(3, RawData);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mxt1xx_u_accessory_rpm_virtual ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_accessory_rpm_virtual ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_accessory_rpm_virtual ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_accessory_rpm_virtual ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_accessory_rpm_virtual ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_accessory_rpm_virtual ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_accessory_rpm_virtual ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mxt1xx_u_accessory_rpm_virtual ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mxt1xx_u_accessory_rpm_virtual ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_accessory_rpm_virtual ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mxt1xx_u_accessory_rpm_virtual MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mxt1xx_u_accessory_rpm_virtual prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mxt1xx_u_accessory_rpm_virtual, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mxt1xx_u_accessory_rpm_virtual cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mxt1xx_u_accessory_rpm_virtual result;
      
      private mxt1xx_u_accessory_rpm_virtual PrepareBuilder() {
        if (resultIsReadOnly) {
          mxt1xx_u_accessory_rpm_virtual original = result;
          result = new mxt1xx_u_accessory_rpm_virtual();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mxt1xx_u_accessory_rpm_virtual MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_rpm_virtual.Descriptor; }
      }
      
      public override mxt1xx_u_accessory_rpm_virtual DefaultInstanceForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_rpm_virtual.DefaultInstance; }
      }
      
      public override mxt1xx_u_accessory_rpm_virtual BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mxt1xx_u_accessory_rpm_virtual) {
          return MergeFrom((mxt1xx_u_accessory_rpm_virtual) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mxt1xx_u_accessory_rpm_virtual other) {
        if (other == global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_rpm_virtual.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSerial) {
          Serial = other.Serial;
        }
        if (other.HasRpm) {
          Rpm = other.Rpm;
        }
        if (other.HasRawData) {
          RawData = other.RawData;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mxt1XxUAccessoryRpmVirtualFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mxt1XxUAccessoryRpmVirtualFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasSerial = input.ReadUInt32(ref result.serial_);
              break;
            }
            case 16: {
              result.hasRpm = input.ReadUInt32(ref result.rpm_);
              break;
            }
            case 26: {
              result.hasRawData = input.ReadString(ref result.rawData_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSerial {
        get { return result.hasSerial; }
      }
      [global::System.CLSCompliant(false)]
      public uint Serial {
        get { return result.Serial; }
        set { SetSerial(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSerial(uint value) {
        PrepareBuilder();
        result.hasSerial = true;
        result.serial_ = value;
        return this;
      }
      public Builder ClearSerial() {
        PrepareBuilder();
        result.hasSerial = false;
        result.serial_ = 0;
        return this;
      }
      
      public bool HasRpm {
        get { return result.hasRpm; }
      }
      [global::System.CLSCompliant(false)]
      public uint Rpm {
        get { return result.Rpm; }
        set { SetRpm(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetRpm(uint value) {
        PrepareBuilder();
        result.hasRpm = true;
        result.rpm_ = value;
        return this;
      }
      public Builder ClearRpm() {
        PrepareBuilder();
        result.hasRpm = false;
        result.rpm_ = 0;
        return this;
      }
      
      public bool HasRawData {
        get { return result.hasRawData; }
      }
      public string RawData {
        get { return result.RawData; }
        set { SetRawData(value); }
      }
      public Builder SetRawData(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRawData = true;
        result.rawData_ = value;
        return this;
      }
      public Builder ClearRawData() {
        PrepareBuilder();
        result.hasRawData = false;
        result.rawData_ = "";
        return this;
      }
    }
    static mxt1xx_u_accessory_rpm_virtual() {
      object.ReferenceEquals(global::maxtrack.pb.mxt1xx.Mxt1Xx.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mxt1xx_u_accessory_gps_speed : pb::GeneratedMessage<mxt1xx_u_accessory_gps_speed, mxt1xx_u_accessory_gps_speed.Builder> {
    private mxt1xx_u_accessory_gps_speed() { }
    private static readonly mxt1xx_u_accessory_gps_speed defaultInstance = new mxt1xx_u_accessory_gps_speed().MakeReadOnly();
    private static readonly string[] _mxt1XxUAccessoryGpsSpeedFieldNames = new string[] { "raw_data", "serial", "speed" };
    private static readonly uint[] _mxt1XxUAccessoryGpsSpeedFieldTags = new uint[] { 26, 8, 16 };
    public static mxt1xx_u_accessory_gps_speed DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mxt1xx_u_accessory_gps_speed DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mxt1xx_u_accessory_gps_speed ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_gps_speed__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mxt1xx_u_accessory_gps_speed, mxt1xx_u_accessory_gps_speed.Builder> InternalFieldAccessors {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_gps_speed__FieldAccessorTable; }
    }
    
    public const int SerialFieldNumber = 1;
    private bool hasSerial;
    private uint serial_;
    public bool HasSerial {
      get { return hasSerial; }
    }
    [global::System.CLSCompliant(false)]
    public uint Serial {
      get { return serial_; }
    }
    
    public const int SpeedFieldNumber = 2;
    private bool hasSpeed;
    private uint speed_;
    public bool HasSpeed {
      get { return hasSpeed; }
    }
    [global::System.CLSCompliant(false)]
    public uint Speed {
      get { return speed_; }
    }
    
    public const int RawDataFieldNumber = 3;
    private bool hasRawData;
    private string rawData_ = "";
    public bool HasRawData {
      get { return hasRawData; }
    }
    public string RawData {
      get { return rawData_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSerial) return false;
        if (!hasSpeed) return false;
        if (!hasRawData) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mxt1XxUAccessoryGpsSpeedFieldNames;
      if (hasSerial) {
        output.WriteUInt32(1, field_names[1], Serial);
      }
      if (hasSpeed) {
        output.WriteUInt32(2, field_names[2], Speed);
      }
      if (hasRawData) {
        output.WriteString(3, field_names[0], RawData);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasSerial) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, Serial);
      }
      if (hasSpeed) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, Speed);
      }
      if (hasRawData) {
        size += pb::CodedOutputStream.ComputeStringSize(3, RawData);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mxt1xx_u_accessory_gps_speed ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_accessory_gps_speed ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_accessory_gps_speed ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_accessory_gps_speed ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_accessory_gps_speed ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_accessory_gps_speed ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_accessory_gps_speed ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mxt1xx_u_accessory_gps_speed ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mxt1xx_u_accessory_gps_speed ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_accessory_gps_speed ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mxt1xx_u_accessory_gps_speed MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mxt1xx_u_accessory_gps_speed prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mxt1xx_u_accessory_gps_speed, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mxt1xx_u_accessory_gps_speed cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mxt1xx_u_accessory_gps_speed result;
      
      private mxt1xx_u_accessory_gps_speed PrepareBuilder() {
        if (resultIsReadOnly) {
          mxt1xx_u_accessory_gps_speed original = result;
          result = new mxt1xx_u_accessory_gps_speed();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mxt1xx_u_accessory_gps_speed MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_gps_speed.Descriptor; }
      }
      
      public override mxt1xx_u_accessory_gps_speed DefaultInstanceForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_gps_speed.DefaultInstance; }
      }
      
      public override mxt1xx_u_accessory_gps_speed BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mxt1xx_u_accessory_gps_speed) {
          return MergeFrom((mxt1xx_u_accessory_gps_speed) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mxt1xx_u_accessory_gps_speed other) {
        if (other == global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_gps_speed.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSerial) {
          Serial = other.Serial;
        }
        if (other.HasSpeed) {
          Speed = other.Speed;
        }
        if (other.HasRawData) {
          RawData = other.RawData;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mxt1XxUAccessoryGpsSpeedFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mxt1XxUAccessoryGpsSpeedFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasSerial = input.ReadUInt32(ref result.serial_);
              break;
            }
            case 16: {
              result.hasSpeed = input.ReadUInt32(ref result.speed_);
              break;
            }
            case 26: {
              result.hasRawData = input.ReadString(ref result.rawData_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSerial {
        get { return result.hasSerial; }
      }
      [global::System.CLSCompliant(false)]
      public uint Serial {
        get { return result.Serial; }
        set { SetSerial(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSerial(uint value) {
        PrepareBuilder();
        result.hasSerial = true;
        result.serial_ = value;
        return this;
      }
      public Builder ClearSerial() {
        PrepareBuilder();
        result.hasSerial = false;
        result.serial_ = 0;
        return this;
      }
      
      public bool HasSpeed {
        get { return result.hasSpeed; }
      }
      [global::System.CLSCompliant(false)]
      public uint Speed {
        get { return result.Speed; }
        set { SetSpeed(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSpeed(uint value) {
        PrepareBuilder();
        result.hasSpeed = true;
        result.speed_ = value;
        return this;
      }
      public Builder ClearSpeed() {
        PrepareBuilder();
        result.hasSpeed = false;
        result.speed_ = 0;
        return this;
      }
      
      public bool HasRawData {
        get { return result.hasRawData; }
      }
      public string RawData {
        get { return result.RawData; }
        set { SetRawData(value); }
      }
      public Builder SetRawData(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRawData = true;
        result.rawData_ = value;
        return this;
      }
      public Builder ClearRawData() {
        PrepareBuilder();
        result.hasRawData = false;
        result.rawData_ = "";
        return this;
      }
    }
    static mxt1xx_u_accessory_gps_speed() {
      object.ReferenceEquals(global::maxtrack.pb.mxt1xx.Mxt1Xx.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mxt1xx_u_accessory_tag_info : pb::GeneratedMessage<mxt1xx_u_accessory_tag_info, mxt1xx_u_accessory_tag_info.Builder> {
    private mxt1xx_u_accessory_tag_info() { }
    private static readonly mxt1xx_u_accessory_tag_info defaultInstance = new mxt1xx_u_accessory_tag_info().MakeReadOnly();
    private static readonly string[] _mxt1XxUAccessoryTagInfoFieldNames = new string[] { "tag_id", "tag_status" };
    private static readonly uint[] _mxt1XxUAccessoryTagInfoFieldTags = new uint[] { 8, 16 };
    public static mxt1xx_u_accessory_tag_info DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mxt1xx_u_accessory_tag_info DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mxt1xx_u_accessory_tag_info ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_tag_info__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mxt1xx_u_accessory_tag_info, mxt1xx_u_accessory_tag_info.Builder> InternalFieldAccessors {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_tag_info__FieldAccessorTable; }
    }
    
    public const int TagIdFieldNumber = 1;
    private bool hasTagId;
    private uint tagId_;
    public bool HasTagId {
      get { return hasTagId; }
    }
    [global::System.CLSCompliant(false)]
    public uint TagId {
      get { return tagId_; }
    }
    
    public const int TagStatusFieldNumber = 2;
    private bool hasTagStatus;
    private bool tagStatus_;
    public bool HasTagStatus {
      get { return hasTagStatus; }
    }
    public bool TagStatus {
      get { return tagStatus_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTagId) return false;
        if (!hasTagStatus) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mxt1XxUAccessoryTagInfoFieldNames;
      if (hasTagId) {
        output.WriteUInt32(1, field_names[0], TagId);
      }
      if (hasTagStatus) {
        output.WriteBool(2, field_names[1], TagStatus);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasTagId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, TagId);
      }
      if (hasTagStatus) {
        size += pb::CodedOutputStream.ComputeBoolSize(2, TagStatus);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mxt1xx_u_accessory_tag_info ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_accessory_tag_info ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_accessory_tag_info ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_accessory_tag_info ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_accessory_tag_info ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_accessory_tag_info ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_accessory_tag_info ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mxt1xx_u_accessory_tag_info ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mxt1xx_u_accessory_tag_info ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_accessory_tag_info ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mxt1xx_u_accessory_tag_info MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mxt1xx_u_accessory_tag_info prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mxt1xx_u_accessory_tag_info, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mxt1xx_u_accessory_tag_info cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mxt1xx_u_accessory_tag_info result;
      
      private mxt1xx_u_accessory_tag_info PrepareBuilder() {
        if (resultIsReadOnly) {
          mxt1xx_u_accessory_tag_info original = result;
          result = new mxt1xx_u_accessory_tag_info();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mxt1xx_u_accessory_tag_info MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_tag_info.Descriptor; }
      }
      
      public override mxt1xx_u_accessory_tag_info DefaultInstanceForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_tag_info.DefaultInstance; }
      }
      
      public override mxt1xx_u_accessory_tag_info BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mxt1xx_u_accessory_tag_info) {
          return MergeFrom((mxt1xx_u_accessory_tag_info) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mxt1xx_u_accessory_tag_info other) {
        if (other == global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_tag_info.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTagId) {
          TagId = other.TagId;
        }
        if (other.HasTagStatus) {
          TagStatus = other.TagStatus;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mxt1XxUAccessoryTagInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mxt1XxUAccessoryTagInfoFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasTagId = input.ReadUInt32(ref result.tagId_);
              break;
            }
            case 16: {
              result.hasTagStatus = input.ReadBool(ref result.tagStatus_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTagId {
        get { return result.hasTagId; }
      }
      [global::System.CLSCompliant(false)]
      public uint TagId {
        get { return result.TagId; }
        set { SetTagId(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetTagId(uint value) {
        PrepareBuilder();
        result.hasTagId = true;
        result.tagId_ = value;
        return this;
      }
      public Builder ClearTagId() {
        PrepareBuilder();
        result.hasTagId = false;
        result.tagId_ = 0;
        return this;
      }
      
      public bool HasTagStatus {
        get { return result.hasTagStatus; }
      }
      public bool TagStatus {
        get { return result.TagStatus; }
        set { SetTagStatus(value); }
      }
      public Builder SetTagStatus(bool value) {
        PrepareBuilder();
        result.hasTagStatus = true;
        result.tagStatus_ = value;
        return this;
      }
      public Builder ClearTagStatus() {
        PrepareBuilder();
        result.hasTagStatus = false;
        result.tagStatus_ = false;
        return this;
      }
    }
    static mxt1xx_u_accessory_tag_info() {
      object.ReferenceEquals(global::maxtrack.pb.mxt1xx.Mxt1Xx.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mxt1xx_u_accessory_tag : pb::GeneratedMessage<mxt1xx_u_accessory_tag, mxt1xx_u_accessory_tag.Builder> {
    private mxt1xx_u_accessory_tag() { }
    private static readonly mxt1xx_u_accessory_tag defaultInstance = new mxt1xx_u_accessory_tag().MakeReadOnly();
    private static readonly string[] _mxt1XxUAccessoryTagFieldNames = new string[] { "bit_map", "raw_data", "serial", "tag_info" };
    private static readonly uint[] _mxt1XxUAccessoryTagFieldTags = new uint[] { 32, 26, 8, 18 };
    public static mxt1xx_u_accessory_tag DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mxt1xx_u_accessory_tag DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mxt1xx_u_accessory_tag ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_tag__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mxt1xx_u_accessory_tag, mxt1xx_u_accessory_tag.Builder> InternalFieldAccessors {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_tag__FieldAccessorTable; }
    }
    
    public const int SerialFieldNumber = 1;
    private bool hasSerial;
    private uint serial_;
    public bool HasSerial {
      get { return hasSerial; }
    }
    [global::System.CLSCompliant(false)]
    public uint Serial {
      get { return serial_; }
    }
    
    public const int TagInfoFieldNumber = 2;
    private pbc::PopsicleList<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_tag_info> tagInfo_ = new pbc::PopsicleList<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_tag_info>();
    public scg::IList<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_tag_info> TagInfoList {
      get { return tagInfo_; }
    }
    public int TagInfoCount {
      get { return tagInfo_.Count; }
    }
    public global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_tag_info GetTagInfo(int index) {
      return tagInfo_[index];
    }
    
    public const int RawDataFieldNumber = 3;
    private bool hasRawData;
    private string rawData_ = "";
    public bool HasRawData {
      get { return hasRawData; }
    }
    public string RawData {
      get { return rawData_; }
    }
    
    public const int BitMapFieldNumber = 4;
    private bool hasBitMap;
    private ulong bitMap_;
    public bool HasBitMap {
      get { return hasBitMap; }
    }
    [global::System.CLSCompliant(false)]
    public ulong BitMap {
      get { return bitMap_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSerial) return false;
        if (!hasRawData) return false;
        if (!hasBitMap) return false;
        foreach (global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_tag_info element in TagInfoList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mxt1XxUAccessoryTagFieldNames;
      if (hasSerial) {
        output.WriteUInt32(1, field_names[2], Serial);
      }
      if (tagInfo_.Count > 0) {
        output.WriteMessageArray(2, field_names[3], tagInfo_);
      }
      if (hasRawData) {
        output.WriteString(3, field_names[1], RawData);
      }
      if (hasBitMap) {
        output.WriteUInt64(4, field_names[0], BitMap);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasSerial) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, Serial);
      }
      foreach (global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_tag_info element in TagInfoList) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, element);
      }
      if (hasRawData) {
        size += pb::CodedOutputStream.ComputeStringSize(3, RawData);
      }
      if (hasBitMap) {
        size += pb::CodedOutputStream.ComputeUInt64Size(4, BitMap);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mxt1xx_u_accessory_tag ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_accessory_tag ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_accessory_tag ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_accessory_tag ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_accessory_tag ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_accessory_tag ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_accessory_tag ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mxt1xx_u_accessory_tag ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mxt1xx_u_accessory_tag ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_accessory_tag ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mxt1xx_u_accessory_tag MakeReadOnly() {
      tagInfo_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mxt1xx_u_accessory_tag prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mxt1xx_u_accessory_tag, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mxt1xx_u_accessory_tag cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mxt1xx_u_accessory_tag result;
      
      private mxt1xx_u_accessory_tag PrepareBuilder() {
        if (resultIsReadOnly) {
          mxt1xx_u_accessory_tag original = result;
          result = new mxt1xx_u_accessory_tag();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mxt1xx_u_accessory_tag MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_tag.Descriptor; }
      }
      
      public override mxt1xx_u_accessory_tag DefaultInstanceForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_tag.DefaultInstance; }
      }
      
      public override mxt1xx_u_accessory_tag BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mxt1xx_u_accessory_tag) {
          return MergeFrom((mxt1xx_u_accessory_tag) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mxt1xx_u_accessory_tag other) {
        if (other == global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_tag.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSerial) {
          Serial = other.Serial;
        }
        if (other.tagInfo_.Count != 0) {
          result.tagInfo_.Add(other.tagInfo_);
        }
        if (other.HasRawData) {
          RawData = other.RawData;
        }
        if (other.HasBitMap) {
          BitMap = other.BitMap;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mxt1XxUAccessoryTagFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mxt1XxUAccessoryTagFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasSerial = input.ReadUInt32(ref result.serial_);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.tagInfo_, global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_tag_info.DefaultInstance, extensionRegistry);
              break;
            }
            case 26: {
              result.hasRawData = input.ReadString(ref result.rawData_);
              break;
            }
            case 32: {
              result.hasBitMap = input.ReadUInt64(ref result.bitMap_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSerial {
        get { return result.hasSerial; }
      }
      [global::System.CLSCompliant(false)]
      public uint Serial {
        get { return result.Serial; }
        set { SetSerial(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSerial(uint value) {
        PrepareBuilder();
        result.hasSerial = true;
        result.serial_ = value;
        return this;
      }
      public Builder ClearSerial() {
        PrepareBuilder();
        result.hasSerial = false;
        result.serial_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_tag_info> TagInfoList {
        get { return PrepareBuilder().tagInfo_; }
      }
      public int TagInfoCount {
        get { return result.TagInfoCount; }
      }
      public global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_tag_info GetTagInfo(int index) {
        return result.GetTagInfo(index);
      }
      public Builder SetTagInfo(int index, global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_tag_info value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.tagInfo_[index] = value;
        return this;
      }
      public Builder SetTagInfo(int index, global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_tag_info.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.tagInfo_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddTagInfo(global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_tag_info value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.tagInfo_.Add(value);
        return this;
      }
      public Builder AddTagInfo(global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_tag_info.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.tagInfo_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeTagInfo(scg::IEnumerable<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_tag_info> values) {
        PrepareBuilder();
        result.tagInfo_.Add(values);
        return this;
      }
      public Builder ClearTagInfo() {
        PrepareBuilder();
        result.tagInfo_.Clear();
        return this;
      }
      
      public bool HasRawData {
        get { return result.hasRawData; }
      }
      public string RawData {
        get { return result.RawData; }
        set { SetRawData(value); }
      }
      public Builder SetRawData(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRawData = true;
        result.rawData_ = value;
        return this;
      }
      public Builder ClearRawData() {
        PrepareBuilder();
        result.hasRawData = false;
        result.rawData_ = "";
        return this;
      }
      
      public bool HasBitMap {
        get { return result.hasBitMap; }
      }
      [global::System.CLSCompliant(false)]
      public ulong BitMap {
        get { return result.BitMap; }
        set { SetBitMap(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetBitMap(ulong value) {
        PrepareBuilder();
        result.hasBitMap = true;
        result.bitMap_ = value;
        return this;
      }
      public Builder ClearBitMap() {
        PrepareBuilder();
        result.hasBitMap = false;
        result.bitMap_ = 0UL;
        return this;
      }
    }
    static mxt1xx_u_accessory_tag() {
      object.ReferenceEquals(global::maxtrack.pb.mxt1xx.Mxt1Xx.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mxt1xx_u_accessory_rfid_driver : pb::GeneratedMessage<mxt1xx_u_accessory_rfid_driver, mxt1xx_u_accessory_rfid_driver.Builder> {
    private mxt1xx_u_accessory_rfid_driver() { }
    private static readonly mxt1xx_u_accessory_rfid_driver defaultInstance = new mxt1xx_u_accessory_rfid_driver().MakeReadOnly();
    private static readonly string[] _mxt1XxUAccessoryRfidDriverFieldNames = new string[] { "driver_id", "id" };
    private static readonly uint[] _mxt1XxUAccessoryRfidDriverFieldTags = new uint[] { 8, 16 };
    public static mxt1xx_u_accessory_rfid_driver DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mxt1xx_u_accessory_rfid_driver DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mxt1xx_u_accessory_rfid_driver ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_rfid_driver__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mxt1xx_u_accessory_rfid_driver, mxt1xx_u_accessory_rfid_driver.Builder> InternalFieldAccessors {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_rfid_driver__FieldAccessorTable; }
    }
    
    public const int DriverIdFieldNumber = 1;
    private bool hasDriverId;
    private uint driverId_;
    public bool HasDriverId {
      get { return hasDriverId; }
    }
    [global::System.CLSCompliant(false)]
    public uint DriverId {
      get { return driverId_; }
    }
    
    public const int IdFieldNumber = 2;
    private bool hasId;
    private uint id_;
    public bool HasId {
      get { return hasId; }
    }
    [global::System.CLSCompliant(false)]
    public uint Id {
      get { return id_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasDriverId) return false;
        if (!hasId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mxt1XxUAccessoryRfidDriverFieldNames;
      if (hasDriverId) {
        output.WriteUInt32(1, field_names[0], DriverId);
      }
      if (hasId) {
        output.WriteUInt32(2, field_names[1], Id);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasDriverId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, DriverId);
      }
      if (hasId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, Id);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mxt1xx_u_accessory_rfid_driver ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_accessory_rfid_driver ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_accessory_rfid_driver ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_accessory_rfid_driver ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_accessory_rfid_driver ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_accessory_rfid_driver ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_accessory_rfid_driver ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mxt1xx_u_accessory_rfid_driver ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mxt1xx_u_accessory_rfid_driver ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_accessory_rfid_driver ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mxt1xx_u_accessory_rfid_driver MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mxt1xx_u_accessory_rfid_driver prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mxt1xx_u_accessory_rfid_driver, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mxt1xx_u_accessory_rfid_driver cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mxt1xx_u_accessory_rfid_driver result;
      
      private mxt1xx_u_accessory_rfid_driver PrepareBuilder() {
        if (resultIsReadOnly) {
          mxt1xx_u_accessory_rfid_driver original = result;
          result = new mxt1xx_u_accessory_rfid_driver();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mxt1xx_u_accessory_rfid_driver MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_rfid_driver.Descriptor; }
      }
      
      public override mxt1xx_u_accessory_rfid_driver DefaultInstanceForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_rfid_driver.DefaultInstance; }
      }
      
      public override mxt1xx_u_accessory_rfid_driver BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mxt1xx_u_accessory_rfid_driver) {
          return MergeFrom((mxt1xx_u_accessory_rfid_driver) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mxt1xx_u_accessory_rfid_driver other) {
        if (other == global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_rfid_driver.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasDriverId) {
          DriverId = other.DriverId;
        }
        if (other.HasId) {
          Id = other.Id;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mxt1XxUAccessoryRfidDriverFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mxt1XxUAccessoryRfidDriverFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasDriverId = input.ReadUInt32(ref result.driverId_);
              break;
            }
            case 16: {
              result.hasId = input.ReadUInt32(ref result.id_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasDriverId {
        get { return result.hasDriverId; }
      }
      [global::System.CLSCompliant(false)]
      public uint DriverId {
        get { return result.DriverId; }
        set { SetDriverId(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetDriverId(uint value) {
        PrepareBuilder();
        result.hasDriverId = true;
        result.driverId_ = value;
        return this;
      }
      public Builder ClearDriverId() {
        PrepareBuilder();
        result.hasDriverId = false;
        result.driverId_ = 0;
        return this;
      }
      
      public bool HasId {
        get { return result.hasId; }
      }
      [global::System.CLSCompliant(false)]
      public uint Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetId(uint value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
    }
    static mxt1xx_u_accessory_rfid_driver() {
      object.ReferenceEquals(global::maxtrack.pb.mxt1xx.Mxt1Xx.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mxt1xx_u_accessory_rfid_passenger : pb::GeneratedMessage<mxt1xx_u_accessory_rfid_passenger, mxt1xx_u_accessory_rfid_passenger.Builder> {
    private mxt1xx_u_accessory_rfid_passenger() { }
    private static readonly mxt1xx_u_accessory_rfid_passenger defaultInstance = new mxt1xx_u_accessory_rfid_passenger().MakeReadOnly();
    private static readonly string[] _mxt1XxUAccessoryRfidPassengerFieldNames = new string[] { "passenger_authorized", "passenger_id" };
    private static readonly uint[] _mxt1XxUAccessoryRfidPassengerFieldTags = new uint[] { 16, 8 };
    public static mxt1xx_u_accessory_rfid_passenger DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mxt1xx_u_accessory_rfid_passenger DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mxt1xx_u_accessory_rfid_passenger ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_rfid_passenger__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mxt1xx_u_accessory_rfid_passenger, mxt1xx_u_accessory_rfid_passenger.Builder> InternalFieldAccessors {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory_rfid_passenger__FieldAccessorTable; }
    }
    
    public const int PassengerIdFieldNumber = 1;
    private bool hasPassengerId;
    private uint passengerId_;
    public bool HasPassengerId {
      get { return hasPassengerId; }
    }
    [global::System.CLSCompliant(false)]
    public uint PassengerId {
      get { return passengerId_; }
    }
    
    public const int PassengerAuthorizedFieldNumber = 2;
    private bool hasPassengerAuthorized;
    private bool passengerAuthorized_;
    public bool HasPassengerAuthorized {
      get { return hasPassengerAuthorized; }
    }
    public bool PassengerAuthorized {
      get { return passengerAuthorized_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPassengerId) return false;
        if (!hasPassengerAuthorized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mxt1XxUAccessoryRfidPassengerFieldNames;
      if (hasPassengerId) {
        output.WriteUInt32(1, field_names[1], PassengerId);
      }
      if (hasPassengerAuthorized) {
        output.WriteBool(2, field_names[0], PassengerAuthorized);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasPassengerId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, PassengerId);
      }
      if (hasPassengerAuthorized) {
        size += pb::CodedOutputStream.ComputeBoolSize(2, PassengerAuthorized);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mxt1xx_u_accessory_rfid_passenger ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_accessory_rfid_passenger ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_accessory_rfid_passenger ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_accessory_rfid_passenger ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_accessory_rfid_passenger ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_accessory_rfid_passenger ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_accessory_rfid_passenger ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mxt1xx_u_accessory_rfid_passenger ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mxt1xx_u_accessory_rfid_passenger ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_accessory_rfid_passenger ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mxt1xx_u_accessory_rfid_passenger MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mxt1xx_u_accessory_rfid_passenger prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mxt1xx_u_accessory_rfid_passenger, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mxt1xx_u_accessory_rfid_passenger cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mxt1xx_u_accessory_rfid_passenger result;
      
      private mxt1xx_u_accessory_rfid_passenger PrepareBuilder() {
        if (resultIsReadOnly) {
          mxt1xx_u_accessory_rfid_passenger original = result;
          result = new mxt1xx_u_accessory_rfid_passenger();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mxt1xx_u_accessory_rfid_passenger MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_rfid_passenger.Descriptor; }
      }
      
      public override mxt1xx_u_accessory_rfid_passenger DefaultInstanceForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_rfid_passenger.DefaultInstance; }
      }
      
      public override mxt1xx_u_accessory_rfid_passenger BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mxt1xx_u_accessory_rfid_passenger) {
          return MergeFrom((mxt1xx_u_accessory_rfid_passenger) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mxt1xx_u_accessory_rfid_passenger other) {
        if (other == global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_rfid_passenger.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPassengerId) {
          PassengerId = other.PassengerId;
        }
        if (other.HasPassengerAuthorized) {
          PassengerAuthorized = other.PassengerAuthorized;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mxt1XxUAccessoryRfidPassengerFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mxt1XxUAccessoryRfidPassengerFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasPassengerId = input.ReadUInt32(ref result.passengerId_);
              break;
            }
            case 16: {
              result.hasPassengerAuthorized = input.ReadBool(ref result.passengerAuthorized_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPassengerId {
        get { return result.hasPassengerId; }
      }
      [global::System.CLSCompliant(false)]
      public uint PassengerId {
        get { return result.PassengerId; }
        set { SetPassengerId(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetPassengerId(uint value) {
        PrepareBuilder();
        result.hasPassengerId = true;
        result.passengerId_ = value;
        return this;
      }
      public Builder ClearPassengerId() {
        PrepareBuilder();
        result.hasPassengerId = false;
        result.passengerId_ = 0;
        return this;
      }
      
      public bool HasPassengerAuthorized {
        get { return result.hasPassengerAuthorized; }
      }
      public bool PassengerAuthorized {
        get { return result.PassengerAuthorized; }
        set { SetPassengerAuthorized(value); }
      }
      public Builder SetPassengerAuthorized(bool value) {
        PrepareBuilder();
        result.hasPassengerAuthorized = true;
        result.passengerAuthorized_ = value;
        return this;
      }
      public Builder ClearPassengerAuthorized() {
        PrepareBuilder();
        result.hasPassengerAuthorized = false;
        result.passengerAuthorized_ = false;
        return this;
      }
    }
    static mxt1xx_u_accessory_rfid_passenger() {
      object.ReferenceEquals(global::maxtrack.pb.mxt1xx.Mxt1Xx.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mxt1xx_u_accessory : pb::GeneratedMessage<mxt1xx_u_accessory, mxt1xx_u_accessory.Builder> {
    private mxt1xx_u_accessory() { }
    private static readonly mxt1xx_u_accessory defaultInstance = new mxt1xx_u_accessory().MakeReadOnly();
    private static readonly string[] _mxt1XxUAccessoryFieldNames = new string[] { "gps_speed_list", "low_battery_list", "missing_tag_list", "mxt101_list", "mxt151_list", "rfid_driver_list", "rfid_passenger_list", "rpm_virtual_list", "wt100_list", "wt110_list", "wt111_list", "wt112_list", "wt200_list", "wt300_list", "wt400_list" };
    private static readonly uint[] _mxt1XxUAccessoryFieldTags = new uint[] { 106, 98, 90, 66, 74, 114, 122, 82, 10, 18, 26, 34, 42, 50, 58 };
    public static mxt1xx_u_accessory DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mxt1xx_u_accessory DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mxt1xx_u_accessory ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mxt1xx_u_accessory, mxt1xx_u_accessory.Builder> InternalFieldAccessors {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accessory__FieldAccessorTable; }
    }
    
    public const int Wt100ListFieldNumber = 1;
    private pbc::PopsicleList<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt100> wt100List_ = new pbc::PopsicleList<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt100>();
    public scg::IList<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt100> Wt100ListList {
      get { return wt100List_; }
    }
    public int Wt100ListCount {
      get { return wt100List_.Count; }
    }
    public global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt100 GetWt100List(int index) {
      return wt100List_[index];
    }
    
    public const int Wt110ListFieldNumber = 2;
    private pbc::PopsicleList<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt110> wt110List_ = new pbc::PopsicleList<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt110>();
    public scg::IList<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt110> Wt110ListList {
      get { return wt110List_; }
    }
    public int Wt110ListCount {
      get { return wt110List_.Count; }
    }
    public global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt110 GetWt110List(int index) {
      return wt110List_[index];
    }
    
    public const int Wt111ListFieldNumber = 3;
    private pbc::PopsicleList<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt111> wt111List_ = new pbc::PopsicleList<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt111>();
    public scg::IList<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt111> Wt111ListList {
      get { return wt111List_; }
    }
    public int Wt111ListCount {
      get { return wt111List_.Count; }
    }
    public global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt111 GetWt111List(int index) {
      return wt111List_[index];
    }
    
    public const int Wt112ListFieldNumber = 4;
    private pbc::PopsicleList<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt112> wt112List_ = new pbc::PopsicleList<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt112>();
    public scg::IList<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt112> Wt112ListList {
      get { return wt112List_; }
    }
    public int Wt112ListCount {
      get { return wt112List_.Count; }
    }
    public global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt112 GetWt112List(int index) {
      return wt112List_[index];
    }
    
    public const int Wt200ListFieldNumber = 5;
    private pbc::PopsicleList<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt200> wt200List_ = new pbc::PopsicleList<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt200>();
    public scg::IList<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt200> Wt200ListList {
      get { return wt200List_; }
    }
    public int Wt200ListCount {
      get { return wt200List_.Count; }
    }
    public global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt200 GetWt200List(int index) {
      return wt200List_[index];
    }
    
    public const int Wt300ListFieldNumber = 6;
    private pbc::PopsicleList<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt300> wt300List_ = new pbc::PopsicleList<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt300>();
    public scg::IList<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt300> Wt300ListList {
      get { return wt300List_; }
    }
    public int Wt300ListCount {
      get { return wt300List_.Count; }
    }
    public global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt300 GetWt300List(int index) {
      return wt300List_[index];
    }
    
    public const int Wt400ListFieldNumber = 7;
    private pbc::PopsicleList<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt400> wt400List_ = new pbc::PopsicleList<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt400>();
    public scg::IList<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt400> Wt400ListList {
      get { return wt400List_; }
    }
    public int Wt400ListCount {
      get { return wt400List_.Count; }
    }
    public global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt400 GetWt400List(int index) {
      return wt400List_[index];
    }
    
    public const int Mxt101ListFieldNumber = 8;
    private pbc::PopsicleList<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_mxt101> mxt101List_ = new pbc::PopsicleList<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_mxt101>();
    public scg::IList<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_mxt101> Mxt101ListList {
      get { return mxt101List_; }
    }
    public int Mxt101ListCount {
      get { return mxt101List_.Count; }
    }
    public global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_mxt101 GetMxt101List(int index) {
      return mxt101List_[index];
    }
    
    public const int Mxt151ListFieldNumber = 9;
    private pbc::PopsicleList<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_mxt151> mxt151List_ = new pbc::PopsicleList<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_mxt151>();
    public scg::IList<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_mxt151> Mxt151ListList {
      get { return mxt151List_; }
    }
    public int Mxt151ListCount {
      get { return mxt151List_.Count; }
    }
    public global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_mxt151 GetMxt151List(int index) {
      return mxt151List_[index];
    }
    
    public const int RpmVirtualListFieldNumber = 10;
    private pbc::PopsicleList<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_rpm_virtual> rpmVirtualList_ = new pbc::PopsicleList<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_rpm_virtual>();
    public scg::IList<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_rpm_virtual> RpmVirtualListList {
      get { return rpmVirtualList_; }
    }
    public int RpmVirtualListCount {
      get { return rpmVirtualList_.Count; }
    }
    public global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_rpm_virtual GetRpmVirtualList(int index) {
      return rpmVirtualList_[index];
    }
    
    public const int MissingTagListFieldNumber = 11;
    private pbc::PopsicleList<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_tag> missingTagList_ = new pbc::PopsicleList<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_tag>();
    public scg::IList<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_tag> MissingTagListList {
      get { return missingTagList_; }
    }
    public int MissingTagListCount {
      get { return missingTagList_.Count; }
    }
    public global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_tag GetMissingTagList(int index) {
      return missingTagList_[index];
    }
    
    public const int LowBatteryListFieldNumber = 12;
    private pbc::PopsicleList<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_tag> lowBatteryList_ = new pbc::PopsicleList<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_tag>();
    public scg::IList<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_tag> LowBatteryListList {
      get { return lowBatteryList_; }
    }
    public int LowBatteryListCount {
      get { return lowBatteryList_.Count; }
    }
    public global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_tag GetLowBatteryList(int index) {
      return lowBatteryList_[index];
    }
    
    public const int GpsSpeedListFieldNumber = 13;
    private pbc::PopsicleList<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_gps_speed> gpsSpeedList_ = new pbc::PopsicleList<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_gps_speed>();
    public scg::IList<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_gps_speed> GpsSpeedListList {
      get { return gpsSpeedList_; }
    }
    public int GpsSpeedListCount {
      get { return gpsSpeedList_.Count; }
    }
    public global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_gps_speed GetGpsSpeedList(int index) {
      return gpsSpeedList_[index];
    }
    
    public const int RfidDriverListFieldNumber = 14;
    private pbc::PopsicleList<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_rfid_driver> rfidDriverList_ = new pbc::PopsicleList<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_rfid_driver>();
    public scg::IList<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_rfid_driver> RfidDriverListList {
      get { return rfidDriverList_; }
    }
    public int RfidDriverListCount {
      get { return rfidDriverList_.Count; }
    }
    public global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_rfid_driver GetRfidDriverList(int index) {
      return rfidDriverList_[index];
    }
    
    public const int RfidPassengerListFieldNumber = 15;
    private pbc::PopsicleList<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_rfid_passenger> rfidPassengerList_ = new pbc::PopsicleList<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_rfid_passenger>();
    public scg::IList<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_rfid_passenger> RfidPassengerListList {
      get { return rfidPassengerList_; }
    }
    public int RfidPassengerListCount {
      get { return rfidPassengerList_.Count; }
    }
    public global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_rfid_passenger GetRfidPassengerList(int index) {
      return rfidPassengerList_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt100 element in Wt100ListList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt110 element in Wt110ListList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt111 element in Wt111ListList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt112 element in Wt112ListList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt200 element in Wt200ListList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt300 element in Wt300ListList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt400 element in Wt400ListList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_mxt101 element in Mxt101ListList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_mxt151 element in Mxt151ListList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_rpm_virtual element in RpmVirtualListList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_tag element in MissingTagListList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_tag element in LowBatteryListList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_gps_speed element in GpsSpeedListList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_rfid_driver element in RfidDriverListList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_rfid_passenger element in RfidPassengerListList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mxt1XxUAccessoryFieldNames;
      if (wt100List_.Count > 0) {
        output.WriteMessageArray(1, field_names[8], wt100List_);
      }
      if (wt110List_.Count > 0) {
        output.WriteMessageArray(2, field_names[9], wt110List_);
      }
      if (wt111List_.Count > 0) {
        output.WriteMessageArray(3, field_names[10], wt111List_);
      }
      if (wt112List_.Count > 0) {
        output.WriteMessageArray(4, field_names[11], wt112List_);
      }
      if (wt200List_.Count > 0) {
        output.WriteMessageArray(5, field_names[12], wt200List_);
      }
      if (wt300List_.Count > 0) {
        output.WriteMessageArray(6, field_names[13], wt300List_);
      }
      if (wt400List_.Count > 0) {
        output.WriteMessageArray(7, field_names[14], wt400List_);
      }
      if (mxt101List_.Count > 0) {
        output.WriteMessageArray(8, field_names[3], mxt101List_);
      }
      if (mxt151List_.Count > 0) {
        output.WriteMessageArray(9, field_names[4], mxt151List_);
      }
      if (rpmVirtualList_.Count > 0) {
        output.WriteMessageArray(10, field_names[7], rpmVirtualList_);
      }
      if (missingTagList_.Count > 0) {
        output.WriteMessageArray(11, field_names[2], missingTagList_);
      }
      if (lowBatteryList_.Count > 0) {
        output.WriteMessageArray(12, field_names[1], lowBatteryList_);
      }
      if (gpsSpeedList_.Count > 0) {
        output.WriteMessageArray(13, field_names[0], gpsSpeedList_);
      }
      if (rfidDriverList_.Count > 0) {
        output.WriteMessageArray(14, field_names[5], rfidDriverList_);
      }
      if (rfidPassengerList_.Count > 0) {
        output.WriteMessageArray(15, field_names[6], rfidPassengerList_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      foreach (global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt100 element in Wt100ListList) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, element);
      }
      foreach (global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt110 element in Wt110ListList) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, element);
      }
      foreach (global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt111 element in Wt111ListList) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, element);
      }
      foreach (global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt112 element in Wt112ListList) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, element);
      }
      foreach (global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt200 element in Wt200ListList) {
        size += pb::CodedOutputStream.ComputeMessageSize(5, element);
      }
      foreach (global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt300 element in Wt300ListList) {
        size += pb::CodedOutputStream.ComputeMessageSize(6, element);
      }
      foreach (global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt400 element in Wt400ListList) {
        size += pb::CodedOutputStream.ComputeMessageSize(7, element);
      }
      foreach (global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_mxt101 element in Mxt101ListList) {
        size += pb::CodedOutputStream.ComputeMessageSize(8, element);
      }
      foreach (global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_mxt151 element in Mxt151ListList) {
        size += pb::CodedOutputStream.ComputeMessageSize(9, element);
      }
      foreach (global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_rpm_virtual element in RpmVirtualListList) {
        size += pb::CodedOutputStream.ComputeMessageSize(10, element);
      }
      foreach (global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_tag element in MissingTagListList) {
        size += pb::CodedOutputStream.ComputeMessageSize(11, element);
      }
      foreach (global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_tag element in LowBatteryListList) {
        size += pb::CodedOutputStream.ComputeMessageSize(12, element);
      }
      foreach (global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_gps_speed element in GpsSpeedListList) {
        size += pb::CodedOutputStream.ComputeMessageSize(13, element);
      }
      foreach (global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_rfid_driver element in RfidDriverListList) {
        size += pb::CodedOutputStream.ComputeMessageSize(14, element);
      }
      foreach (global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_rfid_passenger element in RfidPassengerListList) {
        size += pb::CodedOutputStream.ComputeMessageSize(15, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mxt1xx_u_accessory ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_accessory ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_accessory ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_accessory ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_accessory ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_accessory ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_accessory ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mxt1xx_u_accessory ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mxt1xx_u_accessory ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_accessory ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mxt1xx_u_accessory MakeReadOnly() {
      wt100List_.MakeReadOnly();
      wt110List_.MakeReadOnly();
      wt111List_.MakeReadOnly();
      wt112List_.MakeReadOnly();
      wt200List_.MakeReadOnly();
      wt300List_.MakeReadOnly();
      wt400List_.MakeReadOnly();
      mxt101List_.MakeReadOnly();
      mxt151List_.MakeReadOnly();
      rpmVirtualList_.MakeReadOnly();
      missingTagList_.MakeReadOnly();
      lowBatteryList_.MakeReadOnly();
      gpsSpeedList_.MakeReadOnly();
      rfidDriverList_.MakeReadOnly();
      rfidPassengerList_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mxt1xx_u_accessory prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mxt1xx_u_accessory, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mxt1xx_u_accessory cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mxt1xx_u_accessory result;
      
      private mxt1xx_u_accessory PrepareBuilder() {
        if (resultIsReadOnly) {
          mxt1xx_u_accessory original = result;
          result = new mxt1xx_u_accessory();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mxt1xx_u_accessory MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory.Descriptor; }
      }
      
      public override mxt1xx_u_accessory DefaultInstanceForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory.DefaultInstance; }
      }
      
      public override mxt1xx_u_accessory BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mxt1xx_u_accessory) {
          return MergeFrom((mxt1xx_u_accessory) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mxt1xx_u_accessory other) {
        if (other == global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory.DefaultInstance) return this;
        PrepareBuilder();
        if (other.wt100List_.Count != 0) {
          result.wt100List_.Add(other.wt100List_);
        }
        if (other.wt110List_.Count != 0) {
          result.wt110List_.Add(other.wt110List_);
        }
        if (other.wt111List_.Count != 0) {
          result.wt111List_.Add(other.wt111List_);
        }
        if (other.wt112List_.Count != 0) {
          result.wt112List_.Add(other.wt112List_);
        }
        if (other.wt200List_.Count != 0) {
          result.wt200List_.Add(other.wt200List_);
        }
        if (other.wt300List_.Count != 0) {
          result.wt300List_.Add(other.wt300List_);
        }
        if (other.wt400List_.Count != 0) {
          result.wt400List_.Add(other.wt400List_);
        }
        if (other.mxt101List_.Count != 0) {
          result.mxt101List_.Add(other.mxt101List_);
        }
        if (other.mxt151List_.Count != 0) {
          result.mxt151List_.Add(other.mxt151List_);
        }
        if (other.rpmVirtualList_.Count != 0) {
          result.rpmVirtualList_.Add(other.rpmVirtualList_);
        }
        if (other.missingTagList_.Count != 0) {
          result.missingTagList_.Add(other.missingTagList_);
        }
        if (other.lowBatteryList_.Count != 0) {
          result.lowBatteryList_.Add(other.lowBatteryList_);
        }
        if (other.gpsSpeedList_.Count != 0) {
          result.gpsSpeedList_.Add(other.gpsSpeedList_);
        }
        if (other.rfidDriverList_.Count != 0) {
          result.rfidDriverList_.Add(other.rfidDriverList_);
        }
        if (other.rfidPassengerList_.Count != 0) {
          result.rfidPassengerList_.Add(other.rfidPassengerList_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mxt1XxUAccessoryFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mxt1XxUAccessoryFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.wt100List_, global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt100.DefaultInstance, extensionRegistry);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.wt110List_, global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt110.DefaultInstance, extensionRegistry);
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.wt111List_, global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt111.DefaultInstance, extensionRegistry);
              break;
            }
            case 34: {
              input.ReadMessageArray(tag, field_name, result.wt112List_, global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt112.DefaultInstance, extensionRegistry);
              break;
            }
            case 42: {
              input.ReadMessageArray(tag, field_name, result.wt200List_, global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt200.DefaultInstance, extensionRegistry);
              break;
            }
            case 50: {
              input.ReadMessageArray(tag, field_name, result.wt300List_, global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt300.DefaultInstance, extensionRegistry);
              break;
            }
            case 58: {
              input.ReadMessageArray(tag, field_name, result.wt400List_, global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt400.DefaultInstance, extensionRegistry);
              break;
            }
            case 66: {
              input.ReadMessageArray(tag, field_name, result.mxt101List_, global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_mxt101.DefaultInstance, extensionRegistry);
              break;
            }
            case 74: {
              input.ReadMessageArray(tag, field_name, result.mxt151List_, global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_mxt151.DefaultInstance, extensionRegistry);
              break;
            }
            case 82: {
              input.ReadMessageArray(tag, field_name, result.rpmVirtualList_, global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_rpm_virtual.DefaultInstance, extensionRegistry);
              break;
            }
            case 90: {
              input.ReadMessageArray(tag, field_name, result.missingTagList_, global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_tag.DefaultInstance, extensionRegistry);
              break;
            }
            case 98: {
              input.ReadMessageArray(tag, field_name, result.lowBatteryList_, global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_tag.DefaultInstance, extensionRegistry);
              break;
            }
            case 106: {
              input.ReadMessageArray(tag, field_name, result.gpsSpeedList_, global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_gps_speed.DefaultInstance, extensionRegistry);
              break;
            }
            case 114: {
              input.ReadMessageArray(tag, field_name, result.rfidDriverList_, global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_rfid_driver.DefaultInstance, extensionRegistry);
              break;
            }
            case 122: {
              input.ReadMessageArray(tag, field_name, result.rfidPassengerList_, global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_rfid_passenger.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt100> Wt100ListList {
        get { return PrepareBuilder().wt100List_; }
      }
      public int Wt100ListCount {
        get { return result.Wt100ListCount; }
      }
      public global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt100 GetWt100List(int index) {
        return result.GetWt100List(index);
      }
      public Builder SetWt100List(int index, global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt100 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.wt100List_[index] = value;
        return this;
      }
      public Builder SetWt100List(int index, global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt100.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.wt100List_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddWt100List(global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt100 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.wt100List_.Add(value);
        return this;
      }
      public Builder AddWt100List(global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt100.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.wt100List_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeWt100List(scg::IEnumerable<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt100> values) {
        PrepareBuilder();
        result.wt100List_.Add(values);
        return this;
      }
      public Builder ClearWt100List() {
        PrepareBuilder();
        result.wt100List_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt110> Wt110ListList {
        get { return PrepareBuilder().wt110List_; }
      }
      public int Wt110ListCount {
        get { return result.Wt110ListCount; }
      }
      public global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt110 GetWt110List(int index) {
        return result.GetWt110List(index);
      }
      public Builder SetWt110List(int index, global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt110 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.wt110List_[index] = value;
        return this;
      }
      public Builder SetWt110List(int index, global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt110.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.wt110List_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddWt110List(global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt110 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.wt110List_.Add(value);
        return this;
      }
      public Builder AddWt110List(global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt110.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.wt110List_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeWt110List(scg::IEnumerable<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt110> values) {
        PrepareBuilder();
        result.wt110List_.Add(values);
        return this;
      }
      public Builder ClearWt110List() {
        PrepareBuilder();
        result.wt110List_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt111> Wt111ListList {
        get { return PrepareBuilder().wt111List_; }
      }
      public int Wt111ListCount {
        get { return result.Wt111ListCount; }
      }
      public global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt111 GetWt111List(int index) {
        return result.GetWt111List(index);
      }
      public Builder SetWt111List(int index, global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt111 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.wt111List_[index] = value;
        return this;
      }
      public Builder SetWt111List(int index, global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt111.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.wt111List_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddWt111List(global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt111 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.wt111List_.Add(value);
        return this;
      }
      public Builder AddWt111List(global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt111.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.wt111List_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeWt111List(scg::IEnumerable<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt111> values) {
        PrepareBuilder();
        result.wt111List_.Add(values);
        return this;
      }
      public Builder ClearWt111List() {
        PrepareBuilder();
        result.wt111List_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt112> Wt112ListList {
        get { return PrepareBuilder().wt112List_; }
      }
      public int Wt112ListCount {
        get { return result.Wt112ListCount; }
      }
      public global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt112 GetWt112List(int index) {
        return result.GetWt112List(index);
      }
      public Builder SetWt112List(int index, global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt112 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.wt112List_[index] = value;
        return this;
      }
      public Builder SetWt112List(int index, global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt112.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.wt112List_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddWt112List(global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt112 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.wt112List_.Add(value);
        return this;
      }
      public Builder AddWt112List(global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt112.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.wt112List_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeWt112List(scg::IEnumerable<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt112> values) {
        PrepareBuilder();
        result.wt112List_.Add(values);
        return this;
      }
      public Builder ClearWt112List() {
        PrepareBuilder();
        result.wt112List_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt200> Wt200ListList {
        get { return PrepareBuilder().wt200List_; }
      }
      public int Wt200ListCount {
        get { return result.Wt200ListCount; }
      }
      public global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt200 GetWt200List(int index) {
        return result.GetWt200List(index);
      }
      public Builder SetWt200List(int index, global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt200 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.wt200List_[index] = value;
        return this;
      }
      public Builder SetWt200List(int index, global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt200.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.wt200List_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddWt200List(global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt200 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.wt200List_.Add(value);
        return this;
      }
      public Builder AddWt200List(global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt200.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.wt200List_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeWt200List(scg::IEnumerable<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt200> values) {
        PrepareBuilder();
        result.wt200List_.Add(values);
        return this;
      }
      public Builder ClearWt200List() {
        PrepareBuilder();
        result.wt200List_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt300> Wt300ListList {
        get { return PrepareBuilder().wt300List_; }
      }
      public int Wt300ListCount {
        get { return result.Wt300ListCount; }
      }
      public global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt300 GetWt300List(int index) {
        return result.GetWt300List(index);
      }
      public Builder SetWt300List(int index, global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt300 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.wt300List_[index] = value;
        return this;
      }
      public Builder SetWt300List(int index, global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt300.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.wt300List_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddWt300List(global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt300 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.wt300List_.Add(value);
        return this;
      }
      public Builder AddWt300List(global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt300.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.wt300List_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeWt300List(scg::IEnumerable<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt300> values) {
        PrepareBuilder();
        result.wt300List_.Add(values);
        return this;
      }
      public Builder ClearWt300List() {
        PrepareBuilder();
        result.wt300List_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt400> Wt400ListList {
        get { return PrepareBuilder().wt400List_; }
      }
      public int Wt400ListCount {
        get { return result.Wt400ListCount; }
      }
      public global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt400 GetWt400List(int index) {
        return result.GetWt400List(index);
      }
      public Builder SetWt400List(int index, global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt400 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.wt400List_[index] = value;
        return this;
      }
      public Builder SetWt400List(int index, global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt400.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.wt400List_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddWt400List(global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt400 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.wt400List_.Add(value);
        return this;
      }
      public Builder AddWt400List(global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt400.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.wt400List_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeWt400List(scg::IEnumerable<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_wt400> values) {
        PrepareBuilder();
        result.wt400List_.Add(values);
        return this;
      }
      public Builder ClearWt400List() {
        PrepareBuilder();
        result.wt400List_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_mxt101> Mxt101ListList {
        get { return PrepareBuilder().mxt101List_; }
      }
      public int Mxt101ListCount {
        get { return result.Mxt101ListCount; }
      }
      public global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_mxt101 GetMxt101List(int index) {
        return result.GetMxt101List(index);
      }
      public Builder SetMxt101List(int index, global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_mxt101 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.mxt101List_[index] = value;
        return this;
      }
      public Builder SetMxt101List(int index, global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_mxt101.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.mxt101List_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddMxt101List(global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_mxt101 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.mxt101List_.Add(value);
        return this;
      }
      public Builder AddMxt101List(global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_mxt101.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.mxt101List_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeMxt101List(scg::IEnumerable<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_mxt101> values) {
        PrepareBuilder();
        result.mxt101List_.Add(values);
        return this;
      }
      public Builder ClearMxt101List() {
        PrepareBuilder();
        result.mxt101List_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_mxt151> Mxt151ListList {
        get { return PrepareBuilder().mxt151List_; }
      }
      public int Mxt151ListCount {
        get { return result.Mxt151ListCount; }
      }
      public global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_mxt151 GetMxt151List(int index) {
        return result.GetMxt151List(index);
      }
      public Builder SetMxt151List(int index, global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_mxt151 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.mxt151List_[index] = value;
        return this;
      }
      public Builder SetMxt151List(int index, global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_mxt151.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.mxt151List_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddMxt151List(global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_mxt151 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.mxt151List_.Add(value);
        return this;
      }
      public Builder AddMxt151List(global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_mxt151.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.mxt151List_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeMxt151List(scg::IEnumerable<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_mxt151> values) {
        PrepareBuilder();
        result.mxt151List_.Add(values);
        return this;
      }
      public Builder ClearMxt151List() {
        PrepareBuilder();
        result.mxt151List_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_rpm_virtual> RpmVirtualListList {
        get { return PrepareBuilder().rpmVirtualList_; }
      }
      public int RpmVirtualListCount {
        get { return result.RpmVirtualListCount; }
      }
      public global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_rpm_virtual GetRpmVirtualList(int index) {
        return result.GetRpmVirtualList(index);
      }
      public Builder SetRpmVirtualList(int index, global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_rpm_virtual value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.rpmVirtualList_[index] = value;
        return this;
      }
      public Builder SetRpmVirtualList(int index, global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_rpm_virtual.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.rpmVirtualList_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddRpmVirtualList(global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_rpm_virtual value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.rpmVirtualList_.Add(value);
        return this;
      }
      public Builder AddRpmVirtualList(global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_rpm_virtual.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.rpmVirtualList_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeRpmVirtualList(scg::IEnumerable<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_rpm_virtual> values) {
        PrepareBuilder();
        result.rpmVirtualList_.Add(values);
        return this;
      }
      public Builder ClearRpmVirtualList() {
        PrepareBuilder();
        result.rpmVirtualList_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_tag> MissingTagListList {
        get { return PrepareBuilder().missingTagList_; }
      }
      public int MissingTagListCount {
        get { return result.MissingTagListCount; }
      }
      public global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_tag GetMissingTagList(int index) {
        return result.GetMissingTagList(index);
      }
      public Builder SetMissingTagList(int index, global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_tag value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.missingTagList_[index] = value;
        return this;
      }
      public Builder SetMissingTagList(int index, global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_tag.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.missingTagList_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddMissingTagList(global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_tag value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.missingTagList_.Add(value);
        return this;
      }
      public Builder AddMissingTagList(global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_tag.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.missingTagList_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeMissingTagList(scg::IEnumerable<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_tag> values) {
        PrepareBuilder();
        result.missingTagList_.Add(values);
        return this;
      }
      public Builder ClearMissingTagList() {
        PrepareBuilder();
        result.missingTagList_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_tag> LowBatteryListList {
        get { return PrepareBuilder().lowBatteryList_; }
      }
      public int LowBatteryListCount {
        get { return result.LowBatteryListCount; }
      }
      public global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_tag GetLowBatteryList(int index) {
        return result.GetLowBatteryList(index);
      }
      public Builder SetLowBatteryList(int index, global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_tag value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.lowBatteryList_[index] = value;
        return this;
      }
      public Builder SetLowBatteryList(int index, global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_tag.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.lowBatteryList_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddLowBatteryList(global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_tag value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.lowBatteryList_.Add(value);
        return this;
      }
      public Builder AddLowBatteryList(global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_tag.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.lowBatteryList_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeLowBatteryList(scg::IEnumerable<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_tag> values) {
        PrepareBuilder();
        result.lowBatteryList_.Add(values);
        return this;
      }
      public Builder ClearLowBatteryList() {
        PrepareBuilder();
        result.lowBatteryList_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_gps_speed> GpsSpeedListList {
        get { return PrepareBuilder().gpsSpeedList_; }
      }
      public int GpsSpeedListCount {
        get { return result.GpsSpeedListCount; }
      }
      public global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_gps_speed GetGpsSpeedList(int index) {
        return result.GetGpsSpeedList(index);
      }
      public Builder SetGpsSpeedList(int index, global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_gps_speed value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.gpsSpeedList_[index] = value;
        return this;
      }
      public Builder SetGpsSpeedList(int index, global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_gps_speed.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.gpsSpeedList_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddGpsSpeedList(global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_gps_speed value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.gpsSpeedList_.Add(value);
        return this;
      }
      public Builder AddGpsSpeedList(global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_gps_speed.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.gpsSpeedList_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeGpsSpeedList(scg::IEnumerable<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_gps_speed> values) {
        PrepareBuilder();
        result.gpsSpeedList_.Add(values);
        return this;
      }
      public Builder ClearGpsSpeedList() {
        PrepareBuilder();
        result.gpsSpeedList_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_rfid_driver> RfidDriverListList {
        get { return PrepareBuilder().rfidDriverList_; }
      }
      public int RfidDriverListCount {
        get { return result.RfidDriverListCount; }
      }
      public global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_rfid_driver GetRfidDriverList(int index) {
        return result.GetRfidDriverList(index);
      }
      public Builder SetRfidDriverList(int index, global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_rfid_driver value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.rfidDriverList_[index] = value;
        return this;
      }
      public Builder SetRfidDriverList(int index, global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_rfid_driver.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.rfidDriverList_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddRfidDriverList(global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_rfid_driver value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.rfidDriverList_.Add(value);
        return this;
      }
      public Builder AddRfidDriverList(global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_rfid_driver.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.rfidDriverList_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeRfidDriverList(scg::IEnumerable<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_rfid_driver> values) {
        PrepareBuilder();
        result.rfidDriverList_.Add(values);
        return this;
      }
      public Builder ClearRfidDriverList() {
        PrepareBuilder();
        result.rfidDriverList_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_rfid_passenger> RfidPassengerListList {
        get { return PrepareBuilder().rfidPassengerList_; }
      }
      public int RfidPassengerListCount {
        get { return result.RfidPassengerListCount; }
      }
      public global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_rfid_passenger GetRfidPassengerList(int index) {
        return result.GetRfidPassengerList(index);
      }
      public Builder SetRfidPassengerList(int index, global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_rfid_passenger value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.rfidPassengerList_[index] = value;
        return this;
      }
      public Builder SetRfidPassengerList(int index, global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_rfid_passenger.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.rfidPassengerList_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddRfidPassengerList(global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_rfid_passenger value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.rfidPassengerList_.Add(value);
        return this;
      }
      public Builder AddRfidPassengerList(global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_rfid_passenger.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.rfidPassengerList_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeRfidPassengerList(scg::IEnumerable<global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory_rfid_passenger> values) {
        PrepareBuilder();
        result.rfidPassengerList_.Add(values);
        return this;
      }
      public Builder ClearRfidPassengerList() {
        PrepareBuilder();
        result.rfidPassengerList_.Clear();
        return this;
      }
    }
    static mxt1xx_u_accessory() {
      object.ReferenceEquals(global::maxtrack.pb.mxt1xx.Mxt1Xx.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mxt1xx_u_additional_data_lbs_gsm_cell_tower : pb::GeneratedMessage<mxt1xx_u_additional_data_lbs_gsm_cell_tower, mxt1xx_u_additional_data_lbs_gsm_cell_tower.Builder> {
    private mxt1xx_u_additional_data_lbs_gsm_cell_tower() { }
    private static readonly mxt1xx_u_additional_data_lbs_gsm_cell_tower defaultInstance = new mxt1xx_u_additional_data_lbs_gsm_cell_tower().MakeReadOnly();
    private static readonly string[] _mxt1XxUAdditionalDataLbsGsmCellTowerFieldNames = new string[] { "cell_id", "lac", "mcc", "mnc", "signal_str" };
    private static readonly uint[] _mxt1XxUAdditionalDataLbsGsmCellTowerFieldTags = new uint[] { 8, 32, 16, 24, 40 };
    public static mxt1xx_u_additional_data_lbs_gsm_cell_tower DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mxt1xx_u_additional_data_lbs_gsm_cell_tower DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mxt1xx_u_additional_data_lbs_gsm_cell_tower ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_lbs_gsm_cell_tower__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mxt1xx_u_additional_data_lbs_gsm_cell_tower, mxt1xx_u_additional_data_lbs_gsm_cell_tower.Builder> InternalFieldAccessors {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_lbs_gsm_cell_tower__FieldAccessorTable; }
    }
    
    public const int CellIdFieldNumber = 1;
    private bool hasCellId;
    private uint cellId_;
    public bool HasCellId {
      get { return hasCellId; }
    }
    [global::System.CLSCompliant(false)]
    public uint CellId {
      get { return cellId_; }
    }
    
    public const int MccFieldNumber = 2;
    private bool hasMcc;
    private uint mcc_;
    public bool HasMcc {
      get { return hasMcc; }
    }
    [global::System.CLSCompliant(false)]
    public uint Mcc {
      get { return mcc_; }
    }
    
    public const int MncFieldNumber = 3;
    private bool hasMnc;
    private uint mnc_;
    public bool HasMnc {
      get { return hasMnc; }
    }
    [global::System.CLSCompliant(false)]
    public uint Mnc {
      get { return mnc_; }
    }
    
    public const int LacFieldNumber = 4;
    private bool hasLac;
    private uint lac_;
    public bool HasLac {
      get { return hasLac; }
    }
    [global::System.CLSCompliant(false)]
    public uint Lac {
      get { return lac_; }
    }
    
    public const int SignalStrFieldNumber = 5;
    private bool hasSignalStr;
    private uint signalStr_;
    public bool HasSignalStr {
      get { return hasSignalStr; }
    }
    [global::System.CLSCompliant(false)]
    public uint SignalStr {
      get { return signalStr_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCellId) return false;
        if (!hasMcc) return false;
        if (!hasMnc) return false;
        if (!hasLac) return false;
        if (!hasSignalStr) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mxt1XxUAdditionalDataLbsGsmCellTowerFieldNames;
      if (hasCellId) {
        output.WriteUInt32(1, field_names[0], CellId);
      }
      if (hasMcc) {
        output.WriteUInt32(2, field_names[2], Mcc);
      }
      if (hasMnc) {
        output.WriteUInt32(3, field_names[3], Mnc);
      }
      if (hasLac) {
        output.WriteUInt32(4, field_names[1], Lac);
      }
      if (hasSignalStr) {
        output.WriteUInt32(5, field_names[4], SignalStr);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasCellId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, CellId);
      }
      if (hasMcc) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, Mcc);
      }
      if (hasMnc) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, Mnc);
      }
      if (hasLac) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, Lac);
      }
      if (hasSignalStr) {
        size += pb::CodedOutputStream.ComputeUInt32Size(5, SignalStr);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mxt1xx_u_additional_data_lbs_gsm_cell_tower ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_lbs_gsm_cell_tower ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_lbs_gsm_cell_tower ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_lbs_gsm_cell_tower ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_lbs_gsm_cell_tower ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_lbs_gsm_cell_tower ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_lbs_gsm_cell_tower ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mxt1xx_u_additional_data_lbs_gsm_cell_tower ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mxt1xx_u_additional_data_lbs_gsm_cell_tower ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_lbs_gsm_cell_tower ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mxt1xx_u_additional_data_lbs_gsm_cell_tower MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mxt1xx_u_additional_data_lbs_gsm_cell_tower prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mxt1xx_u_additional_data_lbs_gsm_cell_tower, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mxt1xx_u_additional_data_lbs_gsm_cell_tower cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mxt1xx_u_additional_data_lbs_gsm_cell_tower result;
      
      private mxt1xx_u_additional_data_lbs_gsm_cell_tower PrepareBuilder() {
        if (resultIsReadOnly) {
          mxt1xx_u_additional_data_lbs_gsm_cell_tower original = result;
          result = new mxt1xx_u_additional_data_lbs_gsm_cell_tower();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mxt1xx_u_additional_data_lbs_gsm_cell_tower MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_lbs_gsm_cell_tower.Descriptor; }
      }
      
      public override mxt1xx_u_additional_data_lbs_gsm_cell_tower DefaultInstanceForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_lbs_gsm_cell_tower.DefaultInstance; }
      }
      
      public override mxt1xx_u_additional_data_lbs_gsm_cell_tower BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mxt1xx_u_additional_data_lbs_gsm_cell_tower) {
          return MergeFrom((mxt1xx_u_additional_data_lbs_gsm_cell_tower) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mxt1xx_u_additional_data_lbs_gsm_cell_tower other) {
        if (other == global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_lbs_gsm_cell_tower.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCellId) {
          CellId = other.CellId;
        }
        if (other.HasMcc) {
          Mcc = other.Mcc;
        }
        if (other.HasMnc) {
          Mnc = other.Mnc;
        }
        if (other.HasLac) {
          Lac = other.Lac;
        }
        if (other.HasSignalStr) {
          SignalStr = other.SignalStr;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mxt1XxUAdditionalDataLbsGsmCellTowerFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mxt1XxUAdditionalDataLbsGsmCellTowerFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasCellId = input.ReadUInt32(ref result.cellId_);
              break;
            }
            case 16: {
              result.hasMcc = input.ReadUInt32(ref result.mcc_);
              break;
            }
            case 24: {
              result.hasMnc = input.ReadUInt32(ref result.mnc_);
              break;
            }
            case 32: {
              result.hasLac = input.ReadUInt32(ref result.lac_);
              break;
            }
            case 40: {
              result.hasSignalStr = input.ReadUInt32(ref result.signalStr_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCellId {
        get { return result.hasCellId; }
      }
      [global::System.CLSCompliant(false)]
      public uint CellId {
        get { return result.CellId; }
        set { SetCellId(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetCellId(uint value) {
        PrepareBuilder();
        result.hasCellId = true;
        result.cellId_ = value;
        return this;
      }
      public Builder ClearCellId() {
        PrepareBuilder();
        result.hasCellId = false;
        result.cellId_ = 0;
        return this;
      }
      
      public bool HasMcc {
        get { return result.hasMcc; }
      }
      [global::System.CLSCompliant(false)]
      public uint Mcc {
        get { return result.Mcc; }
        set { SetMcc(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetMcc(uint value) {
        PrepareBuilder();
        result.hasMcc = true;
        result.mcc_ = value;
        return this;
      }
      public Builder ClearMcc() {
        PrepareBuilder();
        result.hasMcc = false;
        result.mcc_ = 0;
        return this;
      }
      
      public bool HasMnc {
        get { return result.hasMnc; }
      }
      [global::System.CLSCompliant(false)]
      public uint Mnc {
        get { return result.Mnc; }
        set { SetMnc(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetMnc(uint value) {
        PrepareBuilder();
        result.hasMnc = true;
        result.mnc_ = value;
        return this;
      }
      public Builder ClearMnc() {
        PrepareBuilder();
        result.hasMnc = false;
        result.mnc_ = 0;
        return this;
      }
      
      public bool HasLac {
        get { return result.hasLac; }
      }
      [global::System.CLSCompliant(false)]
      public uint Lac {
        get { return result.Lac; }
        set { SetLac(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetLac(uint value) {
        PrepareBuilder();
        result.hasLac = true;
        result.lac_ = value;
        return this;
      }
      public Builder ClearLac() {
        PrepareBuilder();
        result.hasLac = false;
        result.lac_ = 0;
        return this;
      }
      
      public bool HasSignalStr {
        get { return result.hasSignalStr; }
      }
      [global::System.CLSCompliant(false)]
      public uint SignalStr {
        get { return result.SignalStr; }
        set { SetSignalStr(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSignalStr(uint value) {
        PrepareBuilder();
        result.hasSignalStr = true;
        result.signalStr_ = value;
        return this;
      }
      public Builder ClearSignalStr() {
        PrepareBuilder();
        result.hasSignalStr = false;
        result.signalStr_ = 0;
        return this;
      }
    }
    static mxt1xx_u_additional_data_lbs_gsm_cell_tower() {
      object.ReferenceEquals(global::maxtrack.pb.mxt1xx.Mxt1Xx.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mxt1xx_u_additional_data_lbs_gsm : pb::GeneratedMessage<mxt1xx_u_additional_data_lbs_gsm, mxt1xx_u_additional_data_lbs_gsm.Builder> {
    private mxt1xx_u_additional_data_lbs_gsm() { }
    private static readonly mxt1xx_u_additional_data_lbs_gsm defaultInstance = new mxt1xx_u_additional_data_lbs_gsm().MakeReadOnly();
    private static readonly string[] _mxt1XxUAdditionalDataLbsGsmFieldNames = new string[] { "age", "cell_tower_list", "radio_type", "timing_advance" };
    private static readonly uint[] _mxt1XxUAdditionalDataLbsGsmFieldTags = new uint[] { 16, 34, 10, 24 };
    public static mxt1xx_u_additional_data_lbs_gsm DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mxt1xx_u_additional_data_lbs_gsm DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mxt1xx_u_additional_data_lbs_gsm ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_lbs_gsm__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mxt1xx_u_additional_data_lbs_gsm, mxt1xx_u_additional_data_lbs_gsm.Builder> InternalFieldAccessors {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_lbs_gsm__FieldAccessorTable; }
    }
    
    public const int RadioTypeFieldNumber = 1;
    private bool hasRadioType;
    private string radioType_ = "";
    public bool HasRadioType {
      get { return hasRadioType; }
    }
    public string RadioType {
      get { return radioType_; }
    }
    
    public const int AgeFieldNumber = 2;
    private bool hasAge;
    private uint age_;
    public bool HasAge {
      get { return hasAge; }
    }
    [global::System.CLSCompliant(false)]
    public uint Age {
      get { return age_; }
    }
    
    public const int TimingAdvanceFieldNumber = 3;
    private bool hasTimingAdvance;
    private uint timingAdvance_;
    public bool HasTimingAdvance {
      get { return hasTimingAdvance; }
    }
    [global::System.CLSCompliant(false)]
    public uint TimingAdvance {
      get { return timingAdvance_; }
    }
    
    public const int CellTowerListFieldNumber = 4;
    private pbc::PopsicleList<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_lbs_gsm_cell_tower> cellTowerList_ = new pbc::PopsicleList<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_lbs_gsm_cell_tower>();
    public scg::IList<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_lbs_gsm_cell_tower> CellTowerListList {
      get { return cellTowerList_; }
    }
    public int CellTowerListCount {
      get { return cellTowerList_.Count; }
    }
    public global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_lbs_gsm_cell_tower GetCellTowerList(int index) {
      return cellTowerList_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasRadioType) return false;
        if (!hasAge) return false;
        if (!hasTimingAdvance) return false;
        foreach (global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_lbs_gsm_cell_tower element in CellTowerListList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mxt1XxUAdditionalDataLbsGsmFieldNames;
      if (hasRadioType) {
        output.WriteString(1, field_names[2], RadioType);
      }
      if (hasAge) {
        output.WriteUInt32(2, field_names[0], Age);
      }
      if (hasTimingAdvance) {
        output.WriteUInt32(3, field_names[3], TimingAdvance);
      }
      if (cellTowerList_.Count > 0) {
        output.WriteMessageArray(4, field_names[1], cellTowerList_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasRadioType) {
        size += pb::CodedOutputStream.ComputeStringSize(1, RadioType);
      }
      if (hasAge) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, Age);
      }
      if (hasTimingAdvance) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, TimingAdvance);
      }
      foreach (global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_lbs_gsm_cell_tower element in CellTowerListList) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mxt1xx_u_additional_data_lbs_gsm ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_lbs_gsm ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_lbs_gsm ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_lbs_gsm ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_lbs_gsm ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_lbs_gsm ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_lbs_gsm ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mxt1xx_u_additional_data_lbs_gsm ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mxt1xx_u_additional_data_lbs_gsm ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_lbs_gsm ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mxt1xx_u_additional_data_lbs_gsm MakeReadOnly() {
      cellTowerList_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mxt1xx_u_additional_data_lbs_gsm prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mxt1xx_u_additional_data_lbs_gsm, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mxt1xx_u_additional_data_lbs_gsm cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mxt1xx_u_additional_data_lbs_gsm result;
      
      private mxt1xx_u_additional_data_lbs_gsm PrepareBuilder() {
        if (resultIsReadOnly) {
          mxt1xx_u_additional_data_lbs_gsm original = result;
          result = new mxt1xx_u_additional_data_lbs_gsm();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mxt1xx_u_additional_data_lbs_gsm MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_lbs_gsm.Descriptor; }
      }
      
      public override mxt1xx_u_additional_data_lbs_gsm DefaultInstanceForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_lbs_gsm.DefaultInstance; }
      }
      
      public override mxt1xx_u_additional_data_lbs_gsm BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mxt1xx_u_additional_data_lbs_gsm) {
          return MergeFrom((mxt1xx_u_additional_data_lbs_gsm) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mxt1xx_u_additional_data_lbs_gsm other) {
        if (other == global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_lbs_gsm.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasRadioType) {
          RadioType = other.RadioType;
        }
        if (other.HasAge) {
          Age = other.Age;
        }
        if (other.HasTimingAdvance) {
          TimingAdvance = other.TimingAdvance;
        }
        if (other.cellTowerList_.Count != 0) {
          result.cellTowerList_.Add(other.cellTowerList_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mxt1XxUAdditionalDataLbsGsmFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mxt1XxUAdditionalDataLbsGsmFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasRadioType = input.ReadString(ref result.radioType_);
              break;
            }
            case 16: {
              result.hasAge = input.ReadUInt32(ref result.age_);
              break;
            }
            case 24: {
              result.hasTimingAdvance = input.ReadUInt32(ref result.timingAdvance_);
              break;
            }
            case 34: {
              input.ReadMessageArray(tag, field_name, result.cellTowerList_, global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_lbs_gsm_cell_tower.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasRadioType {
        get { return result.hasRadioType; }
      }
      public string RadioType {
        get { return result.RadioType; }
        set { SetRadioType(value); }
      }
      public Builder SetRadioType(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRadioType = true;
        result.radioType_ = value;
        return this;
      }
      public Builder ClearRadioType() {
        PrepareBuilder();
        result.hasRadioType = false;
        result.radioType_ = "";
        return this;
      }
      
      public bool HasAge {
        get { return result.hasAge; }
      }
      [global::System.CLSCompliant(false)]
      public uint Age {
        get { return result.Age; }
        set { SetAge(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetAge(uint value) {
        PrepareBuilder();
        result.hasAge = true;
        result.age_ = value;
        return this;
      }
      public Builder ClearAge() {
        PrepareBuilder();
        result.hasAge = false;
        result.age_ = 0;
        return this;
      }
      
      public bool HasTimingAdvance {
        get { return result.hasTimingAdvance; }
      }
      [global::System.CLSCompliant(false)]
      public uint TimingAdvance {
        get { return result.TimingAdvance; }
        set { SetTimingAdvance(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetTimingAdvance(uint value) {
        PrepareBuilder();
        result.hasTimingAdvance = true;
        result.timingAdvance_ = value;
        return this;
      }
      public Builder ClearTimingAdvance() {
        PrepareBuilder();
        result.hasTimingAdvance = false;
        result.timingAdvance_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_lbs_gsm_cell_tower> CellTowerListList {
        get { return PrepareBuilder().cellTowerList_; }
      }
      public int CellTowerListCount {
        get { return result.CellTowerListCount; }
      }
      public global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_lbs_gsm_cell_tower GetCellTowerList(int index) {
        return result.GetCellTowerList(index);
      }
      public Builder SetCellTowerList(int index, global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_lbs_gsm_cell_tower value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.cellTowerList_[index] = value;
        return this;
      }
      public Builder SetCellTowerList(int index, global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_lbs_gsm_cell_tower.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.cellTowerList_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddCellTowerList(global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_lbs_gsm_cell_tower value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.cellTowerList_.Add(value);
        return this;
      }
      public Builder AddCellTowerList(global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_lbs_gsm_cell_tower.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.cellTowerList_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeCellTowerList(scg::IEnumerable<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_lbs_gsm_cell_tower> values) {
        PrepareBuilder();
        result.cellTowerList_.Add(values);
        return this;
      }
      public Builder ClearCellTowerList() {
        PrepareBuilder();
        result.cellTowerList_.Clear();
        return this;
      }
    }
    static mxt1xx_u_additional_data_lbs_gsm() {
      object.ReferenceEquals(global::maxtrack.pb.mxt1xx.Mxt1Xx.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mxt1xx_u_additional_data_wifi_access_point : pb::GeneratedMessage<mxt1xx_u_additional_data_wifi_access_point, mxt1xx_u_additional_data_wifi_access_point.Builder> {
    private mxt1xx_u_additional_data_wifi_access_point() { }
    private static readonly mxt1xx_u_additional_data_wifi_access_point defaultInstance = new mxt1xx_u_additional_data_wifi_access_point().MakeReadOnly();
    private static readonly string[] _mxt1XxUAdditionalDataWifiAccessPointFieldNames = new string[] { "age", "channel", "mac_addr", "signal_str", "snr" };
    private static readonly uint[] _mxt1XxUAdditionalDataWifiAccessPointFieldTags = new uint[] { 24, 40, 10, 16, 32 };
    public static mxt1xx_u_additional_data_wifi_access_point DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mxt1xx_u_additional_data_wifi_access_point DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mxt1xx_u_additional_data_wifi_access_point ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_wifi_access_point__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mxt1xx_u_additional_data_wifi_access_point, mxt1xx_u_additional_data_wifi_access_point.Builder> InternalFieldAccessors {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_wifi_access_point__FieldAccessorTable; }
    }
    
    public const int MacAddrFieldNumber = 1;
    private bool hasMacAddr;
    private string macAddr_ = "";
    public bool HasMacAddr {
      get { return hasMacAddr; }
    }
    public string MacAddr {
      get { return macAddr_; }
    }
    
    public const int SignalStrFieldNumber = 2;
    private bool hasSignalStr;
    private uint signalStr_;
    public bool HasSignalStr {
      get { return hasSignalStr; }
    }
    [global::System.CLSCompliant(false)]
    public uint SignalStr {
      get { return signalStr_; }
    }
    
    public const int AgeFieldNumber = 3;
    private bool hasAge;
    private uint age_;
    public bool HasAge {
      get { return hasAge; }
    }
    [global::System.CLSCompliant(false)]
    public uint Age {
      get { return age_; }
    }
    
    public const int SnrFieldNumber = 4;
    private bool hasSnr;
    private uint snr_;
    public bool HasSnr {
      get { return hasSnr; }
    }
    [global::System.CLSCompliant(false)]
    public uint Snr {
      get { return snr_; }
    }
    
    public const int ChannelFieldNumber = 5;
    private bool hasChannel;
    private uint channel_;
    public bool HasChannel {
      get { return hasChannel; }
    }
    [global::System.CLSCompliant(false)]
    public uint Channel {
      get { return channel_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasMacAddr) return false;
        if (!hasSignalStr) return false;
        if (!hasAge) return false;
        if (!hasSnr) return false;
        if (!hasChannel) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mxt1XxUAdditionalDataWifiAccessPointFieldNames;
      if (hasMacAddr) {
        output.WriteString(1, field_names[2], MacAddr);
      }
      if (hasSignalStr) {
        output.WriteUInt32(2, field_names[3], SignalStr);
      }
      if (hasAge) {
        output.WriteUInt32(3, field_names[0], Age);
      }
      if (hasSnr) {
        output.WriteUInt32(4, field_names[4], Snr);
      }
      if (hasChannel) {
        output.WriteUInt32(5, field_names[1], Channel);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasMacAddr) {
        size += pb::CodedOutputStream.ComputeStringSize(1, MacAddr);
      }
      if (hasSignalStr) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, SignalStr);
      }
      if (hasAge) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, Age);
      }
      if (hasSnr) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, Snr);
      }
      if (hasChannel) {
        size += pb::CodedOutputStream.ComputeUInt32Size(5, Channel);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mxt1xx_u_additional_data_wifi_access_point ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_wifi_access_point ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_wifi_access_point ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_wifi_access_point ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_wifi_access_point ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_wifi_access_point ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_wifi_access_point ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mxt1xx_u_additional_data_wifi_access_point ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mxt1xx_u_additional_data_wifi_access_point ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_wifi_access_point ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mxt1xx_u_additional_data_wifi_access_point MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mxt1xx_u_additional_data_wifi_access_point prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mxt1xx_u_additional_data_wifi_access_point, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mxt1xx_u_additional_data_wifi_access_point cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mxt1xx_u_additional_data_wifi_access_point result;
      
      private mxt1xx_u_additional_data_wifi_access_point PrepareBuilder() {
        if (resultIsReadOnly) {
          mxt1xx_u_additional_data_wifi_access_point original = result;
          result = new mxt1xx_u_additional_data_wifi_access_point();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mxt1xx_u_additional_data_wifi_access_point MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_wifi_access_point.Descriptor; }
      }
      
      public override mxt1xx_u_additional_data_wifi_access_point DefaultInstanceForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_wifi_access_point.DefaultInstance; }
      }
      
      public override mxt1xx_u_additional_data_wifi_access_point BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mxt1xx_u_additional_data_wifi_access_point) {
          return MergeFrom((mxt1xx_u_additional_data_wifi_access_point) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mxt1xx_u_additional_data_wifi_access_point other) {
        if (other == global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_wifi_access_point.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMacAddr) {
          MacAddr = other.MacAddr;
        }
        if (other.HasSignalStr) {
          SignalStr = other.SignalStr;
        }
        if (other.HasAge) {
          Age = other.Age;
        }
        if (other.HasSnr) {
          Snr = other.Snr;
        }
        if (other.HasChannel) {
          Channel = other.Channel;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mxt1XxUAdditionalDataWifiAccessPointFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mxt1XxUAdditionalDataWifiAccessPointFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasMacAddr = input.ReadString(ref result.macAddr_);
              break;
            }
            case 16: {
              result.hasSignalStr = input.ReadUInt32(ref result.signalStr_);
              break;
            }
            case 24: {
              result.hasAge = input.ReadUInt32(ref result.age_);
              break;
            }
            case 32: {
              result.hasSnr = input.ReadUInt32(ref result.snr_);
              break;
            }
            case 40: {
              result.hasChannel = input.ReadUInt32(ref result.channel_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMacAddr {
        get { return result.hasMacAddr; }
      }
      public string MacAddr {
        get { return result.MacAddr; }
        set { SetMacAddr(value); }
      }
      public Builder SetMacAddr(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMacAddr = true;
        result.macAddr_ = value;
        return this;
      }
      public Builder ClearMacAddr() {
        PrepareBuilder();
        result.hasMacAddr = false;
        result.macAddr_ = "";
        return this;
      }
      
      public bool HasSignalStr {
        get { return result.hasSignalStr; }
      }
      [global::System.CLSCompliant(false)]
      public uint SignalStr {
        get { return result.SignalStr; }
        set { SetSignalStr(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSignalStr(uint value) {
        PrepareBuilder();
        result.hasSignalStr = true;
        result.signalStr_ = value;
        return this;
      }
      public Builder ClearSignalStr() {
        PrepareBuilder();
        result.hasSignalStr = false;
        result.signalStr_ = 0;
        return this;
      }
      
      public bool HasAge {
        get { return result.hasAge; }
      }
      [global::System.CLSCompliant(false)]
      public uint Age {
        get { return result.Age; }
        set { SetAge(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetAge(uint value) {
        PrepareBuilder();
        result.hasAge = true;
        result.age_ = value;
        return this;
      }
      public Builder ClearAge() {
        PrepareBuilder();
        result.hasAge = false;
        result.age_ = 0;
        return this;
      }
      
      public bool HasSnr {
        get { return result.hasSnr; }
      }
      [global::System.CLSCompliant(false)]
      public uint Snr {
        get { return result.Snr; }
        set { SetSnr(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSnr(uint value) {
        PrepareBuilder();
        result.hasSnr = true;
        result.snr_ = value;
        return this;
      }
      public Builder ClearSnr() {
        PrepareBuilder();
        result.hasSnr = false;
        result.snr_ = 0;
        return this;
      }
      
      public bool HasChannel {
        get { return result.hasChannel; }
      }
      [global::System.CLSCompliant(false)]
      public uint Channel {
        get { return result.Channel; }
        set { SetChannel(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetChannel(uint value) {
        PrepareBuilder();
        result.hasChannel = true;
        result.channel_ = value;
        return this;
      }
      public Builder ClearChannel() {
        PrepareBuilder();
        result.hasChannel = false;
        result.channel_ = 0;
        return this;
      }
    }
    static mxt1xx_u_additional_data_wifi_access_point() {
      object.ReferenceEquals(global::maxtrack.pb.mxt1xx.Mxt1Xx.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mxt1xx_u_additional_data_speed_details : pb::GeneratedMessage<mxt1xx_u_additional_data_speed_details, mxt1xx_u_additional_data_speed_details.Builder> {
    private mxt1xx_u_additional_data_speed_details() { }
    private static readonly mxt1xx_u_additional_data_speed_details defaultInstance = new mxt1xx_u_additional_data_speed_details().MakeReadOnly();
    private static readonly string[] _mxt1XxUAdditionalDataSpeedDetailsFieldNames = new string[] { "average_speed", "max_speed", "over_speed_time" };
    private static readonly uint[] _mxt1XxUAdditionalDataSpeedDetailsFieldTags = new uint[] { 8, 16, 24 };
    public static mxt1xx_u_additional_data_speed_details DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mxt1xx_u_additional_data_speed_details DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mxt1xx_u_additional_data_speed_details ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_speed_details__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mxt1xx_u_additional_data_speed_details, mxt1xx_u_additional_data_speed_details.Builder> InternalFieldAccessors {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_speed_details__FieldAccessorTable; }
    }
    
    public const int AverageSpeedFieldNumber = 1;
    private bool hasAverageSpeed;
    private uint averageSpeed_;
    public bool HasAverageSpeed {
      get { return hasAverageSpeed; }
    }
    [global::System.CLSCompliant(false)]
    public uint AverageSpeed {
      get { return averageSpeed_; }
    }
    
    public const int MaxSpeedFieldNumber = 2;
    private bool hasMaxSpeed;
    private uint maxSpeed_;
    public bool HasMaxSpeed {
      get { return hasMaxSpeed; }
    }
    [global::System.CLSCompliant(false)]
    public uint MaxSpeed {
      get { return maxSpeed_; }
    }
    
    public const int OverSpeedTimeFieldNumber = 3;
    private bool hasOverSpeedTime;
    private uint overSpeedTime_;
    public bool HasOverSpeedTime {
      get { return hasOverSpeedTime; }
    }
    [global::System.CLSCompliant(false)]
    public uint OverSpeedTime {
      get { return overSpeedTime_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAverageSpeed) return false;
        if (!hasMaxSpeed) return false;
        if (!hasOverSpeedTime) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mxt1XxUAdditionalDataSpeedDetailsFieldNames;
      if (hasAverageSpeed) {
        output.WriteUInt32(1, field_names[0], AverageSpeed);
      }
      if (hasMaxSpeed) {
        output.WriteUInt32(2, field_names[1], MaxSpeed);
      }
      if (hasOverSpeedTime) {
        output.WriteUInt32(3, field_names[2], OverSpeedTime);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAverageSpeed) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, AverageSpeed);
      }
      if (hasMaxSpeed) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, MaxSpeed);
      }
      if (hasOverSpeedTime) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, OverSpeedTime);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mxt1xx_u_additional_data_speed_details ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_speed_details ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_speed_details ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_speed_details ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_speed_details ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_speed_details ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_speed_details ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mxt1xx_u_additional_data_speed_details ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mxt1xx_u_additional_data_speed_details ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_speed_details ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mxt1xx_u_additional_data_speed_details MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mxt1xx_u_additional_data_speed_details prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mxt1xx_u_additional_data_speed_details, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mxt1xx_u_additional_data_speed_details cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mxt1xx_u_additional_data_speed_details result;
      
      private mxt1xx_u_additional_data_speed_details PrepareBuilder() {
        if (resultIsReadOnly) {
          mxt1xx_u_additional_data_speed_details original = result;
          result = new mxt1xx_u_additional_data_speed_details();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mxt1xx_u_additional_data_speed_details MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_speed_details.Descriptor; }
      }
      
      public override mxt1xx_u_additional_data_speed_details DefaultInstanceForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_speed_details.DefaultInstance; }
      }
      
      public override mxt1xx_u_additional_data_speed_details BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mxt1xx_u_additional_data_speed_details) {
          return MergeFrom((mxt1xx_u_additional_data_speed_details) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mxt1xx_u_additional_data_speed_details other) {
        if (other == global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_speed_details.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAverageSpeed) {
          AverageSpeed = other.AverageSpeed;
        }
        if (other.HasMaxSpeed) {
          MaxSpeed = other.MaxSpeed;
        }
        if (other.HasOverSpeedTime) {
          OverSpeedTime = other.OverSpeedTime;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mxt1XxUAdditionalDataSpeedDetailsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mxt1XxUAdditionalDataSpeedDetailsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasAverageSpeed = input.ReadUInt32(ref result.averageSpeed_);
              break;
            }
            case 16: {
              result.hasMaxSpeed = input.ReadUInt32(ref result.maxSpeed_);
              break;
            }
            case 24: {
              result.hasOverSpeedTime = input.ReadUInt32(ref result.overSpeedTime_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAverageSpeed {
        get { return result.hasAverageSpeed; }
      }
      [global::System.CLSCompliant(false)]
      public uint AverageSpeed {
        get { return result.AverageSpeed; }
        set { SetAverageSpeed(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetAverageSpeed(uint value) {
        PrepareBuilder();
        result.hasAverageSpeed = true;
        result.averageSpeed_ = value;
        return this;
      }
      public Builder ClearAverageSpeed() {
        PrepareBuilder();
        result.hasAverageSpeed = false;
        result.averageSpeed_ = 0;
        return this;
      }
      
      public bool HasMaxSpeed {
        get { return result.hasMaxSpeed; }
      }
      [global::System.CLSCompliant(false)]
      public uint MaxSpeed {
        get { return result.MaxSpeed; }
        set { SetMaxSpeed(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetMaxSpeed(uint value) {
        PrepareBuilder();
        result.hasMaxSpeed = true;
        result.maxSpeed_ = value;
        return this;
      }
      public Builder ClearMaxSpeed() {
        PrepareBuilder();
        result.hasMaxSpeed = false;
        result.maxSpeed_ = 0;
        return this;
      }
      
      public bool HasOverSpeedTime {
        get { return result.hasOverSpeedTime; }
      }
      [global::System.CLSCompliant(false)]
      public uint OverSpeedTime {
        get { return result.OverSpeedTime; }
        set { SetOverSpeedTime(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetOverSpeedTime(uint value) {
        PrepareBuilder();
        result.hasOverSpeedTime = true;
        result.overSpeedTime_ = value;
        return this;
      }
      public Builder ClearOverSpeedTime() {
        PrepareBuilder();
        result.hasOverSpeedTime = false;
        result.overSpeedTime_ = 0;
        return this;
      }
    }
    static mxt1xx_u_additional_data_speed_details() {
      object.ReferenceEquals(global::maxtrack.pb.mxt1xx.Mxt1Xx.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mxt1xx_u_additional_data_speed_histogram : pb::GeneratedMessage<mxt1xx_u_additional_data_speed_histogram, mxt1xx_u_additional_data_speed_histogram.Builder> {
    private mxt1xx_u_additional_data_speed_histogram() { }
    private static readonly mxt1xx_u_additional_data_speed_histogram defaultInstance = new mxt1xx_u_additional_data_speed_histogram().MakeReadOnly();
    private static readonly string[] _mxt1XxUAdditionalDataSpeedHistogramFieldNames = new string[] { "actual_package_datetime", "groups", "last_package_datetime", "speed_range", "time_without_gps" };
    private static readonly uint[] _mxt1XxUAdditionalDataSpeedHistogramFieldTags = new uint[] { 18, 32, 10, 24, 40 };
    public static mxt1xx_u_additional_data_speed_histogram DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mxt1xx_u_additional_data_speed_histogram DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mxt1xx_u_additional_data_speed_histogram ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_speed_histogram__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mxt1xx_u_additional_data_speed_histogram, mxt1xx_u_additional_data_speed_histogram.Builder> InternalFieldAccessors {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_speed_histogram__FieldAccessorTable; }
    }
    
    public const int LastPackageDatetimeFieldNumber = 1;
    private bool hasLastPackageDatetime;
    private string lastPackageDatetime_ = "";
    public bool HasLastPackageDatetime {
      get { return hasLastPackageDatetime; }
    }
    public string LastPackageDatetime {
      get { return lastPackageDatetime_; }
    }
    
    public const int ActualPackageDatetimeFieldNumber = 2;
    private bool hasActualPackageDatetime;
    private string actualPackageDatetime_ = "";
    public bool HasActualPackageDatetime {
      get { return hasActualPackageDatetime; }
    }
    public string ActualPackageDatetime {
      get { return actualPackageDatetime_; }
    }
    
    public const int SpeedRangeFieldNumber = 3;
    private bool hasSpeedRange;
    private uint speedRange_;
    public bool HasSpeedRange {
      get { return hasSpeedRange; }
    }
    [global::System.CLSCompliant(false)]
    public uint SpeedRange {
      get { return speedRange_; }
    }
    
    public const int GroupsFieldNumber = 4;
    private pbc::PopsicleList<uint> groups_ = new pbc::PopsicleList<uint>();
    [global::System.CLSCompliant(false)]
    public scg::IList<uint> GroupsList {
      get { return pbc::Lists.AsReadOnly(groups_); }
    }
    public int GroupsCount {
      get { return groups_.Count; }
    }
    [global::System.CLSCompliant(false)]
    public uint GetGroups(int index) {
      return groups_[index];
    }
    
    public const int TimeWithoutGpsFieldNumber = 5;
    private bool hasTimeWithoutGps;
    private uint timeWithoutGps_;
    public bool HasTimeWithoutGps {
      get { return hasTimeWithoutGps; }
    }
    [global::System.CLSCompliant(false)]
    public uint TimeWithoutGps {
      get { return timeWithoutGps_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasLastPackageDatetime) return false;
        if (!hasActualPackageDatetime) return false;
        if (!hasSpeedRange) return false;
        if (!hasTimeWithoutGps) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mxt1XxUAdditionalDataSpeedHistogramFieldNames;
      if (hasLastPackageDatetime) {
        output.WriteString(1, field_names[2], LastPackageDatetime);
      }
      if (hasActualPackageDatetime) {
        output.WriteString(2, field_names[0], ActualPackageDatetime);
      }
      if (hasSpeedRange) {
        output.WriteUInt32(3, field_names[3], SpeedRange);
      }
      if (groups_.Count > 0) {
        output.WriteUInt32Array(4, field_names[1], groups_);
      }
      if (hasTimeWithoutGps) {
        output.WriteUInt32(5, field_names[4], TimeWithoutGps);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasLastPackageDatetime) {
        size += pb::CodedOutputStream.ComputeStringSize(1, LastPackageDatetime);
      }
      if (hasActualPackageDatetime) {
        size += pb::CodedOutputStream.ComputeStringSize(2, ActualPackageDatetime);
      }
      if (hasSpeedRange) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, SpeedRange);
      }
      {
        int dataSize = 0;
        foreach (uint element in GroupsList) {
          dataSize += pb::CodedOutputStream.ComputeUInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * groups_.Count;
      }
      if (hasTimeWithoutGps) {
        size += pb::CodedOutputStream.ComputeUInt32Size(5, TimeWithoutGps);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mxt1xx_u_additional_data_speed_histogram ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_speed_histogram ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_speed_histogram ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_speed_histogram ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_speed_histogram ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_speed_histogram ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_speed_histogram ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mxt1xx_u_additional_data_speed_histogram ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mxt1xx_u_additional_data_speed_histogram ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_speed_histogram ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mxt1xx_u_additional_data_speed_histogram MakeReadOnly() {
      groups_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mxt1xx_u_additional_data_speed_histogram prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mxt1xx_u_additional_data_speed_histogram, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mxt1xx_u_additional_data_speed_histogram cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mxt1xx_u_additional_data_speed_histogram result;
      
      private mxt1xx_u_additional_data_speed_histogram PrepareBuilder() {
        if (resultIsReadOnly) {
          mxt1xx_u_additional_data_speed_histogram original = result;
          result = new mxt1xx_u_additional_data_speed_histogram();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mxt1xx_u_additional_data_speed_histogram MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_speed_histogram.Descriptor; }
      }
      
      public override mxt1xx_u_additional_data_speed_histogram DefaultInstanceForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_speed_histogram.DefaultInstance; }
      }
      
      public override mxt1xx_u_additional_data_speed_histogram BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mxt1xx_u_additional_data_speed_histogram) {
          return MergeFrom((mxt1xx_u_additional_data_speed_histogram) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mxt1xx_u_additional_data_speed_histogram other) {
        if (other == global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_speed_histogram.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasLastPackageDatetime) {
          LastPackageDatetime = other.LastPackageDatetime;
        }
        if (other.HasActualPackageDatetime) {
          ActualPackageDatetime = other.ActualPackageDatetime;
        }
        if (other.HasSpeedRange) {
          SpeedRange = other.SpeedRange;
        }
        if (other.groups_.Count != 0) {
          result.groups_.Add(other.groups_);
        }
        if (other.HasTimeWithoutGps) {
          TimeWithoutGps = other.TimeWithoutGps;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mxt1XxUAdditionalDataSpeedHistogramFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mxt1XxUAdditionalDataSpeedHistogramFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasLastPackageDatetime = input.ReadString(ref result.lastPackageDatetime_);
              break;
            }
            case 18: {
              result.hasActualPackageDatetime = input.ReadString(ref result.actualPackageDatetime_);
              break;
            }
            case 24: {
              result.hasSpeedRange = input.ReadUInt32(ref result.speedRange_);
              break;
            }
            case 34:
            case 32: {
              input.ReadUInt32Array(tag, field_name, result.groups_);
              break;
            }
            case 40: {
              result.hasTimeWithoutGps = input.ReadUInt32(ref result.timeWithoutGps_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasLastPackageDatetime {
        get { return result.hasLastPackageDatetime; }
      }
      public string LastPackageDatetime {
        get { return result.LastPackageDatetime; }
        set { SetLastPackageDatetime(value); }
      }
      public Builder SetLastPackageDatetime(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLastPackageDatetime = true;
        result.lastPackageDatetime_ = value;
        return this;
      }
      public Builder ClearLastPackageDatetime() {
        PrepareBuilder();
        result.hasLastPackageDatetime = false;
        result.lastPackageDatetime_ = "";
        return this;
      }
      
      public bool HasActualPackageDatetime {
        get { return result.hasActualPackageDatetime; }
      }
      public string ActualPackageDatetime {
        get { return result.ActualPackageDatetime; }
        set { SetActualPackageDatetime(value); }
      }
      public Builder SetActualPackageDatetime(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasActualPackageDatetime = true;
        result.actualPackageDatetime_ = value;
        return this;
      }
      public Builder ClearActualPackageDatetime() {
        PrepareBuilder();
        result.hasActualPackageDatetime = false;
        result.actualPackageDatetime_ = "";
        return this;
      }
      
      public bool HasSpeedRange {
        get { return result.hasSpeedRange; }
      }
      [global::System.CLSCompliant(false)]
      public uint SpeedRange {
        get { return result.SpeedRange; }
        set { SetSpeedRange(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSpeedRange(uint value) {
        PrepareBuilder();
        result.hasSpeedRange = true;
        result.speedRange_ = value;
        return this;
      }
      public Builder ClearSpeedRange() {
        PrepareBuilder();
        result.hasSpeedRange = false;
        result.speedRange_ = 0;
        return this;
      }
      
      [global::System.CLSCompliant(false)]
      public pbc::IPopsicleList<uint> GroupsList {
        get { return PrepareBuilder().groups_; }
      }
      public int GroupsCount {
        get { return result.GroupsCount; }
      }
      [global::System.CLSCompliant(false)]
      public uint GetGroups(int index) {
        return result.GetGroups(index);
      }
      [global::System.CLSCompliant(false)]
      public Builder SetGroups(int index, uint value) {
        PrepareBuilder();
        result.groups_[index] = value;
        return this;
      }
      [global::System.CLSCompliant(false)]
      public Builder AddGroups(uint value) {
        PrepareBuilder();
        result.groups_.Add(value);
        return this;
      }
      [global::System.CLSCompliant(false)]
      public Builder AddRangeGroups(scg::IEnumerable<uint> values) {
        PrepareBuilder();
        result.groups_.Add(values);
        return this;
      }
      public Builder ClearGroups() {
        PrepareBuilder();
        result.groups_.Clear();
        return this;
      }
      
      public bool HasTimeWithoutGps {
        get { return result.hasTimeWithoutGps; }
      }
      [global::System.CLSCompliant(false)]
      public uint TimeWithoutGps {
        get { return result.TimeWithoutGps; }
        set { SetTimeWithoutGps(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetTimeWithoutGps(uint value) {
        PrepareBuilder();
        result.hasTimeWithoutGps = true;
        result.timeWithoutGps_ = value;
        return this;
      }
      public Builder ClearTimeWithoutGps() {
        PrepareBuilder();
        result.hasTimeWithoutGps = false;
        result.timeWithoutGps_ = 0;
        return this;
      }
    }
    static mxt1xx_u_additional_data_speed_histogram() {
      object.ReferenceEquals(global::maxtrack.pb.mxt1xx.Mxt1Xx.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mxt1xx_u_additional_data_telemetry_events_calibration_status : pb::GeneratedMessage<mxt1xx_u_additional_data_telemetry_events_calibration_status, mxt1xx_u_additional_data_telemetry_events_calibration_status.Builder> {
    private mxt1xx_u_additional_data_telemetry_events_calibration_status() { }
    private static readonly mxt1xx_u_additional_data_telemetry_events_calibration_status defaultInstance = new mxt1xx_u_additional_data_telemetry_events_calibration_status().MakeReadOnly();
    private static readonly string[] _mxt1XxUAdditionalDataTelemetryEventsCalibrationStatusFieldNames = new string[] { "status", "time_spent" };
    private static readonly uint[] _mxt1XxUAdditionalDataTelemetryEventsCalibrationStatusFieldTags = new uint[] { 8, 16 };
    public static mxt1xx_u_additional_data_telemetry_events_calibration_status DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mxt1xx_u_additional_data_telemetry_events_calibration_status DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mxt1xx_u_additional_data_telemetry_events_calibration_status ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_telemetry_events_calibration_status__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mxt1xx_u_additional_data_telemetry_events_calibration_status, mxt1xx_u_additional_data_telemetry_events_calibration_status.Builder> InternalFieldAccessors {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_telemetry_events_calibration_status__FieldAccessorTable; }
    }
    
    public const int StatusFieldNumber = 1;
    private bool hasStatus;
    private uint status_;
    public bool HasStatus {
      get { return hasStatus; }
    }
    [global::System.CLSCompliant(false)]
    public uint Status {
      get { return status_; }
    }
    
    public const int TimeSpentFieldNumber = 2;
    private bool hasTimeSpent;
    private uint timeSpent_;
    public bool HasTimeSpent {
      get { return hasTimeSpent; }
    }
    [global::System.CLSCompliant(false)]
    public uint TimeSpent {
      get { return timeSpent_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasStatus) return false;
        if (!hasTimeSpent) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mxt1XxUAdditionalDataTelemetryEventsCalibrationStatusFieldNames;
      if (hasStatus) {
        output.WriteUInt32(1, field_names[0], Status);
      }
      if (hasTimeSpent) {
        output.WriteUInt32(2, field_names[1], TimeSpent);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasStatus) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, Status);
      }
      if (hasTimeSpent) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, TimeSpent);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mxt1xx_u_additional_data_telemetry_events_calibration_status ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_telemetry_events_calibration_status ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_telemetry_events_calibration_status ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_telemetry_events_calibration_status ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_telemetry_events_calibration_status ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_telemetry_events_calibration_status ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_telemetry_events_calibration_status ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mxt1xx_u_additional_data_telemetry_events_calibration_status ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mxt1xx_u_additional_data_telemetry_events_calibration_status ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_telemetry_events_calibration_status ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mxt1xx_u_additional_data_telemetry_events_calibration_status MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mxt1xx_u_additional_data_telemetry_events_calibration_status prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mxt1xx_u_additional_data_telemetry_events_calibration_status, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mxt1xx_u_additional_data_telemetry_events_calibration_status cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mxt1xx_u_additional_data_telemetry_events_calibration_status result;
      
      private mxt1xx_u_additional_data_telemetry_events_calibration_status PrepareBuilder() {
        if (resultIsReadOnly) {
          mxt1xx_u_additional_data_telemetry_events_calibration_status original = result;
          result = new mxt1xx_u_additional_data_telemetry_events_calibration_status();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mxt1xx_u_additional_data_telemetry_events_calibration_status MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_calibration_status.Descriptor; }
      }
      
      public override mxt1xx_u_additional_data_telemetry_events_calibration_status DefaultInstanceForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_calibration_status.DefaultInstance; }
      }
      
      public override mxt1xx_u_additional_data_telemetry_events_calibration_status BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mxt1xx_u_additional_data_telemetry_events_calibration_status) {
          return MergeFrom((mxt1xx_u_additional_data_telemetry_events_calibration_status) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mxt1xx_u_additional_data_telemetry_events_calibration_status other) {
        if (other == global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_calibration_status.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasStatus) {
          Status = other.Status;
        }
        if (other.HasTimeSpent) {
          TimeSpent = other.TimeSpent;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mxt1XxUAdditionalDataTelemetryEventsCalibrationStatusFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mxt1XxUAdditionalDataTelemetryEventsCalibrationStatusFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasStatus = input.ReadUInt32(ref result.status_);
              break;
            }
            case 16: {
              result.hasTimeSpent = input.ReadUInt32(ref result.timeSpent_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasStatus {
        get { return result.hasStatus; }
      }
      [global::System.CLSCompliant(false)]
      public uint Status {
        get { return result.Status; }
        set { SetStatus(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetStatus(uint value) {
        PrepareBuilder();
        result.hasStatus = true;
        result.status_ = value;
        return this;
      }
      public Builder ClearStatus() {
        PrepareBuilder();
        result.hasStatus = false;
        result.status_ = 0;
        return this;
      }
      
      public bool HasTimeSpent {
        get { return result.hasTimeSpent; }
      }
      [global::System.CLSCompliant(false)]
      public uint TimeSpent {
        get { return result.TimeSpent; }
        set { SetTimeSpent(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetTimeSpent(uint value) {
        PrepareBuilder();
        result.hasTimeSpent = true;
        result.timeSpent_ = value;
        return this;
      }
      public Builder ClearTimeSpent() {
        PrepareBuilder();
        result.hasTimeSpent = false;
        result.timeSpent_ = 0;
        return this;
      }
    }
    static mxt1xx_u_additional_data_telemetry_events_calibration_status() {
      object.ReferenceEquals(global::maxtrack.pb.mxt1xx.Mxt1Xx.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mxt1xx_u_additional_data_telemetry_events_hard_acceleration : pb::GeneratedMessage<mxt1xx_u_additional_data_telemetry_events_hard_acceleration, mxt1xx_u_additional_data_telemetry_events_hard_acceleration.Builder> {
    private mxt1xx_u_additional_data_telemetry_events_hard_acceleration() { }
    private static readonly mxt1xx_u_additional_data_telemetry_events_hard_acceleration defaultInstance = new mxt1xx_u_additional_data_telemetry_events_hard_acceleration().MakeReadOnly();
    private static readonly string[] _mxt1XxUAdditionalDataTelemetryEventsHardAccelerationFieldNames = new string[] { "max_g", "time_to_max", "total_time" };
    private static readonly uint[] _mxt1XxUAdditionalDataTelemetryEventsHardAccelerationFieldTags = new uint[] { 8, 16, 24 };
    public static mxt1xx_u_additional_data_telemetry_events_hard_acceleration DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mxt1xx_u_additional_data_telemetry_events_hard_acceleration DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mxt1xx_u_additional_data_telemetry_events_hard_acceleration ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_telemetry_events_hard_acceleration__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mxt1xx_u_additional_data_telemetry_events_hard_acceleration, mxt1xx_u_additional_data_telemetry_events_hard_acceleration.Builder> InternalFieldAccessors {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_telemetry_events_hard_acceleration__FieldAccessorTable; }
    }
    
    public const int MaxGFieldNumber = 1;
    private bool hasMaxG;
    private uint maxG_;
    public bool HasMaxG {
      get { return hasMaxG; }
    }
    [global::System.CLSCompliant(false)]
    public uint MaxG {
      get { return maxG_; }
    }
    
    public const int TimeToMaxFieldNumber = 2;
    private bool hasTimeToMax;
    private uint timeToMax_;
    public bool HasTimeToMax {
      get { return hasTimeToMax; }
    }
    [global::System.CLSCompliant(false)]
    public uint TimeToMax {
      get { return timeToMax_; }
    }
    
    public const int TotalTimeFieldNumber = 3;
    private bool hasTotalTime;
    private uint totalTime_;
    public bool HasTotalTime {
      get { return hasTotalTime; }
    }
    [global::System.CLSCompliant(false)]
    public uint TotalTime {
      get { return totalTime_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasMaxG) return false;
        if (!hasTimeToMax) return false;
        if (!hasTotalTime) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mxt1XxUAdditionalDataTelemetryEventsHardAccelerationFieldNames;
      if (hasMaxG) {
        output.WriteUInt32(1, field_names[0], MaxG);
      }
      if (hasTimeToMax) {
        output.WriteUInt32(2, field_names[1], TimeToMax);
      }
      if (hasTotalTime) {
        output.WriteUInt32(3, field_names[2], TotalTime);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasMaxG) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, MaxG);
      }
      if (hasTimeToMax) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, TimeToMax);
      }
      if (hasTotalTime) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, TotalTime);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mxt1xx_u_additional_data_telemetry_events_hard_acceleration ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_telemetry_events_hard_acceleration ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_telemetry_events_hard_acceleration ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_telemetry_events_hard_acceleration ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_telemetry_events_hard_acceleration ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_telemetry_events_hard_acceleration ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_telemetry_events_hard_acceleration ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mxt1xx_u_additional_data_telemetry_events_hard_acceleration ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mxt1xx_u_additional_data_telemetry_events_hard_acceleration ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_telemetry_events_hard_acceleration ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mxt1xx_u_additional_data_telemetry_events_hard_acceleration MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mxt1xx_u_additional_data_telemetry_events_hard_acceleration prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mxt1xx_u_additional_data_telemetry_events_hard_acceleration, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mxt1xx_u_additional_data_telemetry_events_hard_acceleration cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mxt1xx_u_additional_data_telemetry_events_hard_acceleration result;
      
      private mxt1xx_u_additional_data_telemetry_events_hard_acceleration PrepareBuilder() {
        if (resultIsReadOnly) {
          mxt1xx_u_additional_data_telemetry_events_hard_acceleration original = result;
          result = new mxt1xx_u_additional_data_telemetry_events_hard_acceleration();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mxt1xx_u_additional_data_telemetry_events_hard_acceleration MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_hard_acceleration.Descriptor; }
      }
      
      public override mxt1xx_u_additional_data_telemetry_events_hard_acceleration DefaultInstanceForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_hard_acceleration.DefaultInstance; }
      }
      
      public override mxt1xx_u_additional_data_telemetry_events_hard_acceleration BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mxt1xx_u_additional_data_telemetry_events_hard_acceleration) {
          return MergeFrom((mxt1xx_u_additional_data_telemetry_events_hard_acceleration) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mxt1xx_u_additional_data_telemetry_events_hard_acceleration other) {
        if (other == global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_hard_acceleration.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMaxG) {
          MaxG = other.MaxG;
        }
        if (other.HasTimeToMax) {
          TimeToMax = other.TimeToMax;
        }
        if (other.HasTotalTime) {
          TotalTime = other.TotalTime;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mxt1XxUAdditionalDataTelemetryEventsHardAccelerationFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mxt1XxUAdditionalDataTelemetryEventsHardAccelerationFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasMaxG = input.ReadUInt32(ref result.maxG_);
              break;
            }
            case 16: {
              result.hasTimeToMax = input.ReadUInt32(ref result.timeToMax_);
              break;
            }
            case 24: {
              result.hasTotalTime = input.ReadUInt32(ref result.totalTime_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMaxG {
        get { return result.hasMaxG; }
      }
      [global::System.CLSCompliant(false)]
      public uint MaxG {
        get { return result.MaxG; }
        set { SetMaxG(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetMaxG(uint value) {
        PrepareBuilder();
        result.hasMaxG = true;
        result.maxG_ = value;
        return this;
      }
      public Builder ClearMaxG() {
        PrepareBuilder();
        result.hasMaxG = false;
        result.maxG_ = 0;
        return this;
      }
      
      public bool HasTimeToMax {
        get { return result.hasTimeToMax; }
      }
      [global::System.CLSCompliant(false)]
      public uint TimeToMax {
        get { return result.TimeToMax; }
        set { SetTimeToMax(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetTimeToMax(uint value) {
        PrepareBuilder();
        result.hasTimeToMax = true;
        result.timeToMax_ = value;
        return this;
      }
      public Builder ClearTimeToMax() {
        PrepareBuilder();
        result.hasTimeToMax = false;
        result.timeToMax_ = 0;
        return this;
      }
      
      public bool HasTotalTime {
        get { return result.hasTotalTime; }
      }
      [global::System.CLSCompliant(false)]
      public uint TotalTime {
        get { return result.TotalTime; }
        set { SetTotalTime(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetTotalTime(uint value) {
        PrepareBuilder();
        result.hasTotalTime = true;
        result.totalTime_ = value;
        return this;
      }
      public Builder ClearTotalTime() {
        PrepareBuilder();
        result.hasTotalTime = false;
        result.totalTime_ = 0;
        return this;
      }
    }
    static mxt1xx_u_additional_data_telemetry_events_hard_acceleration() {
      object.ReferenceEquals(global::maxtrack.pb.mxt1xx.Mxt1Xx.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mxt1xx_u_additional_data_telemetry_events_hard_braking : pb::GeneratedMessage<mxt1xx_u_additional_data_telemetry_events_hard_braking, mxt1xx_u_additional_data_telemetry_events_hard_braking.Builder> {
    private mxt1xx_u_additional_data_telemetry_events_hard_braking() { }
    private static readonly mxt1xx_u_additional_data_telemetry_events_hard_braking defaultInstance = new mxt1xx_u_additional_data_telemetry_events_hard_braking().MakeReadOnly();
    private static readonly string[] _mxt1XxUAdditionalDataTelemetryEventsHardBrakingFieldNames = new string[] { "max_g", "time_to_max", "total_time" };
    private static readonly uint[] _mxt1XxUAdditionalDataTelemetryEventsHardBrakingFieldTags = new uint[] { 8, 16, 24 };
    public static mxt1xx_u_additional_data_telemetry_events_hard_braking DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mxt1xx_u_additional_data_telemetry_events_hard_braking DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mxt1xx_u_additional_data_telemetry_events_hard_braking ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_telemetry_events_hard_braking__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mxt1xx_u_additional_data_telemetry_events_hard_braking, mxt1xx_u_additional_data_telemetry_events_hard_braking.Builder> InternalFieldAccessors {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_telemetry_events_hard_braking__FieldAccessorTable; }
    }
    
    public const int MaxGFieldNumber = 1;
    private bool hasMaxG;
    private uint maxG_;
    public bool HasMaxG {
      get { return hasMaxG; }
    }
    [global::System.CLSCompliant(false)]
    public uint MaxG {
      get { return maxG_; }
    }
    
    public const int TimeToMaxFieldNumber = 2;
    private bool hasTimeToMax;
    private uint timeToMax_;
    public bool HasTimeToMax {
      get { return hasTimeToMax; }
    }
    [global::System.CLSCompliant(false)]
    public uint TimeToMax {
      get { return timeToMax_; }
    }
    
    public const int TotalTimeFieldNumber = 3;
    private bool hasTotalTime;
    private uint totalTime_;
    public bool HasTotalTime {
      get { return hasTotalTime; }
    }
    [global::System.CLSCompliant(false)]
    public uint TotalTime {
      get { return totalTime_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasMaxG) return false;
        if (!hasTimeToMax) return false;
        if (!hasTotalTime) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mxt1XxUAdditionalDataTelemetryEventsHardBrakingFieldNames;
      if (hasMaxG) {
        output.WriteUInt32(1, field_names[0], MaxG);
      }
      if (hasTimeToMax) {
        output.WriteUInt32(2, field_names[1], TimeToMax);
      }
      if (hasTotalTime) {
        output.WriteUInt32(3, field_names[2], TotalTime);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasMaxG) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, MaxG);
      }
      if (hasTimeToMax) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, TimeToMax);
      }
      if (hasTotalTime) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, TotalTime);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mxt1xx_u_additional_data_telemetry_events_hard_braking ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_telemetry_events_hard_braking ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_telemetry_events_hard_braking ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_telemetry_events_hard_braking ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_telemetry_events_hard_braking ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_telemetry_events_hard_braking ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_telemetry_events_hard_braking ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mxt1xx_u_additional_data_telemetry_events_hard_braking ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mxt1xx_u_additional_data_telemetry_events_hard_braking ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_telemetry_events_hard_braking ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mxt1xx_u_additional_data_telemetry_events_hard_braking MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mxt1xx_u_additional_data_telemetry_events_hard_braking prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mxt1xx_u_additional_data_telemetry_events_hard_braking, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mxt1xx_u_additional_data_telemetry_events_hard_braking cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mxt1xx_u_additional_data_telemetry_events_hard_braking result;
      
      private mxt1xx_u_additional_data_telemetry_events_hard_braking PrepareBuilder() {
        if (resultIsReadOnly) {
          mxt1xx_u_additional_data_telemetry_events_hard_braking original = result;
          result = new mxt1xx_u_additional_data_telemetry_events_hard_braking();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mxt1xx_u_additional_data_telemetry_events_hard_braking MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_hard_braking.Descriptor; }
      }
      
      public override mxt1xx_u_additional_data_telemetry_events_hard_braking DefaultInstanceForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_hard_braking.DefaultInstance; }
      }
      
      public override mxt1xx_u_additional_data_telemetry_events_hard_braking BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mxt1xx_u_additional_data_telemetry_events_hard_braking) {
          return MergeFrom((mxt1xx_u_additional_data_telemetry_events_hard_braking) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mxt1xx_u_additional_data_telemetry_events_hard_braking other) {
        if (other == global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_hard_braking.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMaxG) {
          MaxG = other.MaxG;
        }
        if (other.HasTimeToMax) {
          TimeToMax = other.TimeToMax;
        }
        if (other.HasTotalTime) {
          TotalTime = other.TotalTime;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mxt1XxUAdditionalDataTelemetryEventsHardBrakingFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mxt1XxUAdditionalDataTelemetryEventsHardBrakingFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasMaxG = input.ReadUInt32(ref result.maxG_);
              break;
            }
            case 16: {
              result.hasTimeToMax = input.ReadUInt32(ref result.timeToMax_);
              break;
            }
            case 24: {
              result.hasTotalTime = input.ReadUInt32(ref result.totalTime_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMaxG {
        get { return result.hasMaxG; }
      }
      [global::System.CLSCompliant(false)]
      public uint MaxG {
        get { return result.MaxG; }
        set { SetMaxG(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetMaxG(uint value) {
        PrepareBuilder();
        result.hasMaxG = true;
        result.maxG_ = value;
        return this;
      }
      public Builder ClearMaxG() {
        PrepareBuilder();
        result.hasMaxG = false;
        result.maxG_ = 0;
        return this;
      }
      
      public bool HasTimeToMax {
        get { return result.hasTimeToMax; }
      }
      [global::System.CLSCompliant(false)]
      public uint TimeToMax {
        get { return result.TimeToMax; }
        set { SetTimeToMax(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetTimeToMax(uint value) {
        PrepareBuilder();
        result.hasTimeToMax = true;
        result.timeToMax_ = value;
        return this;
      }
      public Builder ClearTimeToMax() {
        PrepareBuilder();
        result.hasTimeToMax = false;
        result.timeToMax_ = 0;
        return this;
      }
      
      public bool HasTotalTime {
        get { return result.hasTotalTime; }
      }
      [global::System.CLSCompliant(false)]
      public uint TotalTime {
        get { return result.TotalTime; }
        set { SetTotalTime(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetTotalTime(uint value) {
        PrepareBuilder();
        result.hasTotalTime = true;
        result.totalTime_ = value;
        return this;
      }
      public Builder ClearTotalTime() {
        PrepareBuilder();
        result.hasTotalTime = false;
        result.totalTime_ = 0;
        return this;
      }
    }
    static mxt1xx_u_additional_data_telemetry_events_hard_braking() {
      object.ReferenceEquals(global::maxtrack.pb.mxt1xx.Mxt1Xx.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mxt1xx_u_additional_data_telemetry_events_hard_lateral : pb::GeneratedMessage<mxt1xx_u_additional_data_telemetry_events_hard_lateral, mxt1xx_u_additional_data_telemetry_events_hard_lateral.Builder> {
    private mxt1xx_u_additional_data_telemetry_events_hard_lateral() { }
    private static readonly mxt1xx_u_additional_data_telemetry_events_hard_lateral defaultInstance = new mxt1xx_u_additional_data_telemetry_events_hard_lateral().MakeReadOnly();
    private static readonly string[] _mxt1XxUAdditionalDataTelemetryEventsHardLateralFieldNames = new string[] { "max_g", "side", "time_to_max", "total_time" };
    private static readonly uint[] _mxt1XxUAdditionalDataTelemetryEventsHardLateralFieldTags = new uint[] { 8, 32, 16, 24 };
    public static mxt1xx_u_additional_data_telemetry_events_hard_lateral DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mxt1xx_u_additional_data_telemetry_events_hard_lateral DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mxt1xx_u_additional_data_telemetry_events_hard_lateral ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_telemetry_events_hard_lateral__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mxt1xx_u_additional_data_telemetry_events_hard_lateral, mxt1xx_u_additional_data_telemetry_events_hard_lateral.Builder> InternalFieldAccessors {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_telemetry_events_hard_lateral__FieldAccessorTable; }
    }
    
    public const int MaxGFieldNumber = 1;
    private bool hasMaxG;
    private uint maxG_;
    public bool HasMaxG {
      get { return hasMaxG; }
    }
    [global::System.CLSCompliant(false)]
    public uint MaxG {
      get { return maxG_; }
    }
    
    public const int TimeToMaxFieldNumber = 2;
    private bool hasTimeToMax;
    private uint timeToMax_;
    public bool HasTimeToMax {
      get { return hasTimeToMax; }
    }
    [global::System.CLSCompliant(false)]
    public uint TimeToMax {
      get { return timeToMax_; }
    }
    
    public const int TotalTimeFieldNumber = 3;
    private bool hasTotalTime;
    private uint totalTime_;
    public bool HasTotalTime {
      get { return hasTotalTime; }
    }
    [global::System.CLSCompliant(false)]
    public uint TotalTime {
      get { return totalTime_; }
    }
    
    public const int SideFieldNumber = 4;
    private bool hasSide;
    private uint side_;
    public bool HasSide {
      get { return hasSide; }
    }
    [global::System.CLSCompliant(false)]
    public uint Side {
      get { return side_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasMaxG) return false;
        if (!hasTimeToMax) return false;
        if (!hasTotalTime) return false;
        if (!hasSide) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mxt1XxUAdditionalDataTelemetryEventsHardLateralFieldNames;
      if (hasMaxG) {
        output.WriteUInt32(1, field_names[0], MaxG);
      }
      if (hasTimeToMax) {
        output.WriteUInt32(2, field_names[2], TimeToMax);
      }
      if (hasTotalTime) {
        output.WriteUInt32(3, field_names[3], TotalTime);
      }
      if (hasSide) {
        output.WriteUInt32(4, field_names[1], Side);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasMaxG) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, MaxG);
      }
      if (hasTimeToMax) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, TimeToMax);
      }
      if (hasTotalTime) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, TotalTime);
      }
      if (hasSide) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, Side);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mxt1xx_u_additional_data_telemetry_events_hard_lateral ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_telemetry_events_hard_lateral ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_telemetry_events_hard_lateral ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_telemetry_events_hard_lateral ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_telemetry_events_hard_lateral ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_telemetry_events_hard_lateral ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_telemetry_events_hard_lateral ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mxt1xx_u_additional_data_telemetry_events_hard_lateral ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mxt1xx_u_additional_data_telemetry_events_hard_lateral ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_telemetry_events_hard_lateral ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mxt1xx_u_additional_data_telemetry_events_hard_lateral MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mxt1xx_u_additional_data_telemetry_events_hard_lateral prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mxt1xx_u_additional_data_telemetry_events_hard_lateral, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mxt1xx_u_additional_data_telemetry_events_hard_lateral cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mxt1xx_u_additional_data_telemetry_events_hard_lateral result;
      
      private mxt1xx_u_additional_data_telemetry_events_hard_lateral PrepareBuilder() {
        if (resultIsReadOnly) {
          mxt1xx_u_additional_data_telemetry_events_hard_lateral original = result;
          result = new mxt1xx_u_additional_data_telemetry_events_hard_lateral();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mxt1xx_u_additional_data_telemetry_events_hard_lateral MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_hard_lateral.Descriptor; }
      }
      
      public override mxt1xx_u_additional_data_telemetry_events_hard_lateral DefaultInstanceForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_hard_lateral.DefaultInstance; }
      }
      
      public override mxt1xx_u_additional_data_telemetry_events_hard_lateral BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mxt1xx_u_additional_data_telemetry_events_hard_lateral) {
          return MergeFrom((mxt1xx_u_additional_data_telemetry_events_hard_lateral) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mxt1xx_u_additional_data_telemetry_events_hard_lateral other) {
        if (other == global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_hard_lateral.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMaxG) {
          MaxG = other.MaxG;
        }
        if (other.HasTimeToMax) {
          TimeToMax = other.TimeToMax;
        }
        if (other.HasTotalTime) {
          TotalTime = other.TotalTime;
        }
        if (other.HasSide) {
          Side = other.Side;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mxt1XxUAdditionalDataTelemetryEventsHardLateralFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mxt1XxUAdditionalDataTelemetryEventsHardLateralFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasMaxG = input.ReadUInt32(ref result.maxG_);
              break;
            }
            case 16: {
              result.hasTimeToMax = input.ReadUInt32(ref result.timeToMax_);
              break;
            }
            case 24: {
              result.hasTotalTime = input.ReadUInt32(ref result.totalTime_);
              break;
            }
            case 32: {
              result.hasSide = input.ReadUInt32(ref result.side_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMaxG {
        get { return result.hasMaxG; }
      }
      [global::System.CLSCompliant(false)]
      public uint MaxG {
        get { return result.MaxG; }
        set { SetMaxG(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetMaxG(uint value) {
        PrepareBuilder();
        result.hasMaxG = true;
        result.maxG_ = value;
        return this;
      }
      public Builder ClearMaxG() {
        PrepareBuilder();
        result.hasMaxG = false;
        result.maxG_ = 0;
        return this;
      }
      
      public bool HasTimeToMax {
        get { return result.hasTimeToMax; }
      }
      [global::System.CLSCompliant(false)]
      public uint TimeToMax {
        get { return result.TimeToMax; }
        set { SetTimeToMax(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetTimeToMax(uint value) {
        PrepareBuilder();
        result.hasTimeToMax = true;
        result.timeToMax_ = value;
        return this;
      }
      public Builder ClearTimeToMax() {
        PrepareBuilder();
        result.hasTimeToMax = false;
        result.timeToMax_ = 0;
        return this;
      }
      
      public bool HasTotalTime {
        get { return result.hasTotalTime; }
      }
      [global::System.CLSCompliant(false)]
      public uint TotalTime {
        get { return result.TotalTime; }
        set { SetTotalTime(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetTotalTime(uint value) {
        PrepareBuilder();
        result.hasTotalTime = true;
        result.totalTime_ = value;
        return this;
      }
      public Builder ClearTotalTime() {
        PrepareBuilder();
        result.hasTotalTime = false;
        result.totalTime_ = 0;
        return this;
      }
      
      public bool HasSide {
        get { return result.hasSide; }
      }
      [global::System.CLSCompliant(false)]
      public uint Side {
        get { return result.Side; }
        set { SetSide(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSide(uint value) {
        PrepareBuilder();
        result.hasSide = true;
        result.side_ = value;
        return this;
      }
      public Builder ClearSide() {
        PrepareBuilder();
        result.hasSide = false;
        result.side_ = 0;
        return this;
      }
    }
    static mxt1xx_u_additional_data_telemetry_events_hard_lateral() {
      object.ReferenceEquals(global::maxtrack.pb.mxt1xx.Mxt1Xx.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mxt1xx_u_additional_data_telemetry_events_impact_detected : pb::GeneratedMessage<mxt1xx_u_additional_data_telemetry_events_impact_detected, mxt1xx_u_additional_data_telemetry_events_impact_detected.Builder> {
    private mxt1xx_u_additional_data_telemetry_events_impact_detected() { }
    private static readonly mxt1xx_u_additional_data_telemetry_events_impact_detected defaultInstance = new mxt1xx_u_additional_data_telemetry_events_impact_detected().MakeReadOnly();
    private static readonly string[] _mxt1XxUAdditionalDataTelemetryEventsImpactDetectedFieldNames = new string[] { "max_g", "time_to_max", "total_time" };
    private static readonly uint[] _mxt1XxUAdditionalDataTelemetryEventsImpactDetectedFieldTags = new uint[] { 8, 16, 24 };
    public static mxt1xx_u_additional_data_telemetry_events_impact_detected DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mxt1xx_u_additional_data_telemetry_events_impact_detected DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mxt1xx_u_additional_data_telemetry_events_impact_detected ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_telemetry_events_impact_detected__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mxt1xx_u_additional_data_telemetry_events_impact_detected, mxt1xx_u_additional_data_telemetry_events_impact_detected.Builder> InternalFieldAccessors {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_telemetry_events_impact_detected__FieldAccessorTable; }
    }
    
    public const int MaxGFieldNumber = 1;
    private bool hasMaxG;
    private uint maxG_;
    public bool HasMaxG {
      get { return hasMaxG; }
    }
    [global::System.CLSCompliant(false)]
    public uint MaxG {
      get { return maxG_; }
    }
    
    public const int TimeToMaxFieldNumber = 2;
    private bool hasTimeToMax;
    private uint timeToMax_;
    public bool HasTimeToMax {
      get { return hasTimeToMax; }
    }
    [global::System.CLSCompliant(false)]
    public uint TimeToMax {
      get { return timeToMax_; }
    }
    
    public const int TotalTimeFieldNumber = 3;
    private bool hasTotalTime;
    private uint totalTime_;
    public bool HasTotalTime {
      get { return hasTotalTime; }
    }
    [global::System.CLSCompliant(false)]
    public uint TotalTime {
      get { return totalTime_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasMaxG) return false;
        if (!hasTimeToMax) return false;
        if (!hasTotalTime) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mxt1XxUAdditionalDataTelemetryEventsImpactDetectedFieldNames;
      if (hasMaxG) {
        output.WriteUInt32(1, field_names[0], MaxG);
      }
      if (hasTimeToMax) {
        output.WriteUInt32(2, field_names[1], TimeToMax);
      }
      if (hasTotalTime) {
        output.WriteUInt32(3, field_names[2], TotalTime);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasMaxG) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, MaxG);
      }
      if (hasTimeToMax) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, TimeToMax);
      }
      if (hasTotalTime) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, TotalTime);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mxt1xx_u_additional_data_telemetry_events_impact_detected ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_telemetry_events_impact_detected ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_telemetry_events_impact_detected ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_telemetry_events_impact_detected ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_telemetry_events_impact_detected ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_telemetry_events_impact_detected ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_telemetry_events_impact_detected ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mxt1xx_u_additional_data_telemetry_events_impact_detected ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mxt1xx_u_additional_data_telemetry_events_impact_detected ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_telemetry_events_impact_detected ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mxt1xx_u_additional_data_telemetry_events_impact_detected MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mxt1xx_u_additional_data_telemetry_events_impact_detected prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mxt1xx_u_additional_data_telemetry_events_impact_detected, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mxt1xx_u_additional_data_telemetry_events_impact_detected cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mxt1xx_u_additional_data_telemetry_events_impact_detected result;
      
      private mxt1xx_u_additional_data_telemetry_events_impact_detected PrepareBuilder() {
        if (resultIsReadOnly) {
          mxt1xx_u_additional_data_telemetry_events_impact_detected original = result;
          result = new mxt1xx_u_additional_data_telemetry_events_impact_detected();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mxt1xx_u_additional_data_telemetry_events_impact_detected MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_impact_detected.Descriptor; }
      }
      
      public override mxt1xx_u_additional_data_telemetry_events_impact_detected DefaultInstanceForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_impact_detected.DefaultInstance; }
      }
      
      public override mxt1xx_u_additional_data_telemetry_events_impact_detected BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mxt1xx_u_additional_data_telemetry_events_impact_detected) {
          return MergeFrom((mxt1xx_u_additional_data_telemetry_events_impact_detected) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mxt1xx_u_additional_data_telemetry_events_impact_detected other) {
        if (other == global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_impact_detected.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMaxG) {
          MaxG = other.MaxG;
        }
        if (other.HasTimeToMax) {
          TimeToMax = other.TimeToMax;
        }
        if (other.HasTotalTime) {
          TotalTime = other.TotalTime;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mxt1XxUAdditionalDataTelemetryEventsImpactDetectedFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mxt1XxUAdditionalDataTelemetryEventsImpactDetectedFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasMaxG = input.ReadUInt32(ref result.maxG_);
              break;
            }
            case 16: {
              result.hasTimeToMax = input.ReadUInt32(ref result.timeToMax_);
              break;
            }
            case 24: {
              result.hasTotalTime = input.ReadUInt32(ref result.totalTime_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMaxG {
        get { return result.hasMaxG; }
      }
      [global::System.CLSCompliant(false)]
      public uint MaxG {
        get { return result.MaxG; }
        set { SetMaxG(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetMaxG(uint value) {
        PrepareBuilder();
        result.hasMaxG = true;
        result.maxG_ = value;
        return this;
      }
      public Builder ClearMaxG() {
        PrepareBuilder();
        result.hasMaxG = false;
        result.maxG_ = 0;
        return this;
      }
      
      public bool HasTimeToMax {
        get { return result.hasTimeToMax; }
      }
      [global::System.CLSCompliant(false)]
      public uint TimeToMax {
        get { return result.TimeToMax; }
        set { SetTimeToMax(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetTimeToMax(uint value) {
        PrepareBuilder();
        result.hasTimeToMax = true;
        result.timeToMax_ = value;
        return this;
      }
      public Builder ClearTimeToMax() {
        PrepareBuilder();
        result.hasTimeToMax = false;
        result.timeToMax_ = 0;
        return this;
      }
      
      public bool HasTotalTime {
        get { return result.hasTotalTime; }
      }
      [global::System.CLSCompliant(false)]
      public uint TotalTime {
        get { return result.TotalTime; }
        set { SetTotalTime(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetTotalTime(uint value) {
        PrepareBuilder();
        result.hasTotalTime = true;
        result.totalTime_ = value;
        return this;
      }
      public Builder ClearTotalTime() {
        PrepareBuilder();
        result.hasTotalTime = false;
        result.totalTime_ = 0;
        return this;
      }
    }
    static mxt1xx_u_additional_data_telemetry_events_impact_detected() {
      object.ReferenceEquals(global::maxtrack.pb.mxt1xx.Mxt1Xx.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mxt1xx_u_additional_data_telemetry_events : pb::GeneratedMessage<mxt1xx_u_additional_data_telemetry_events, mxt1xx_u_additional_data_telemetry_events.Builder> {
    private mxt1xx_u_additional_data_telemetry_events() { }
    private static readonly mxt1xx_u_additional_data_telemetry_events defaultInstance = new mxt1xx_u_additional_data_telemetry_events().MakeReadOnly();
    private static readonly string[] _mxt1XxUAdditionalDataTelemetryEventsFieldNames = new string[] { "calibration_status_list", "hard_acceleration_list", "hard_braking_list", "hard_lateral_list", "impact_detected_list" };
    private static readonly uint[] _mxt1XxUAdditionalDataTelemetryEventsFieldTags = new uint[] { 10, 18, 26, 34, 42 };
    public static mxt1xx_u_additional_data_telemetry_events DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mxt1xx_u_additional_data_telemetry_events DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mxt1xx_u_additional_data_telemetry_events ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_telemetry_events__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mxt1xx_u_additional_data_telemetry_events, mxt1xx_u_additional_data_telemetry_events.Builder> InternalFieldAccessors {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_telemetry_events__FieldAccessorTable; }
    }
    
    public const int CalibrationStatusListFieldNumber = 1;
    private pbc::PopsicleList<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_calibration_status> calibrationStatusList_ = new pbc::PopsicleList<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_calibration_status>();
    public scg::IList<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_calibration_status> CalibrationStatusListList {
      get { return calibrationStatusList_; }
    }
    public int CalibrationStatusListCount {
      get { return calibrationStatusList_.Count; }
    }
    public global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_calibration_status GetCalibrationStatusList(int index) {
      return calibrationStatusList_[index];
    }
    
    public const int HardAccelerationListFieldNumber = 2;
    private pbc::PopsicleList<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_hard_acceleration> hardAccelerationList_ = new pbc::PopsicleList<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_hard_acceleration>();
    public scg::IList<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_hard_acceleration> HardAccelerationListList {
      get { return hardAccelerationList_; }
    }
    public int HardAccelerationListCount {
      get { return hardAccelerationList_.Count; }
    }
    public global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_hard_acceleration GetHardAccelerationList(int index) {
      return hardAccelerationList_[index];
    }
    
    public const int HardBrakingListFieldNumber = 3;
    private pbc::PopsicleList<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_hard_braking> hardBrakingList_ = new pbc::PopsicleList<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_hard_braking>();
    public scg::IList<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_hard_braking> HardBrakingListList {
      get { return hardBrakingList_; }
    }
    public int HardBrakingListCount {
      get { return hardBrakingList_.Count; }
    }
    public global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_hard_braking GetHardBrakingList(int index) {
      return hardBrakingList_[index];
    }
    
    public const int HardLateralListFieldNumber = 4;
    private pbc::PopsicleList<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_hard_lateral> hardLateralList_ = new pbc::PopsicleList<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_hard_lateral>();
    public scg::IList<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_hard_lateral> HardLateralListList {
      get { return hardLateralList_; }
    }
    public int HardLateralListCount {
      get { return hardLateralList_.Count; }
    }
    public global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_hard_lateral GetHardLateralList(int index) {
      return hardLateralList_[index];
    }
    
    public const int ImpactDetectedListFieldNumber = 5;
    private pbc::PopsicleList<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_impact_detected> impactDetectedList_ = new pbc::PopsicleList<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_impact_detected>();
    public scg::IList<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_impact_detected> ImpactDetectedListList {
      get { return impactDetectedList_; }
    }
    public int ImpactDetectedListCount {
      get { return impactDetectedList_.Count; }
    }
    public global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_impact_detected GetImpactDetectedList(int index) {
      return impactDetectedList_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_calibration_status element in CalibrationStatusListList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_hard_acceleration element in HardAccelerationListList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_hard_braking element in HardBrakingListList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_hard_lateral element in HardLateralListList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_impact_detected element in ImpactDetectedListList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mxt1XxUAdditionalDataTelemetryEventsFieldNames;
      if (calibrationStatusList_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], calibrationStatusList_);
      }
      if (hardAccelerationList_.Count > 0) {
        output.WriteMessageArray(2, field_names[1], hardAccelerationList_);
      }
      if (hardBrakingList_.Count > 0) {
        output.WriteMessageArray(3, field_names[2], hardBrakingList_);
      }
      if (hardLateralList_.Count > 0) {
        output.WriteMessageArray(4, field_names[3], hardLateralList_);
      }
      if (impactDetectedList_.Count > 0) {
        output.WriteMessageArray(5, field_names[4], impactDetectedList_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      foreach (global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_calibration_status element in CalibrationStatusListList) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, element);
      }
      foreach (global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_hard_acceleration element in HardAccelerationListList) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, element);
      }
      foreach (global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_hard_braking element in HardBrakingListList) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, element);
      }
      foreach (global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_hard_lateral element in HardLateralListList) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, element);
      }
      foreach (global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_impact_detected element in ImpactDetectedListList) {
        size += pb::CodedOutputStream.ComputeMessageSize(5, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mxt1xx_u_additional_data_telemetry_events ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_telemetry_events ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_telemetry_events ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_telemetry_events ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_telemetry_events ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_telemetry_events ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_telemetry_events ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mxt1xx_u_additional_data_telemetry_events ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mxt1xx_u_additional_data_telemetry_events ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_telemetry_events ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mxt1xx_u_additional_data_telemetry_events MakeReadOnly() {
      calibrationStatusList_.MakeReadOnly();
      hardAccelerationList_.MakeReadOnly();
      hardBrakingList_.MakeReadOnly();
      hardLateralList_.MakeReadOnly();
      impactDetectedList_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mxt1xx_u_additional_data_telemetry_events prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mxt1xx_u_additional_data_telemetry_events, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mxt1xx_u_additional_data_telemetry_events cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mxt1xx_u_additional_data_telemetry_events result;
      
      private mxt1xx_u_additional_data_telemetry_events PrepareBuilder() {
        if (resultIsReadOnly) {
          mxt1xx_u_additional_data_telemetry_events original = result;
          result = new mxt1xx_u_additional_data_telemetry_events();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mxt1xx_u_additional_data_telemetry_events MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events.Descriptor; }
      }
      
      public override mxt1xx_u_additional_data_telemetry_events DefaultInstanceForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events.DefaultInstance; }
      }
      
      public override mxt1xx_u_additional_data_telemetry_events BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mxt1xx_u_additional_data_telemetry_events) {
          return MergeFrom((mxt1xx_u_additional_data_telemetry_events) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mxt1xx_u_additional_data_telemetry_events other) {
        if (other == global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events.DefaultInstance) return this;
        PrepareBuilder();
        if (other.calibrationStatusList_.Count != 0) {
          result.calibrationStatusList_.Add(other.calibrationStatusList_);
        }
        if (other.hardAccelerationList_.Count != 0) {
          result.hardAccelerationList_.Add(other.hardAccelerationList_);
        }
        if (other.hardBrakingList_.Count != 0) {
          result.hardBrakingList_.Add(other.hardBrakingList_);
        }
        if (other.hardLateralList_.Count != 0) {
          result.hardLateralList_.Add(other.hardLateralList_);
        }
        if (other.impactDetectedList_.Count != 0) {
          result.impactDetectedList_.Add(other.impactDetectedList_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mxt1XxUAdditionalDataTelemetryEventsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mxt1XxUAdditionalDataTelemetryEventsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.calibrationStatusList_, global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_calibration_status.DefaultInstance, extensionRegistry);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.hardAccelerationList_, global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_hard_acceleration.DefaultInstance, extensionRegistry);
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.hardBrakingList_, global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_hard_braking.DefaultInstance, extensionRegistry);
              break;
            }
            case 34: {
              input.ReadMessageArray(tag, field_name, result.hardLateralList_, global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_hard_lateral.DefaultInstance, extensionRegistry);
              break;
            }
            case 42: {
              input.ReadMessageArray(tag, field_name, result.impactDetectedList_, global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_impact_detected.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_calibration_status> CalibrationStatusListList {
        get { return PrepareBuilder().calibrationStatusList_; }
      }
      public int CalibrationStatusListCount {
        get { return result.CalibrationStatusListCount; }
      }
      public global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_calibration_status GetCalibrationStatusList(int index) {
        return result.GetCalibrationStatusList(index);
      }
      public Builder SetCalibrationStatusList(int index, global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_calibration_status value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.calibrationStatusList_[index] = value;
        return this;
      }
      public Builder SetCalibrationStatusList(int index, global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_calibration_status.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.calibrationStatusList_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddCalibrationStatusList(global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_calibration_status value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.calibrationStatusList_.Add(value);
        return this;
      }
      public Builder AddCalibrationStatusList(global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_calibration_status.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.calibrationStatusList_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeCalibrationStatusList(scg::IEnumerable<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_calibration_status> values) {
        PrepareBuilder();
        result.calibrationStatusList_.Add(values);
        return this;
      }
      public Builder ClearCalibrationStatusList() {
        PrepareBuilder();
        result.calibrationStatusList_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_hard_acceleration> HardAccelerationListList {
        get { return PrepareBuilder().hardAccelerationList_; }
      }
      public int HardAccelerationListCount {
        get { return result.HardAccelerationListCount; }
      }
      public global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_hard_acceleration GetHardAccelerationList(int index) {
        return result.GetHardAccelerationList(index);
      }
      public Builder SetHardAccelerationList(int index, global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_hard_acceleration value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hardAccelerationList_[index] = value;
        return this;
      }
      public Builder SetHardAccelerationList(int index, global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_hard_acceleration.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hardAccelerationList_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddHardAccelerationList(global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_hard_acceleration value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hardAccelerationList_.Add(value);
        return this;
      }
      public Builder AddHardAccelerationList(global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_hard_acceleration.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hardAccelerationList_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeHardAccelerationList(scg::IEnumerable<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_hard_acceleration> values) {
        PrepareBuilder();
        result.hardAccelerationList_.Add(values);
        return this;
      }
      public Builder ClearHardAccelerationList() {
        PrepareBuilder();
        result.hardAccelerationList_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_hard_braking> HardBrakingListList {
        get { return PrepareBuilder().hardBrakingList_; }
      }
      public int HardBrakingListCount {
        get { return result.HardBrakingListCount; }
      }
      public global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_hard_braking GetHardBrakingList(int index) {
        return result.GetHardBrakingList(index);
      }
      public Builder SetHardBrakingList(int index, global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_hard_braking value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hardBrakingList_[index] = value;
        return this;
      }
      public Builder SetHardBrakingList(int index, global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_hard_braking.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hardBrakingList_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddHardBrakingList(global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_hard_braking value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hardBrakingList_.Add(value);
        return this;
      }
      public Builder AddHardBrakingList(global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_hard_braking.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hardBrakingList_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeHardBrakingList(scg::IEnumerable<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_hard_braking> values) {
        PrepareBuilder();
        result.hardBrakingList_.Add(values);
        return this;
      }
      public Builder ClearHardBrakingList() {
        PrepareBuilder();
        result.hardBrakingList_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_hard_lateral> HardLateralListList {
        get { return PrepareBuilder().hardLateralList_; }
      }
      public int HardLateralListCount {
        get { return result.HardLateralListCount; }
      }
      public global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_hard_lateral GetHardLateralList(int index) {
        return result.GetHardLateralList(index);
      }
      public Builder SetHardLateralList(int index, global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_hard_lateral value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hardLateralList_[index] = value;
        return this;
      }
      public Builder SetHardLateralList(int index, global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_hard_lateral.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hardLateralList_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddHardLateralList(global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_hard_lateral value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hardLateralList_.Add(value);
        return this;
      }
      public Builder AddHardLateralList(global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_hard_lateral.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hardLateralList_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeHardLateralList(scg::IEnumerable<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_hard_lateral> values) {
        PrepareBuilder();
        result.hardLateralList_.Add(values);
        return this;
      }
      public Builder ClearHardLateralList() {
        PrepareBuilder();
        result.hardLateralList_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_impact_detected> ImpactDetectedListList {
        get { return PrepareBuilder().impactDetectedList_; }
      }
      public int ImpactDetectedListCount {
        get { return result.ImpactDetectedListCount; }
      }
      public global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_impact_detected GetImpactDetectedList(int index) {
        return result.GetImpactDetectedList(index);
      }
      public Builder SetImpactDetectedList(int index, global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_impact_detected value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.impactDetectedList_[index] = value;
        return this;
      }
      public Builder SetImpactDetectedList(int index, global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_impact_detected.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.impactDetectedList_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddImpactDetectedList(global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_impact_detected value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.impactDetectedList_.Add(value);
        return this;
      }
      public Builder AddImpactDetectedList(global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_impact_detected.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.impactDetectedList_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeImpactDetectedList(scg::IEnumerable<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events_impact_detected> values) {
        PrepareBuilder();
        result.impactDetectedList_.Add(values);
        return this;
      }
      public Builder ClearImpactDetectedList() {
        PrepareBuilder();
        result.impactDetectedList_.Clear();
        return this;
      }
    }
    static mxt1xx_u_additional_data_telemetry_events() {
      object.ReferenceEquals(global::maxtrack.pb.mxt1xx.Mxt1Xx.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mxt1xx_u_additional_data_journey_deltas_rpm_delta : pb::GeneratedMessage<mxt1xx_u_additional_data_journey_deltas_rpm_delta, mxt1xx_u_additional_data_journey_deltas_rpm_delta.Builder> {
    private mxt1xx_u_additional_data_journey_deltas_rpm_delta() { }
    private static readonly mxt1xx_u_additional_data_journey_deltas_rpm_delta defaultInstance = new mxt1xx_u_additional_data_journey_deltas_rpm_delta().MakeReadOnly();
    private static readonly string[] _mxt1XxUAdditionalDataJourneyDeltasRpmDeltaFieldNames = new string[] { "rpm_maximum", "rpm_mean", "rpm_range_blue", "rpm_range_green", "rpm_range_red", "rpm_range_yellow" };
    private static readonly uint[] _mxt1XxUAdditionalDataJourneyDeltasRpmDeltaFieldTags = new uint[] { 40, 48, 8, 16, 32, 24 };
    public static mxt1xx_u_additional_data_journey_deltas_rpm_delta DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mxt1xx_u_additional_data_journey_deltas_rpm_delta DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mxt1xx_u_additional_data_journey_deltas_rpm_delta ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_journey_deltas_rpm_delta__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mxt1xx_u_additional_data_journey_deltas_rpm_delta, mxt1xx_u_additional_data_journey_deltas_rpm_delta.Builder> InternalFieldAccessors {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_journey_deltas_rpm_delta__FieldAccessorTable; }
    }
    
    public const int RpmRangeBlueFieldNumber = 1;
    private bool hasRpmRangeBlue;
    private uint rpmRangeBlue_;
    public bool HasRpmRangeBlue {
      get { return hasRpmRangeBlue; }
    }
    [global::System.CLSCompliant(false)]
    public uint RpmRangeBlue {
      get { return rpmRangeBlue_; }
    }
    
    public const int RpmRangeGreenFieldNumber = 2;
    private bool hasRpmRangeGreen;
    private uint rpmRangeGreen_;
    public bool HasRpmRangeGreen {
      get { return hasRpmRangeGreen; }
    }
    [global::System.CLSCompliant(false)]
    public uint RpmRangeGreen {
      get { return rpmRangeGreen_; }
    }
    
    public const int RpmRangeYellowFieldNumber = 3;
    private bool hasRpmRangeYellow;
    private uint rpmRangeYellow_;
    public bool HasRpmRangeYellow {
      get { return hasRpmRangeYellow; }
    }
    [global::System.CLSCompliant(false)]
    public uint RpmRangeYellow {
      get { return rpmRangeYellow_; }
    }
    
    public const int RpmRangeRedFieldNumber = 4;
    private bool hasRpmRangeRed;
    private uint rpmRangeRed_;
    public bool HasRpmRangeRed {
      get { return hasRpmRangeRed; }
    }
    [global::System.CLSCompliant(false)]
    public uint RpmRangeRed {
      get { return rpmRangeRed_; }
    }
    
    public const int RpmMaximumFieldNumber = 5;
    private bool hasRpmMaximum;
    private uint rpmMaximum_;
    public bool HasRpmMaximum {
      get { return hasRpmMaximum; }
    }
    [global::System.CLSCompliant(false)]
    public uint RpmMaximum {
      get { return rpmMaximum_; }
    }
    
    public const int RpmMeanFieldNumber = 6;
    private bool hasRpmMean;
    private uint rpmMean_;
    public bool HasRpmMean {
      get { return hasRpmMean; }
    }
    [global::System.CLSCompliant(false)]
    public uint RpmMean {
      get { return rpmMean_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasRpmRangeBlue) return false;
        if (!hasRpmRangeGreen) return false;
        if (!hasRpmRangeYellow) return false;
        if (!hasRpmRangeRed) return false;
        if (!hasRpmMaximum) return false;
        if (!hasRpmMean) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mxt1XxUAdditionalDataJourneyDeltasRpmDeltaFieldNames;
      if (hasRpmRangeBlue) {
        output.WriteUInt32(1, field_names[2], RpmRangeBlue);
      }
      if (hasRpmRangeGreen) {
        output.WriteUInt32(2, field_names[3], RpmRangeGreen);
      }
      if (hasRpmRangeYellow) {
        output.WriteUInt32(3, field_names[5], RpmRangeYellow);
      }
      if (hasRpmRangeRed) {
        output.WriteUInt32(4, field_names[4], RpmRangeRed);
      }
      if (hasRpmMaximum) {
        output.WriteUInt32(5, field_names[0], RpmMaximum);
      }
      if (hasRpmMean) {
        output.WriteUInt32(6, field_names[1], RpmMean);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasRpmRangeBlue) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, RpmRangeBlue);
      }
      if (hasRpmRangeGreen) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, RpmRangeGreen);
      }
      if (hasRpmRangeYellow) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, RpmRangeYellow);
      }
      if (hasRpmRangeRed) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, RpmRangeRed);
      }
      if (hasRpmMaximum) {
        size += pb::CodedOutputStream.ComputeUInt32Size(5, RpmMaximum);
      }
      if (hasRpmMean) {
        size += pb::CodedOutputStream.ComputeUInt32Size(6, RpmMean);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mxt1xx_u_additional_data_journey_deltas_rpm_delta ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_journey_deltas_rpm_delta ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_journey_deltas_rpm_delta ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_journey_deltas_rpm_delta ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_journey_deltas_rpm_delta ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_journey_deltas_rpm_delta ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_journey_deltas_rpm_delta ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mxt1xx_u_additional_data_journey_deltas_rpm_delta ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mxt1xx_u_additional_data_journey_deltas_rpm_delta ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_journey_deltas_rpm_delta ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mxt1xx_u_additional_data_journey_deltas_rpm_delta MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mxt1xx_u_additional_data_journey_deltas_rpm_delta prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mxt1xx_u_additional_data_journey_deltas_rpm_delta, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mxt1xx_u_additional_data_journey_deltas_rpm_delta cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mxt1xx_u_additional_data_journey_deltas_rpm_delta result;
      
      private mxt1xx_u_additional_data_journey_deltas_rpm_delta PrepareBuilder() {
        if (resultIsReadOnly) {
          mxt1xx_u_additional_data_journey_deltas_rpm_delta original = result;
          result = new mxt1xx_u_additional_data_journey_deltas_rpm_delta();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mxt1xx_u_additional_data_journey_deltas_rpm_delta MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas_rpm_delta.Descriptor; }
      }
      
      public override mxt1xx_u_additional_data_journey_deltas_rpm_delta DefaultInstanceForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas_rpm_delta.DefaultInstance; }
      }
      
      public override mxt1xx_u_additional_data_journey_deltas_rpm_delta BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mxt1xx_u_additional_data_journey_deltas_rpm_delta) {
          return MergeFrom((mxt1xx_u_additional_data_journey_deltas_rpm_delta) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mxt1xx_u_additional_data_journey_deltas_rpm_delta other) {
        if (other == global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas_rpm_delta.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasRpmRangeBlue) {
          RpmRangeBlue = other.RpmRangeBlue;
        }
        if (other.HasRpmRangeGreen) {
          RpmRangeGreen = other.RpmRangeGreen;
        }
        if (other.HasRpmRangeYellow) {
          RpmRangeYellow = other.RpmRangeYellow;
        }
        if (other.HasRpmRangeRed) {
          RpmRangeRed = other.RpmRangeRed;
        }
        if (other.HasRpmMaximum) {
          RpmMaximum = other.RpmMaximum;
        }
        if (other.HasRpmMean) {
          RpmMean = other.RpmMean;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mxt1XxUAdditionalDataJourneyDeltasRpmDeltaFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mxt1XxUAdditionalDataJourneyDeltasRpmDeltaFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasRpmRangeBlue = input.ReadUInt32(ref result.rpmRangeBlue_);
              break;
            }
            case 16: {
              result.hasRpmRangeGreen = input.ReadUInt32(ref result.rpmRangeGreen_);
              break;
            }
            case 24: {
              result.hasRpmRangeYellow = input.ReadUInt32(ref result.rpmRangeYellow_);
              break;
            }
            case 32: {
              result.hasRpmRangeRed = input.ReadUInt32(ref result.rpmRangeRed_);
              break;
            }
            case 40: {
              result.hasRpmMaximum = input.ReadUInt32(ref result.rpmMaximum_);
              break;
            }
            case 48: {
              result.hasRpmMean = input.ReadUInt32(ref result.rpmMean_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasRpmRangeBlue {
        get { return result.hasRpmRangeBlue; }
      }
      [global::System.CLSCompliant(false)]
      public uint RpmRangeBlue {
        get { return result.RpmRangeBlue; }
        set { SetRpmRangeBlue(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetRpmRangeBlue(uint value) {
        PrepareBuilder();
        result.hasRpmRangeBlue = true;
        result.rpmRangeBlue_ = value;
        return this;
      }
      public Builder ClearRpmRangeBlue() {
        PrepareBuilder();
        result.hasRpmRangeBlue = false;
        result.rpmRangeBlue_ = 0;
        return this;
      }
      
      public bool HasRpmRangeGreen {
        get { return result.hasRpmRangeGreen; }
      }
      [global::System.CLSCompliant(false)]
      public uint RpmRangeGreen {
        get { return result.RpmRangeGreen; }
        set { SetRpmRangeGreen(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetRpmRangeGreen(uint value) {
        PrepareBuilder();
        result.hasRpmRangeGreen = true;
        result.rpmRangeGreen_ = value;
        return this;
      }
      public Builder ClearRpmRangeGreen() {
        PrepareBuilder();
        result.hasRpmRangeGreen = false;
        result.rpmRangeGreen_ = 0;
        return this;
      }
      
      public bool HasRpmRangeYellow {
        get { return result.hasRpmRangeYellow; }
      }
      [global::System.CLSCompliant(false)]
      public uint RpmRangeYellow {
        get { return result.RpmRangeYellow; }
        set { SetRpmRangeYellow(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetRpmRangeYellow(uint value) {
        PrepareBuilder();
        result.hasRpmRangeYellow = true;
        result.rpmRangeYellow_ = value;
        return this;
      }
      public Builder ClearRpmRangeYellow() {
        PrepareBuilder();
        result.hasRpmRangeYellow = false;
        result.rpmRangeYellow_ = 0;
        return this;
      }
      
      public bool HasRpmRangeRed {
        get { return result.hasRpmRangeRed; }
      }
      [global::System.CLSCompliant(false)]
      public uint RpmRangeRed {
        get { return result.RpmRangeRed; }
        set { SetRpmRangeRed(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetRpmRangeRed(uint value) {
        PrepareBuilder();
        result.hasRpmRangeRed = true;
        result.rpmRangeRed_ = value;
        return this;
      }
      public Builder ClearRpmRangeRed() {
        PrepareBuilder();
        result.hasRpmRangeRed = false;
        result.rpmRangeRed_ = 0;
        return this;
      }
      
      public bool HasRpmMaximum {
        get { return result.hasRpmMaximum; }
      }
      [global::System.CLSCompliant(false)]
      public uint RpmMaximum {
        get { return result.RpmMaximum; }
        set { SetRpmMaximum(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetRpmMaximum(uint value) {
        PrepareBuilder();
        result.hasRpmMaximum = true;
        result.rpmMaximum_ = value;
        return this;
      }
      public Builder ClearRpmMaximum() {
        PrepareBuilder();
        result.hasRpmMaximum = false;
        result.rpmMaximum_ = 0;
        return this;
      }
      
      public bool HasRpmMean {
        get { return result.hasRpmMean; }
      }
      [global::System.CLSCompliant(false)]
      public uint RpmMean {
        get { return result.RpmMean; }
        set { SetRpmMean(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetRpmMean(uint value) {
        PrepareBuilder();
        result.hasRpmMean = true;
        result.rpmMean_ = value;
        return this;
      }
      public Builder ClearRpmMean() {
        PrepareBuilder();
        result.hasRpmMean = false;
        result.rpmMean_ = 0;
        return this;
      }
    }
    static mxt1xx_u_additional_data_journey_deltas_rpm_delta() {
      object.ReferenceEquals(global::maxtrack.pb.mxt1xx.Mxt1Xx.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mxt1xx_u_additional_data_journey_deltas_speed_delta : pb::GeneratedMessage<mxt1xx_u_additional_data_journey_deltas_speed_delta, mxt1xx_u_additional_data_journey_deltas_speed_delta.Builder> {
    private mxt1xx_u_additional_data_journey_deltas_speed_delta() { }
    private static readonly mxt1xx_u_additional_data_journey_deltas_speed_delta defaultInstance = new mxt1xx_u_additional_data_journey_deltas_speed_delta().MakeReadOnly();
    private static readonly string[] _mxt1XxUAdditionalDataJourneyDeltasSpeedDeltaFieldNames = new string[] { "hodometer_accumulated", "maximum_speed", "mean_speed" };
    private static readonly uint[] _mxt1XxUAdditionalDataJourneyDeltasSpeedDeltaFieldTags = new uint[] { 24, 8, 16 };
    public static mxt1xx_u_additional_data_journey_deltas_speed_delta DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mxt1xx_u_additional_data_journey_deltas_speed_delta DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mxt1xx_u_additional_data_journey_deltas_speed_delta ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_journey_deltas_speed_delta__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mxt1xx_u_additional_data_journey_deltas_speed_delta, mxt1xx_u_additional_data_journey_deltas_speed_delta.Builder> InternalFieldAccessors {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_journey_deltas_speed_delta__FieldAccessorTable; }
    }
    
    public const int MaximumSpeedFieldNumber = 1;
    private bool hasMaximumSpeed;
    private uint maximumSpeed_;
    public bool HasMaximumSpeed {
      get { return hasMaximumSpeed; }
    }
    [global::System.CLSCompliant(false)]
    public uint MaximumSpeed {
      get { return maximumSpeed_; }
    }
    
    public const int MeanSpeedFieldNumber = 2;
    private bool hasMeanSpeed;
    private uint meanSpeed_;
    public bool HasMeanSpeed {
      get { return hasMeanSpeed; }
    }
    [global::System.CLSCompliant(false)]
    public uint MeanSpeed {
      get { return meanSpeed_; }
    }
    
    public const int HodometerAccumulatedFieldNumber = 3;
    private bool hasHodometerAccumulated;
    private uint hodometerAccumulated_;
    public bool HasHodometerAccumulated {
      get { return hasHodometerAccumulated; }
    }
    [global::System.CLSCompliant(false)]
    public uint HodometerAccumulated {
      get { return hodometerAccumulated_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasMaximumSpeed) return false;
        if (!hasMeanSpeed) return false;
        if (!hasHodometerAccumulated) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mxt1XxUAdditionalDataJourneyDeltasSpeedDeltaFieldNames;
      if (hasMaximumSpeed) {
        output.WriteUInt32(1, field_names[1], MaximumSpeed);
      }
      if (hasMeanSpeed) {
        output.WriteUInt32(2, field_names[2], MeanSpeed);
      }
      if (hasHodometerAccumulated) {
        output.WriteUInt32(3, field_names[0], HodometerAccumulated);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasMaximumSpeed) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, MaximumSpeed);
      }
      if (hasMeanSpeed) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, MeanSpeed);
      }
      if (hasHodometerAccumulated) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, HodometerAccumulated);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mxt1xx_u_additional_data_journey_deltas_speed_delta ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_journey_deltas_speed_delta ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_journey_deltas_speed_delta ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_journey_deltas_speed_delta ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_journey_deltas_speed_delta ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_journey_deltas_speed_delta ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_journey_deltas_speed_delta ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mxt1xx_u_additional_data_journey_deltas_speed_delta ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mxt1xx_u_additional_data_journey_deltas_speed_delta ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_journey_deltas_speed_delta ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mxt1xx_u_additional_data_journey_deltas_speed_delta MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mxt1xx_u_additional_data_journey_deltas_speed_delta prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mxt1xx_u_additional_data_journey_deltas_speed_delta, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mxt1xx_u_additional_data_journey_deltas_speed_delta cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mxt1xx_u_additional_data_journey_deltas_speed_delta result;
      
      private mxt1xx_u_additional_data_journey_deltas_speed_delta PrepareBuilder() {
        if (resultIsReadOnly) {
          mxt1xx_u_additional_data_journey_deltas_speed_delta original = result;
          result = new mxt1xx_u_additional_data_journey_deltas_speed_delta();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mxt1xx_u_additional_data_journey_deltas_speed_delta MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas_speed_delta.Descriptor; }
      }
      
      public override mxt1xx_u_additional_data_journey_deltas_speed_delta DefaultInstanceForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas_speed_delta.DefaultInstance; }
      }
      
      public override mxt1xx_u_additional_data_journey_deltas_speed_delta BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mxt1xx_u_additional_data_journey_deltas_speed_delta) {
          return MergeFrom((mxt1xx_u_additional_data_journey_deltas_speed_delta) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mxt1xx_u_additional_data_journey_deltas_speed_delta other) {
        if (other == global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas_speed_delta.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMaximumSpeed) {
          MaximumSpeed = other.MaximumSpeed;
        }
        if (other.HasMeanSpeed) {
          MeanSpeed = other.MeanSpeed;
        }
        if (other.HasHodometerAccumulated) {
          HodometerAccumulated = other.HodometerAccumulated;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mxt1XxUAdditionalDataJourneyDeltasSpeedDeltaFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mxt1XxUAdditionalDataJourneyDeltasSpeedDeltaFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasMaximumSpeed = input.ReadUInt32(ref result.maximumSpeed_);
              break;
            }
            case 16: {
              result.hasMeanSpeed = input.ReadUInt32(ref result.meanSpeed_);
              break;
            }
            case 24: {
              result.hasHodometerAccumulated = input.ReadUInt32(ref result.hodometerAccumulated_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMaximumSpeed {
        get { return result.hasMaximumSpeed; }
      }
      [global::System.CLSCompliant(false)]
      public uint MaximumSpeed {
        get { return result.MaximumSpeed; }
        set { SetMaximumSpeed(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetMaximumSpeed(uint value) {
        PrepareBuilder();
        result.hasMaximumSpeed = true;
        result.maximumSpeed_ = value;
        return this;
      }
      public Builder ClearMaximumSpeed() {
        PrepareBuilder();
        result.hasMaximumSpeed = false;
        result.maximumSpeed_ = 0;
        return this;
      }
      
      public bool HasMeanSpeed {
        get { return result.hasMeanSpeed; }
      }
      [global::System.CLSCompliant(false)]
      public uint MeanSpeed {
        get { return result.MeanSpeed; }
        set { SetMeanSpeed(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetMeanSpeed(uint value) {
        PrepareBuilder();
        result.hasMeanSpeed = true;
        result.meanSpeed_ = value;
        return this;
      }
      public Builder ClearMeanSpeed() {
        PrepareBuilder();
        result.hasMeanSpeed = false;
        result.meanSpeed_ = 0;
        return this;
      }
      
      public bool HasHodometerAccumulated {
        get { return result.hasHodometerAccumulated; }
      }
      [global::System.CLSCompliant(false)]
      public uint HodometerAccumulated {
        get { return result.HodometerAccumulated; }
        set { SetHodometerAccumulated(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetHodometerAccumulated(uint value) {
        PrepareBuilder();
        result.hasHodometerAccumulated = true;
        result.hodometerAccumulated_ = value;
        return this;
      }
      public Builder ClearHodometerAccumulated() {
        PrepareBuilder();
        result.hasHodometerAccumulated = false;
        result.hodometerAccumulated_ = 0;
        return this;
      }
    }
    static mxt1xx_u_additional_data_journey_deltas_speed_delta() {
      object.ReferenceEquals(global::maxtrack.pb.mxt1xx.Mxt1Xx.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mxt1xx_u_additional_data_journey_deltas_mean_journey_timer_delta : pb::GeneratedMessage<mxt1xx_u_additional_data_journey_deltas_mean_journey_timer_delta, mxt1xx_u_additional_data_journey_deltas_mean_journey_timer_delta.Builder> {
    private mxt1xx_u_additional_data_journey_deltas_mean_journey_timer_delta() { }
    private static readonly mxt1xx_u_additional_data_journey_deltas_mean_journey_timer_delta defaultInstance = new mxt1xx_u_additional_data_journey_deltas_mean_journey_timer_delta().MakeReadOnly();
    private static readonly string[] _mxt1XxUAdditionalDataJourneyDeltasMeanJourneyTimerDeltaFieldNames = new string[] { "time_engine_on", "time_moving", "time_of_journey", "time_stopped" };
    private static readonly uint[] _mxt1XxUAdditionalDataJourneyDeltasMeanJourneyTimerDeltaFieldTags = new uint[] { 32, 16, 8, 24 };
    public static mxt1xx_u_additional_data_journey_deltas_mean_journey_timer_delta DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mxt1xx_u_additional_data_journey_deltas_mean_journey_timer_delta DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mxt1xx_u_additional_data_journey_deltas_mean_journey_timer_delta ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_journey_deltas_mean_journey_timer_delta__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mxt1xx_u_additional_data_journey_deltas_mean_journey_timer_delta, mxt1xx_u_additional_data_journey_deltas_mean_journey_timer_delta.Builder> InternalFieldAccessors {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_journey_deltas_mean_journey_timer_delta__FieldAccessorTable; }
    }
    
    public const int TimeOfJourneyFieldNumber = 1;
    private bool hasTimeOfJourney;
    private uint timeOfJourney_;
    public bool HasTimeOfJourney {
      get { return hasTimeOfJourney; }
    }
    [global::System.CLSCompliant(false)]
    public uint TimeOfJourney {
      get { return timeOfJourney_; }
    }
    
    public const int TimeMovingFieldNumber = 2;
    private bool hasTimeMoving;
    private uint timeMoving_;
    public bool HasTimeMoving {
      get { return hasTimeMoving; }
    }
    [global::System.CLSCompliant(false)]
    public uint TimeMoving {
      get { return timeMoving_; }
    }
    
    public const int TimeStoppedFieldNumber = 3;
    private bool hasTimeStopped;
    private uint timeStopped_;
    public bool HasTimeStopped {
      get { return hasTimeStopped; }
    }
    [global::System.CLSCompliant(false)]
    public uint TimeStopped {
      get { return timeStopped_; }
    }
    
    public const int TimeEngineOnFieldNumber = 4;
    private bool hasTimeEngineOn;
    private uint timeEngineOn_;
    public bool HasTimeEngineOn {
      get { return hasTimeEngineOn; }
    }
    [global::System.CLSCompliant(false)]
    public uint TimeEngineOn {
      get { return timeEngineOn_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTimeOfJourney) return false;
        if (!hasTimeMoving) return false;
        if (!hasTimeStopped) return false;
        if (!hasTimeEngineOn) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mxt1XxUAdditionalDataJourneyDeltasMeanJourneyTimerDeltaFieldNames;
      if (hasTimeOfJourney) {
        output.WriteUInt32(1, field_names[2], TimeOfJourney);
      }
      if (hasTimeMoving) {
        output.WriteUInt32(2, field_names[1], TimeMoving);
      }
      if (hasTimeStopped) {
        output.WriteUInt32(3, field_names[3], TimeStopped);
      }
      if (hasTimeEngineOn) {
        output.WriteUInt32(4, field_names[0], TimeEngineOn);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasTimeOfJourney) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, TimeOfJourney);
      }
      if (hasTimeMoving) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, TimeMoving);
      }
      if (hasTimeStopped) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, TimeStopped);
      }
      if (hasTimeEngineOn) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, TimeEngineOn);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mxt1xx_u_additional_data_journey_deltas_mean_journey_timer_delta ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_journey_deltas_mean_journey_timer_delta ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_journey_deltas_mean_journey_timer_delta ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_journey_deltas_mean_journey_timer_delta ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_journey_deltas_mean_journey_timer_delta ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_journey_deltas_mean_journey_timer_delta ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_journey_deltas_mean_journey_timer_delta ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mxt1xx_u_additional_data_journey_deltas_mean_journey_timer_delta ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mxt1xx_u_additional_data_journey_deltas_mean_journey_timer_delta ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_journey_deltas_mean_journey_timer_delta ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mxt1xx_u_additional_data_journey_deltas_mean_journey_timer_delta MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mxt1xx_u_additional_data_journey_deltas_mean_journey_timer_delta prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mxt1xx_u_additional_data_journey_deltas_mean_journey_timer_delta, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mxt1xx_u_additional_data_journey_deltas_mean_journey_timer_delta cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mxt1xx_u_additional_data_journey_deltas_mean_journey_timer_delta result;
      
      private mxt1xx_u_additional_data_journey_deltas_mean_journey_timer_delta PrepareBuilder() {
        if (resultIsReadOnly) {
          mxt1xx_u_additional_data_journey_deltas_mean_journey_timer_delta original = result;
          result = new mxt1xx_u_additional_data_journey_deltas_mean_journey_timer_delta();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mxt1xx_u_additional_data_journey_deltas_mean_journey_timer_delta MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas_mean_journey_timer_delta.Descriptor; }
      }
      
      public override mxt1xx_u_additional_data_journey_deltas_mean_journey_timer_delta DefaultInstanceForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas_mean_journey_timer_delta.DefaultInstance; }
      }
      
      public override mxt1xx_u_additional_data_journey_deltas_mean_journey_timer_delta BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mxt1xx_u_additional_data_journey_deltas_mean_journey_timer_delta) {
          return MergeFrom((mxt1xx_u_additional_data_journey_deltas_mean_journey_timer_delta) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mxt1xx_u_additional_data_journey_deltas_mean_journey_timer_delta other) {
        if (other == global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas_mean_journey_timer_delta.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTimeOfJourney) {
          TimeOfJourney = other.TimeOfJourney;
        }
        if (other.HasTimeMoving) {
          TimeMoving = other.TimeMoving;
        }
        if (other.HasTimeStopped) {
          TimeStopped = other.TimeStopped;
        }
        if (other.HasTimeEngineOn) {
          TimeEngineOn = other.TimeEngineOn;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mxt1XxUAdditionalDataJourneyDeltasMeanJourneyTimerDeltaFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mxt1XxUAdditionalDataJourneyDeltasMeanJourneyTimerDeltaFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasTimeOfJourney = input.ReadUInt32(ref result.timeOfJourney_);
              break;
            }
            case 16: {
              result.hasTimeMoving = input.ReadUInt32(ref result.timeMoving_);
              break;
            }
            case 24: {
              result.hasTimeStopped = input.ReadUInt32(ref result.timeStopped_);
              break;
            }
            case 32: {
              result.hasTimeEngineOn = input.ReadUInt32(ref result.timeEngineOn_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTimeOfJourney {
        get { return result.hasTimeOfJourney; }
      }
      [global::System.CLSCompliant(false)]
      public uint TimeOfJourney {
        get { return result.TimeOfJourney; }
        set { SetTimeOfJourney(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetTimeOfJourney(uint value) {
        PrepareBuilder();
        result.hasTimeOfJourney = true;
        result.timeOfJourney_ = value;
        return this;
      }
      public Builder ClearTimeOfJourney() {
        PrepareBuilder();
        result.hasTimeOfJourney = false;
        result.timeOfJourney_ = 0;
        return this;
      }
      
      public bool HasTimeMoving {
        get { return result.hasTimeMoving; }
      }
      [global::System.CLSCompliant(false)]
      public uint TimeMoving {
        get { return result.TimeMoving; }
        set { SetTimeMoving(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetTimeMoving(uint value) {
        PrepareBuilder();
        result.hasTimeMoving = true;
        result.timeMoving_ = value;
        return this;
      }
      public Builder ClearTimeMoving() {
        PrepareBuilder();
        result.hasTimeMoving = false;
        result.timeMoving_ = 0;
        return this;
      }
      
      public bool HasTimeStopped {
        get { return result.hasTimeStopped; }
      }
      [global::System.CLSCompliant(false)]
      public uint TimeStopped {
        get { return result.TimeStopped; }
        set { SetTimeStopped(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetTimeStopped(uint value) {
        PrepareBuilder();
        result.hasTimeStopped = true;
        result.timeStopped_ = value;
        return this;
      }
      public Builder ClearTimeStopped() {
        PrepareBuilder();
        result.hasTimeStopped = false;
        result.timeStopped_ = 0;
        return this;
      }
      
      public bool HasTimeEngineOn {
        get { return result.hasTimeEngineOn; }
      }
      [global::System.CLSCompliant(false)]
      public uint TimeEngineOn {
        get { return result.TimeEngineOn; }
        set { SetTimeEngineOn(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetTimeEngineOn(uint value) {
        PrepareBuilder();
        result.hasTimeEngineOn = true;
        result.timeEngineOn_ = value;
        return this;
      }
      public Builder ClearTimeEngineOn() {
        PrepareBuilder();
        result.hasTimeEngineOn = false;
        result.timeEngineOn_ = 0;
        return this;
      }
    }
    static mxt1xx_u_additional_data_journey_deltas_mean_journey_timer_delta() {
      object.ReferenceEquals(global::maxtrack.pb.mxt1xx.Mxt1Xx.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mxt1xx_u_additional_data_journey_deltas_location_delta : pb::GeneratedMessage<mxt1xx_u_additional_data_journey_deltas_location_delta, mxt1xx_u_additional_data_journey_deltas_location_delta.Builder> {
    private mxt1xx_u_additional_data_journey_deltas_location_delta() { }
    private static readonly mxt1xx_u_additional_data_journey_deltas_location_delta defaultInstance = new mxt1xx_u_additional_data_journey_deltas_location_delta().MakeReadOnly();
    private static readonly string[] _mxt1XxUAdditionalDataJourneyDeltasLocationDeltaFieldNames = new string[] { "end_datetime", "end_lat", "end_long", "end_memory_index", "start_lat", "start_long", "start_memory_index" };
    private static readonly uint[] _mxt1XxUAdditionalDataJourneyDeltasLocationDeltaFieldTags = new uint[] { 10, 49, 57, 24, 33, 41, 16 };
    public static mxt1xx_u_additional_data_journey_deltas_location_delta DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mxt1xx_u_additional_data_journey_deltas_location_delta DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mxt1xx_u_additional_data_journey_deltas_location_delta ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_journey_deltas_location_delta__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mxt1xx_u_additional_data_journey_deltas_location_delta, mxt1xx_u_additional_data_journey_deltas_location_delta.Builder> InternalFieldAccessors {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_journey_deltas_location_delta__FieldAccessorTable; }
    }
    
    public const int EndDatetimeFieldNumber = 1;
    private bool hasEndDatetime;
    private string endDatetime_ = "";
    public bool HasEndDatetime {
      get { return hasEndDatetime; }
    }
    public string EndDatetime {
      get { return endDatetime_; }
    }
    
    public const int StartMemoryIndexFieldNumber = 2;
    private bool hasStartMemoryIndex;
    private uint startMemoryIndex_;
    public bool HasStartMemoryIndex {
      get { return hasStartMemoryIndex; }
    }
    [global::System.CLSCompliant(false)]
    public uint StartMemoryIndex {
      get { return startMemoryIndex_; }
    }
    
    public const int EndMemoryIndexFieldNumber = 3;
    private bool hasEndMemoryIndex;
    private uint endMemoryIndex_;
    public bool HasEndMemoryIndex {
      get { return hasEndMemoryIndex; }
    }
    [global::System.CLSCompliant(false)]
    public uint EndMemoryIndex {
      get { return endMemoryIndex_; }
    }
    
    public const int StartLatFieldNumber = 4;
    private bool hasStartLat;
    private double startLat_;
    public bool HasStartLat {
      get { return hasStartLat; }
    }
    public double StartLat {
      get { return startLat_; }
    }
    
    public const int StartLongFieldNumber = 5;
    private bool hasStartLong;
    private double startLong_;
    public bool HasStartLong {
      get { return hasStartLong; }
    }
    public double StartLong {
      get { return startLong_; }
    }
    
    public const int EndLatFieldNumber = 6;
    private bool hasEndLat;
    private double endLat_;
    public bool HasEndLat {
      get { return hasEndLat; }
    }
    public double EndLat {
      get { return endLat_; }
    }
    
    public const int EndLongFieldNumber = 7;
    private bool hasEndLong;
    private double endLong_;
    public bool HasEndLong {
      get { return hasEndLong; }
    }
    public double EndLong {
      get { return endLong_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasEndDatetime) return false;
        if (!hasStartMemoryIndex) return false;
        if (!hasEndMemoryIndex) return false;
        if (!hasStartLat) return false;
        if (!hasStartLong) return false;
        if (!hasEndLat) return false;
        if (!hasEndLong) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mxt1XxUAdditionalDataJourneyDeltasLocationDeltaFieldNames;
      if (hasEndDatetime) {
        output.WriteString(1, field_names[0], EndDatetime);
      }
      if (hasStartMemoryIndex) {
        output.WriteUInt32(2, field_names[6], StartMemoryIndex);
      }
      if (hasEndMemoryIndex) {
        output.WriteUInt32(3, field_names[3], EndMemoryIndex);
      }
      if (hasStartLat) {
        output.WriteDouble(4, field_names[4], StartLat);
      }
      if (hasStartLong) {
        output.WriteDouble(5, field_names[5], StartLong);
      }
      if (hasEndLat) {
        output.WriteDouble(6, field_names[1], EndLat);
      }
      if (hasEndLong) {
        output.WriteDouble(7, field_names[2], EndLong);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasEndDatetime) {
        size += pb::CodedOutputStream.ComputeStringSize(1, EndDatetime);
      }
      if (hasStartMemoryIndex) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, StartMemoryIndex);
      }
      if (hasEndMemoryIndex) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, EndMemoryIndex);
      }
      if (hasStartLat) {
        size += pb::CodedOutputStream.ComputeDoubleSize(4, StartLat);
      }
      if (hasStartLong) {
        size += pb::CodedOutputStream.ComputeDoubleSize(5, StartLong);
      }
      if (hasEndLat) {
        size += pb::CodedOutputStream.ComputeDoubleSize(6, EndLat);
      }
      if (hasEndLong) {
        size += pb::CodedOutputStream.ComputeDoubleSize(7, EndLong);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mxt1xx_u_additional_data_journey_deltas_location_delta ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_journey_deltas_location_delta ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_journey_deltas_location_delta ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_journey_deltas_location_delta ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_journey_deltas_location_delta ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_journey_deltas_location_delta ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_journey_deltas_location_delta ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mxt1xx_u_additional_data_journey_deltas_location_delta ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mxt1xx_u_additional_data_journey_deltas_location_delta ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_journey_deltas_location_delta ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mxt1xx_u_additional_data_journey_deltas_location_delta MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mxt1xx_u_additional_data_journey_deltas_location_delta prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mxt1xx_u_additional_data_journey_deltas_location_delta, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mxt1xx_u_additional_data_journey_deltas_location_delta cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mxt1xx_u_additional_data_journey_deltas_location_delta result;
      
      private mxt1xx_u_additional_data_journey_deltas_location_delta PrepareBuilder() {
        if (resultIsReadOnly) {
          mxt1xx_u_additional_data_journey_deltas_location_delta original = result;
          result = new mxt1xx_u_additional_data_journey_deltas_location_delta();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mxt1xx_u_additional_data_journey_deltas_location_delta MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas_location_delta.Descriptor; }
      }
      
      public override mxt1xx_u_additional_data_journey_deltas_location_delta DefaultInstanceForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas_location_delta.DefaultInstance; }
      }
      
      public override mxt1xx_u_additional_data_journey_deltas_location_delta BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mxt1xx_u_additional_data_journey_deltas_location_delta) {
          return MergeFrom((mxt1xx_u_additional_data_journey_deltas_location_delta) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mxt1xx_u_additional_data_journey_deltas_location_delta other) {
        if (other == global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas_location_delta.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasEndDatetime) {
          EndDatetime = other.EndDatetime;
        }
        if (other.HasStartMemoryIndex) {
          StartMemoryIndex = other.StartMemoryIndex;
        }
        if (other.HasEndMemoryIndex) {
          EndMemoryIndex = other.EndMemoryIndex;
        }
        if (other.HasStartLat) {
          StartLat = other.StartLat;
        }
        if (other.HasStartLong) {
          StartLong = other.StartLong;
        }
        if (other.HasEndLat) {
          EndLat = other.EndLat;
        }
        if (other.HasEndLong) {
          EndLong = other.EndLong;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mxt1XxUAdditionalDataJourneyDeltasLocationDeltaFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mxt1XxUAdditionalDataJourneyDeltasLocationDeltaFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasEndDatetime = input.ReadString(ref result.endDatetime_);
              break;
            }
            case 16: {
              result.hasStartMemoryIndex = input.ReadUInt32(ref result.startMemoryIndex_);
              break;
            }
            case 24: {
              result.hasEndMemoryIndex = input.ReadUInt32(ref result.endMemoryIndex_);
              break;
            }
            case 33: {
              result.hasStartLat = input.ReadDouble(ref result.startLat_);
              break;
            }
            case 41: {
              result.hasStartLong = input.ReadDouble(ref result.startLong_);
              break;
            }
            case 49: {
              result.hasEndLat = input.ReadDouble(ref result.endLat_);
              break;
            }
            case 57: {
              result.hasEndLong = input.ReadDouble(ref result.endLong_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasEndDatetime {
        get { return result.hasEndDatetime; }
      }
      public string EndDatetime {
        get { return result.EndDatetime; }
        set { SetEndDatetime(value); }
      }
      public Builder SetEndDatetime(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasEndDatetime = true;
        result.endDatetime_ = value;
        return this;
      }
      public Builder ClearEndDatetime() {
        PrepareBuilder();
        result.hasEndDatetime = false;
        result.endDatetime_ = "";
        return this;
      }
      
      public bool HasStartMemoryIndex {
        get { return result.hasStartMemoryIndex; }
      }
      [global::System.CLSCompliant(false)]
      public uint StartMemoryIndex {
        get { return result.StartMemoryIndex; }
        set { SetStartMemoryIndex(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetStartMemoryIndex(uint value) {
        PrepareBuilder();
        result.hasStartMemoryIndex = true;
        result.startMemoryIndex_ = value;
        return this;
      }
      public Builder ClearStartMemoryIndex() {
        PrepareBuilder();
        result.hasStartMemoryIndex = false;
        result.startMemoryIndex_ = 0;
        return this;
      }
      
      public bool HasEndMemoryIndex {
        get { return result.hasEndMemoryIndex; }
      }
      [global::System.CLSCompliant(false)]
      public uint EndMemoryIndex {
        get { return result.EndMemoryIndex; }
        set { SetEndMemoryIndex(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetEndMemoryIndex(uint value) {
        PrepareBuilder();
        result.hasEndMemoryIndex = true;
        result.endMemoryIndex_ = value;
        return this;
      }
      public Builder ClearEndMemoryIndex() {
        PrepareBuilder();
        result.hasEndMemoryIndex = false;
        result.endMemoryIndex_ = 0;
        return this;
      }
      
      public bool HasStartLat {
        get { return result.hasStartLat; }
      }
      public double StartLat {
        get { return result.StartLat; }
        set { SetStartLat(value); }
      }
      public Builder SetStartLat(double value) {
        PrepareBuilder();
        result.hasStartLat = true;
        result.startLat_ = value;
        return this;
      }
      public Builder ClearStartLat() {
        PrepareBuilder();
        result.hasStartLat = false;
        result.startLat_ = 0D;
        return this;
      }
      
      public bool HasStartLong {
        get { return result.hasStartLong; }
      }
      public double StartLong {
        get { return result.StartLong; }
        set { SetStartLong(value); }
      }
      public Builder SetStartLong(double value) {
        PrepareBuilder();
        result.hasStartLong = true;
        result.startLong_ = value;
        return this;
      }
      public Builder ClearStartLong() {
        PrepareBuilder();
        result.hasStartLong = false;
        result.startLong_ = 0D;
        return this;
      }
      
      public bool HasEndLat {
        get { return result.hasEndLat; }
      }
      public double EndLat {
        get { return result.EndLat; }
        set { SetEndLat(value); }
      }
      public Builder SetEndLat(double value) {
        PrepareBuilder();
        result.hasEndLat = true;
        result.endLat_ = value;
        return this;
      }
      public Builder ClearEndLat() {
        PrepareBuilder();
        result.hasEndLat = false;
        result.endLat_ = 0D;
        return this;
      }
      
      public bool HasEndLong {
        get { return result.hasEndLong; }
      }
      public double EndLong {
        get { return result.EndLong; }
        set { SetEndLong(value); }
      }
      public Builder SetEndLong(double value) {
        PrepareBuilder();
        result.hasEndLong = true;
        result.endLong_ = value;
        return this;
      }
      public Builder ClearEndLong() {
        PrepareBuilder();
        result.hasEndLong = false;
        result.endLong_ = 0D;
        return this;
      }
    }
    static mxt1xx_u_additional_data_journey_deltas_location_delta() {
      object.ReferenceEquals(global::maxtrack.pb.mxt1xx.Mxt1Xx.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mxt1xx_u_additional_data_journey_deltas_accelerometer_delta : pb::GeneratedMessage<mxt1xx_u_additional_data_journey_deltas_accelerometer_delta, mxt1xx_u_additional_data_journey_deltas_accelerometer_delta.Builder> {
    private mxt1xx_u_additional_data_journey_deltas_accelerometer_delta() { }
    private static readonly mxt1xx_u_additional_data_journey_deltas_accelerometer_delta defaultInstance = new mxt1xx_u_additional_data_journey_deltas_accelerometer_delta().MakeReadOnly();
    private static readonly string[] _mxt1XxUAdditionalDataJourneyDeltasAccelerometerDeltaFieldNames = new string[] { "average_lateral_axis_absolute", "average_rolling_axis_back", "average_rolling_axis_front", "max_lateral_axis_absolute", "max_rolling_axis_back", "max_rolling_axis_front" };
    private static readonly uint[] _mxt1XxUAdditionalDataJourneyDeltasAccelerometerDeltaFieldTags = new uint[] { 48, 40, 32, 24, 16, 8 };
    public static mxt1xx_u_additional_data_journey_deltas_accelerometer_delta DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mxt1xx_u_additional_data_journey_deltas_accelerometer_delta DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mxt1xx_u_additional_data_journey_deltas_accelerometer_delta ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_journey_deltas_accelerometer_delta__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mxt1xx_u_additional_data_journey_deltas_accelerometer_delta, mxt1xx_u_additional_data_journey_deltas_accelerometer_delta.Builder> InternalFieldAccessors {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_journey_deltas_accelerometer_delta__FieldAccessorTable; }
    }
    
    public const int MaxRollingAxisFrontFieldNumber = 1;
    private bool hasMaxRollingAxisFront;
    private uint maxRollingAxisFront_;
    public bool HasMaxRollingAxisFront {
      get { return hasMaxRollingAxisFront; }
    }
    [global::System.CLSCompliant(false)]
    public uint MaxRollingAxisFront {
      get { return maxRollingAxisFront_; }
    }
    
    public const int MaxRollingAxisBackFieldNumber = 2;
    private bool hasMaxRollingAxisBack;
    private uint maxRollingAxisBack_;
    public bool HasMaxRollingAxisBack {
      get { return hasMaxRollingAxisBack; }
    }
    [global::System.CLSCompliant(false)]
    public uint MaxRollingAxisBack {
      get { return maxRollingAxisBack_; }
    }
    
    public const int MaxLateralAxisAbsoluteFieldNumber = 3;
    private bool hasMaxLateralAxisAbsolute;
    private uint maxLateralAxisAbsolute_;
    public bool HasMaxLateralAxisAbsolute {
      get { return hasMaxLateralAxisAbsolute; }
    }
    [global::System.CLSCompliant(false)]
    public uint MaxLateralAxisAbsolute {
      get { return maxLateralAxisAbsolute_; }
    }
    
    public const int AverageRollingAxisFrontFieldNumber = 4;
    private bool hasAverageRollingAxisFront;
    private uint averageRollingAxisFront_;
    public bool HasAverageRollingAxisFront {
      get { return hasAverageRollingAxisFront; }
    }
    [global::System.CLSCompliant(false)]
    public uint AverageRollingAxisFront {
      get { return averageRollingAxisFront_; }
    }
    
    public const int AverageRollingAxisBackFieldNumber = 5;
    private bool hasAverageRollingAxisBack;
    private uint averageRollingAxisBack_;
    public bool HasAverageRollingAxisBack {
      get { return hasAverageRollingAxisBack; }
    }
    [global::System.CLSCompliant(false)]
    public uint AverageRollingAxisBack {
      get { return averageRollingAxisBack_; }
    }
    
    public const int AverageLateralAxisAbsoluteFieldNumber = 6;
    private bool hasAverageLateralAxisAbsolute;
    private uint averageLateralAxisAbsolute_;
    public bool HasAverageLateralAxisAbsolute {
      get { return hasAverageLateralAxisAbsolute; }
    }
    [global::System.CLSCompliant(false)]
    public uint AverageLateralAxisAbsolute {
      get { return averageLateralAxisAbsolute_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasMaxRollingAxisFront) return false;
        if (!hasMaxRollingAxisBack) return false;
        if (!hasMaxLateralAxisAbsolute) return false;
        if (!hasAverageRollingAxisFront) return false;
        if (!hasAverageRollingAxisBack) return false;
        if (!hasAverageLateralAxisAbsolute) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mxt1XxUAdditionalDataJourneyDeltasAccelerometerDeltaFieldNames;
      if (hasMaxRollingAxisFront) {
        output.WriteUInt32(1, field_names[5], MaxRollingAxisFront);
      }
      if (hasMaxRollingAxisBack) {
        output.WriteUInt32(2, field_names[4], MaxRollingAxisBack);
      }
      if (hasMaxLateralAxisAbsolute) {
        output.WriteUInt32(3, field_names[3], MaxLateralAxisAbsolute);
      }
      if (hasAverageRollingAxisFront) {
        output.WriteUInt32(4, field_names[2], AverageRollingAxisFront);
      }
      if (hasAverageRollingAxisBack) {
        output.WriteUInt32(5, field_names[1], AverageRollingAxisBack);
      }
      if (hasAverageLateralAxisAbsolute) {
        output.WriteUInt32(6, field_names[0], AverageLateralAxisAbsolute);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasMaxRollingAxisFront) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, MaxRollingAxisFront);
      }
      if (hasMaxRollingAxisBack) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, MaxRollingAxisBack);
      }
      if (hasMaxLateralAxisAbsolute) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, MaxLateralAxisAbsolute);
      }
      if (hasAverageRollingAxisFront) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, AverageRollingAxisFront);
      }
      if (hasAverageRollingAxisBack) {
        size += pb::CodedOutputStream.ComputeUInt32Size(5, AverageRollingAxisBack);
      }
      if (hasAverageLateralAxisAbsolute) {
        size += pb::CodedOutputStream.ComputeUInt32Size(6, AverageLateralAxisAbsolute);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mxt1xx_u_additional_data_journey_deltas_accelerometer_delta ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_journey_deltas_accelerometer_delta ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_journey_deltas_accelerometer_delta ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_journey_deltas_accelerometer_delta ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_journey_deltas_accelerometer_delta ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_journey_deltas_accelerometer_delta ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_journey_deltas_accelerometer_delta ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mxt1xx_u_additional_data_journey_deltas_accelerometer_delta ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mxt1xx_u_additional_data_journey_deltas_accelerometer_delta ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_journey_deltas_accelerometer_delta ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mxt1xx_u_additional_data_journey_deltas_accelerometer_delta MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mxt1xx_u_additional_data_journey_deltas_accelerometer_delta prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mxt1xx_u_additional_data_journey_deltas_accelerometer_delta, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mxt1xx_u_additional_data_journey_deltas_accelerometer_delta cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mxt1xx_u_additional_data_journey_deltas_accelerometer_delta result;
      
      private mxt1xx_u_additional_data_journey_deltas_accelerometer_delta PrepareBuilder() {
        if (resultIsReadOnly) {
          mxt1xx_u_additional_data_journey_deltas_accelerometer_delta original = result;
          result = new mxt1xx_u_additional_data_journey_deltas_accelerometer_delta();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mxt1xx_u_additional_data_journey_deltas_accelerometer_delta MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas_accelerometer_delta.Descriptor; }
      }
      
      public override mxt1xx_u_additional_data_journey_deltas_accelerometer_delta DefaultInstanceForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas_accelerometer_delta.DefaultInstance; }
      }
      
      public override mxt1xx_u_additional_data_journey_deltas_accelerometer_delta BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mxt1xx_u_additional_data_journey_deltas_accelerometer_delta) {
          return MergeFrom((mxt1xx_u_additional_data_journey_deltas_accelerometer_delta) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mxt1xx_u_additional_data_journey_deltas_accelerometer_delta other) {
        if (other == global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas_accelerometer_delta.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMaxRollingAxisFront) {
          MaxRollingAxisFront = other.MaxRollingAxisFront;
        }
        if (other.HasMaxRollingAxisBack) {
          MaxRollingAxisBack = other.MaxRollingAxisBack;
        }
        if (other.HasMaxLateralAxisAbsolute) {
          MaxLateralAxisAbsolute = other.MaxLateralAxisAbsolute;
        }
        if (other.HasAverageRollingAxisFront) {
          AverageRollingAxisFront = other.AverageRollingAxisFront;
        }
        if (other.HasAverageRollingAxisBack) {
          AverageRollingAxisBack = other.AverageRollingAxisBack;
        }
        if (other.HasAverageLateralAxisAbsolute) {
          AverageLateralAxisAbsolute = other.AverageLateralAxisAbsolute;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mxt1XxUAdditionalDataJourneyDeltasAccelerometerDeltaFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mxt1XxUAdditionalDataJourneyDeltasAccelerometerDeltaFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasMaxRollingAxisFront = input.ReadUInt32(ref result.maxRollingAxisFront_);
              break;
            }
            case 16: {
              result.hasMaxRollingAxisBack = input.ReadUInt32(ref result.maxRollingAxisBack_);
              break;
            }
            case 24: {
              result.hasMaxLateralAxisAbsolute = input.ReadUInt32(ref result.maxLateralAxisAbsolute_);
              break;
            }
            case 32: {
              result.hasAverageRollingAxisFront = input.ReadUInt32(ref result.averageRollingAxisFront_);
              break;
            }
            case 40: {
              result.hasAverageRollingAxisBack = input.ReadUInt32(ref result.averageRollingAxisBack_);
              break;
            }
            case 48: {
              result.hasAverageLateralAxisAbsolute = input.ReadUInt32(ref result.averageLateralAxisAbsolute_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMaxRollingAxisFront {
        get { return result.hasMaxRollingAxisFront; }
      }
      [global::System.CLSCompliant(false)]
      public uint MaxRollingAxisFront {
        get { return result.MaxRollingAxisFront; }
        set { SetMaxRollingAxisFront(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetMaxRollingAxisFront(uint value) {
        PrepareBuilder();
        result.hasMaxRollingAxisFront = true;
        result.maxRollingAxisFront_ = value;
        return this;
      }
      public Builder ClearMaxRollingAxisFront() {
        PrepareBuilder();
        result.hasMaxRollingAxisFront = false;
        result.maxRollingAxisFront_ = 0;
        return this;
      }
      
      public bool HasMaxRollingAxisBack {
        get { return result.hasMaxRollingAxisBack; }
      }
      [global::System.CLSCompliant(false)]
      public uint MaxRollingAxisBack {
        get { return result.MaxRollingAxisBack; }
        set { SetMaxRollingAxisBack(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetMaxRollingAxisBack(uint value) {
        PrepareBuilder();
        result.hasMaxRollingAxisBack = true;
        result.maxRollingAxisBack_ = value;
        return this;
      }
      public Builder ClearMaxRollingAxisBack() {
        PrepareBuilder();
        result.hasMaxRollingAxisBack = false;
        result.maxRollingAxisBack_ = 0;
        return this;
      }
      
      public bool HasMaxLateralAxisAbsolute {
        get { return result.hasMaxLateralAxisAbsolute; }
      }
      [global::System.CLSCompliant(false)]
      public uint MaxLateralAxisAbsolute {
        get { return result.MaxLateralAxisAbsolute; }
        set { SetMaxLateralAxisAbsolute(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetMaxLateralAxisAbsolute(uint value) {
        PrepareBuilder();
        result.hasMaxLateralAxisAbsolute = true;
        result.maxLateralAxisAbsolute_ = value;
        return this;
      }
      public Builder ClearMaxLateralAxisAbsolute() {
        PrepareBuilder();
        result.hasMaxLateralAxisAbsolute = false;
        result.maxLateralAxisAbsolute_ = 0;
        return this;
      }
      
      public bool HasAverageRollingAxisFront {
        get { return result.hasAverageRollingAxisFront; }
      }
      [global::System.CLSCompliant(false)]
      public uint AverageRollingAxisFront {
        get { return result.AverageRollingAxisFront; }
        set { SetAverageRollingAxisFront(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetAverageRollingAxisFront(uint value) {
        PrepareBuilder();
        result.hasAverageRollingAxisFront = true;
        result.averageRollingAxisFront_ = value;
        return this;
      }
      public Builder ClearAverageRollingAxisFront() {
        PrepareBuilder();
        result.hasAverageRollingAxisFront = false;
        result.averageRollingAxisFront_ = 0;
        return this;
      }
      
      public bool HasAverageRollingAxisBack {
        get { return result.hasAverageRollingAxisBack; }
      }
      [global::System.CLSCompliant(false)]
      public uint AverageRollingAxisBack {
        get { return result.AverageRollingAxisBack; }
        set { SetAverageRollingAxisBack(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetAverageRollingAxisBack(uint value) {
        PrepareBuilder();
        result.hasAverageRollingAxisBack = true;
        result.averageRollingAxisBack_ = value;
        return this;
      }
      public Builder ClearAverageRollingAxisBack() {
        PrepareBuilder();
        result.hasAverageRollingAxisBack = false;
        result.averageRollingAxisBack_ = 0;
        return this;
      }
      
      public bool HasAverageLateralAxisAbsolute {
        get { return result.hasAverageLateralAxisAbsolute; }
      }
      [global::System.CLSCompliant(false)]
      public uint AverageLateralAxisAbsolute {
        get { return result.AverageLateralAxisAbsolute; }
        set { SetAverageLateralAxisAbsolute(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetAverageLateralAxisAbsolute(uint value) {
        PrepareBuilder();
        result.hasAverageLateralAxisAbsolute = true;
        result.averageLateralAxisAbsolute_ = value;
        return this;
      }
      public Builder ClearAverageLateralAxisAbsolute() {
        PrepareBuilder();
        result.hasAverageLateralAxisAbsolute = false;
        result.averageLateralAxisAbsolute_ = 0;
        return this;
      }
    }
    static mxt1xx_u_additional_data_journey_deltas_accelerometer_delta() {
      object.ReferenceEquals(global::maxtrack.pb.mxt1xx.Mxt1Xx.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mxt1xx_u_additional_data_journey_deltas : pb::GeneratedMessage<mxt1xx_u_additional_data_journey_deltas, mxt1xx_u_additional_data_journey_deltas.Builder> {
    private mxt1xx_u_additional_data_journey_deltas() { }
    private static readonly mxt1xx_u_additional_data_journey_deltas defaultInstance = new mxt1xx_u_additional_data_journey_deltas().MakeReadOnly();
    private static readonly string[] _mxt1XxUAdditionalDataJourneyDeltasFieldNames = new string[] { "accelerometer_delta", "location_delta", "mean_journey_timer_delta", "reason", "rpm_delta", "speed_delta", "version" };
    private static readonly uint[] _mxt1XxUAdditionalDataJourneyDeltasFieldTags = new uint[] { 58, 50, 42, 16, 26, 34, 8 };
    public static mxt1xx_u_additional_data_journey_deltas DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mxt1xx_u_additional_data_journey_deltas DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mxt1xx_u_additional_data_journey_deltas ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_journey_deltas__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mxt1xx_u_additional_data_journey_deltas, mxt1xx_u_additional_data_journey_deltas.Builder> InternalFieldAccessors {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_journey_deltas__FieldAccessorTable; }
    }
    
    public const int VersionFieldNumber = 1;
    private bool hasVersion;
    private uint version_;
    public bool HasVersion {
      get { return hasVersion; }
    }
    [global::System.CLSCompliant(false)]
    public uint Version {
      get { return version_; }
    }
    
    public const int ReasonFieldNumber = 2;
    private bool hasReason;
    private uint reason_;
    public bool HasReason {
      get { return hasReason; }
    }
    [global::System.CLSCompliant(false)]
    public uint Reason {
      get { return reason_; }
    }
    
    public const int RpmDeltaFieldNumber = 3;
    private bool hasRpmDelta;
    private global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas_rpm_delta rpmDelta_;
    public bool HasRpmDelta {
      get { return hasRpmDelta; }
    }
    public global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas_rpm_delta RpmDelta {
      get { return rpmDelta_ ?? global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas_rpm_delta.DefaultInstance; }
    }
    
    public const int SpeedDeltaFieldNumber = 4;
    private bool hasSpeedDelta;
    private global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas_speed_delta speedDelta_;
    public bool HasSpeedDelta {
      get { return hasSpeedDelta; }
    }
    public global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas_speed_delta SpeedDelta {
      get { return speedDelta_ ?? global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas_speed_delta.DefaultInstance; }
    }
    
    public const int MeanJourneyTimerDeltaFieldNumber = 5;
    private bool hasMeanJourneyTimerDelta;
    private global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas_mean_journey_timer_delta meanJourneyTimerDelta_;
    public bool HasMeanJourneyTimerDelta {
      get { return hasMeanJourneyTimerDelta; }
    }
    public global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas_mean_journey_timer_delta MeanJourneyTimerDelta {
      get { return meanJourneyTimerDelta_ ?? global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas_mean_journey_timer_delta.DefaultInstance; }
    }
    
    public const int LocationDeltaFieldNumber = 6;
    private bool hasLocationDelta;
    private global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas_location_delta locationDelta_;
    public bool HasLocationDelta {
      get { return hasLocationDelta; }
    }
    public global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas_location_delta LocationDelta {
      get { return locationDelta_ ?? global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas_location_delta.DefaultInstance; }
    }
    
    public const int AccelerometerDeltaFieldNumber = 7;
    private bool hasAccelerometerDelta;
    private global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas_accelerometer_delta accelerometerDelta_;
    public bool HasAccelerometerDelta {
      get { return hasAccelerometerDelta; }
    }
    public global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas_accelerometer_delta AccelerometerDelta {
      get { return accelerometerDelta_ ?? global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas_accelerometer_delta.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasVersion) return false;
        if (!hasReason) return false;
        if (HasRpmDelta) {
          if (!RpmDelta.IsInitialized) return false;
        }
        if (HasSpeedDelta) {
          if (!SpeedDelta.IsInitialized) return false;
        }
        if (HasMeanJourneyTimerDelta) {
          if (!MeanJourneyTimerDelta.IsInitialized) return false;
        }
        if (HasLocationDelta) {
          if (!LocationDelta.IsInitialized) return false;
        }
        if (HasAccelerometerDelta) {
          if (!AccelerometerDelta.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mxt1XxUAdditionalDataJourneyDeltasFieldNames;
      if (hasVersion) {
        output.WriteUInt32(1, field_names[6], Version);
      }
      if (hasReason) {
        output.WriteUInt32(2, field_names[3], Reason);
      }
      if (hasRpmDelta) {
        output.WriteMessage(3, field_names[4], RpmDelta);
      }
      if (hasSpeedDelta) {
        output.WriteMessage(4, field_names[5], SpeedDelta);
      }
      if (hasMeanJourneyTimerDelta) {
        output.WriteMessage(5, field_names[2], MeanJourneyTimerDelta);
      }
      if (hasLocationDelta) {
        output.WriteMessage(6, field_names[1], LocationDelta);
      }
      if (hasAccelerometerDelta) {
        output.WriteMessage(7, field_names[0], AccelerometerDelta);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasVersion) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, Version);
      }
      if (hasReason) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, Reason);
      }
      if (hasRpmDelta) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, RpmDelta);
      }
      if (hasSpeedDelta) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, SpeedDelta);
      }
      if (hasMeanJourneyTimerDelta) {
        size += pb::CodedOutputStream.ComputeMessageSize(5, MeanJourneyTimerDelta);
      }
      if (hasLocationDelta) {
        size += pb::CodedOutputStream.ComputeMessageSize(6, LocationDelta);
      }
      if (hasAccelerometerDelta) {
        size += pb::CodedOutputStream.ComputeMessageSize(7, AccelerometerDelta);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mxt1xx_u_additional_data_journey_deltas ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_journey_deltas ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_journey_deltas ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_journey_deltas ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_journey_deltas ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_journey_deltas ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_journey_deltas ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mxt1xx_u_additional_data_journey_deltas ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mxt1xx_u_additional_data_journey_deltas ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_journey_deltas ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mxt1xx_u_additional_data_journey_deltas MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mxt1xx_u_additional_data_journey_deltas prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mxt1xx_u_additional_data_journey_deltas, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mxt1xx_u_additional_data_journey_deltas cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mxt1xx_u_additional_data_journey_deltas result;
      
      private mxt1xx_u_additional_data_journey_deltas PrepareBuilder() {
        if (resultIsReadOnly) {
          mxt1xx_u_additional_data_journey_deltas original = result;
          result = new mxt1xx_u_additional_data_journey_deltas();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mxt1xx_u_additional_data_journey_deltas MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas.Descriptor; }
      }
      
      public override mxt1xx_u_additional_data_journey_deltas DefaultInstanceForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas.DefaultInstance; }
      }
      
      public override mxt1xx_u_additional_data_journey_deltas BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mxt1xx_u_additional_data_journey_deltas) {
          return MergeFrom((mxt1xx_u_additional_data_journey_deltas) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mxt1xx_u_additional_data_journey_deltas other) {
        if (other == global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasVersion) {
          Version = other.Version;
        }
        if (other.HasReason) {
          Reason = other.Reason;
        }
        if (other.HasRpmDelta) {
          MergeRpmDelta(other.RpmDelta);
        }
        if (other.HasSpeedDelta) {
          MergeSpeedDelta(other.SpeedDelta);
        }
        if (other.HasMeanJourneyTimerDelta) {
          MergeMeanJourneyTimerDelta(other.MeanJourneyTimerDelta);
        }
        if (other.HasLocationDelta) {
          MergeLocationDelta(other.LocationDelta);
        }
        if (other.HasAccelerometerDelta) {
          MergeAccelerometerDelta(other.AccelerometerDelta);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mxt1XxUAdditionalDataJourneyDeltasFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mxt1XxUAdditionalDataJourneyDeltasFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasVersion = input.ReadUInt32(ref result.version_);
              break;
            }
            case 16: {
              result.hasReason = input.ReadUInt32(ref result.reason_);
              break;
            }
            case 26: {
              global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas_rpm_delta.Builder subBuilder = global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas_rpm_delta.CreateBuilder();
              if (result.hasRpmDelta) {
                subBuilder.MergeFrom(RpmDelta);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              RpmDelta = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas_speed_delta.Builder subBuilder = global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas_speed_delta.CreateBuilder();
              if (result.hasSpeedDelta) {
                subBuilder.MergeFrom(SpeedDelta);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SpeedDelta = subBuilder.BuildPartial();
              break;
            }
            case 42: {
              global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas_mean_journey_timer_delta.Builder subBuilder = global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas_mean_journey_timer_delta.CreateBuilder();
              if (result.hasMeanJourneyTimerDelta) {
                subBuilder.MergeFrom(MeanJourneyTimerDelta);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              MeanJourneyTimerDelta = subBuilder.BuildPartial();
              break;
            }
            case 50: {
              global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas_location_delta.Builder subBuilder = global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas_location_delta.CreateBuilder();
              if (result.hasLocationDelta) {
                subBuilder.MergeFrom(LocationDelta);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              LocationDelta = subBuilder.BuildPartial();
              break;
            }
            case 58: {
              global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas_accelerometer_delta.Builder subBuilder = global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas_accelerometer_delta.CreateBuilder();
              if (result.hasAccelerometerDelta) {
                subBuilder.MergeFrom(AccelerometerDelta);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AccelerometerDelta = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasVersion {
        get { return result.hasVersion; }
      }
      [global::System.CLSCompliant(false)]
      public uint Version {
        get { return result.Version; }
        set { SetVersion(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetVersion(uint value) {
        PrepareBuilder();
        result.hasVersion = true;
        result.version_ = value;
        return this;
      }
      public Builder ClearVersion() {
        PrepareBuilder();
        result.hasVersion = false;
        result.version_ = 0;
        return this;
      }
      
      public bool HasReason {
        get { return result.hasReason; }
      }
      [global::System.CLSCompliant(false)]
      public uint Reason {
        get { return result.Reason; }
        set { SetReason(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetReason(uint value) {
        PrepareBuilder();
        result.hasReason = true;
        result.reason_ = value;
        return this;
      }
      public Builder ClearReason() {
        PrepareBuilder();
        result.hasReason = false;
        result.reason_ = 0;
        return this;
      }
      
      public bool HasRpmDelta {
       get { return result.hasRpmDelta; }
      }
      public global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas_rpm_delta RpmDelta {
        get { return result.RpmDelta; }
        set { SetRpmDelta(value); }
      }
      public Builder SetRpmDelta(global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas_rpm_delta value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRpmDelta = true;
        result.rpmDelta_ = value;
        return this;
      }
      public Builder SetRpmDelta(global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas_rpm_delta.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasRpmDelta = true;
        result.rpmDelta_ = builderForValue.Build();
        return this;
      }
      public Builder MergeRpmDelta(global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas_rpm_delta value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasRpmDelta &&
            result.rpmDelta_ != global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas_rpm_delta.DefaultInstance) {
            result.rpmDelta_ = global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas_rpm_delta.CreateBuilder(result.rpmDelta_).MergeFrom(value).BuildPartial();
        } else {
          result.rpmDelta_ = value;
        }
        result.hasRpmDelta = true;
        return this;
      }
      public Builder ClearRpmDelta() {
        PrepareBuilder();
        result.hasRpmDelta = false;
        result.rpmDelta_ = null;
        return this;
      }
      
      public bool HasSpeedDelta {
       get { return result.hasSpeedDelta; }
      }
      public global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas_speed_delta SpeedDelta {
        get { return result.SpeedDelta; }
        set { SetSpeedDelta(value); }
      }
      public Builder SetSpeedDelta(global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas_speed_delta value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSpeedDelta = true;
        result.speedDelta_ = value;
        return this;
      }
      public Builder SetSpeedDelta(global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas_speed_delta.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSpeedDelta = true;
        result.speedDelta_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSpeedDelta(global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas_speed_delta value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSpeedDelta &&
            result.speedDelta_ != global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas_speed_delta.DefaultInstance) {
            result.speedDelta_ = global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas_speed_delta.CreateBuilder(result.speedDelta_).MergeFrom(value).BuildPartial();
        } else {
          result.speedDelta_ = value;
        }
        result.hasSpeedDelta = true;
        return this;
      }
      public Builder ClearSpeedDelta() {
        PrepareBuilder();
        result.hasSpeedDelta = false;
        result.speedDelta_ = null;
        return this;
      }
      
      public bool HasMeanJourneyTimerDelta {
       get { return result.hasMeanJourneyTimerDelta; }
      }
      public global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas_mean_journey_timer_delta MeanJourneyTimerDelta {
        get { return result.MeanJourneyTimerDelta; }
        set { SetMeanJourneyTimerDelta(value); }
      }
      public Builder SetMeanJourneyTimerDelta(global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas_mean_journey_timer_delta value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMeanJourneyTimerDelta = true;
        result.meanJourneyTimerDelta_ = value;
        return this;
      }
      public Builder SetMeanJourneyTimerDelta(global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas_mean_journey_timer_delta.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasMeanJourneyTimerDelta = true;
        result.meanJourneyTimerDelta_ = builderForValue.Build();
        return this;
      }
      public Builder MergeMeanJourneyTimerDelta(global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas_mean_journey_timer_delta value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasMeanJourneyTimerDelta &&
            result.meanJourneyTimerDelta_ != global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas_mean_journey_timer_delta.DefaultInstance) {
            result.meanJourneyTimerDelta_ = global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas_mean_journey_timer_delta.CreateBuilder(result.meanJourneyTimerDelta_).MergeFrom(value).BuildPartial();
        } else {
          result.meanJourneyTimerDelta_ = value;
        }
        result.hasMeanJourneyTimerDelta = true;
        return this;
      }
      public Builder ClearMeanJourneyTimerDelta() {
        PrepareBuilder();
        result.hasMeanJourneyTimerDelta = false;
        result.meanJourneyTimerDelta_ = null;
        return this;
      }
      
      public bool HasLocationDelta {
       get { return result.hasLocationDelta; }
      }
      public global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas_location_delta LocationDelta {
        get { return result.LocationDelta; }
        set { SetLocationDelta(value); }
      }
      public Builder SetLocationDelta(global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas_location_delta value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLocationDelta = true;
        result.locationDelta_ = value;
        return this;
      }
      public Builder SetLocationDelta(global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas_location_delta.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasLocationDelta = true;
        result.locationDelta_ = builderForValue.Build();
        return this;
      }
      public Builder MergeLocationDelta(global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas_location_delta value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasLocationDelta &&
            result.locationDelta_ != global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas_location_delta.DefaultInstance) {
            result.locationDelta_ = global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas_location_delta.CreateBuilder(result.locationDelta_).MergeFrom(value).BuildPartial();
        } else {
          result.locationDelta_ = value;
        }
        result.hasLocationDelta = true;
        return this;
      }
      public Builder ClearLocationDelta() {
        PrepareBuilder();
        result.hasLocationDelta = false;
        result.locationDelta_ = null;
        return this;
      }
      
      public bool HasAccelerometerDelta {
       get { return result.hasAccelerometerDelta; }
      }
      public global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas_accelerometer_delta AccelerometerDelta {
        get { return result.AccelerometerDelta; }
        set { SetAccelerometerDelta(value); }
      }
      public Builder SetAccelerometerDelta(global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas_accelerometer_delta value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAccelerometerDelta = true;
        result.accelerometerDelta_ = value;
        return this;
      }
      public Builder SetAccelerometerDelta(global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas_accelerometer_delta.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAccelerometerDelta = true;
        result.accelerometerDelta_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAccelerometerDelta(global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas_accelerometer_delta value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAccelerometerDelta &&
            result.accelerometerDelta_ != global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas_accelerometer_delta.DefaultInstance) {
            result.accelerometerDelta_ = global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas_accelerometer_delta.CreateBuilder(result.accelerometerDelta_).MergeFrom(value).BuildPartial();
        } else {
          result.accelerometerDelta_ = value;
        }
        result.hasAccelerometerDelta = true;
        return this;
      }
      public Builder ClearAccelerometerDelta() {
        PrepareBuilder();
        result.hasAccelerometerDelta = false;
        result.accelerometerDelta_ = null;
        return this;
      }
    }
    static mxt1xx_u_additional_data_journey_deltas() {
      object.ReferenceEquals(global::maxtrack.pb.mxt1xx.Mxt1Xx.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mxt1xx_u_additional_data_crash_reconstruction_second : pb::GeneratedMessage<mxt1xx_u_additional_data_crash_reconstruction_second, mxt1xx_u_additional_data_crash_reconstruction_second.Builder> {
    private mxt1xx_u_additional_data_crash_reconstruction_second() { }
    private static readonly mxt1xx_u_additional_data_crash_reconstruction_second defaultInstance = new mxt1xx_u_additional_data_crash_reconstruction_second().MakeReadOnly();
    private static readonly string[] _mxt1XxUAdditionalDataCrashReconstructionSecondFieldNames = new string[] { "lateral_axis_absolute", "lateral_axis_left", "lateral_axis_right", "rolling_axis_back", "rolling_axis_front", "rpm", "speed", "vertical_axis_negative", "vertical_axis_positive" };
    private static readonly uint[] _mxt1XxUAdditionalDataCrashReconstructionSecondFieldTags = new uint[] { 40, 32, 24, 16, 8, 72, 64, 56, 48 };
    public static mxt1xx_u_additional_data_crash_reconstruction_second DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mxt1xx_u_additional_data_crash_reconstruction_second DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mxt1xx_u_additional_data_crash_reconstruction_second ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_crash_reconstruction_second__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mxt1xx_u_additional_data_crash_reconstruction_second, mxt1xx_u_additional_data_crash_reconstruction_second.Builder> InternalFieldAccessors {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_crash_reconstruction_second__FieldAccessorTable; }
    }
    
    public const int RollingAxisFrontFieldNumber = 1;
    private bool hasRollingAxisFront;
    private uint rollingAxisFront_;
    public bool HasRollingAxisFront {
      get { return hasRollingAxisFront; }
    }
    [global::System.CLSCompliant(false)]
    public uint RollingAxisFront {
      get { return rollingAxisFront_; }
    }
    
    public const int RollingAxisBackFieldNumber = 2;
    private bool hasRollingAxisBack;
    private uint rollingAxisBack_;
    public bool HasRollingAxisBack {
      get { return hasRollingAxisBack; }
    }
    [global::System.CLSCompliant(false)]
    public uint RollingAxisBack {
      get { return rollingAxisBack_; }
    }
    
    public const int LateralAxisRightFieldNumber = 3;
    private bool hasLateralAxisRight;
    private uint lateralAxisRight_;
    public bool HasLateralAxisRight {
      get { return hasLateralAxisRight; }
    }
    [global::System.CLSCompliant(false)]
    public uint LateralAxisRight {
      get { return lateralAxisRight_; }
    }
    
    public const int LateralAxisLeftFieldNumber = 4;
    private bool hasLateralAxisLeft;
    private uint lateralAxisLeft_;
    public bool HasLateralAxisLeft {
      get { return hasLateralAxisLeft; }
    }
    [global::System.CLSCompliant(false)]
    public uint LateralAxisLeft {
      get { return lateralAxisLeft_; }
    }
    
    public const int LateralAxisAbsoluteFieldNumber = 5;
    private bool hasLateralAxisAbsolute;
    private uint lateralAxisAbsolute_;
    public bool HasLateralAxisAbsolute {
      get { return hasLateralAxisAbsolute; }
    }
    [global::System.CLSCompliant(false)]
    public uint LateralAxisAbsolute {
      get { return lateralAxisAbsolute_; }
    }
    
    public const int VerticalAxisPositiveFieldNumber = 6;
    private bool hasVerticalAxisPositive;
    private uint verticalAxisPositive_;
    public bool HasVerticalAxisPositive {
      get { return hasVerticalAxisPositive; }
    }
    [global::System.CLSCompliant(false)]
    public uint VerticalAxisPositive {
      get { return verticalAxisPositive_; }
    }
    
    public const int VerticalAxisNegativeFieldNumber = 7;
    private bool hasVerticalAxisNegative;
    private int verticalAxisNegative_;
    public bool HasVerticalAxisNegative {
      get { return hasVerticalAxisNegative; }
    }
    public int VerticalAxisNegative {
      get { return verticalAxisNegative_; }
    }
    
    public const int SpeedFieldNumber = 8;
    private bool hasSpeed;
    private uint speed_;
    public bool HasSpeed {
      get { return hasSpeed; }
    }
    [global::System.CLSCompliant(false)]
    public uint Speed {
      get { return speed_; }
    }
    
    public const int RpmFieldNumber = 9;
    private bool hasRpm;
    private uint rpm_;
    public bool HasRpm {
      get { return hasRpm; }
    }
    [global::System.CLSCompliant(false)]
    public uint Rpm {
      get { return rpm_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mxt1XxUAdditionalDataCrashReconstructionSecondFieldNames;
      if (hasRollingAxisFront) {
        output.WriteUInt32(1, field_names[4], RollingAxisFront);
      }
      if (hasRollingAxisBack) {
        output.WriteUInt32(2, field_names[3], RollingAxisBack);
      }
      if (hasLateralAxisRight) {
        output.WriteUInt32(3, field_names[2], LateralAxisRight);
      }
      if (hasLateralAxisLeft) {
        output.WriteUInt32(4, field_names[1], LateralAxisLeft);
      }
      if (hasLateralAxisAbsolute) {
        output.WriteUInt32(5, field_names[0], LateralAxisAbsolute);
      }
      if (hasVerticalAxisPositive) {
        output.WriteUInt32(6, field_names[8], VerticalAxisPositive);
      }
      if (hasVerticalAxisNegative) {
        output.WriteSInt32(7, field_names[7], VerticalAxisNegative);
      }
      if (hasSpeed) {
        output.WriteUInt32(8, field_names[6], Speed);
      }
      if (hasRpm) {
        output.WriteUInt32(9, field_names[5], Rpm);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasRollingAxisFront) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, RollingAxisFront);
      }
      if (hasRollingAxisBack) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, RollingAxisBack);
      }
      if (hasLateralAxisRight) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, LateralAxisRight);
      }
      if (hasLateralAxisLeft) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, LateralAxisLeft);
      }
      if (hasLateralAxisAbsolute) {
        size += pb::CodedOutputStream.ComputeUInt32Size(5, LateralAxisAbsolute);
      }
      if (hasVerticalAxisPositive) {
        size += pb::CodedOutputStream.ComputeUInt32Size(6, VerticalAxisPositive);
      }
      if (hasVerticalAxisNegative) {
        size += pb::CodedOutputStream.ComputeSInt32Size(7, VerticalAxisNegative);
      }
      if (hasSpeed) {
        size += pb::CodedOutputStream.ComputeUInt32Size(8, Speed);
      }
      if (hasRpm) {
        size += pb::CodedOutputStream.ComputeUInt32Size(9, Rpm);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mxt1xx_u_additional_data_crash_reconstruction_second ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_crash_reconstruction_second ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_crash_reconstruction_second ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_crash_reconstruction_second ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_crash_reconstruction_second ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_crash_reconstruction_second ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_crash_reconstruction_second ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mxt1xx_u_additional_data_crash_reconstruction_second ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mxt1xx_u_additional_data_crash_reconstruction_second ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_crash_reconstruction_second ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mxt1xx_u_additional_data_crash_reconstruction_second MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mxt1xx_u_additional_data_crash_reconstruction_second prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mxt1xx_u_additional_data_crash_reconstruction_second, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mxt1xx_u_additional_data_crash_reconstruction_second cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mxt1xx_u_additional_data_crash_reconstruction_second result;
      
      private mxt1xx_u_additional_data_crash_reconstruction_second PrepareBuilder() {
        if (resultIsReadOnly) {
          mxt1xx_u_additional_data_crash_reconstruction_second original = result;
          result = new mxt1xx_u_additional_data_crash_reconstruction_second();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mxt1xx_u_additional_data_crash_reconstruction_second MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_crash_reconstruction_second.Descriptor; }
      }
      
      public override mxt1xx_u_additional_data_crash_reconstruction_second DefaultInstanceForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_crash_reconstruction_second.DefaultInstance; }
      }
      
      public override mxt1xx_u_additional_data_crash_reconstruction_second BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mxt1xx_u_additional_data_crash_reconstruction_second) {
          return MergeFrom((mxt1xx_u_additional_data_crash_reconstruction_second) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mxt1xx_u_additional_data_crash_reconstruction_second other) {
        if (other == global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_crash_reconstruction_second.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasRollingAxisFront) {
          RollingAxisFront = other.RollingAxisFront;
        }
        if (other.HasRollingAxisBack) {
          RollingAxisBack = other.RollingAxisBack;
        }
        if (other.HasLateralAxisRight) {
          LateralAxisRight = other.LateralAxisRight;
        }
        if (other.HasLateralAxisLeft) {
          LateralAxisLeft = other.LateralAxisLeft;
        }
        if (other.HasLateralAxisAbsolute) {
          LateralAxisAbsolute = other.LateralAxisAbsolute;
        }
        if (other.HasVerticalAxisPositive) {
          VerticalAxisPositive = other.VerticalAxisPositive;
        }
        if (other.HasVerticalAxisNegative) {
          VerticalAxisNegative = other.VerticalAxisNegative;
        }
        if (other.HasSpeed) {
          Speed = other.Speed;
        }
        if (other.HasRpm) {
          Rpm = other.Rpm;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mxt1XxUAdditionalDataCrashReconstructionSecondFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mxt1XxUAdditionalDataCrashReconstructionSecondFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasRollingAxisFront = input.ReadUInt32(ref result.rollingAxisFront_);
              break;
            }
            case 16: {
              result.hasRollingAxisBack = input.ReadUInt32(ref result.rollingAxisBack_);
              break;
            }
            case 24: {
              result.hasLateralAxisRight = input.ReadUInt32(ref result.lateralAxisRight_);
              break;
            }
            case 32: {
              result.hasLateralAxisLeft = input.ReadUInt32(ref result.lateralAxisLeft_);
              break;
            }
            case 40: {
              result.hasLateralAxisAbsolute = input.ReadUInt32(ref result.lateralAxisAbsolute_);
              break;
            }
            case 48: {
              result.hasVerticalAxisPositive = input.ReadUInt32(ref result.verticalAxisPositive_);
              break;
            }
            case 56: {
              result.hasVerticalAxisNegative = input.ReadSInt32(ref result.verticalAxisNegative_);
              break;
            }
            case 64: {
              result.hasSpeed = input.ReadUInt32(ref result.speed_);
              break;
            }
            case 72: {
              result.hasRpm = input.ReadUInt32(ref result.rpm_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasRollingAxisFront {
        get { return result.hasRollingAxisFront; }
      }
      [global::System.CLSCompliant(false)]
      public uint RollingAxisFront {
        get { return result.RollingAxisFront; }
        set { SetRollingAxisFront(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetRollingAxisFront(uint value) {
        PrepareBuilder();
        result.hasRollingAxisFront = true;
        result.rollingAxisFront_ = value;
        return this;
      }
      public Builder ClearRollingAxisFront() {
        PrepareBuilder();
        result.hasRollingAxisFront = false;
        result.rollingAxisFront_ = 0;
        return this;
      }
      
      public bool HasRollingAxisBack {
        get { return result.hasRollingAxisBack; }
      }
      [global::System.CLSCompliant(false)]
      public uint RollingAxisBack {
        get { return result.RollingAxisBack; }
        set { SetRollingAxisBack(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetRollingAxisBack(uint value) {
        PrepareBuilder();
        result.hasRollingAxisBack = true;
        result.rollingAxisBack_ = value;
        return this;
      }
      public Builder ClearRollingAxisBack() {
        PrepareBuilder();
        result.hasRollingAxisBack = false;
        result.rollingAxisBack_ = 0;
        return this;
      }
      
      public bool HasLateralAxisRight {
        get { return result.hasLateralAxisRight; }
      }
      [global::System.CLSCompliant(false)]
      public uint LateralAxisRight {
        get { return result.LateralAxisRight; }
        set { SetLateralAxisRight(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetLateralAxisRight(uint value) {
        PrepareBuilder();
        result.hasLateralAxisRight = true;
        result.lateralAxisRight_ = value;
        return this;
      }
      public Builder ClearLateralAxisRight() {
        PrepareBuilder();
        result.hasLateralAxisRight = false;
        result.lateralAxisRight_ = 0;
        return this;
      }
      
      public bool HasLateralAxisLeft {
        get { return result.hasLateralAxisLeft; }
      }
      [global::System.CLSCompliant(false)]
      public uint LateralAxisLeft {
        get { return result.LateralAxisLeft; }
        set { SetLateralAxisLeft(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetLateralAxisLeft(uint value) {
        PrepareBuilder();
        result.hasLateralAxisLeft = true;
        result.lateralAxisLeft_ = value;
        return this;
      }
      public Builder ClearLateralAxisLeft() {
        PrepareBuilder();
        result.hasLateralAxisLeft = false;
        result.lateralAxisLeft_ = 0;
        return this;
      }
      
      public bool HasLateralAxisAbsolute {
        get { return result.hasLateralAxisAbsolute; }
      }
      [global::System.CLSCompliant(false)]
      public uint LateralAxisAbsolute {
        get { return result.LateralAxisAbsolute; }
        set { SetLateralAxisAbsolute(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetLateralAxisAbsolute(uint value) {
        PrepareBuilder();
        result.hasLateralAxisAbsolute = true;
        result.lateralAxisAbsolute_ = value;
        return this;
      }
      public Builder ClearLateralAxisAbsolute() {
        PrepareBuilder();
        result.hasLateralAxisAbsolute = false;
        result.lateralAxisAbsolute_ = 0;
        return this;
      }
      
      public bool HasVerticalAxisPositive {
        get { return result.hasVerticalAxisPositive; }
      }
      [global::System.CLSCompliant(false)]
      public uint VerticalAxisPositive {
        get { return result.VerticalAxisPositive; }
        set { SetVerticalAxisPositive(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetVerticalAxisPositive(uint value) {
        PrepareBuilder();
        result.hasVerticalAxisPositive = true;
        result.verticalAxisPositive_ = value;
        return this;
      }
      public Builder ClearVerticalAxisPositive() {
        PrepareBuilder();
        result.hasVerticalAxisPositive = false;
        result.verticalAxisPositive_ = 0;
        return this;
      }
      
      public bool HasVerticalAxisNegative {
        get { return result.hasVerticalAxisNegative; }
      }
      public int VerticalAxisNegative {
        get { return result.VerticalAxisNegative; }
        set { SetVerticalAxisNegative(value); }
      }
      public Builder SetVerticalAxisNegative(int value) {
        PrepareBuilder();
        result.hasVerticalAxisNegative = true;
        result.verticalAxisNegative_ = value;
        return this;
      }
      public Builder ClearVerticalAxisNegative() {
        PrepareBuilder();
        result.hasVerticalAxisNegative = false;
        result.verticalAxisNegative_ = 0;
        return this;
      }
      
      public bool HasSpeed {
        get { return result.hasSpeed; }
      }
      [global::System.CLSCompliant(false)]
      public uint Speed {
        get { return result.Speed; }
        set { SetSpeed(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSpeed(uint value) {
        PrepareBuilder();
        result.hasSpeed = true;
        result.speed_ = value;
        return this;
      }
      public Builder ClearSpeed() {
        PrepareBuilder();
        result.hasSpeed = false;
        result.speed_ = 0;
        return this;
      }
      
      public bool HasRpm {
        get { return result.hasRpm; }
      }
      [global::System.CLSCompliant(false)]
      public uint Rpm {
        get { return result.Rpm; }
        set { SetRpm(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetRpm(uint value) {
        PrepareBuilder();
        result.hasRpm = true;
        result.rpm_ = value;
        return this;
      }
      public Builder ClearRpm() {
        PrepareBuilder();
        result.hasRpm = false;
        result.rpm_ = 0;
        return this;
      }
    }
    static mxt1xx_u_additional_data_crash_reconstruction_second() {
      object.ReferenceEquals(global::maxtrack.pb.mxt1xx.Mxt1Xx.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mxt1xx_u_additional_data_crash_reconstruction : pb::GeneratedMessage<mxt1xx_u_additional_data_crash_reconstruction, mxt1xx_u_additional_data_crash_reconstruction.Builder> {
    private mxt1xx_u_additional_data_crash_reconstruction() { }
    private static readonly mxt1xx_u_additional_data_crash_reconstruction defaultInstance = new mxt1xx_u_additional_data_crash_reconstruction().MakeReadOnly();
    private static readonly string[] _mxt1XxUAdditionalDataCrashReconstructionFieldNames = new string[] { "seconds" };
    private static readonly uint[] _mxt1XxUAdditionalDataCrashReconstructionFieldTags = new uint[] { 10 };
    public static mxt1xx_u_additional_data_crash_reconstruction DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mxt1xx_u_additional_data_crash_reconstruction DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mxt1xx_u_additional_data_crash_reconstruction ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_crash_reconstruction__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mxt1xx_u_additional_data_crash_reconstruction, mxt1xx_u_additional_data_crash_reconstruction.Builder> InternalFieldAccessors {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_crash_reconstruction__FieldAccessorTable; }
    }
    
    public const int SecondsFieldNumber = 1;
    private pbc::PopsicleList<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_crash_reconstruction_second> seconds_ = new pbc::PopsicleList<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_crash_reconstruction_second>();
    public scg::IList<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_crash_reconstruction_second> SecondsList {
      get { return seconds_; }
    }
    public int SecondsCount {
      get { return seconds_.Count; }
    }
    public global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_crash_reconstruction_second GetSeconds(int index) {
      return seconds_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mxt1XxUAdditionalDataCrashReconstructionFieldNames;
      if (seconds_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], seconds_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      foreach (global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_crash_reconstruction_second element in SecondsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mxt1xx_u_additional_data_crash_reconstruction ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_crash_reconstruction ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_crash_reconstruction ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_crash_reconstruction ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_crash_reconstruction ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_crash_reconstruction ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_crash_reconstruction ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mxt1xx_u_additional_data_crash_reconstruction ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mxt1xx_u_additional_data_crash_reconstruction ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_crash_reconstruction ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mxt1xx_u_additional_data_crash_reconstruction MakeReadOnly() {
      seconds_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mxt1xx_u_additional_data_crash_reconstruction prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mxt1xx_u_additional_data_crash_reconstruction, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mxt1xx_u_additional_data_crash_reconstruction cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mxt1xx_u_additional_data_crash_reconstruction result;
      
      private mxt1xx_u_additional_data_crash_reconstruction PrepareBuilder() {
        if (resultIsReadOnly) {
          mxt1xx_u_additional_data_crash_reconstruction original = result;
          result = new mxt1xx_u_additional_data_crash_reconstruction();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mxt1xx_u_additional_data_crash_reconstruction MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_crash_reconstruction.Descriptor; }
      }
      
      public override mxt1xx_u_additional_data_crash_reconstruction DefaultInstanceForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_crash_reconstruction.DefaultInstance; }
      }
      
      public override mxt1xx_u_additional_data_crash_reconstruction BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mxt1xx_u_additional_data_crash_reconstruction) {
          return MergeFrom((mxt1xx_u_additional_data_crash_reconstruction) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mxt1xx_u_additional_data_crash_reconstruction other) {
        if (other == global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_crash_reconstruction.DefaultInstance) return this;
        PrepareBuilder();
        if (other.seconds_.Count != 0) {
          result.seconds_.Add(other.seconds_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mxt1XxUAdditionalDataCrashReconstructionFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mxt1XxUAdditionalDataCrashReconstructionFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.seconds_, global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_crash_reconstruction_second.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_crash_reconstruction_second> SecondsList {
        get { return PrepareBuilder().seconds_; }
      }
      public int SecondsCount {
        get { return result.SecondsCount; }
      }
      public global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_crash_reconstruction_second GetSeconds(int index) {
        return result.GetSeconds(index);
      }
      public Builder SetSeconds(int index, global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_crash_reconstruction_second value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.seconds_[index] = value;
        return this;
      }
      public Builder SetSeconds(int index, global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_crash_reconstruction_second.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.seconds_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddSeconds(global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_crash_reconstruction_second value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.seconds_.Add(value);
        return this;
      }
      public Builder AddSeconds(global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_crash_reconstruction_second.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.seconds_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeSeconds(scg::IEnumerable<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_crash_reconstruction_second> values) {
        PrepareBuilder();
        result.seconds_.Add(values);
        return this;
      }
      public Builder ClearSeconds() {
        PrepareBuilder();
        result.seconds_.Clear();
        return this;
      }
    }
    static mxt1xx_u_additional_data_crash_reconstruction() {
      object.ReferenceEquals(global::maxtrack.pb.mxt1xx.Mxt1Xx.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mxt1xx_u_additional_data_route_reconstruction_section : pb::GeneratedMessage<mxt1xx_u_additional_data_route_reconstruction_section, mxt1xx_u_additional_data_route_reconstruction_section.Builder> {
    private mxt1xx_u_additional_data_route_reconstruction_section() { }
    private static readonly mxt1xx_u_additional_data_route_reconstruction_section defaultInstance = new mxt1xx_u_additional_data_route_reconstruction_section().MakeReadOnly();
    private static readonly string[] _mxt1XxUAdditionalDataRouteReconstructionSectionFieldNames = new string[] { "latitude", "longitude", "speed" };
    private static readonly uint[] _mxt1XxUAdditionalDataRouteReconstructionSectionFieldTags = new uint[] { 9, 17, 24 };
    public static mxt1xx_u_additional_data_route_reconstruction_section DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mxt1xx_u_additional_data_route_reconstruction_section DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mxt1xx_u_additional_data_route_reconstruction_section ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_route_reconstruction_section__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mxt1xx_u_additional_data_route_reconstruction_section, mxt1xx_u_additional_data_route_reconstruction_section.Builder> InternalFieldAccessors {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_route_reconstruction_section__FieldAccessorTable; }
    }
    
    public const int LatitudeFieldNumber = 1;
    private bool hasLatitude;
    private double latitude_;
    public bool HasLatitude {
      get { return hasLatitude; }
    }
    public double Latitude {
      get { return latitude_; }
    }
    
    public const int LongitudeFieldNumber = 2;
    private bool hasLongitude;
    private double longitude_;
    public bool HasLongitude {
      get { return hasLongitude; }
    }
    public double Longitude {
      get { return longitude_; }
    }
    
    public const int SpeedFieldNumber = 3;
    private bool hasSpeed;
    private uint speed_;
    public bool HasSpeed {
      get { return hasSpeed; }
    }
    [global::System.CLSCompliant(false)]
    public uint Speed {
      get { return speed_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasLatitude) return false;
        if (!hasLongitude) return false;
        if (!hasSpeed) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mxt1XxUAdditionalDataRouteReconstructionSectionFieldNames;
      if (hasLatitude) {
        output.WriteDouble(1, field_names[0], Latitude);
      }
      if (hasLongitude) {
        output.WriteDouble(2, field_names[1], Longitude);
      }
      if (hasSpeed) {
        output.WriteUInt32(3, field_names[2], Speed);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasLatitude) {
        size += pb::CodedOutputStream.ComputeDoubleSize(1, Latitude);
      }
      if (hasLongitude) {
        size += pb::CodedOutputStream.ComputeDoubleSize(2, Longitude);
      }
      if (hasSpeed) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, Speed);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mxt1xx_u_additional_data_route_reconstruction_section ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_route_reconstruction_section ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_route_reconstruction_section ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_route_reconstruction_section ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_route_reconstruction_section ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_route_reconstruction_section ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_route_reconstruction_section ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mxt1xx_u_additional_data_route_reconstruction_section ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mxt1xx_u_additional_data_route_reconstruction_section ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_route_reconstruction_section ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mxt1xx_u_additional_data_route_reconstruction_section MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mxt1xx_u_additional_data_route_reconstruction_section prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mxt1xx_u_additional_data_route_reconstruction_section, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mxt1xx_u_additional_data_route_reconstruction_section cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mxt1xx_u_additional_data_route_reconstruction_section result;
      
      private mxt1xx_u_additional_data_route_reconstruction_section PrepareBuilder() {
        if (resultIsReadOnly) {
          mxt1xx_u_additional_data_route_reconstruction_section original = result;
          result = new mxt1xx_u_additional_data_route_reconstruction_section();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mxt1xx_u_additional_data_route_reconstruction_section MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_route_reconstruction_section.Descriptor; }
      }
      
      public override mxt1xx_u_additional_data_route_reconstruction_section DefaultInstanceForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_route_reconstruction_section.DefaultInstance; }
      }
      
      public override mxt1xx_u_additional_data_route_reconstruction_section BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mxt1xx_u_additional_data_route_reconstruction_section) {
          return MergeFrom((mxt1xx_u_additional_data_route_reconstruction_section) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mxt1xx_u_additional_data_route_reconstruction_section other) {
        if (other == global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_route_reconstruction_section.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasLatitude) {
          Latitude = other.Latitude;
        }
        if (other.HasLongitude) {
          Longitude = other.Longitude;
        }
        if (other.HasSpeed) {
          Speed = other.Speed;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mxt1XxUAdditionalDataRouteReconstructionSectionFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mxt1XxUAdditionalDataRouteReconstructionSectionFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 9: {
              result.hasLatitude = input.ReadDouble(ref result.latitude_);
              break;
            }
            case 17: {
              result.hasLongitude = input.ReadDouble(ref result.longitude_);
              break;
            }
            case 24: {
              result.hasSpeed = input.ReadUInt32(ref result.speed_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasLatitude {
        get { return result.hasLatitude; }
      }
      public double Latitude {
        get { return result.Latitude; }
        set { SetLatitude(value); }
      }
      public Builder SetLatitude(double value) {
        PrepareBuilder();
        result.hasLatitude = true;
        result.latitude_ = value;
        return this;
      }
      public Builder ClearLatitude() {
        PrepareBuilder();
        result.hasLatitude = false;
        result.latitude_ = 0D;
        return this;
      }
      
      public bool HasLongitude {
        get { return result.hasLongitude; }
      }
      public double Longitude {
        get { return result.Longitude; }
        set { SetLongitude(value); }
      }
      public Builder SetLongitude(double value) {
        PrepareBuilder();
        result.hasLongitude = true;
        result.longitude_ = value;
        return this;
      }
      public Builder ClearLongitude() {
        PrepareBuilder();
        result.hasLongitude = false;
        result.longitude_ = 0D;
        return this;
      }
      
      public bool HasSpeed {
        get { return result.hasSpeed; }
      }
      [global::System.CLSCompliant(false)]
      public uint Speed {
        get { return result.Speed; }
        set { SetSpeed(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSpeed(uint value) {
        PrepareBuilder();
        result.hasSpeed = true;
        result.speed_ = value;
        return this;
      }
      public Builder ClearSpeed() {
        PrepareBuilder();
        result.hasSpeed = false;
        result.speed_ = 0;
        return this;
      }
    }
    static mxt1xx_u_additional_data_route_reconstruction_section() {
      object.ReferenceEquals(global::maxtrack.pb.mxt1xx.Mxt1Xx.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mxt1xx_u_additional_data_route_reconstruction : pb::GeneratedMessage<mxt1xx_u_additional_data_route_reconstruction, mxt1xx_u_additional_data_route_reconstruction.Builder> {
    private mxt1xx_u_additional_data_route_reconstruction() { }
    private static readonly mxt1xx_u_additional_data_route_reconstruction defaultInstance = new mxt1xx_u_additional_data_route_reconstruction().MakeReadOnly();
    private static readonly string[] _mxt1XxUAdditionalDataRouteReconstructionFieldNames = new string[] { "sections" };
    private static readonly uint[] _mxt1XxUAdditionalDataRouteReconstructionFieldTags = new uint[] { 10 };
    public static mxt1xx_u_additional_data_route_reconstruction DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mxt1xx_u_additional_data_route_reconstruction DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mxt1xx_u_additional_data_route_reconstruction ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_route_reconstruction__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mxt1xx_u_additional_data_route_reconstruction, mxt1xx_u_additional_data_route_reconstruction.Builder> InternalFieldAccessors {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_route_reconstruction__FieldAccessorTable; }
    }
    
    public const int SectionsFieldNumber = 1;
    private pbc::PopsicleList<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_route_reconstruction_section> sections_ = new pbc::PopsicleList<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_route_reconstruction_section>();
    public scg::IList<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_route_reconstruction_section> SectionsList {
      get { return sections_; }
    }
    public int SectionsCount {
      get { return sections_.Count; }
    }
    public global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_route_reconstruction_section GetSections(int index) {
      return sections_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_route_reconstruction_section element in SectionsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mxt1XxUAdditionalDataRouteReconstructionFieldNames;
      if (sections_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], sections_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      foreach (global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_route_reconstruction_section element in SectionsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mxt1xx_u_additional_data_route_reconstruction ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_route_reconstruction ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_route_reconstruction ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_route_reconstruction ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_route_reconstruction ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_route_reconstruction ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_route_reconstruction ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mxt1xx_u_additional_data_route_reconstruction ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mxt1xx_u_additional_data_route_reconstruction ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_route_reconstruction ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mxt1xx_u_additional_data_route_reconstruction MakeReadOnly() {
      sections_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mxt1xx_u_additional_data_route_reconstruction prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mxt1xx_u_additional_data_route_reconstruction, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mxt1xx_u_additional_data_route_reconstruction cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mxt1xx_u_additional_data_route_reconstruction result;
      
      private mxt1xx_u_additional_data_route_reconstruction PrepareBuilder() {
        if (resultIsReadOnly) {
          mxt1xx_u_additional_data_route_reconstruction original = result;
          result = new mxt1xx_u_additional_data_route_reconstruction();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mxt1xx_u_additional_data_route_reconstruction MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_route_reconstruction.Descriptor; }
      }
      
      public override mxt1xx_u_additional_data_route_reconstruction DefaultInstanceForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_route_reconstruction.DefaultInstance; }
      }
      
      public override mxt1xx_u_additional_data_route_reconstruction BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mxt1xx_u_additional_data_route_reconstruction) {
          return MergeFrom((mxt1xx_u_additional_data_route_reconstruction) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mxt1xx_u_additional_data_route_reconstruction other) {
        if (other == global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_route_reconstruction.DefaultInstance) return this;
        PrepareBuilder();
        if (other.sections_.Count != 0) {
          result.sections_.Add(other.sections_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mxt1XxUAdditionalDataRouteReconstructionFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mxt1XxUAdditionalDataRouteReconstructionFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.sections_, global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_route_reconstruction_section.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_route_reconstruction_section> SectionsList {
        get { return PrepareBuilder().sections_; }
      }
      public int SectionsCount {
        get { return result.SectionsCount; }
      }
      public global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_route_reconstruction_section GetSections(int index) {
        return result.GetSections(index);
      }
      public Builder SetSections(int index, global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_route_reconstruction_section value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.sections_[index] = value;
        return this;
      }
      public Builder SetSections(int index, global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_route_reconstruction_section.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.sections_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddSections(global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_route_reconstruction_section value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.sections_.Add(value);
        return this;
      }
      public Builder AddSections(global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_route_reconstruction_section.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.sections_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeSections(scg::IEnumerable<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_route_reconstruction_section> values) {
        PrepareBuilder();
        result.sections_.Add(values);
        return this;
      }
      public Builder ClearSections() {
        PrepareBuilder();
        result.sections_.Clear();
        return this;
      }
    }
    static mxt1xx_u_additional_data_route_reconstruction() {
      object.ReferenceEquals(global::maxtrack.pb.mxt1xx.Mxt1Xx.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mxt1xx_u_additional_data_position_information_digital_data : pb::GeneratedMessage<mxt1xx_u_additional_data_position_information_digital_data, mxt1xx_u_additional_data_position_information_digital_data.Builder> {
    private mxt1xx_u_additional_data_position_information_digital_data() { }
    private static readonly mxt1xx_u_additional_data_position_information_digital_data defaultInstance = new mxt1xx_u_additional_data_position_information_digital_data().MakeReadOnly();
    private static readonly string[] _mxt1XxUAdditionalDataPositionInformationDigitalDataFieldNames = new string[] { "brake", "clutch", "door_closed", "door_locked", "headlights", "malfunction_indicator_lamp", "motor_brake", "parking_brake", "seat_belt", "trunk", "windshield_wipers" };
    private static readonly uint[] _mxt1XxUAdditionalDataPositionInformationDigitalDataFieldTags = new uint[] { 16, 8, 48, 56, 80, 88, 32, 24, 72, 64, 40 };
    public static mxt1xx_u_additional_data_position_information_digital_data DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mxt1xx_u_additional_data_position_information_digital_data DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mxt1xx_u_additional_data_position_information_digital_data ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_position_information_digital_data__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mxt1xx_u_additional_data_position_information_digital_data, mxt1xx_u_additional_data_position_information_digital_data.Builder> InternalFieldAccessors {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_position_information_digital_data__FieldAccessorTable; }
    }
    
    public const int ClutchFieldNumber = 1;
    private bool hasClutch;
    private bool clutch_;
    public bool HasClutch {
      get { return hasClutch; }
    }
    public bool Clutch {
      get { return clutch_; }
    }
    
    public const int BrakeFieldNumber = 2;
    private bool hasBrake;
    private bool brake_;
    public bool HasBrake {
      get { return hasBrake; }
    }
    public bool Brake {
      get { return brake_; }
    }
    
    public const int ParkingBrakeFieldNumber = 3;
    private bool hasParkingBrake;
    private bool parkingBrake_;
    public bool HasParkingBrake {
      get { return hasParkingBrake; }
    }
    public bool ParkingBrake {
      get { return parkingBrake_; }
    }
    
    public const int MotorBrakeFieldNumber = 4;
    private bool hasMotorBrake;
    private bool motorBrake_;
    public bool HasMotorBrake {
      get { return hasMotorBrake; }
    }
    public bool MotorBrake {
      get { return motorBrake_; }
    }
    
    public const int WindshieldWipersFieldNumber = 5;
    private bool hasWindshieldWipers;
    private bool windshieldWipers_;
    public bool HasWindshieldWipers {
      get { return hasWindshieldWipers; }
    }
    public bool WindshieldWipers {
      get { return windshieldWipers_; }
    }
    
    public const int DoorClosedFieldNumber = 6;
    private bool hasDoorClosed;
    private bool doorClosed_;
    public bool HasDoorClosed {
      get { return hasDoorClosed; }
    }
    public bool DoorClosed {
      get { return doorClosed_; }
    }
    
    public const int DoorLockedFieldNumber = 7;
    private bool hasDoorLocked;
    private bool doorLocked_;
    public bool HasDoorLocked {
      get { return hasDoorLocked; }
    }
    public bool DoorLocked {
      get { return doorLocked_; }
    }
    
    public const int TrunkFieldNumber = 8;
    private bool hasTrunk;
    private bool trunk_;
    public bool HasTrunk {
      get { return hasTrunk; }
    }
    public bool Trunk {
      get { return trunk_; }
    }
    
    public const int SeatBeltFieldNumber = 9;
    private bool hasSeatBelt;
    private bool seatBelt_;
    public bool HasSeatBelt {
      get { return hasSeatBelt; }
    }
    public bool SeatBelt {
      get { return seatBelt_; }
    }
    
    public const int HeadlightsFieldNumber = 10;
    private bool hasHeadlights;
    private bool headlights_;
    public bool HasHeadlights {
      get { return hasHeadlights; }
    }
    public bool Headlights {
      get { return headlights_; }
    }
    
    public const int MalfunctionIndicatorLampFieldNumber = 11;
    private bool hasMalfunctionIndicatorLamp;
    private bool malfunctionIndicatorLamp_;
    public bool HasMalfunctionIndicatorLamp {
      get { return hasMalfunctionIndicatorLamp; }
    }
    public bool MalfunctionIndicatorLamp {
      get { return malfunctionIndicatorLamp_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mxt1XxUAdditionalDataPositionInformationDigitalDataFieldNames;
      if (hasClutch) {
        output.WriteBool(1, field_names[1], Clutch);
      }
      if (hasBrake) {
        output.WriteBool(2, field_names[0], Brake);
      }
      if (hasParkingBrake) {
        output.WriteBool(3, field_names[7], ParkingBrake);
      }
      if (hasMotorBrake) {
        output.WriteBool(4, field_names[6], MotorBrake);
      }
      if (hasWindshieldWipers) {
        output.WriteBool(5, field_names[10], WindshieldWipers);
      }
      if (hasDoorClosed) {
        output.WriteBool(6, field_names[2], DoorClosed);
      }
      if (hasDoorLocked) {
        output.WriteBool(7, field_names[3], DoorLocked);
      }
      if (hasTrunk) {
        output.WriteBool(8, field_names[9], Trunk);
      }
      if (hasSeatBelt) {
        output.WriteBool(9, field_names[8], SeatBelt);
      }
      if (hasHeadlights) {
        output.WriteBool(10, field_names[4], Headlights);
      }
      if (hasMalfunctionIndicatorLamp) {
        output.WriteBool(11, field_names[5], MalfunctionIndicatorLamp);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasClutch) {
        size += pb::CodedOutputStream.ComputeBoolSize(1, Clutch);
      }
      if (hasBrake) {
        size += pb::CodedOutputStream.ComputeBoolSize(2, Brake);
      }
      if (hasParkingBrake) {
        size += pb::CodedOutputStream.ComputeBoolSize(3, ParkingBrake);
      }
      if (hasMotorBrake) {
        size += pb::CodedOutputStream.ComputeBoolSize(4, MotorBrake);
      }
      if (hasWindshieldWipers) {
        size += pb::CodedOutputStream.ComputeBoolSize(5, WindshieldWipers);
      }
      if (hasDoorClosed) {
        size += pb::CodedOutputStream.ComputeBoolSize(6, DoorClosed);
      }
      if (hasDoorLocked) {
        size += pb::CodedOutputStream.ComputeBoolSize(7, DoorLocked);
      }
      if (hasTrunk) {
        size += pb::CodedOutputStream.ComputeBoolSize(8, Trunk);
      }
      if (hasSeatBelt) {
        size += pb::CodedOutputStream.ComputeBoolSize(9, SeatBelt);
      }
      if (hasHeadlights) {
        size += pb::CodedOutputStream.ComputeBoolSize(10, Headlights);
      }
      if (hasMalfunctionIndicatorLamp) {
        size += pb::CodedOutputStream.ComputeBoolSize(11, MalfunctionIndicatorLamp);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mxt1xx_u_additional_data_position_information_digital_data ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_position_information_digital_data ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_position_information_digital_data ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_position_information_digital_data ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_position_information_digital_data ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_position_information_digital_data ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_position_information_digital_data ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mxt1xx_u_additional_data_position_information_digital_data ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mxt1xx_u_additional_data_position_information_digital_data ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_position_information_digital_data ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mxt1xx_u_additional_data_position_information_digital_data MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mxt1xx_u_additional_data_position_information_digital_data prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mxt1xx_u_additional_data_position_information_digital_data, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mxt1xx_u_additional_data_position_information_digital_data cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mxt1xx_u_additional_data_position_information_digital_data result;
      
      private mxt1xx_u_additional_data_position_information_digital_data PrepareBuilder() {
        if (resultIsReadOnly) {
          mxt1xx_u_additional_data_position_information_digital_data original = result;
          result = new mxt1xx_u_additional_data_position_information_digital_data();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mxt1xx_u_additional_data_position_information_digital_data MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_position_information_digital_data.Descriptor; }
      }
      
      public override mxt1xx_u_additional_data_position_information_digital_data DefaultInstanceForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_position_information_digital_data.DefaultInstance; }
      }
      
      public override mxt1xx_u_additional_data_position_information_digital_data BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mxt1xx_u_additional_data_position_information_digital_data) {
          return MergeFrom((mxt1xx_u_additional_data_position_information_digital_data) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mxt1xx_u_additional_data_position_information_digital_data other) {
        if (other == global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_position_information_digital_data.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasClutch) {
          Clutch = other.Clutch;
        }
        if (other.HasBrake) {
          Brake = other.Brake;
        }
        if (other.HasParkingBrake) {
          ParkingBrake = other.ParkingBrake;
        }
        if (other.HasMotorBrake) {
          MotorBrake = other.MotorBrake;
        }
        if (other.HasWindshieldWipers) {
          WindshieldWipers = other.WindshieldWipers;
        }
        if (other.HasDoorClosed) {
          DoorClosed = other.DoorClosed;
        }
        if (other.HasDoorLocked) {
          DoorLocked = other.DoorLocked;
        }
        if (other.HasTrunk) {
          Trunk = other.Trunk;
        }
        if (other.HasSeatBelt) {
          SeatBelt = other.SeatBelt;
        }
        if (other.HasHeadlights) {
          Headlights = other.Headlights;
        }
        if (other.HasMalfunctionIndicatorLamp) {
          MalfunctionIndicatorLamp = other.MalfunctionIndicatorLamp;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mxt1XxUAdditionalDataPositionInformationDigitalDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mxt1XxUAdditionalDataPositionInformationDigitalDataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasClutch = input.ReadBool(ref result.clutch_);
              break;
            }
            case 16: {
              result.hasBrake = input.ReadBool(ref result.brake_);
              break;
            }
            case 24: {
              result.hasParkingBrake = input.ReadBool(ref result.parkingBrake_);
              break;
            }
            case 32: {
              result.hasMotorBrake = input.ReadBool(ref result.motorBrake_);
              break;
            }
            case 40: {
              result.hasWindshieldWipers = input.ReadBool(ref result.windshieldWipers_);
              break;
            }
            case 48: {
              result.hasDoorClosed = input.ReadBool(ref result.doorClosed_);
              break;
            }
            case 56: {
              result.hasDoorLocked = input.ReadBool(ref result.doorLocked_);
              break;
            }
            case 64: {
              result.hasTrunk = input.ReadBool(ref result.trunk_);
              break;
            }
            case 72: {
              result.hasSeatBelt = input.ReadBool(ref result.seatBelt_);
              break;
            }
            case 80: {
              result.hasHeadlights = input.ReadBool(ref result.headlights_);
              break;
            }
            case 88: {
              result.hasMalfunctionIndicatorLamp = input.ReadBool(ref result.malfunctionIndicatorLamp_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasClutch {
        get { return result.hasClutch; }
      }
      public bool Clutch {
        get { return result.Clutch; }
        set { SetClutch(value); }
      }
      public Builder SetClutch(bool value) {
        PrepareBuilder();
        result.hasClutch = true;
        result.clutch_ = value;
        return this;
      }
      public Builder ClearClutch() {
        PrepareBuilder();
        result.hasClutch = false;
        result.clutch_ = false;
        return this;
      }
      
      public bool HasBrake {
        get { return result.hasBrake; }
      }
      public bool Brake {
        get { return result.Brake; }
        set { SetBrake(value); }
      }
      public Builder SetBrake(bool value) {
        PrepareBuilder();
        result.hasBrake = true;
        result.brake_ = value;
        return this;
      }
      public Builder ClearBrake() {
        PrepareBuilder();
        result.hasBrake = false;
        result.brake_ = false;
        return this;
      }
      
      public bool HasParkingBrake {
        get { return result.hasParkingBrake; }
      }
      public bool ParkingBrake {
        get { return result.ParkingBrake; }
        set { SetParkingBrake(value); }
      }
      public Builder SetParkingBrake(bool value) {
        PrepareBuilder();
        result.hasParkingBrake = true;
        result.parkingBrake_ = value;
        return this;
      }
      public Builder ClearParkingBrake() {
        PrepareBuilder();
        result.hasParkingBrake = false;
        result.parkingBrake_ = false;
        return this;
      }
      
      public bool HasMotorBrake {
        get { return result.hasMotorBrake; }
      }
      public bool MotorBrake {
        get { return result.MotorBrake; }
        set { SetMotorBrake(value); }
      }
      public Builder SetMotorBrake(bool value) {
        PrepareBuilder();
        result.hasMotorBrake = true;
        result.motorBrake_ = value;
        return this;
      }
      public Builder ClearMotorBrake() {
        PrepareBuilder();
        result.hasMotorBrake = false;
        result.motorBrake_ = false;
        return this;
      }
      
      public bool HasWindshieldWipers {
        get { return result.hasWindshieldWipers; }
      }
      public bool WindshieldWipers {
        get { return result.WindshieldWipers; }
        set { SetWindshieldWipers(value); }
      }
      public Builder SetWindshieldWipers(bool value) {
        PrepareBuilder();
        result.hasWindshieldWipers = true;
        result.windshieldWipers_ = value;
        return this;
      }
      public Builder ClearWindshieldWipers() {
        PrepareBuilder();
        result.hasWindshieldWipers = false;
        result.windshieldWipers_ = false;
        return this;
      }
      
      public bool HasDoorClosed {
        get { return result.hasDoorClosed; }
      }
      public bool DoorClosed {
        get { return result.DoorClosed; }
        set { SetDoorClosed(value); }
      }
      public Builder SetDoorClosed(bool value) {
        PrepareBuilder();
        result.hasDoorClosed = true;
        result.doorClosed_ = value;
        return this;
      }
      public Builder ClearDoorClosed() {
        PrepareBuilder();
        result.hasDoorClosed = false;
        result.doorClosed_ = false;
        return this;
      }
      
      public bool HasDoorLocked {
        get { return result.hasDoorLocked; }
      }
      public bool DoorLocked {
        get { return result.DoorLocked; }
        set { SetDoorLocked(value); }
      }
      public Builder SetDoorLocked(bool value) {
        PrepareBuilder();
        result.hasDoorLocked = true;
        result.doorLocked_ = value;
        return this;
      }
      public Builder ClearDoorLocked() {
        PrepareBuilder();
        result.hasDoorLocked = false;
        result.doorLocked_ = false;
        return this;
      }
      
      public bool HasTrunk {
        get { return result.hasTrunk; }
      }
      public bool Trunk {
        get { return result.Trunk; }
        set { SetTrunk(value); }
      }
      public Builder SetTrunk(bool value) {
        PrepareBuilder();
        result.hasTrunk = true;
        result.trunk_ = value;
        return this;
      }
      public Builder ClearTrunk() {
        PrepareBuilder();
        result.hasTrunk = false;
        result.trunk_ = false;
        return this;
      }
      
      public bool HasSeatBelt {
        get { return result.hasSeatBelt; }
      }
      public bool SeatBelt {
        get { return result.SeatBelt; }
        set { SetSeatBelt(value); }
      }
      public Builder SetSeatBelt(bool value) {
        PrepareBuilder();
        result.hasSeatBelt = true;
        result.seatBelt_ = value;
        return this;
      }
      public Builder ClearSeatBelt() {
        PrepareBuilder();
        result.hasSeatBelt = false;
        result.seatBelt_ = false;
        return this;
      }
      
      public bool HasHeadlights {
        get { return result.hasHeadlights; }
      }
      public bool Headlights {
        get { return result.Headlights; }
        set { SetHeadlights(value); }
      }
      public Builder SetHeadlights(bool value) {
        PrepareBuilder();
        result.hasHeadlights = true;
        result.headlights_ = value;
        return this;
      }
      public Builder ClearHeadlights() {
        PrepareBuilder();
        result.hasHeadlights = false;
        result.headlights_ = false;
        return this;
      }
      
      public bool HasMalfunctionIndicatorLamp {
        get { return result.hasMalfunctionIndicatorLamp; }
      }
      public bool MalfunctionIndicatorLamp {
        get { return result.MalfunctionIndicatorLamp; }
        set { SetMalfunctionIndicatorLamp(value); }
      }
      public Builder SetMalfunctionIndicatorLamp(bool value) {
        PrepareBuilder();
        result.hasMalfunctionIndicatorLamp = true;
        result.malfunctionIndicatorLamp_ = value;
        return this;
      }
      public Builder ClearMalfunctionIndicatorLamp() {
        PrepareBuilder();
        result.hasMalfunctionIndicatorLamp = false;
        result.malfunctionIndicatorLamp_ = false;
        return this;
      }
    }
    static mxt1xx_u_additional_data_position_information_digital_data() {
      object.ReferenceEquals(global::maxtrack.pb.mxt1xx.Mxt1Xx.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mxt1xx_u_additional_data_position_information_analogic_data_dtc_packets : pb::GeneratedMessage<mxt1xx_u_additional_data_position_information_analogic_data_dtc_packets, mxt1xx_u_additional_data_position_information_analogic_data_dtc_packets.Builder> {
    private mxt1xx_u_additional_data_position_information_analogic_data_dtc_packets() { }
    private static readonly mxt1xx_u_additional_data_position_information_analogic_data_dtc_packets defaultInstance = new mxt1xx_u_additional_data_position_information_analogic_data_dtc_packets().MakeReadOnly();
    private static readonly string[] _mxt1XxUAdditionalDataPositionInformationAnalogicDataDtcPacketsFieldNames = new string[] { "dtc_packet" };
    private static readonly uint[] _mxt1XxUAdditionalDataPositionInformationAnalogicDataDtcPacketsFieldTags = new uint[] { 8 };
    public static mxt1xx_u_additional_data_position_information_analogic_data_dtc_packets DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mxt1xx_u_additional_data_position_information_analogic_data_dtc_packets DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mxt1xx_u_additional_data_position_information_analogic_data_dtc_packets ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_position_information_analogic_data_dtc_packets__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mxt1xx_u_additional_data_position_information_analogic_data_dtc_packets, mxt1xx_u_additional_data_position_information_analogic_data_dtc_packets.Builder> InternalFieldAccessors {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_position_information_analogic_data_dtc_packets__FieldAccessorTable; }
    }
    
    public const int DtcPacketFieldNumber = 1;
    private bool hasDtcPacket;
    private uint dtcPacket_;
    public bool HasDtcPacket {
      get { return hasDtcPacket; }
    }
    [global::System.CLSCompliant(false)]
    public uint DtcPacket {
      get { return dtcPacket_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasDtcPacket) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mxt1XxUAdditionalDataPositionInformationAnalogicDataDtcPacketsFieldNames;
      if (hasDtcPacket) {
        output.WriteUInt32(1, field_names[0], DtcPacket);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasDtcPacket) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, DtcPacket);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mxt1xx_u_additional_data_position_information_analogic_data_dtc_packets ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_position_information_analogic_data_dtc_packets ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_position_information_analogic_data_dtc_packets ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_position_information_analogic_data_dtc_packets ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_position_information_analogic_data_dtc_packets ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_position_information_analogic_data_dtc_packets ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_position_information_analogic_data_dtc_packets ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mxt1xx_u_additional_data_position_information_analogic_data_dtc_packets ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mxt1xx_u_additional_data_position_information_analogic_data_dtc_packets ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_position_information_analogic_data_dtc_packets ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mxt1xx_u_additional_data_position_information_analogic_data_dtc_packets MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mxt1xx_u_additional_data_position_information_analogic_data_dtc_packets prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mxt1xx_u_additional_data_position_information_analogic_data_dtc_packets, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mxt1xx_u_additional_data_position_information_analogic_data_dtc_packets cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mxt1xx_u_additional_data_position_information_analogic_data_dtc_packets result;
      
      private mxt1xx_u_additional_data_position_information_analogic_data_dtc_packets PrepareBuilder() {
        if (resultIsReadOnly) {
          mxt1xx_u_additional_data_position_information_analogic_data_dtc_packets original = result;
          result = new mxt1xx_u_additional_data_position_information_analogic_data_dtc_packets();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mxt1xx_u_additional_data_position_information_analogic_data_dtc_packets MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_position_information_analogic_data_dtc_packets.Descriptor; }
      }
      
      public override mxt1xx_u_additional_data_position_information_analogic_data_dtc_packets DefaultInstanceForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_position_information_analogic_data_dtc_packets.DefaultInstance; }
      }
      
      public override mxt1xx_u_additional_data_position_information_analogic_data_dtc_packets BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mxt1xx_u_additional_data_position_information_analogic_data_dtc_packets) {
          return MergeFrom((mxt1xx_u_additional_data_position_information_analogic_data_dtc_packets) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mxt1xx_u_additional_data_position_information_analogic_data_dtc_packets other) {
        if (other == global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_position_information_analogic_data_dtc_packets.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasDtcPacket) {
          DtcPacket = other.DtcPacket;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mxt1XxUAdditionalDataPositionInformationAnalogicDataDtcPacketsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mxt1XxUAdditionalDataPositionInformationAnalogicDataDtcPacketsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasDtcPacket = input.ReadUInt32(ref result.dtcPacket_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasDtcPacket {
        get { return result.hasDtcPacket; }
      }
      [global::System.CLSCompliant(false)]
      public uint DtcPacket {
        get { return result.DtcPacket; }
        set { SetDtcPacket(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetDtcPacket(uint value) {
        PrepareBuilder();
        result.hasDtcPacket = true;
        result.dtcPacket_ = value;
        return this;
      }
      public Builder ClearDtcPacket() {
        PrepareBuilder();
        result.hasDtcPacket = false;
        result.dtcPacket_ = 0;
        return this;
      }
    }
    static mxt1xx_u_additional_data_position_information_analogic_data_dtc_packets() {
      object.ReferenceEquals(global::maxtrack.pb.mxt1xx.Mxt1Xx.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mxt1xx_u_additional_data_position_information_analogic_data : pb::GeneratedMessage<mxt1xx_u_additional_data_position_information_analogic_data, mxt1xx_u_additional_data_position_information_analogic_data.Builder> {
    private mxt1xx_u_additional_data_position_information_analogic_data() { }
    private static readonly mxt1xx_u_additional_data_position_information_analogic_data defaultInstance = new mxt1xx_u_additional_data_position_information_analogic_data().MakeReadOnly();
    private static readonly string[] _mxt1XxUAdditionalDataPositionInformationAnalogicDataFieldNames = new string[] { "air_temperature", "barometric_pressure", "control_module_voltage", "current_gear", "dtc_packets", "engine_fuel_rate", "engine_ref_torque", "engine_temperature", "ethanol_ratio", "fuel_consumption", "fuel_level1", "fuel_level2", "fuel_type", "intake_air_flow", "intake_air_temp", "num_dtc_available", "num_dtc_packet", "odometer", "oil_temperature", "rpm", "speed", "throttle_position" };
    private static readonly uint[] _mxt1XxUAdditionalDataPositionInformationAnalogicDataFieldTags = new uint[] { 96, 80, 88, 144, 178, 152, 136, 128, 112, 48, 32, 40, 104, 64, 56, 160, 168, 24, 120, 16, 8, 72 };
    public static mxt1xx_u_additional_data_position_information_analogic_data DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mxt1xx_u_additional_data_position_information_analogic_data DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mxt1xx_u_additional_data_position_information_analogic_data ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_position_information_analogic_data__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mxt1xx_u_additional_data_position_information_analogic_data, mxt1xx_u_additional_data_position_information_analogic_data.Builder> InternalFieldAccessors {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_position_information_analogic_data__FieldAccessorTable; }
    }
    
    public const int SpeedFieldNumber = 1;
    private bool hasSpeed;
    private uint speed_;
    public bool HasSpeed {
      get { return hasSpeed; }
    }
    [global::System.CLSCompliant(false)]
    public uint Speed {
      get { return speed_; }
    }
    
    public const int RpmFieldNumber = 2;
    private bool hasRpm;
    private uint rpm_;
    public bool HasRpm {
      get { return hasRpm; }
    }
    [global::System.CLSCompliant(false)]
    public uint Rpm {
      get { return rpm_; }
    }
    
    public const int OdometerFieldNumber = 3;
    private bool hasOdometer;
    private uint odometer_;
    public bool HasOdometer {
      get { return hasOdometer; }
    }
    [global::System.CLSCompliant(false)]
    public uint Odometer {
      get { return odometer_; }
    }
    
    public const int FuelLevel1FieldNumber = 4;
    private bool hasFuelLevel1;
    private uint fuelLevel1_;
    public bool HasFuelLevel1 {
      get { return hasFuelLevel1; }
    }
    [global::System.CLSCompliant(false)]
    public uint FuelLevel1 {
      get { return fuelLevel1_; }
    }
    
    public const int FuelLevel2FieldNumber = 5;
    private bool hasFuelLevel2;
    private uint fuelLevel2_;
    public bool HasFuelLevel2 {
      get { return hasFuelLevel2; }
    }
    [global::System.CLSCompliant(false)]
    public uint FuelLevel2 {
      get { return fuelLevel2_; }
    }
    
    public const int FuelConsumptionFieldNumber = 6;
    private bool hasFuelConsumption;
    private uint fuelConsumption_;
    public bool HasFuelConsumption {
      get { return hasFuelConsumption; }
    }
    [global::System.CLSCompliant(false)]
    public uint FuelConsumption {
      get { return fuelConsumption_; }
    }
    
    public const int IntakeAirTempFieldNumber = 7;
    private bool hasIntakeAirTemp;
    private uint intakeAirTemp_;
    public bool HasIntakeAirTemp {
      get { return hasIntakeAirTemp; }
    }
    [global::System.CLSCompliant(false)]
    public uint IntakeAirTemp {
      get { return intakeAirTemp_; }
    }
    
    public const int IntakeAirFlowFieldNumber = 8;
    private bool hasIntakeAirFlow;
    private uint intakeAirFlow_;
    public bool HasIntakeAirFlow {
      get { return hasIntakeAirFlow; }
    }
    [global::System.CLSCompliant(false)]
    public uint IntakeAirFlow {
      get { return intakeAirFlow_; }
    }
    
    public const int ThrottlePositionFieldNumber = 9;
    private bool hasThrottlePosition;
    private uint throttlePosition_;
    public bool HasThrottlePosition {
      get { return hasThrottlePosition; }
    }
    [global::System.CLSCompliant(false)]
    public uint ThrottlePosition {
      get { return throttlePosition_; }
    }
    
    public const int BarometricPressureFieldNumber = 10;
    private bool hasBarometricPressure;
    private uint barometricPressure_;
    public bool HasBarometricPressure {
      get { return hasBarometricPressure; }
    }
    [global::System.CLSCompliant(false)]
    public uint BarometricPressure {
      get { return barometricPressure_; }
    }
    
    public const int ControlModuleVoltageFieldNumber = 11;
    private bool hasControlModuleVoltage;
    private uint controlModuleVoltage_;
    public bool HasControlModuleVoltage {
      get { return hasControlModuleVoltage; }
    }
    [global::System.CLSCompliant(false)]
    public uint ControlModuleVoltage {
      get { return controlModuleVoltage_; }
    }
    
    public const int AirTemperatureFieldNumber = 12;
    private bool hasAirTemperature;
    private uint airTemperature_;
    public bool HasAirTemperature {
      get { return hasAirTemperature; }
    }
    [global::System.CLSCompliant(false)]
    public uint AirTemperature {
      get { return airTemperature_; }
    }
    
    public const int FuelTypeFieldNumber = 13;
    private bool hasFuelType;
    private uint fuelType_;
    public bool HasFuelType {
      get { return hasFuelType; }
    }
    [global::System.CLSCompliant(false)]
    public uint FuelType {
      get { return fuelType_; }
    }
    
    public const int EthanolRatioFieldNumber = 14;
    private bool hasEthanolRatio;
    private uint ethanolRatio_;
    public bool HasEthanolRatio {
      get { return hasEthanolRatio; }
    }
    [global::System.CLSCompliant(false)]
    public uint EthanolRatio {
      get { return ethanolRatio_; }
    }
    
    public const int OilTemperatureFieldNumber = 15;
    private bool hasOilTemperature;
    private uint oilTemperature_;
    public bool HasOilTemperature {
      get { return hasOilTemperature; }
    }
    [global::System.CLSCompliant(false)]
    public uint OilTemperature {
      get { return oilTemperature_; }
    }
    
    public const int EngineTemperatureFieldNumber = 16;
    private bool hasEngineTemperature;
    private uint engineTemperature_;
    public bool HasEngineTemperature {
      get { return hasEngineTemperature; }
    }
    [global::System.CLSCompliant(false)]
    public uint EngineTemperature {
      get { return engineTemperature_; }
    }
    
    public const int EngineRefTorqueFieldNumber = 17;
    private bool hasEngineRefTorque;
    private uint engineRefTorque_;
    public bool HasEngineRefTorque {
      get { return hasEngineRefTorque; }
    }
    [global::System.CLSCompliant(false)]
    public uint EngineRefTorque {
      get { return engineRefTorque_; }
    }
    
    public const int CurrentGearFieldNumber = 18;
    private bool hasCurrentGear;
    private uint currentGear_;
    public bool HasCurrentGear {
      get { return hasCurrentGear; }
    }
    [global::System.CLSCompliant(false)]
    public uint CurrentGear {
      get { return currentGear_; }
    }
    
    public const int EngineFuelRateFieldNumber = 19;
    private bool hasEngineFuelRate;
    private uint engineFuelRate_;
    public bool HasEngineFuelRate {
      get { return hasEngineFuelRate; }
    }
    [global::System.CLSCompliant(false)]
    public uint EngineFuelRate {
      get { return engineFuelRate_; }
    }
    
    public const int NumDtcAvailableFieldNumber = 20;
    private bool hasNumDtcAvailable;
    private uint numDtcAvailable_;
    public bool HasNumDtcAvailable {
      get { return hasNumDtcAvailable; }
    }
    [global::System.CLSCompliant(false)]
    public uint NumDtcAvailable {
      get { return numDtcAvailable_; }
    }
    
    public const int NumDtcPacketFieldNumber = 21;
    private bool hasNumDtcPacket;
    private uint numDtcPacket_;
    public bool HasNumDtcPacket {
      get { return hasNumDtcPacket; }
    }
    [global::System.CLSCompliant(false)]
    public uint NumDtcPacket {
      get { return numDtcPacket_; }
    }
    
    public const int DtcPacketsFieldNumber = 22;
    private pbc::PopsicleList<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_position_information_analogic_data_dtc_packets> dtcPackets_ = new pbc::PopsicleList<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_position_information_analogic_data_dtc_packets>();
    public scg::IList<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_position_information_analogic_data_dtc_packets> DtcPacketsList {
      get { return dtcPackets_; }
    }
    public int DtcPacketsCount {
      get { return dtcPackets_.Count; }
    }
    public global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_position_information_analogic_data_dtc_packets GetDtcPackets(int index) {
      return dtcPackets_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_position_information_analogic_data_dtc_packets element in DtcPacketsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mxt1XxUAdditionalDataPositionInformationAnalogicDataFieldNames;
      if (hasSpeed) {
        output.WriteUInt32(1, field_names[20], Speed);
      }
      if (hasRpm) {
        output.WriteUInt32(2, field_names[19], Rpm);
      }
      if (hasOdometer) {
        output.WriteUInt32(3, field_names[17], Odometer);
      }
      if (hasFuelLevel1) {
        output.WriteUInt32(4, field_names[10], FuelLevel1);
      }
      if (hasFuelLevel2) {
        output.WriteUInt32(5, field_names[11], FuelLevel2);
      }
      if (hasFuelConsumption) {
        output.WriteUInt32(6, field_names[9], FuelConsumption);
      }
      if (hasIntakeAirTemp) {
        output.WriteUInt32(7, field_names[14], IntakeAirTemp);
      }
      if (hasIntakeAirFlow) {
        output.WriteUInt32(8, field_names[13], IntakeAirFlow);
      }
      if (hasThrottlePosition) {
        output.WriteUInt32(9, field_names[21], ThrottlePosition);
      }
      if (hasBarometricPressure) {
        output.WriteUInt32(10, field_names[1], BarometricPressure);
      }
      if (hasControlModuleVoltage) {
        output.WriteUInt32(11, field_names[2], ControlModuleVoltage);
      }
      if (hasAirTemperature) {
        output.WriteUInt32(12, field_names[0], AirTemperature);
      }
      if (hasFuelType) {
        output.WriteUInt32(13, field_names[12], FuelType);
      }
      if (hasEthanolRatio) {
        output.WriteUInt32(14, field_names[8], EthanolRatio);
      }
      if (hasOilTemperature) {
        output.WriteUInt32(15, field_names[18], OilTemperature);
      }
      if (hasEngineTemperature) {
        output.WriteUInt32(16, field_names[7], EngineTemperature);
      }
      if (hasEngineRefTorque) {
        output.WriteUInt32(17, field_names[6], EngineRefTorque);
      }
      if (hasCurrentGear) {
        output.WriteUInt32(18, field_names[3], CurrentGear);
      }
      if (hasEngineFuelRate) {
        output.WriteUInt32(19, field_names[5], EngineFuelRate);
      }
      if (hasNumDtcAvailable) {
        output.WriteUInt32(20, field_names[15], NumDtcAvailable);
      }
      if (hasNumDtcPacket) {
        output.WriteUInt32(21, field_names[16], NumDtcPacket);
      }
      if (dtcPackets_.Count > 0) {
        output.WriteMessageArray(22, field_names[4], dtcPackets_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasSpeed) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, Speed);
      }
      if (hasRpm) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, Rpm);
      }
      if (hasOdometer) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, Odometer);
      }
      if (hasFuelLevel1) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, FuelLevel1);
      }
      if (hasFuelLevel2) {
        size += pb::CodedOutputStream.ComputeUInt32Size(5, FuelLevel2);
      }
      if (hasFuelConsumption) {
        size += pb::CodedOutputStream.ComputeUInt32Size(6, FuelConsumption);
      }
      if (hasIntakeAirTemp) {
        size += pb::CodedOutputStream.ComputeUInt32Size(7, IntakeAirTemp);
      }
      if (hasIntakeAirFlow) {
        size += pb::CodedOutputStream.ComputeUInt32Size(8, IntakeAirFlow);
      }
      if (hasThrottlePosition) {
        size += pb::CodedOutputStream.ComputeUInt32Size(9, ThrottlePosition);
      }
      if (hasBarometricPressure) {
        size += pb::CodedOutputStream.ComputeUInt32Size(10, BarometricPressure);
      }
      if (hasControlModuleVoltage) {
        size += pb::CodedOutputStream.ComputeUInt32Size(11, ControlModuleVoltage);
      }
      if (hasAirTemperature) {
        size += pb::CodedOutputStream.ComputeUInt32Size(12, AirTemperature);
      }
      if (hasFuelType) {
        size += pb::CodedOutputStream.ComputeUInt32Size(13, FuelType);
      }
      if (hasEthanolRatio) {
        size += pb::CodedOutputStream.ComputeUInt32Size(14, EthanolRatio);
      }
      if (hasOilTemperature) {
        size += pb::CodedOutputStream.ComputeUInt32Size(15, OilTemperature);
      }
      if (hasEngineTemperature) {
        size += pb::CodedOutputStream.ComputeUInt32Size(16, EngineTemperature);
      }
      if (hasEngineRefTorque) {
        size += pb::CodedOutputStream.ComputeUInt32Size(17, EngineRefTorque);
      }
      if (hasCurrentGear) {
        size += pb::CodedOutputStream.ComputeUInt32Size(18, CurrentGear);
      }
      if (hasEngineFuelRate) {
        size += pb::CodedOutputStream.ComputeUInt32Size(19, EngineFuelRate);
      }
      if (hasNumDtcAvailable) {
        size += pb::CodedOutputStream.ComputeUInt32Size(20, NumDtcAvailable);
      }
      if (hasNumDtcPacket) {
        size += pb::CodedOutputStream.ComputeUInt32Size(21, NumDtcPacket);
      }
      foreach (global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_position_information_analogic_data_dtc_packets element in DtcPacketsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(22, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mxt1xx_u_additional_data_position_information_analogic_data ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_position_information_analogic_data ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_position_information_analogic_data ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_position_information_analogic_data ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_position_information_analogic_data ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_position_information_analogic_data ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_position_information_analogic_data ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mxt1xx_u_additional_data_position_information_analogic_data ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mxt1xx_u_additional_data_position_information_analogic_data ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_position_information_analogic_data ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mxt1xx_u_additional_data_position_information_analogic_data MakeReadOnly() {
      dtcPackets_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mxt1xx_u_additional_data_position_information_analogic_data prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mxt1xx_u_additional_data_position_information_analogic_data, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mxt1xx_u_additional_data_position_information_analogic_data cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mxt1xx_u_additional_data_position_information_analogic_data result;
      
      private mxt1xx_u_additional_data_position_information_analogic_data PrepareBuilder() {
        if (resultIsReadOnly) {
          mxt1xx_u_additional_data_position_information_analogic_data original = result;
          result = new mxt1xx_u_additional_data_position_information_analogic_data();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mxt1xx_u_additional_data_position_information_analogic_data MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_position_information_analogic_data.Descriptor; }
      }
      
      public override mxt1xx_u_additional_data_position_information_analogic_data DefaultInstanceForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_position_information_analogic_data.DefaultInstance; }
      }
      
      public override mxt1xx_u_additional_data_position_information_analogic_data BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mxt1xx_u_additional_data_position_information_analogic_data) {
          return MergeFrom((mxt1xx_u_additional_data_position_information_analogic_data) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mxt1xx_u_additional_data_position_information_analogic_data other) {
        if (other == global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_position_information_analogic_data.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSpeed) {
          Speed = other.Speed;
        }
        if (other.HasRpm) {
          Rpm = other.Rpm;
        }
        if (other.HasOdometer) {
          Odometer = other.Odometer;
        }
        if (other.HasFuelLevel1) {
          FuelLevel1 = other.FuelLevel1;
        }
        if (other.HasFuelLevel2) {
          FuelLevel2 = other.FuelLevel2;
        }
        if (other.HasFuelConsumption) {
          FuelConsumption = other.FuelConsumption;
        }
        if (other.HasIntakeAirTemp) {
          IntakeAirTemp = other.IntakeAirTemp;
        }
        if (other.HasIntakeAirFlow) {
          IntakeAirFlow = other.IntakeAirFlow;
        }
        if (other.HasThrottlePosition) {
          ThrottlePosition = other.ThrottlePosition;
        }
        if (other.HasBarometricPressure) {
          BarometricPressure = other.BarometricPressure;
        }
        if (other.HasControlModuleVoltage) {
          ControlModuleVoltage = other.ControlModuleVoltage;
        }
        if (other.HasAirTemperature) {
          AirTemperature = other.AirTemperature;
        }
        if (other.HasFuelType) {
          FuelType = other.FuelType;
        }
        if (other.HasEthanolRatio) {
          EthanolRatio = other.EthanolRatio;
        }
        if (other.HasOilTemperature) {
          OilTemperature = other.OilTemperature;
        }
        if (other.HasEngineTemperature) {
          EngineTemperature = other.EngineTemperature;
        }
        if (other.HasEngineRefTorque) {
          EngineRefTorque = other.EngineRefTorque;
        }
        if (other.HasCurrentGear) {
          CurrentGear = other.CurrentGear;
        }
        if (other.HasEngineFuelRate) {
          EngineFuelRate = other.EngineFuelRate;
        }
        if (other.HasNumDtcAvailable) {
          NumDtcAvailable = other.NumDtcAvailable;
        }
        if (other.HasNumDtcPacket) {
          NumDtcPacket = other.NumDtcPacket;
        }
        if (other.dtcPackets_.Count != 0) {
          result.dtcPackets_.Add(other.dtcPackets_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mxt1XxUAdditionalDataPositionInformationAnalogicDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mxt1XxUAdditionalDataPositionInformationAnalogicDataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasSpeed = input.ReadUInt32(ref result.speed_);
              break;
            }
            case 16: {
              result.hasRpm = input.ReadUInt32(ref result.rpm_);
              break;
            }
            case 24: {
              result.hasOdometer = input.ReadUInt32(ref result.odometer_);
              break;
            }
            case 32: {
              result.hasFuelLevel1 = input.ReadUInt32(ref result.fuelLevel1_);
              break;
            }
            case 40: {
              result.hasFuelLevel2 = input.ReadUInt32(ref result.fuelLevel2_);
              break;
            }
            case 48: {
              result.hasFuelConsumption = input.ReadUInt32(ref result.fuelConsumption_);
              break;
            }
            case 56: {
              result.hasIntakeAirTemp = input.ReadUInt32(ref result.intakeAirTemp_);
              break;
            }
            case 64: {
              result.hasIntakeAirFlow = input.ReadUInt32(ref result.intakeAirFlow_);
              break;
            }
            case 72: {
              result.hasThrottlePosition = input.ReadUInt32(ref result.throttlePosition_);
              break;
            }
            case 80: {
              result.hasBarometricPressure = input.ReadUInt32(ref result.barometricPressure_);
              break;
            }
            case 88: {
              result.hasControlModuleVoltage = input.ReadUInt32(ref result.controlModuleVoltage_);
              break;
            }
            case 96: {
              result.hasAirTemperature = input.ReadUInt32(ref result.airTemperature_);
              break;
            }
            case 104: {
              result.hasFuelType = input.ReadUInt32(ref result.fuelType_);
              break;
            }
            case 112: {
              result.hasEthanolRatio = input.ReadUInt32(ref result.ethanolRatio_);
              break;
            }
            case 120: {
              result.hasOilTemperature = input.ReadUInt32(ref result.oilTemperature_);
              break;
            }
            case 128: {
              result.hasEngineTemperature = input.ReadUInt32(ref result.engineTemperature_);
              break;
            }
            case 136: {
              result.hasEngineRefTorque = input.ReadUInt32(ref result.engineRefTorque_);
              break;
            }
            case 144: {
              result.hasCurrentGear = input.ReadUInt32(ref result.currentGear_);
              break;
            }
            case 152: {
              result.hasEngineFuelRate = input.ReadUInt32(ref result.engineFuelRate_);
              break;
            }
            case 160: {
              result.hasNumDtcAvailable = input.ReadUInt32(ref result.numDtcAvailable_);
              break;
            }
            case 168: {
              result.hasNumDtcPacket = input.ReadUInt32(ref result.numDtcPacket_);
              break;
            }
            case 178: {
              input.ReadMessageArray(tag, field_name, result.dtcPackets_, global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_position_information_analogic_data_dtc_packets.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSpeed {
        get { return result.hasSpeed; }
      }
      [global::System.CLSCompliant(false)]
      public uint Speed {
        get { return result.Speed; }
        set { SetSpeed(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSpeed(uint value) {
        PrepareBuilder();
        result.hasSpeed = true;
        result.speed_ = value;
        return this;
      }
      public Builder ClearSpeed() {
        PrepareBuilder();
        result.hasSpeed = false;
        result.speed_ = 0;
        return this;
      }
      
      public bool HasRpm {
        get { return result.hasRpm; }
      }
      [global::System.CLSCompliant(false)]
      public uint Rpm {
        get { return result.Rpm; }
        set { SetRpm(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetRpm(uint value) {
        PrepareBuilder();
        result.hasRpm = true;
        result.rpm_ = value;
        return this;
      }
      public Builder ClearRpm() {
        PrepareBuilder();
        result.hasRpm = false;
        result.rpm_ = 0;
        return this;
      }
      
      public bool HasOdometer {
        get { return result.hasOdometer; }
      }
      [global::System.CLSCompliant(false)]
      public uint Odometer {
        get { return result.Odometer; }
        set { SetOdometer(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetOdometer(uint value) {
        PrepareBuilder();
        result.hasOdometer = true;
        result.odometer_ = value;
        return this;
      }
      public Builder ClearOdometer() {
        PrepareBuilder();
        result.hasOdometer = false;
        result.odometer_ = 0;
        return this;
      }
      
      public bool HasFuelLevel1 {
        get { return result.hasFuelLevel1; }
      }
      [global::System.CLSCompliant(false)]
      public uint FuelLevel1 {
        get { return result.FuelLevel1; }
        set { SetFuelLevel1(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetFuelLevel1(uint value) {
        PrepareBuilder();
        result.hasFuelLevel1 = true;
        result.fuelLevel1_ = value;
        return this;
      }
      public Builder ClearFuelLevel1() {
        PrepareBuilder();
        result.hasFuelLevel1 = false;
        result.fuelLevel1_ = 0;
        return this;
      }
      
      public bool HasFuelLevel2 {
        get { return result.hasFuelLevel2; }
      }
      [global::System.CLSCompliant(false)]
      public uint FuelLevel2 {
        get { return result.FuelLevel2; }
        set { SetFuelLevel2(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetFuelLevel2(uint value) {
        PrepareBuilder();
        result.hasFuelLevel2 = true;
        result.fuelLevel2_ = value;
        return this;
      }
      public Builder ClearFuelLevel2() {
        PrepareBuilder();
        result.hasFuelLevel2 = false;
        result.fuelLevel2_ = 0;
        return this;
      }
      
      public bool HasFuelConsumption {
        get { return result.hasFuelConsumption; }
      }
      [global::System.CLSCompliant(false)]
      public uint FuelConsumption {
        get { return result.FuelConsumption; }
        set { SetFuelConsumption(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetFuelConsumption(uint value) {
        PrepareBuilder();
        result.hasFuelConsumption = true;
        result.fuelConsumption_ = value;
        return this;
      }
      public Builder ClearFuelConsumption() {
        PrepareBuilder();
        result.hasFuelConsumption = false;
        result.fuelConsumption_ = 0;
        return this;
      }
      
      public bool HasIntakeAirTemp {
        get { return result.hasIntakeAirTemp; }
      }
      [global::System.CLSCompliant(false)]
      public uint IntakeAirTemp {
        get { return result.IntakeAirTemp; }
        set { SetIntakeAirTemp(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetIntakeAirTemp(uint value) {
        PrepareBuilder();
        result.hasIntakeAirTemp = true;
        result.intakeAirTemp_ = value;
        return this;
      }
      public Builder ClearIntakeAirTemp() {
        PrepareBuilder();
        result.hasIntakeAirTemp = false;
        result.intakeAirTemp_ = 0;
        return this;
      }
      
      public bool HasIntakeAirFlow {
        get { return result.hasIntakeAirFlow; }
      }
      [global::System.CLSCompliant(false)]
      public uint IntakeAirFlow {
        get { return result.IntakeAirFlow; }
        set { SetIntakeAirFlow(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetIntakeAirFlow(uint value) {
        PrepareBuilder();
        result.hasIntakeAirFlow = true;
        result.intakeAirFlow_ = value;
        return this;
      }
      public Builder ClearIntakeAirFlow() {
        PrepareBuilder();
        result.hasIntakeAirFlow = false;
        result.intakeAirFlow_ = 0;
        return this;
      }
      
      public bool HasThrottlePosition {
        get { return result.hasThrottlePosition; }
      }
      [global::System.CLSCompliant(false)]
      public uint ThrottlePosition {
        get { return result.ThrottlePosition; }
        set { SetThrottlePosition(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetThrottlePosition(uint value) {
        PrepareBuilder();
        result.hasThrottlePosition = true;
        result.throttlePosition_ = value;
        return this;
      }
      public Builder ClearThrottlePosition() {
        PrepareBuilder();
        result.hasThrottlePosition = false;
        result.throttlePosition_ = 0;
        return this;
      }
      
      public bool HasBarometricPressure {
        get { return result.hasBarometricPressure; }
      }
      [global::System.CLSCompliant(false)]
      public uint BarometricPressure {
        get { return result.BarometricPressure; }
        set { SetBarometricPressure(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetBarometricPressure(uint value) {
        PrepareBuilder();
        result.hasBarometricPressure = true;
        result.barometricPressure_ = value;
        return this;
      }
      public Builder ClearBarometricPressure() {
        PrepareBuilder();
        result.hasBarometricPressure = false;
        result.barometricPressure_ = 0;
        return this;
      }
      
      public bool HasControlModuleVoltage {
        get { return result.hasControlModuleVoltage; }
      }
      [global::System.CLSCompliant(false)]
      public uint ControlModuleVoltage {
        get { return result.ControlModuleVoltage; }
        set { SetControlModuleVoltage(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetControlModuleVoltage(uint value) {
        PrepareBuilder();
        result.hasControlModuleVoltage = true;
        result.controlModuleVoltage_ = value;
        return this;
      }
      public Builder ClearControlModuleVoltage() {
        PrepareBuilder();
        result.hasControlModuleVoltage = false;
        result.controlModuleVoltage_ = 0;
        return this;
      }
      
      public bool HasAirTemperature {
        get { return result.hasAirTemperature; }
      }
      [global::System.CLSCompliant(false)]
      public uint AirTemperature {
        get { return result.AirTemperature; }
        set { SetAirTemperature(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetAirTemperature(uint value) {
        PrepareBuilder();
        result.hasAirTemperature = true;
        result.airTemperature_ = value;
        return this;
      }
      public Builder ClearAirTemperature() {
        PrepareBuilder();
        result.hasAirTemperature = false;
        result.airTemperature_ = 0;
        return this;
      }
      
      public bool HasFuelType {
        get { return result.hasFuelType; }
      }
      [global::System.CLSCompliant(false)]
      public uint FuelType {
        get { return result.FuelType; }
        set { SetFuelType(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetFuelType(uint value) {
        PrepareBuilder();
        result.hasFuelType = true;
        result.fuelType_ = value;
        return this;
      }
      public Builder ClearFuelType() {
        PrepareBuilder();
        result.hasFuelType = false;
        result.fuelType_ = 0;
        return this;
      }
      
      public bool HasEthanolRatio {
        get { return result.hasEthanolRatio; }
      }
      [global::System.CLSCompliant(false)]
      public uint EthanolRatio {
        get { return result.EthanolRatio; }
        set { SetEthanolRatio(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetEthanolRatio(uint value) {
        PrepareBuilder();
        result.hasEthanolRatio = true;
        result.ethanolRatio_ = value;
        return this;
      }
      public Builder ClearEthanolRatio() {
        PrepareBuilder();
        result.hasEthanolRatio = false;
        result.ethanolRatio_ = 0;
        return this;
      }
      
      public bool HasOilTemperature {
        get { return result.hasOilTemperature; }
      }
      [global::System.CLSCompliant(false)]
      public uint OilTemperature {
        get { return result.OilTemperature; }
        set { SetOilTemperature(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetOilTemperature(uint value) {
        PrepareBuilder();
        result.hasOilTemperature = true;
        result.oilTemperature_ = value;
        return this;
      }
      public Builder ClearOilTemperature() {
        PrepareBuilder();
        result.hasOilTemperature = false;
        result.oilTemperature_ = 0;
        return this;
      }
      
      public bool HasEngineTemperature {
        get { return result.hasEngineTemperature; }
      }
      [global::System.CLSCompliant(false)]
      public uint EngineTemperature {
        get { return result.EngineTemperature; }
        set { SetEngineTemperature(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetEngineTemperature(uint value) {
        PrepareBuilder();
        result.hasEngineTemperature = true;
        result.engineTemperature_ = value;
        return this;
      }
      public Builder ClearEngineTemperature() {
        PrepareBuilder();
        result.hasEngineTemperature = false;
        result.engineTemperature_ = 0;
        return this;
      }
      
      public bool HasEngineRefTorque {
        get { return result.hasEngineRefTorque; }
      }
      [global::System.CLSCompliant(false)]
      public uint EngineRefTorque {
        get { return result.EngineRefTorque; }
        set { SetEngineRefTorque(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetEngineRefTorque(uint value) {
        PrepareBuilder();
        result.hasEngineRefTorque = true;
        result.engineRefTorque_ = value;
        return this;
      }
      public Builder ClearEngineRefTorque() {
        PrepareBuilder();
        result.hasEngineRefTorque = false;
        result.engineRefTorque_ = 0;
        return this;
      }
      
      public bool HasCurrentGear {
        get { return result.hasCurrentGear; }
      }
      [global::System.CLSCompliant(false)]
      public uint CurrentGear {
        get { return result.CurrentGear; }
        set { SetCurrentGear(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetCurrentGear(uint value) {
        PrepareBuilder();
        result.hasCurrentGear = true;
        result.currentGear_ = value;
        return this;
      }
      public Builder ClearCurrentGear() {
        PrepareBuilder();
        result.hasCurrentGear = false;
        result.currentGear_ = 0;
        return this;
      }
      
      public bool HasEngineFuelRate {
        get { return result.hasEngineFuelRate; }
      }
      [global::System.CLSCompliant(false)]
      public uint EngineFuelRate {
        get { return result.EngineFuelRate; }
        set { SetEngineFuelRate(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetEngineFuelRate(uint value) {
        PrepareBuilder();
        result.hasEngineFuelRate = true;
        result.engineFuelRate_ = value;
        return this;
      }
      public Builder ClearEngineFuelRate() {
        PrepareBuilder();
        result.hasEngineFuelRate = false;
        result.engineFuelRate_ = 0;
        return this;
      }
      
      public bool HasNumDtcAvailable {
        get { return result.hasNumDtcAvailable; }
      }
      [global::System.CLSCompliant(false)]
      public uint NumDtcAvailable {
        get { return result.NumDtcAvailable; }
        set { SetNumDtcAvailable(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetNumDtcAvailable(uint value) {
        PrepareBuilder();
        result.hasNumDtcAvailable = true;
        result.numDtcAvailable_ = value;
        return this;
      }
      public Builder ClearNumDtcAvailable() {
        PrepareBuilder();
        result.hasNumDtcAvailable = false;
        result.numDtcAvailable_ = 0;
        return this;
      }
      
      public bool HasNumDtcPacket {
        get { return result.hasNumDtcPacket; }
      }
      [global::System.CLSCompliant(false)]
      public uint NumDtcPacket {
        get { return result.NumDtcPacket; }
        set { SetNumDtcPacket(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetNumDtcPacket(uint value) {
        PrepareBuilder();
        result.hasNumDtcPacket = true;
        result.numDtcPacket_ = value;
        return this;
      }
      public Builder ClearNumDtcPacket() {
        PrepareBuilder();
        result.hasNumDtcPacket = false;
        result.numDtcPacket_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_position_information_analogic_data_dtc_packets> DtcPacketsList {
        get { return PrepareBuilder().dtcPackets_; }
      }
      public int DtcPacketsCount {
        get { return result.DtcPacketsCount; }
      }
      public global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_position_information_analogic_data_dtc_packets GetDtcPackets(int index) {
        return result.GetDtcPackets(index);
      }
      public Builder SetDtcPackets(int index, global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_position_information_analogic_data_dtc_packets value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.dtcPackets_[index] = value;
        return this;
      }
      public Builder SetDtcPackets(int index, global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_position_information_analogic_data_dtc_packets.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.dtcPackets_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddDtcPackets(global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_position_information_analogic_data_dtc_packets value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.dtcPackets_.Add(value);
        return this;
      }
      public Builder AddDtcPackets(global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_position_information_analogic_data_dtc_packets.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.dtcPackets_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeDtcPackets(scg::IEnumerable<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_position_information_analogic_data_dtc_packets> values) {
        PrepareBuilder();
        result.dtcPackets_.Add(values);
        return this;
      }
      public Builder ClearDtcPackets() {
        PrepareBuilder();
        result.dtcPackets_.Clear();
        return this;
      }
    }
    static mxt1xx_u_additional_data_position_information_analogic_data() {
      object.ReferenceEquals(global::maxtrack.pb.mxt1xx.Mxt1Xx.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mxt1xx_u_additional_data_position_information : pb::GeneratedMessage<mxt1xx_u_additional_data_position_information, mxt1xx_u_additional_data_position_information.Builder> {
    private mxt1xx_u_additional_data_position_information() { }
    private static readonly mxt1xx_u_additional_data_position_information defaultInstance = new mxt1xx_u_additional_data_position_information().MakeReadOnly();
    private static readonly string[] _mxt1XxUAdditionalDataPositionInformationFieldNames = new string[] { "analogic_data", "digital_data" };
    private static readonly uint[] _mxt1XxUAdditionalDataPositionInformationFieldTags = new uint[] { 18, 10 };
    public static mxt1xx_u_additional_data_position_information DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mxt1xx_u_additional_data_position_information DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mxt1xx_u_additional_data_position_information ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_position_information__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mxt1xx_u_additional_data_position_information, mxt1xx_u_additional_data_position_information.Builder> InternalFieldAccessors {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data_position_information__FieldAccessorTable; }
    }
    
    public const int DigitalDataFieldNumber = 1;
    private bool hasDigitalData;
    private global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_position_information_digital_data digitalData_;
    public bool HasDigitalData {
      get { return hasDigitalData; }
    }
    public global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_position_information_digital_data DigitalData {
      get { return digitalData_ ?? global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_position_information_digital_data.DefaultInstance; }
    }
    
    public const int AnalogicDataFieldNumber = 2;
    private bool hasAnalogicData;
    private global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_position_information_analogic_data analogicData_;
    public bool HasAnalogicData {
      get { return hasAnalogicData; }
    }
    public global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_position_information_analogic_data AnalogicData {
      get { return analogicData_ ?? global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_position_information_analogic_data.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (HasAnalogicData) {
          if (!AnalogicData.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mxt1XxUAdditionalDataPositionInformationFieldNames;
      if (hasDigitalData) {
        output.WriteMessage(1, field_names[1], DigitalData);
      }
      if (hasAnalogicData) {
        output.WriteMessage(2, field_names[0], AnalogicData);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasDigitalData) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, DigitalData);
      }
      if (hasAnalogicData) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, AnalogicData);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mxt1xx_u_additional_data_position_information ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_position_information ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_position_information ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_position_information ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_position_information ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_position_information ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_position_information ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mxt1xx_u_additional_data_position_information ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mxt1xx_u_additional_data_position_information ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_additional_data_position_information ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mxt1xx_u_additional_data_position_information MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mxt1xx_u_additional_data_position_information prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mxt1xx_u_additional_data_position_information, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mxt1xx_u_additional_data_position_information cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mxt1xx_u_additional_data_position_information result;
      
      private mxt1xx_u_additional_data_position_information PrepareBuilder() {
        if (resultIsReadOnly) {
          mxt1xx_u_additional_data_position_information original = result;
          result = new mxt1xx_u_additional_data_position_information();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mxt1xx_u_additional_data_position_information MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_position_information.Descriptor; }
      }
      
      public override mxt1xx_u_additional_data_position_information DefaultInstanceForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_position_information.DefaultInstance; }
      }
      
      public override mxt1xx_u_additional_data_position_information BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mxt1xx_u_additional_data_position_information) {
          return MergeFrom((mxt1xx_u_additional_data_position_information) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mxt1xx_u_additional_data_position_information other) {
        if (other == global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_position_information.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasDigitalData) {
          MergeDigitalData(other.DigitalData);
        }
        if (other.HasAnalogicData) {
          MergeAnalogicData(other.AnalogicData);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mxt1XxUAdditionalDataPositionInformationFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mxt1XxUAdditionalDataPositionInformationFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_position_information_digital_data.Builder subBuilder = global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_position_information_digital_data.CreateBuilder();
              if (result.hasDigitalData) {
                subBuilder.MergeFrom(DigitalData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              DigitalData = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_position_information_analogic_data.Builder subBuilder = global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_position_information_analogic_data.CreateBuilder();
              if (result.hasAnalogicData) {
                subBuilder.MergeFrom(AnalogicData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AnalogicData = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasDigitalData {
       get { return result.hasDigitalData; }
      }
      public global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_position_information_digital_data DigitalData {
        get { return result.DigitalData; }
        set { SetDigitalData(value); }
      }
      public Builder SetDigitalData(global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_position_information_digital_data value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDigitalData = true;
        result.digitalData_ = value;
        return this;
      }
      public Builder SetDigitalData(global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_position_information_digital_data.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasDigitalData = true;
        result.digitalData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeDigitalData(global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_position_information_digital_data value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasDigitalData &&
            result.digitalData_ != global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_position_information_digital_data.DefaultInstance) {
            result.digitalData_ = global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_position_information_digital_data.CreateBuilder(result.digitalData_).MergeFrom(value).BuildPartial();
        } else {
          result.digitalData_ = value;
        }
        result.hasDigitalData = true;
        return this;
      }
      public Builder ClearDigitalData() {
        PrepareBuilder();
        result.hasDigitalData = false;
        result.digitalData_ = null;
        return this;
      }
      
      public bool HasAnalogicData {
       get { return result.hasAnalogicData; }
      }
      public global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_position_information_analogic_data AnalogicData {
        get { return result.AnalogicData; }
        set { SetAnalogicData(value); }
      }
      public Builder SetAnalogicData(global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_position_information_analogic_data value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAnalogicData = true;
        result.analogicData_ = value;
        return this;
      }
      public Builder SetAnalogicData(global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_position_information_analogic_data.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAnalogicData = true;
        result.analogicData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAnalogicData(global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_position_information_analogic_data value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAnalogicData &&
            result.analogicData_ != global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_position_information_analogic_data.DefaultInstance) {
            result.analogicData_ = global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_position_information_analogic_data.CreateBuilder(result.analogicData_).MergeFrom(value).BuildPartial();
        } else {
          result.analogicData_ = value;
        }
        result.hasAnalogicData = true;
        return this;
      }
      public Builder ClearAnalogicData() {
        PrepareBuilder();
        result.hasAnalogicData = false;
        result.analogicData_ = null;
        return this;
      }
    }
    static mxt1xx_u_additional_data_position_information() {
      object.ReferenceEquals(global::maxtrack.pb.mxt1xx.Mxt1Xx.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mxt1xx_u_additional_data : pb::GeneratedMessage<mxt1xx_u_additional_data, mxt1xx_u_additional_data.Builder> {
    private mxt1xx_u_additional_data() { }
    private static readonly mxt1xx_u_additional_data defaultInstance = new mxt1xx_u_additional_data().MakeReadOnly();
    private static readonly string[] _mxt1XxUAdditionalDataFieldNames = new string[] { "crash_reconstruction", "journey_deltas", "lbs_gsm", "position_information", "route_reconstruction", "speed_details", "speed_histogram", "telemetry_events", "wifi_access_points_list" };
    private static readonly uint[] _mxt1XxUAdditionalDataFieldTags = new uint[] { 58, 50, 10, 74, 66, 26, 34, 42, 18 };
    public static mxt1xx_u_additional_data DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mxt1xx_u_additional_data DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mxt1xx_u_additional_data ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mxt1xx_u_additional_data, mxt1xx_u_additional_data.Builder> InternalFieldAccessors {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_additional_data__FieldAccessorTable; }
    }
    
    public const int LbsGsmFieldNumber = 1;
    private bool hasLbsGsm;
    private global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_lbs_gsm lbsGsm_;
    public bool HasLbsGsm {
      get { return hasLbsGsm; }
    }
    public global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_lbs_gsm LbsGsm {
      get { return lbsGsm_ ?? global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_lbs_gsm.DefaultInstance; }
    }
    
    public const int WifiAccessPointsListFieldNumber = 2;
    private pbc::PopsicleList<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_wifi_access_point> wifiAccessPointsList_ = new pbc::PopsicleList<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_wifi_access_point>();
    public scg::IList<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_wifi_access_point> WifiAccessPointsListList {
      get { return wifiAccessPointsList_; }
    }
    public int WifiAccessPointsListCount {
      get { return wifiAccessPointsList_.Count; }
    }
    public global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_wifi_access_point GetWifiAccessPointsList(int index) {
      return wifiAccessPointsList_[index];
    }
    
    public const int SpeedDetailsFieldNumber = 3;
    private bool hasSpeedDetails;
    private global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_speed_details speedDetails_;
    public bool HasSpeedDetails {
      get { return hasSpeedDetails; }
    }
    public global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_speed_details SpeedDetails {
      get { return speedDetails_ ?? global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_speed_details.DefaultInstance; }
    }
    
    public const int SpeedHistogramFieldNumber = 4;
    private bool hasSpeedHistogram;
    private global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_speed_histogram speedHistogram_;
    public bool HasSpeedHistogram {
      get { return hasSpeedHistogram; }
    }
    public global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_speed_histogram SpeedHistogram {
      get { return speedHistogram_ ?? global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_speed_histogram.DefaultInstance; }
    }
    
    public const int TelemetryEventsFieldNumber = 5;
    private bool hasTelemetryEvents;
    private global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events telemetryEvents_;
    public bool HasTelemetryEvents {
      get { return hasTelemetryEvents; }
    }
    public global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events TelemetryEvents {
      get { return telemetryEvents_ ?? global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events.DefaultInstance; }
    }
    
    public const int JourneyDeltasFieldNumber = 6;
    private bool hasJourneyDeltas;
    private global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas journeyDeltas_;
    public bool HasJourneyDeltas {
      get { return hasJourneyDeltas; }
    }
    public global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas JourneyDeltas {
      get { return journeyDeltas_ ?? global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas.DefaultInstance; }
    }
    
    public const int CrashReconstructionFieldNumber = 7;
    private bool hasCrashReconstruction;
    private global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_crash_reconstruction crashReconstruction_;
    public bool HasCrashReconstruction {
      get { return hasCrashReconstruction; }
    }
    public global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_crash_reconstruction CrashReconstruction {
      get { return crashReconstruction_ ?? global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_crash_reconstruction.DefaultInstance; }
    }
    
    public const int RouteReconstructionFieldNumber = 8;
    private bool hasRouteReconstruction;
    private global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_route_reconstruction routeReconstruction_;
    public bool HasRouteReconstruction {
      get { return hasRouteReconstruction; }
    }
    public global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_route_reconstruction RouteReconstruction {
      get { return routeReconstruction_ ?? global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_route_reconstruction.DefaultInstance; }
    }
    
    public const int PositionInformationFieldNumber = 9;
    private bool hasPositionInformation;
    private global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_position_information positionInformation_;
    public bool HasPositionInformation {
      get { return hasPositionInformation; }
    }
    public global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_position_information PositionInformation {
      get { return positionInformation_ ?? global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_position_information.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (HasLbsGsm) {
          if (!LbsGsm.IsInitialized) return false;
        }
        foreach (global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_wifi_access_point element in WifiAccessPointsListList) {
          if (!element.IsInitialized) return false;
        }
        if (HasSpeedDetails) {
          if (!SpeedDetails.IsInitialized) return false;
        }
        if (HasSpeedHistogram) {
          if (!SpeedHistogram.IsInitialized) return false;
        }
        if (HasTelemetryEvents) {
          if (!TelemetryEvents.IsInitialized) return false;
        }
        if (HasJourneyDeltas) {
          if (!JourneyDeltas.IsInitialized) return false;
        }
        if (HasRouteReconstruction) {
          if (!RouteReconstruction.IsInitialized) return false;
        }
        if (HasPositionInformation) {
          if (!PositionInformation.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mxt1XxUAdditionalDataFieldNames;
      if (hasLbsGsm) {
        output.WriteMessage(1, field_names[2], LbsGsm);
      }
      if (wifiAccessPointsList_.Count > 0) {
        output.WriteMessageArray(2, field_names[8], wifiAccessPointsList_);
      }
      if (hasSpeedDetails) {
        output.WriteMessage(3, field_names[5], SpeedDetails);
      }
      if (hasSpeedHistogram) {
        output.WriteMessage(4, field_names[6], SpeedHistogram);
      }
      if (hasTelemetryEvents) {
        output.WriteMessage(5, field_names[7], TelemetryEvents);
      }
      if (hasJourneyDeltas) {
        output.WriteMessage(6, field_names[1], JourneyDeltas);
      }
      if (hasCrashReconstruction) {
        output.WriteMessage(7, field_names[0], CrashReconstruction);
      }
      if (hasRouteReconstruction) {
        output.WriteMessage(8, field_names[4], RouteReconstruction);
      }
      if (hasPositionInformation) {
        output.WriteMessage(9, field_names[3], PositionInformation);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasLbsGsm) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, LbsGsm);
      }
      foreach (global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_wifi_access_point element in WifiAccessPointsListList) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, element);
      }
      if (hasSpeedDetails) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, SpeedDetails);
      }
      if (hasSpeedHistogram) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, SpeedHistogram);
      }
      if (hasTelemetryEvents) {
        size += pb::CodedOutputStream.ComputeMessageSize(5, TelemetryEvents);
      }
      if (hasJourneyDeltas) {
        size += pb::CodedOutputStream.ComputeMessageSize(6, JourneyDeltas);
      }
      if (hasCrashReconstruction) {
        size += pb::CodedOutputStream.ComputeMessageSize(7, CrashReconstruction);
      }
      if (hasRouteReconstruction) {
        size += pb::CodedOutputStream.ComputeMessageSize(8, RouteReconstruction);
      }
      if (hasPositionInformation) {
        size += pb::CodedOutputStream.ComputeMessageSize(9, PositionInformation);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mxt1xx_u_additional_data ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_additional_data ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_additional_data ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_additional_data ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_additional_data ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_additional_data ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_additional_data ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mxt1xx_u_additional_data ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mxt1xx_u_additional_data ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_additional_data ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mxt1xx_u_additional_data MakeReadOnly() {
      wifiAccessPointsList_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mxt1xx_u_additional_data prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mxt1xx_u_additional_data, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mxt1xx_u_additional_data cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mxt1xx_u_additional_data result;
      
      private mxt1xx_u_additional_data PrepareBuilder() {
        if (resultIsReadOnly) {
          mxt1xx_u_additional_data original = result;
          result = new mxt1xx_u_additional_data();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mxt1xx_u_additional_data MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data.Descriptor; }
      }
      
      public override mxt1xx_u_additional_data DefaultInstanceForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data.DefaultInstance; }
      }
      
      public override mxt1xx_u_additional_data BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mxt1xx_u_additional_data) {
          return MergeFrom((mxt1xx_u_additional_data) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mxt1xx_u_additional_data other) {
        if (other == global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasLbsGsm) {
          MergeLbsGsm(other.LbsGsm);
        }
        if (other.wifiAccessPointsList_.Count != 0) {
          result.wifiAccessPointsList_.Add(other.wifiAccessPointsList_);
        }
        if (other.HasSpeedDetails) {
          MergeSpeedDetails(other.SpeedDetails);
        }
        if (other.HasSpeedHistogram) {
          MergeSpeedHistogram(other.SpeedHistogram);
        }
        if (other.HasTelemetryEvents) {
          MergeTelemetryEvents(other.TelemetryEvents);
        }
        if (other.HasJourneyDeltas) {
          MergeJourneyDeltas(other.JourneyDeltas);
        }
        if (other.HasCrashReconstruction) {
          MergeCrashReconstruction(other.CrashReconstruction);
        }
        if (other.HasRouteReconstruction) {
          MergeRouteReconstruction(other.RouteReconstruction);
        }
        if (other.HasPositionInformation) {
          MergePositionInformation(other.PositionInformation);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mxt1XxUAdditionalDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mxt1XxUAdditionalDataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_lbs_gsm.Builder subBuilder = global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_lbs_gsm.CreateBuilder();
              if (result.hasLbsGsm) {
                subBuilder.MergeFrom(LbsGsm);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              LbsGsm = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.wifiAccessPointsList_, global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_wifi_access_point.DefaultInstance, extensionRegistry);
              break;
            }
            case 26: {
              global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_speed_details.Builder subBuilder = global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_speed_details.CreateBuilder();
              if (result.hasSpeedDetails) {
                subBuilder.MergeFrom(SpeedDetails);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SpeedDetails = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_speed_histogram.Builder subBuilder = global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_speed_histogram.CreateBuilder();
              if (result.hasSpeedHistogram) {
                subBuilder.MergeFrom(SpeedHistogram);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SpeedHistogram = subBuilder.BuildPartial();
              break;
            }
            case 42: {
              global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events.Builder subBuilder = global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events.CreateBuilder();
              if (result.hasTelemetryEvents) {
                subBuilder.MergeFrom(TelemetryEvents);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              TelemetryEvents = subBuilder.BuildPartial();
              break;
            }
            case 50: {
              global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas.Builder subBuilder = global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas.CreateBuilder();
              if (result.hasJourneyDeltas) {
                subBuilder.MergeFrom(JourneyDeltas);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              JourneyDeltas = subBuilder.BuildPartial();
              break;
            }
            case 58: {
              global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_crash_reconstruction.Builder subBuilder = global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_crash_reconstruction.CreateBuilder();
              if (result.hasCrashReconstruction) {
                subBuilder.MergeFrom(CrashReconstruction);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              CrashReconstruction = subBuilder.BuildPartial();
              break;
            }
            case 66: {
              global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_route_reconstruction.Builder subBuilder = global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_route_reconstruction.CreateBuilder();
              if (result.hasRouteReconstruction) {
                subBuilder.MergeFrom(RouteReconstruction);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              RouteReconstruction = subBuilder.BuildPartial();
              break;
            }
            case 74: {
              global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_position_information.Builder subBuilder = global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_position_information.CreateBuilder();
              if (result.hasPositionInformation) {
                subBuilder.MergeFrom(PositionInformation);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              PositionInformation = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasLbsGsm {
       get { return result.hasLbsGsm; }
      }
      public global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_lbs_gsm LbsGsm {
        get { return result.LbsGsm; }
        set { SetLbsGsm(value); }
      }
      public Builder SetLbsGsm(global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_lbs_gsm value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLbsGsm = true;
        result.lbsGsm_ = value;
        return this;
      }
      public Builder SetLbsGsm(global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_lbs_gsm.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasLbsGsm = true;
        result.lbsGsm_ = builderForValue.Build();
        return this;
      }
      public Builder MergeLbsGsm(global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_lbs_gsm value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasLbsGsm &&
            result.lbsGsm_ != global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_lbs_gsm.DefaultInstance) {
            result.lbsGsm_ = global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_lbs_gsm.CreateBuilder(result.lbsGsm_).MergeFrom(value).BuildPartial();
        } else {
          result.lbsGsm_ = value;
        }
        result.hasLbsGsm = true;
        return this;
      }
      public Builder ClearLbsGsm() {
        PrepareBuilder();
        result.hasLbsGsm = false;
        result.lbsGsm_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_wifi_access_point> WifiAccessPointsListList {
        get { return PrepareBuilder().wifiAccessPointsList_; }
      }
      public int WifiAccessPointsListCount {
        get { return result.WifiAccessPointsListCount; }
      }
      public global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_wifi_access_point GetWifiAccessPointsList(int index) {
        return result.GetWifiAccessPointsList(index);
      }
      public Builder SetWifiAccessPointsList(int index, global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_wifi_access_point value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.wifiAccessPointsList_[index] = value;
        return this;
      }
      public Builder SetWifiAccessPointsList(int index, global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_wifi_access_point.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.wifiAccessPointsList_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddWifiAccessPointsList(global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_wifi_access_point value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.wifiAccessPointsList_.Add(value);
        return this;
      }
      public Builder AddWifiAccessPointsList(global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_wifi_access_point.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.wifiAccessPointsList_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeWifiAccessPointsList(scg::IEnumerable<global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_wifi_access_point> values) {
        PrepareBuilder();
        result.wifiAccessPointsList_.Add(values);
        return this;
      }
      public Builder ClearWifiAccessPointsList() {
        PrepareBuilder();
        result.wifiAccessPointsList_.Clear();
        return this;
      }
      
      public bool HasSpeedDetails {
       get { return result.hasSpeedDetails; }
      }
      public global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_speed_details SpeedDetails {
        get { return result.SpeedDetails; }
        set { SetSpeedDetails(value); }
      }
      public Builder SetSpeedDetails(global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_speed_details value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSpeedDetails = true;
        result.speedDetails_ = value;
        return this;
      }
      public Builder SetSpeedDetails(global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_speed_details.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSpeedDetails = true;
        result.speedDetails_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSpeedDetails(global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_speed_details value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSpeedDetails &&
            result.speedDetails_ != global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_speed_details.DefaultInstance) {
            result.speedDetails_ = global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_speed_details.CreateBuilder(result.speedDetails_).MergeFrom(value).BuildPartial();
        } else {
          result.speedDetails_ = value;
        }
        result.hasSpeedDetails = true;
        return this;
      }
      public Builder ClearSpeedDetails() {
        PrepareBuilder();
        result.hasSpeedDetails = false;
        result.speedDetails_ = null;
        return this;
      }
      
      public bool HasSpeedHistogram {
       get { return result.hasSpeedHistogram; }
      }
      public global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_speed_histogram SpeedHistogram {
        get { return result.SpeedHistogram; }
        set { SetSpeedHistogram(value); }
      }
      public Builder SetSpeedHistogram(global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_speed_histogram value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSpeedHistogram = true;
        result.speedHistogram_ = value;
        return this;
      }
      public Builder SetSpeedHistogram(global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_speed_histogram.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSpeedHistogram = true;
        result.speedHistogram_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSpeedHistogram(global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_speed_histogram value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSpeedHistogram &&
            result.speedHistogram_ != global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_speed_histogram.DefaultInstance) {
            result.speedHistogram_ = global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_speed_histogram.CreateBuilder(result.speedHistogram_).MergeFrom(value).BuildPartial();
        } else {
          result.speedHistogram_ = value;
        }
        result.hasSpeedHistogram = true;
        return this;
      }
      public Builder ClearSpeedHistogram() {
        PrepareBuilder();
        result.hasSpeedHistogram = false;
        result.speedHistogram_ = null;
        return this;
      }
      
      public bool HasTelemetryEvents {
       get { return result.hasTelemetryEvents; }
      }
      public global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events TelemetryEvents {
        get { return result.TelemetryEvents; }
        set { SetTelemetryEvents(value); }
      }
      public Builder SetTelemetryEvents(global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTelemetryEvents = true;
        result.telemetryEvents_ = value;
        return this;
      }
      public Builder SetTelemetryEvents(global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasTelemetryEvents = true;
        result.telemetryEvents_ = builderForValue.Build();
        return this;
      }
      public Builder MergeTelemetryEvents(global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasTelemetryEvents &&
            result.telemetryEvents_ != global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events.DefaultInstance) {
            result.telemetryEvents_ = global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_telemetry_events.CreateBuilder(result.telemetryEvents_).MergeFrom(value).BuildPartial();
        } else {
          result.telemetryEvents_ = value;
        }
        result.hasTelemetryEvents = true;
        return this;
      }
      public Builder ClearTelemetryEvents() {
        PrepareBuilder();
        result.hasTelemetryEvents = false;
        result.telemetryEvents_ = null;
        return this;
      }
      
      public bool HasJourneyDeltas {
       get { return result.hasJourneyDeltas; }
      }
      public global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas JourneyDeltas {
        get { return result.JourneyDeltas; }
        set { SetJourneyDeltas(value); }
      }
      public Builder SetJourneyDeltas(global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasJourneyDeltas = true;
        result.journeyDeltas_ = value;
        return this;
      }
      public Builder SetJourneyDeltas(global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasJourneyDeltas = true;
        result.journeyDeltas_ = builderForValue.Build();
        return this;
      }
      public Builder MergeJourneyDeltas(global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasJourneyDeltas &&
            result.journeyDeltas_ != global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas.DefaultInstance) {
            result.journeyDeltas_ = global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_journey_deltas.CreateBuilder(result.journeyDeltas_).MergeFrom(value).BuildPartial();
        } else {
          result.journeyDeltas_ = value;
        }
        result.hasJourneyDeltas = true;
        return this;
      }
      public Builder ClearJourneyDeltas() {
        PrepareBuilder();
        result.hasJourneyDeltas = false;
        result.journeyDeltas_ = null;
        return this;
      }
      
      public bool HasCrashReconstruction {
       get { return result.hasCrashReconstruction; }
      }
      public global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_crash_reconstruction CrashReconstruction {
        get { return result.CrashReconstruction; }
        set { SetCrashReconstruction(value); }
      }
      public Builder SetCrashReconstruction(global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_crash_reconstruction value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCrashReconstruction = true;
        result.crashReconstruction_ = value;
        return this;
      }
      public Builder SetCrashReconstruction(global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_crash_reconstruction.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasCrashReconstruction = true;
        result.crashReconstruction_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCrashReconstruction(global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_crash_reconstruction value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasCrashReconstruction &&
            result.crashReconstruction_ != global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_crash_reconstruction.DefaultInstance) {
            result.crashReconstruction_ = global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_crash_reconstruction.CreateBuilder(result.crashReconstruction_).MergeFrom(value).BuildPartial();
        } else {
          result.crashReconstruction_ = value;
        }
        result.hasCrashReconstruction = true;
        return this;
      }
      public Builder ClearCrashReconstruction() {
        PrepareBuilder();
        result.hasCrashReconstruction = false;
        result.crashReconstruction_ = null;
        return this;
      }
      
      public bool HasRouteReconstruction {
       get { return result.hasRouteReconstruction; }
      }
      public global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_route_reconstruction RouteReconstruction {
        get { return result.RouteReconstruction; }
        set { SetRouteReconstruction(value); }
      }
      public Builder SetRouteReconstruction(global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_route_reconstruction value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRouteReconstruction = true;
        result.routeReconstruction_ = value;
        return this;
      }
      public Builder SetRouteReconstruction(global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_route_reconstruction.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasRouteReconstruction = true;
        result.routeReconstruction_ = builderForValue.Build();
        return this;
      }
      public Builder MergeRouteReconstruction(global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_route_reconstruction value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasRouteReconstruction &&
            result.routeReconstruction_ != global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_route_reconstruction.DefaultInstance) {
            result.routeReconstruction_ = global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_route_reconstruction.CreateBuilder(result.routeReconstruction_).MergeFrom(value).BuildPartial();
        } else {
          result.routeReconstruction_ = value;
        }
        result.hasRouteReconstruction = true;
        return this;
      }
      public Builder ClearRouteReconstruction() {
        PrepareBuilder();
        result.hasRouteReconstruction = false;
        result.routeReconstruction_ = null;
        return this;
      }
      
      public bool HasPositionInformation {
       get { return result.hasPositionInformation; }
      }
      public global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_position_information PositionInformation {
        get { return result.PositionInformation; }
        set { SetPositionInformation(value); }
      }
      public Builder SetPositionInformation(global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_position_information value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPositionInformation = true;
        result.positionInformation_ = value;
        return this;
      }
      public Builder SetPositionInformation(global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_position_information.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPositionInformation = true;
        result.positionInformation_ = builderForValue.Build();
        return this;
      }
      public Builder MergePositionInformation(global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_position_information value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPositionInformation &&
            result.positionInformation_ != global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_position_information.DefaultInstance) {
            result.positionInformation_ = global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data_position_information.CreateBuilder(result.positionInformation_).MergeFrom(value).BuildPartial();
        } else {
          result.positionInformation_ = value;
        }
        result.hasPositionInformation = true;
        return this;
      }
      public Builder ClearPositionInformation() {
        PrepareBuilder();
        result.hasPositionInformation = false;
        result.positionInformation_ = null;
        return this;
      }
    }
    static mxt1xx_u_additional_data() {
      object.ReferenceEquals(global::maxtrack.pb.mxt1xx.Mxt1Xx.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mxt1xx_u_transparent_data : pb::GeneratedMessage<mxt1xx_u_transparent_data, mxt1xx_u_transparent_data.Builder> {
    private mxt1xx_u_transparent_data() { }
    private static readonly mxt1xx_u_transparent_data defaultInstance = new mxt1xx_u_transparent_data().MakeReadOnly();
    private static readonly string[] _mxt1XxUTransparentDataFieldNames = new string[] { "data" };
    private static readonly uint[] _mxt1XxUTransparentDataFieldTags = new uint[] { 10 };
    public static mxt1xx_u_transparent_data DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mxt1xx_u_transparent_data DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mxt1xx_u_transparent_data ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_transparent_data__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mxt1xx_u_transparent_data, mxt1xx_u_transparent_data.Builder> InternalFieldAccessors {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_transparent_data__FieldAccessorTable; }
    }
    
    public const int DataFieldNumber = 1;
    private bool hasData;
    private string data_ = "";
    public bool HasData {
      get { return hasData; }
    }
    public string Data {
      get { return data_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasData) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mxt1XxUTransparentDataFieldNames;
      if (hasData) {
        output.WriteString(1, field_names[0], Data);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasData) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Data);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mxt1xx_u_transparent_data ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_transparent_data ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_transparent_data ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_transparent_data ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_transparent_data ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_transparent_data ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_transparent_data ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mxt1xx_u_transparent_data ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mxt1xx_u_transparent_data ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_transparent_data ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mxt1xx_u_transparent_data MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mxt1xx_u_transparent_data prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mxt1xx_u_transparent_data, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mxt1xx_u_transparent_data cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mxt1xx_u_transparent_data result;
      
      private mxt1xx_u_transparent_data PrepareBuilder() {
        if (resultIsReadOnly) {
          mxt1xx_u_transparent_data original = result;
          result = new mxt1xx_u_transparent_data();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mxt1xx_u_transparent_data MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_transparent_data.Descriptor; }
      }
      
      public override mxt1xx_u_transparent_data DefaultInstanceForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_transparent_data.DefaultInstance; }
      }
      
      public override mxt1xx_u_transparent_data BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mxt1xx_u_transparent_data) {
          return MergeFrom((mxt1xx_u_transparent_data) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mxt1xx_u_transparent_data other) {
        if (other == global::maxtrack.pb.mxt1xx.mxt1xx_u_transparent_data.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasData) {
          Data = other.Data;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mxt1XxUTransparentDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mxt1XxUTransparentDataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasData = input.ReadString(ref result.data_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasData {
        get { return result.hasData; }
      }
      public string Data {
        get { return result.Data; }
        set { SetData(value); }
      }
      public Builder SetData(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasData = true;
        result.data_ = value;
        return this;
      }
      public Builder ClearData() {
        PrepareBuilder();
        result.hasData = false;
        result.data_ = "";
        return this;
      }
    }
    static mxt1xx_u_transparent_data() {
      object.ReferenceEquals(global::maxtrack.pb.mxt1xx.Mxt1Xx.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mxt1xx_u_transparent_response_rs232_status : pb::GeneratedMessage<mxt1xx_u_transparent_response_rs232_status, mxt1xx_u_transparent_response_rs232_status.Builder> {
    private mxt1xx_u_transparent_response_rs232_status() { }
    private static readonly mxt1xx_u_transparent_response_rs232_status defaultInstance = new mxt1xx_u_transparent_response_rs232_status().MakeReadOnly();
    private static readonly string[] _mxt1XxUTransparentResponseRs232StatusFieldNames = new string[] { "status" };
    private static readonly uint[] _mxt1XxUTransparentResponseRs232StatusFieldTags = new uint[] { 8 };
    public static mxt1xx_u_transparent_response_rs232_status DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mxt1xx_u_transparent_response_rs232_status DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mxt1xx_u_transparent_response_rs232_status ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_transparent_response_rs232_status__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mxt1xx_u_transparent_response_rs232_status, mxt1xx_u_transparent_response_rs232_status.Builder> InternalFieldAccessors {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_transparent_response_rs232_status__FieldAccessorTable; }
    }
    
    public const int StatusFieldNumber = 1;
    private bool hasStatus;
    private uint status_;
    public bool HasStatus {
      get { return hasStatus; }
    }
    [global::System.CLSCompliant(false)]
    public uint Status {
      get { return status_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasStatus) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mxt1XxUTransparentResponseRs232StatusFieldNames;
      if (hasStatus) {
        output.WriteUInt32(1, field_names[0], Status);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasStatus) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, Status);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mxt1xx_u_transparent_response_rs232_status ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_transparent_response_rs232_status ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_transparent_response_rs232_status ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_transparent_response_rs232_status ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_transparent_response_rs232_status ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_transparent_response_rs232_status ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_transparent_response_rs232_status ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mxt1xx_u_transparent_response_rs232_status ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mxt1xx_u_transparent_response_rs232_status ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_transparent_response_rs232_status ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mxt1xx_u_transparent_response_rs232_status MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mxt1xx_u_transparent_response_rs232_status prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mxt1xx_u_transparent_response_rs232_status, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mxt1xx_u_transparent_response_rs232_status cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mxt1xx_u_transparent_response_rs232_status result;
      
      private mxt1xx_u_transparent_response_rs232_status PrepareBuilder() {
        if (resultIsReadOnly) {
          mxt1xx_u_transparent_response_rs232_status original = result;
          result = new mxt1xx_u_transparent_response_rs232_status();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mxt1xx_u_transparent_response_rs232_status MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_transparent_response_rs232_status.Descriptor; }
      }
      
      public override mxt1xx_u_transparent_response_rs232_status DefaultInstanceForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_transparent_response_rs232_status.DefaultInstance; }
      }
      
      public override mxt1xx_u_transparent_response_rs232_status BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mxt1xx_u_transparent_response_rs232_status) {
          return MergeFrom((mxt1xx_u_transparent_response_rs232_status) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mxt1xx_u_transparent_response_rs232_status other) {
        if (other == global::maxtrack.pb.mxt1xx.mxt1xx_u_transparent_response_rs232_status.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasStatus) {
          Status = other.Status;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mxt1XxUTransparentResponseRs232StatusFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mxt1XxUTransparentResponseRs232StatusFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasStatus = input.ReadUInt32(ref result.status_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasStatus {
        get { return result.hasStatus; }
      }
      [global::System.CLSCompliant(false)]
      public uint Status {
        get { return result.Status; }
        set { SetStatus(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetStatus(uint value) {
        PrepareBuilder();
        result.hasStatus = true;
        result.status_ = value;
        return this;
      }
      public Builder ClearStatus() {
        PrepareBuilder();
        result.hasStatus = false;
        result.status_ = 0;
        return this;
      }
    }
    static mxt1xx_u_transparent_response_rs232_status() {
      object.ReferenceEquals(global::maxtrack.pb.mxt1xx.Mxt1Xx.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mxt1xx_u_transparent_response : pb::GeneratedMessage<mxt1xx_u_transparent_response, mxt1xx_u_transparent_response.Builder> {
    private mxt1xx_u_transparent_response() { }
    private static readonly mxt1xx_u_transparent_response defaultInstance = new mxt1xx_u_transparent_response().MakeReadOnly();
    private static readonly string[] _mxt1XxUTransparentResponseFieldNames = new string[] { "date", "protocol", "rs232_status", "serial" };
    private static readonly uint[] _mxt1XxUTransparentResponseFieldTags = new uint[] { 26, 8, 34, 16 };
    public static mxt1xx_u_transparent_response DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mxt1xx_u_transparent_response DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mxt1xx_u_transparent_response ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_transparent_response__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mxt1xx_u_transparent_response, mxt1xx_u_transparent_response.Builder> InternalFieldAccessors {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_transparent_response__FieldAccessorTable; }
    }
    
    public const int ProtocolFieldNumber = 1;
    private bool hasProtocol;
    private uint protocol_;
    public bool HasProtocol {
      get { return hasProtocol; }
    }
    [global::System.CLSCompliant(false)]
    public uint Protocol {
      get { return protocol_; }
    }
    
    public const int SerialFieldNumber = 2;
    private bool hasSerial;
    private uint serial_;
    public bool HasSerial {
      get { return hasSerial; }
    }
    [global::System.CLSCompliant(false)]
    public uint Serial {
      get { return serial_; }
    }
    
    public const int DateFieldNumber = 3;
    private bool hasDate;
    private string date_ = "";
    public bool HasDate {
      get { return hasDate; }
    }
    public string Date {
      get { return date_; }
    }
    
    public const int Rs232StatusFieldNumber = 4;
    private bool hasRs232Status;
    private global::maxtrack.pb.mxt1xx.mxt1xx_u_transparent_response_rs232_status rs232Status_;
    public bool HasRs232Status {
      get { return hasRs232Status; }
    }
    public global::maxtrack.pb.mxt1xx.mxt1xx_u_transparent_response_rs232_status Rs232Status {
      get { return rs232Status_ ?? global::maxtrack.pb.mxt1xx.mxt1xx_u_transparent_response_rs232_status.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasProtocol) return false;
        if (!hasSerial) return false;
        if (!hasDate) return false;
        if (HasRs232Status) {
          if (!Rs232Status.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mxt1XxUTransparentResponseFieldNames;
      if (hasProtocol) {
        output.WriteUInt32(1, field_names[1], Protocol);
      }
      if (hasSerial) {
        output.WriteUInt32(2, field_names[3], Serial);
      }
      if (hasDate) {
        output.WriteString(3, field_names[0], Date);
      }
      if (hasRs232Status) {
        output.WriteMessage(4, field_names[2], Rs232Status);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasProtocol) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, Protocol);
      }
      if (hasSerial) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, Serial);
      }
      if (hasDate) {
        size += pb::CodedOutputStream.ComputeStringSize(3, Date);
      }
      if (hasRs232Status) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, Rs232Status);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mxt1xx_u_transparent_response ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_transparent_response ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_transparent_response ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_transparent_response ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_transparent_response ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_transparent_response ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_transparent_response ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mxt1xx_u_transparent_response ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mxt1xx_u_transparent_response ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_transparent_response ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mxt1xx_u_transparent_response MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mxt1xx_u_transparent_response prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mxt1xx_u_transparent_response, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mxt1xx_u_transparent_response cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mxt1xx_u_transparent_response result;
      
      private mxt1xx_u_transparent_response PrepareBuilder() {
        if (resultIsReadOnly) {
          mxt1xx_u_transparent_response original = result;
          result = new mxt1xx_u_transparent_response();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mxt1xx_u_transparent_response MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_transparent_response.Descriptor; }
      }
      
      public override mxt1xx_u_transparent_response DefaultInstanceForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_transparent_response.DefaultInstance; }
      }
      
      public override mxt1xx_u_transparent_response BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mxt1xx_u_transparent_response) {
          return MergeFrom((mxt1xx_u_transparent_response) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mxt1xx_u_transparent_response other) {
        if (other == global::maxtrack.pb.mxt1xx.mxt1xx_u_transparent_response.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasProtocol) {
          Protocol = other.Protocol;
        }
        if (other.HasSerial) {
          Serial = other.Serial;
        }
        if (other.HasDate) {
          Date = other.Date;
        }
        if (other.HasRs232Status) {
          MergeRs232Status(other.Rs232Status);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mxt1XxUTransparentResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mxt1XxUTransparentResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasProtocol = input.ReadUInt32(ref result.protocol_);
              break;
            }
            case 16: {
              result.hasSerial = input.ReadUInt32(ref result.serial_);
              break;
            }
            case 26: {
              result.hasDate = input.ReadString(ref result.date_);
              break;
            }
            case 34: {
              global::maxtrack.pb.mxt1xx.mxt1xx_u_transparent_response_rs232_status.Builder subBuilder = global::maxtrack.pb.mxt1xx.mxt1xx_u_transparent_response_rs232_status.CreateBuilder();
              if (result.hasRs232Status) {
                subBuilder.MergeFrom(Rs232Status);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Rs232Status = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasProtocol {
        get { return result.hasProtocol; }
      }
      [global::System.CLSCompliant(false)]
      public uint Protocol {
        get { return result.Protocol; }
        set { SetProtocol(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetProtocol(uint value) {
        PrepareBuilder();
        result.hasProtocol = true;
        result.protocol_ = value;
        return this;
      }
      public Builder ClearProtocol() {
        PrepareBuilder();
        result.hasProtocol = false;
        result.protocol_ = 0;
        return this;
      }
      
      public bool HasSerial {
        get { return result.hasSerial; }
      }
      [global::System.CLSCompliant(false)]
      public uint Serial {
        get { return result.Serial; }
        set { SetSerial(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSerial(uint value) {
        PrepareBuilder();
        result.hasSerial = true;
        result.serial_ = value;
        return this;
      }
      public Builder ClearSerial() {
        PrepareBuilder();
        result.hasSerial = false;
        result.serial_ = 0;
        return this;
      }
      
      public bool HasDate {
        get { return result.hasDate; }
      }
      public string Date {
        get { return result.Date; }
        set { SetDate(value); }
      }
      public Builder SetDate(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDate = true;
        result.date_ = value;
        return this;
      }
      public Builder ClearDate() {
        PrepareBuilder();
        result.hasDate = false;
        result.date_ = "";
        return this;
      }
      
      public bool HasRs232Status {
       get { return result.hasRs232Status; }
      }
      public global::maxtrack.pb.mxt1xx.mxt1xx_u_transparent_response_rs232_status Rs232Status {
        get { return result.Rs232Status; }
        set { SetRs232Status(value); }
      }
      public Builder SetRs232Status(global::maxtrack.pb.mxt1xx.mxt1xx_u_transparent_response_rs232_status value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRs232Status = true;
        result.rs232Status_ = value;
        return this;
      }
      public Builder SetRs232Status(global::maxtrack.pb.mxt1xx.mxt1xx_u_transparent_response_rs232_status.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasRs232Status = true;
        result.rs232Status_ = builderForValue.Build();
        return this;
      }
      public Builder MergeRs232Status(global::maxtrack.pb.mxt1xx.mxt1xx_u_transparent_response_rs232_status value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasRs232Status &&
            result.rs232Status_ != global::maxtrack.pb.mxt1xx.mxt1xx_u_transparent_response_rs232_status.DefaultInstance) {
            result.rs232Status_ = global::maxtrack.pb.mxt1xx.mxt1xx_u_transparent_response_rs232_status.CreateBuilder(result.rs232Status_).MergeFrom(value).BuildPartial();
        } else {
          result.rs232Status_ = value;
        }
        result.hasRs232Status = true;
        return this;
      }
      public Builder ClearRs232Status() {
        PrepareBuilder();
        result.hasRs232Status = false;
        result.rs232Status_ = null;
        return this;
      }
    }
    static mxt1xx_u_transparent_response() {
      object.ReferenceEquals(global::maxtrack.pb.mxt1xx.Mxt1Xx.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mxt1xx_u_icc_id_answer : pb::GeneratedMessage<mxt1xx_u_icc_id_answer, mxt1xx_u_icc_id_answer.Builder> {
    private mxt1xx_u_icc_id_answer() { }
    private static readonly mxt1xx_u_icc_id_answer defaultInstance = new mxt1xx_u_icc_id_answer().MakeReadOnly();
    private static readonly string[] _mxt1XxUIccIdAnswerFieldNames = new string[] { "date", "icc_id", "protocol", "serial" };
    private static readonly uint[] _mxt1XxUIccIdAnswerFieldTags = new uint[] { 34, 26, 8, 16 };
    public static mxt1xx_u_icc_id_answer DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mxt1xx_u_icc_id_answer DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mxt1xx_u_icc_id_answer ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_icc_id_answer__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mxt1xx_u_icc_id_answer, mxt1xx_u_icc_id_answer.Builder> InternalFieldAccessors {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_icc_id_answer__FieldAccessorTable; }
    }
    
    public const int ProtocolFieldNumber = 1;
    private bool hasProtocol;
    private uint protocol_;
    public bool HasProtocol {
      get { return hasProtocol; }
    }
    [global::System.CLSCompliant(false)]
    public uint Protocol {
      get { return protocol_; }
    }
    
    public const int SerialFieldNumber = 2;
    private bool hasSerial;
    private uint serial_;
    public bool HasSerial {
      get { return hasSerial; }
    }
    [global::System.CLSCompliant(false)]
    public uint Serial {
      get { return serial_; }
    }
    
    public const int IccIdFieldNumber = 3;
    private bool hasIccId;
    private string iccId_ = "";
    public bool HasIccId {
      get { return hasIccId; }
    }
    public string IccId {
      get { return iccId_; }
    }
    
    public const int DateFieldNumber = 4;
    private bool hasDate;
    private string date_ = "";
    public bool HasDate {
      get { return hasDate; }
    }
    public string Date {
      get { return date_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasProtocol) return false;
        if (!hasSerial) return false;
        if (!hasIccId) return false;
        if (!hasDate) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mxt1XxUIccIdAnswerFieldNames;
      if (hasProtocol) {
        output.WriteUInt32(1, field_names[2], Protocol);
      }
      if (hasSerial) {
        output.WriteUInt32(2, field_names[3], Serial);
      }
      if (hasIccId) {
        output.WriteString(3, field_names[1], IccId);
      }
      if (hasDate) {
        output.WriteString(4, field_names[0], Date);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasProtocol) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, Protocol);
      }
      if (hasSerial) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, Serial);
      }
      if (hasIccId) {
        size += pb::CodedOutputStream.ComputeStringSize(3, IccId);
      }
      if (hasDate) {
        size += pb::CodedOutputStream.ComputeStringSize(4, Date);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mxt1xx_u_icc_id_answer ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_icc_id_answer ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_icc_id_answer ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_icc_id_answer ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_icc_id_answer ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_icc_id_answer ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_icc_id_answer ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mxt1xx_u_icc_id_answer ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mxt1xx_u_icc_id_answer ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_icc_id_answer ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mxt1xx_u_icc_id_answer MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mxt1xx_u_icc_id_answer prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mxt1xx_u_icc_id_answer, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mxt1xx_u_icc_id_answer cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mxt1xx_u_icc_id_answer result;
      
      private mxt1xx_u_icc_id_answer PrepareBuilder() {
        if (resultIsReadOnly) {
          mxt1xx_u_icc_id_answer original = result;
          result = new mxt1xx_u_icc_id_answer();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mxt1xx_u_icc_id_answer MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_icc_id_answer.Descriptor; }
      }
      
      public override mxt1xx_u_icc_id_answer DefaultInstanceForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_icc_id_answer.DefaultInstance; }
      }
      
      public override mxt1xx_u_icc_id_answer BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mxt1xx_u_icc_id_answer) {
          return MergeFrom((mxt1xx_u_icc_id_answer) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mxt1xx_u_icc_id_answer other) {
        if (other == global::maxtrack.pb.mxt1xx.mxt1xx_u_icc_id_answer.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasProtocol) {
          Protocol = other.Protocol;
        }
        if (other.HasSerial) {
          Serial = other.Serial;
        }
        if (other.HasIccId) {
          IccId = other.IccId;
        }
        if (other.HasDate) {
          Date = other.Date;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mxt1XxUIccIdAnswerFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mxt1XxUIccIdAnswerFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasProtocol = input.ReadUInt32(ref result.protocol_);
              break;
            }
            case 16: {
              result.hasSerial = input.ReadUInt32(ref result.serial_);
              break;
            }
            case 26: {
              result.hasIccId = input.ReadString(ref result.iccId_);
              break;
            }
            case 34: {
              result.hasDate = input.ReadString(ref result.date_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasProtocol {
        get { return result.hasProtocol; }
      }
      [global::System.CLSCompliant(false)]
      public uint Protocol {
        get { return result.Protocol; }
        set { SetProtocol(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetProtocol(uint value) {
        PrepareBuilder();
        result.hasProtocol = true;
        result.protocol_ = value;
        return this;
      }
      public Builder ClearProtocol() {
        PrepareBuilder();
        result.hasProtocol = false;
        result.protocol_ = 0;
        return this;
      }
      
      public bool HasSerial {
        get { return result.hasSerial; }
      }
      [global::System.CLSCompliant(false)]
      public uint Serial {
        get { return result.Serial; }
        set { SetSerial(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSerial(uint value) {
        PrepareBuilder();
        result.hasSerial = true;
        result.serial_ = value;
        return this;
      }
      public Builder ClearSerial() {
        PrepareBuilder();
        result.hasSerial = false;
        result.serial_ = 0;
        return this;
      }
      
      public bool HasIccId {
        get { return result.hasIccId; }
      }
      public string IccId {
        get { return result.IccId; }
        set { SetIccId(value); }
      }
      public Builder SetIccId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasIccId = true;
        result.iccId_ = value;
        return this;
      }
      public Builder ClearIccId() {
        PrepareBuilder();
        result.hasIccId = false;
        result.iccId_ = "";
        return this;
      }
      
      public bool HasDate {
        get { return result.hasDate; }
      }
      public string Date {
        get { return result.Date; }
        set { SetDate(value); }
      }
      public Builder SetDate(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDate = true;
        result.date_ = value;
        return this;
      }
      public Builder ClearDate() {
        PrepareBuilder();
        result.hasDate = false;
        result.date_ = "";
        return this;
      }
    }
    static mxt1xx_u_icc_id_answer() {
      object.ReferenceEquals(global::maxtrack.pb.mxt1xx.Mxt1Xx.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mxt1xx_u_version : pb::GeneratedMessage<mxt1xx_u_version, mxt1xx_u_version.Builder> {
    private mxt1xx_u_version() { }
    private static readonly mxt1xx_u_version defaultInstance = new mxt1xx_u_version().MakeReadOnly();
    private static readonly string[] _mxt1XxUVersionFieldNames = new string[] { "app_version", "date", "modem_version", "protocol", "serial", "zigbee_version" };
    private static readonly uint[] _mxt1XxUVersionFieldTags = new uint[] { 34, 50, 26, 8, 16, 42 };
    public static mxt1xx_u_version DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mxt1xx_u_version DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mxt1xx_u_version ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_version__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mxt1xx_u_version, mxt1xx_u_version.Builder> InternalFieldAccessors {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_version__FieldAccessorTable; }
    }
    
    public const int ProtocolFieldNumber = 1;
    private bool hasProtocol;
    private uint protocol_;
    public bool HasProtocol {
      get { return hasProtocol; }
    }
    [global::System.CLSCompliant(false)]
    public uint Protocol {
      get { return protocol_; }
    }
    
    public const int SerialFieldNumber = 2;
    private bool hasSerial;
    private uint serial_;
    public bool HasSerial {
      get { return hasSerial; }
    }
    [global::System.CLSCompliant(false)]
    public uint Serial {
      get { return serial_; }
    }
    
    public const int ModemVersionFieldNumber = 3;
    private bool hasModemVersion;
    private string modemVersion_ = "";
    public bool HasModemVersion {
      get { return hasModemVersion; }
    }
    public string ModemVersion {
      get { return modemVersion_; }
    }
    
    public const int AppVersionFieldNumber = 4;
    private bool hasAppVersion;
    private string appVersion_ = "";
    public bool HasAppVersion {
      get { return hasAppVersion; }
    }
    public string AppVersion {
      get { return appVersion_; }
    }
    
    public const int ZigbeeVersionFieldNumber = 5;
    private bool hasZigbeeVersion;
    private string zigbeeVersion_ = "";
    public bool HasZigbeeVersion {
      get { return hasZigbeeVersion; }
    }
    public string ZigbeeVersion {
      get { return zigbeeVersion_; }
    }
    
    public const int DateFieldNumber = 6;
    private bool hasDate;
    private string date_ = "";
    public bool HasDate {
      get { return hasDate; }
    }
    public string Date {
      get { return date_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasProtocol) return false;
        if (!hasSerial) return false;
        if (!hasModemVersion) return false;
        if (!hasAppVersion) return false;
        if (!hasZigbeeVersion) return false;
        if (!hasDate) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mxt1XxUVersionFieldNames;
      if (hasProtocol) {
        output.WriteUInt32(1, field_names[3], Protocol);
      }
      if (hasSerial) {
        output.WriteUInt32(2, field_names[4], Serial);
      }
      if (hasModemVersion) {
        output.WriteString(3, field_names[2], ModemVersion);
      }
      if (hasAppVersion) {
        output.WriteString(4, field_names[0], AppVersion);
      }
      if (hasZigbeeVersion) {
        output.WriteString(5, field_names[5], ZigbeeVersion);
      }
      if (hasDate) {
        output.WriteString(6, field_names[1], Date);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasProtocol) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, Protocol);
      }
      if (hasSerial) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, Serial);
      }
      if (hasModemVersion) {
        size += pb::CodedOutputStream.ComputeStringSize(3, ModemVersion);
      }
      if (hasAppVersion) {
        size += pb::CodedOutputStream.ComputeStringSize(4, AppVersion);
      }
      if (hasZigbeeVersion) {
        size += pb::CodedOutputStream.ComputeStringSize(5, ZigbeeVersion);
      }
      if (hasDate) {
        size += pb::CodedOutputStream.ComputeStringSize(6, Date);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mxt1xx_u_version ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_version ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_version ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_version ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_version ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_version ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_version ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mxt1xx_u_version ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mxt1xx_u_version ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_version ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mxt1xx_u_version MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mxt1xx_u_version prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mxt1xx_u_version, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mxt1xx_u_version cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mxt1xx_u_version result;
      
      private mxt1xx_u_version PrepareBuilder() {
        if (resultIsReadOnly) {
          mxt1xx_u_version original = result;
          result = new mxt1xx_u_version();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mxt1xx_u_version MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_version.Descriptor; }
      }
      
      public override mxt1xx_u_version DefaultInstanceForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_version.DefaultInstance; }
      }
      
      public override mxt1xx_u_version BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mxt1xx_u_version) {
          return MergeFrom((mxt1xx_u_version) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mxt1xx_u_version other) {
        if (other == global::maxtrack.pb.mxt1xx.mxt1xx_u_version.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasProtocol) {
          Protocol = other.Protocol;
        }
        if (other.HasSerial) {
          Serial = other.Serial;
        }
        if (other.HasModemVersion) {
          ModemVersion = other.ModemVersion;
        }
        if (other.HasAppVersion) {
          AppVersion = other.AppVersion;
        }
        if (other.HasZigbeeVersion) {
          ZigbeeVersion = other.ZigbeeVersion;
        }
        if (other.HasDate) {
          Date = other.Date;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mxt1XxUVersionFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mxt1XxUVersionFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasProtocol = input.ReadUInt32(ref result.protocol_);
              break;
            }
            case 16: {
              result.hasSerial = input.ReadUInt32(ref result.serial_);
              break;
            }
            case 26: {
              result.hasModemVersion = input.ReadString(ref result.modemVersion_);
              break;
            }
            case 34: {
              result.hasAppVersion = input.ReadString(ref result.appVersion_);
              break;
            }
            case 42: {
              result.hasZigbeeVersion = input.ReadString(ref result.zigbeeVersion_);
              break;
            }
            case 50: {
              result.hasDate = input.ReadString(ref result.date_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasProtocol {
        get { return result.hasProtocol; }
      }
      [global::System.CLSCompliant(false)]
      public uint Protocol {
        get { return result.Protocol; }
        set { SetProtocol(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetProtocol(uint value) {
        PrepareBuilder();
        result.hasProtocol = true;
        result.protocol_ = value;
        return this;
      }
      public Builder ClearProtocol() {
        PrepareBuilder();
        result.hasProtocol = false;
        result.protocol_ = 0;
        return this;
      }
      
      public bool HasSerial {
        get { return result.hasSerial; }
      }
      [global::System.CLSCompliant(false)]
      public uint Serial {
        get { return result.Serial; }
        set { SetSerial(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSerial(uint value) {
        PrepareBuilder();
        result.hasSerial = true;
        result.serial_ = value;
        return this;
      }
      public Builder ClearSerial() {
        PrepareBuilder();
        result.hasSerial = false;
        result.serial_ = 0;
        return this;
      }
      
      public bool HasModemVersion {
        get { return result.hasModemVersion; }
      }
      public string ModemVersion {
        get { return result.ModemVersion; }
        set { SetModemVersion(value); }
      }
      public Builder SetModemVersion(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasModemVersion = true;
        result.modemVersion_ = value;
        return this;
      }
      public Builder ClearModemVersion() {
        PrepareBuilder();
        result.hasModemVersion = false;
        result.modemVersion_ = "";
        return this;
      }
      
      public bool HasAppVersion {
        get { return result.hasAppVersion; }
      }
      public string AppVersion {
        get { return result.AppVersion; }
        set { SetAppVersion(value); }
      }
      public Builder SetAppVersion(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAppVersion = true;
        result.appVersion_ = value;
        return this;
      }
      public Builder ClearAppVersion() {
        PrepareBuilder();
        result.hasAppVersion = false;
        result.appVersion_ = "";
        return this;
      }
      
      public bool HasZigbeeVersion {
        get { return result.hasZigbeeVersion; }
      }
      public string ZigbeeVersion {
        get { return result.ZigbeeVersion; }
        set { SetZigbeeVersion(value); }
      }
      public Builder SetZigbeeVersion(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasZigbeeVersion = true;
        result.zigbeeVersion_ = value;
        return this;
      }
      public Builder ClearZigbeeVersion() {
        PrepareBuilder();
        result.hasZigbeeVersion = false;
        result.zigbeeVersion_ = "";
        return this;
      }
      
      public bool HasDate {
        get { return result.hasDate; }
      }
      public string Date {
        get { return result.Date; }
        set { SetDate(value); }
      }
      public Builder SetDate(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDate = true;
        result.date_ = value;
        return this;
      }
      public Builder ClearDate() {
        PrepareBuilder();
        result.hasDate = false;
        result.date_ = "";
        return this;
      }
    }
    static mxt1xx_u_version() {
      object.ReferenceEquals(global::maxtrack.pb.mxt1xx.Mxt1Xx.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mxt1xx_u_accelerometer_event : pb::GeneratedMessage<mxt1xx_u_accelerometer_event, mxt1xx_u_accelerometer_event.Builder> {
    private mxt1xx_u_accelerometer_event() { }
    private static readonly mxt1xx_u_accelerometer_event defaultInstance = new mxt1xx_u_accelerometer_event().MakeReadOnly();
    private static readonly string[] _mxt1XxUAccelerometerEventFieldNames = new string[] { "axis", "max_g", "rolling_g_average", "side_g_average" };
    private static readonly uint[] _mxt1XxUAccelerometerEventFieldTags = new uint[] { 10, 17, 33, 25 };
    public static mxt1xx_u_accelerometer_event DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mxt1xx_u_accelerometer_event DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mxt1xx_u_accelerometer_event ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accelerometer_event__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mxt1xx_u_accelerometer_event, mxt1xx_u_accelerometer_event.Builder> InternalFieldAccessors {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_accelerometer_event__FieldAccessorTable; }
    }
    
    public const int AxisFieldNumber = 1;
    private bool hasAxis;
    private string axis_ = "";
    public bool HasAxis {
      get { return hasAxis; }
    }
    public string Axis {
      get { return axis_; }
    }
    
    public const int MaxGFieldNumber = 2;
    private bool hasMaxG;
    private double maxG_;
    public bool HasMaxG {
      get { return hasMaxG; }
    }
    public double MaxG {
      get { return maxG_; }
    }
    
    public const int SideGAverageFieldNumber = 3;
    private bool hasSideGAverage;
    private double sideGAverage_;
    public bool HasSideGAverage {
      get { return hasSideGAverage; }
    }
    public double SideGAverage {
      get { return sideGAverage_; }
    }
    
    public const int RollingGAverageFieldNumber = 4;
    private bool hasRollingGAverage;
    private double rollingGAverage_;
    public bool HasRollingGAverage {
      get { return hasRollingGAverage; }
    }
    public double RollingGAverage {
      get { return rollingGAverage_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAxis) return false;
        if (!hasMaxG) return false;
        if (!hasSideGAverage) return false;
        if (!hasRollingGAverage) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mxt1XxUAccelerometerEventFieldNames;
      if (hasAxis) {
        output.WriteString(1, field_names[0], Axis);
      }
      if (hasMaxG) {
        output.WriteDouble(2, field_names[1], MaxG);
      }
      if (hasSideGAverage) {
        output.WriteDouble(3, field_names[3], SideGAverage);
      }
      if (hasRollingGAverage) {
        output.WriteDouble(4, field_names[2], RollingGAverage);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAxis) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Axis);
      }
      if (hasMaxG) {
        size += pb::CodedOutputStream.ComputeDoubleSize(2, MaxG);
      }
      if (hasSideGAverage) {
        size += pb::CodedOutputStream.ComputeDoubleSize(3, SideGAverage);
      }
      if (hasRollingGAverage) {
        size += pb::CodedOutputStream.ComputeDoubleSize(4, RollingGAverage);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mxt1xx_u_accelerometer_event ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_accelerometer_event ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_accelerometer_event ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_accelerometer_event ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_accelerometer_event ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_accelerometer_event ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_accelerometer_event ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mxt1xx_u_accelerometer_event ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mxt1xx_u_accelerometer_event ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_accelerometer_event ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mxt1xx_u_accelerometer_event MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mxt1xx_u_accelerometer_event prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mxt1xx_u_accelerometer_event, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mxt1xx_u_accelerometer_event cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mxt1xx_u_accelerometer_event result;
      
      private mxt1xx_u_accelerometer_event PrepareBuilder() {
        if (resultIsReadOnly) {
          mxt1xx_u_accelerometer_event original = result;
          result = new mxt1xx_u_accelerometer_event();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mxt1xx_u_accelerometer_event MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_accelerometer_event.Descriptor; }
      }
      
      public override mxt1xx_u_accelerometer_event DefaultInstanceForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_accelerometer_event.DefaultInstance; }
      }
      
      public override mxt1xx_u_accelerometer_event BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mxt1xx_u_accelerometer_event) {
          return MergeFrom((mxt1xx_u_accelerometer_event) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mxt1xx_u_accelerometer_event other) {
        if (other == global::maxtrack.pb.mxt1xx.mxt1xx_u_accelerometer_event.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAxis) {
          Axis = other.Axis;
        }
        if (other.HasMaxG) {
          MaxG = other.MaxG;
        }
        if (other.HasSideGAverage) {
          SideGAverage = other.SideGAverage;
        }
        if (other.HasRollingGAverage) {
          RollingGAverage = other.RollingGAverage;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mxt1XxUAccelerometerEventFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mxt1XxUAccelerometerEventFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasAxis = input.ReadString(ref result.axis_);
              break;
            }
            case 17: {
              result.hasMaxG = input.ReadDouble(ref result.maxG_);
              break;
            }
            case 25: {
              result.hasSideGAverage = input.ReadDouble(ref result.sideGAverage_);
              break;
            }
            case 33: {
              result.hasRollingGAverage = input.ReadDouble(ref result.rollingGAverage_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAxis {
        get { return result.hasAxis; }
      }
      public string Axis {
        get { return result.Axis; }
        set { SetAxis(value); }
      }
      public Builder SetAxis(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAxis = true;
        result.axis_ = value;
        return this;
      }
      public Builder ClearAxis() {
        PrepareBuilder();
        result.hasAxis = false;
        result.axis_ = "";
        return this;
      }
      
      public bool HasMaxG {
        get { return result.hasMaxG; }
      }
      public double MaxG {
        get { return result.MaxG; }
        set { SetMaxG(value); }
      }
      public Builder SetMaxG(double value) {
        PrepareBuilder();
        result.hasMaxG = true;
        result.maxG_ = value;
        return this;
      }
      public Builder ClearMaxG() {
        PrepareBuilder();
        result.hasMaxG = false;
        result.maxG_ = 0D;
        return this;
      }
      
      public bool HasSideGAverage {
        get { return result.hasSideGAverage; }
      }
      public double SideGAverage {
        get { return result.SideGAverage; }
        set { SetSideGAverage(value); }
      }
      public Builder SetSideGAverage(double value) {
        PrepareBuilder();
        result.hasSideGAverage = true;
        result.sideGAverage_ = value;
        return this;
      }
      public Builder ClearSideGAverage() {
        PrepareBuilder();
        result.hasSideGAverage = false;
        result.sideGAverage_ = 0D;
        return this;
      }
      
      public bool HasRollingGAverage {
        get { return result.hasRollingGAverage; }
      }
      public double RollingGAverage {
        get { return result.RollingGAverage; }
        set { SetRollingGAverage(value); }
      }
      public Builder SetRollingGAverage(double value) {
        PrepareBuilder();
        result.hasRollingGAverage = true;
        result.rollingGAverage_ = value;
        return this;
      }
      public Builder ClearRollingGAverage() {
        PrepareBuilder();
        result.hasRollingGAverage = false;
        result.rollingGAverage_ = 0D;
        return this;
      }
    }
    static mxt1xx_u_accelerometer_event() {
      object.ReferenceEquals(global::maxtrack.pb.mxt1xx.Mxt1Xx.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mxt1xx_u_position : pb::GeneratedMessage<mxt1xx_u_position, mxt1xx_u_position.Builder> {
    private mxt1xx_u_position() { }
    private static readonly mxt1xx_u_position defaultInstance = new mxt1xx_u_position().MakeReadOnly();
    private static readonly string[] _mxt1XxUPositionFieldNames = new string[] { "accelerometer_event", "accessories", "additional_data", "cell_info", "embedded", "firmware", "gps_modem", "hardware_monitor", "info", "transparent_data" };
    private static readonly uint[] _mxt1XxUPositionFieldTags = new uint[] { 82, 58, 74, 50, 34, 10, 18, 26, 42, 66 };
    public static mxt1xx_u_position DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mxt1xx_u_position DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mxt1xx_u_position ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_position__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mxt1xx_u_position, mxt1xx_u_position.Builder> InternalFieldAccessors {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_position__FieldAccessorTable; }
    }
    
    public const int FirmwareFieldNumber = 1;
    private bool hasFirmware;
    private global::maxtrack.pb.mxt1xx.mxt1xx_u_firmware firmware_;
    public bool HasFirmware {
      get { return hasFirmware; }
    }
    public global::maxtrack.pb.mxt1xx.mxt1xx_u_firmware Firmware {
      get { return firmware_ ?? global::maxtrack.pb.mxt1xx.mxt1xx_u_firmware.DefaultInstance; }
    }
    
    public const int GpsModemFieldNumber = 2;
    private bool hasGpsModem;
    private global::maxtrack.pb.mxt1xx.mxt1xx_u_gps_modem gpsModem_;
    public bool HasGpsModem {
      get { return hasGpsModem; }
    }
    public global::maxtrack.pb.mxt1xx.mxt1xx_u_gps_modem GpsModem {
      get { return gpsModem_ ?? global::maxtrack.pb.mxt1xx.mxt1xx_u_gps_modem.DefaultInstance; }
    }
    
    public const int HardwareMonitorFieldNumber = 3;
    private bool hasHardwareMonitor;
    private global::maxtrack.pb.mxt1xx.mxt1xx_u_hardware_monitor hardwareMonitor_;
    public bool HasHardwareMonitor {
      get { return hasHardwareMonitor; }
    }
    public global::maxtrack.pb.mxt1xx.mxt1xx_u_hardware_monitor HardwareMonitor {
      get { return hardwareMonitor_ ?? global::maxtrack.pb.mxt1xx.mxt1xx_u_hardware_monitor.DefaultInstance; }
    }
    
    public const int EmbeddedFieldNumber = 4;
    private bool hasEmbedded;
    private global::maxtrack.pb.mxt1xx.mxt1xx_u_embedded embedded_;
    public bool HasEmbedded {
      get { return hasEmbedded; }
    }
    public global::maxtrack.pb.mxt1xx.mxt1xx_u_embedded Embedded {
      get { return embedded_ ?? global::maxtrack.pb.mxt1xx.mxt1xx_u_embedded.DefaultInstance; }
    }
    
    public const int InfoFieldNumber = 5;
    private bool hasInfo;
    private global::maxtrack.pb.mxt1xx.mxt1xx_u_info info_;
    public bool HasInfo {
      get { return hasInfo; }
    }
    public global::maxtrack.pb.mxt1xx.mxt1xx_u_info Info {
      get { return info_ ?? global::maxtrack.pb.mxt1xx.mxt1xx_u_info.DefaultInstance; }
    }
    
    public const int CellInfoFieldNumber = 6;
    private bool hasCellInfo;
    private global::maxtrack.pb.mxt1xx.mxt1xx_u_cell_id_info cellInfo_;
    public bool HasCellInfo {
      get { return hasCellInfo; }
    }
    public global::maxtrack.pb.mxt1xx.mxt1xx_u_cell_id_info CellInfo {
      get { return cellInfo_ ?? global::maxtrack.pb.mxt1xx.mxt1xx_u_cell_id_info.DefaultInstance; }
    }
    
    public const int AccessoriesFieldNumber = 7;
    private bool hasAccessories;
    private global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory accessories_;
    public bool HasAccessories {
      get { return hasAccessories; }
    }
    public global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory Accessories {
      get { return accessories_ ?? global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory.DefaultInstance; }
    }
    
    public const int TransparentDataFieldNumber = 8;
    private bool hasTransparentData;
    private global::maxtrack.pb.mxt1xx.mxt1xx_u_transparent_data transparentData_;
    public bool HasTransparentData {
      get { return hasTransparentData; }
    }
    public global::maxtrack.pb.mxt1xx.mxt1xx_u_transparent_data TransparentData {
      get { return transparentData_ ?? global::maxtrack.pb.mxt1xx.mxt1xx_u_transparent_data.DefaultInstance; }
    }
    
    public const int AdditionalDataFieldNumber = 9;
    private bool hasAdditionalData;
    private global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data additionalData_;
    public bool HasAdditionalData {
      get { return hasAdditionalData; }
    }
    public global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data AdditionalData {
      get { return additionalData_ ?? global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data.DefaultInstance; }
    }
    
    public const int AccelerometerEventFieldNumber = 10;
    private bool hasAccelerometerEvent;
    private global::maxtrack.pb.mxt1xx.mxt1xx_u_accelerometer_event accelerometerEvent_;
    public bool HasAccelerometerEvent {
      get { return hasAccelerometerEvent; }
    }
    public global::maxtrack.pb.mxt1xx.mxt1xx_u_accelerometer_event AccelerometerEvent {
      get { return accelerometerEvent_ ?? global::maxtrack.pb.mxt1xx.mxt1xx_u_accelerometer_event.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasFirmware) return false;
        if (!hasGpsModem) return false;
        if (!hasHardwareMonitor) return false;
        if (!hasEmbedded) return false;
        if (!hasInfo) return false;
        if (!Firmware.IsInitialized) return false;
        if (!GpsModem.IsInitialized) return false;
        if (!HardwareMonitor.IsInitialized) return false;
        if (!Embedded.IsInitialized) return false;
        if (!Info.IsInitialized) return false;
        if (HasCellInfo) {
          if (!CellInfo.IsInitialized) return false;
        }
        if (HasAccessories) {
          if (!Accessories.IsInitialized) return false;
        }
        if (HasTransparentData) {
          if (!TransparentData.IsInitialized) return false;
        }
        if (HasAdditionalData) {
          if (!AdditionalData.IsInitialized) return false;
        }
        if (HasAccelerometerEvent) {
          if (!AccelerometerEvent.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mxt1XxUPositionFieldNames;
      if (hasFirmware) {
        output.WriteMessage(1, field_names[5], Firmware);
      }
      if (hasGpsModem) {
        output.WriteMessage(2, field_names[6], GpsModem);
      }
      if (hasHardwareMonitor) {
        output.WriteMessage(3, field_names[7], HardwareMonitor);
      }
      if (hasEmbedded) {
        output.WriteMessage(4, field_names[4], Embedded);
      }
      if (hasInfo) {
        output.WriteMessage(5, field_names[8], Info);
      }
      if (hasCellInfo) {
        output.WriteMessage(6, field_names[3], CellInfo);
      }
      if (hasAccessories) {
        output.WriteMessage(7, field_names[1], Accessories);
      }
      if (hasTransparentData) {
        output.WriteMessage(8, field_names[9], TransparentData);
      }
      if (hasAdditionalData) {
        output.WriteMessage(9, field_names[2], AdditionalData);
      }
      if (hasAccelerometerEvent) {
        output.WriteMessage(10, field_names[0], AccelerometerEvent);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasFirmware) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, Firmware);
      }
      if (hasGpsModem) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, GpsModem);
      }
      if (hasHardwareMonitor) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, HardwareMonitor);
      }
      if (hasEmbedded) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, Embedded);
      }
      if (hasInfo) {
        size += pb::CodedOutputStream.ComputeMessageSize(5, Info);
      }
      if (hasCellInfo) {
        size += pb::CodedOutputStream.ComputeMessageSize(6, CellInfo);
      }
      if (hasAccessories) {
        size += pb::CodedOutputStream.ComputeMessageSize(7, Accessories);
      }
      if (hasTransparentData) {
        size += pb::CodedOutputStream.ComputeMessageSize(8, TransparentData);
      }
      if (hasAdditionalData) {
        size += pb::CodedOutputStream.ComputeMessageSize(9, AdditionalData);
      }
      if (hasAccelerometerEvent) {
        size += pb::CodedOutputStream.ComputeMessageSize(10, AccelerometerEvent);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mxt1xx_u_position ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_position ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_position ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_position ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_position ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_position ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_position ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mxt1xx_u_position ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mxt1xx_u_position ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_position ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mxt1xx_u_position MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mxt1xx_u_position prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mxt1xx_u_position, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mxt1xx_u_position cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mxt1xx_u_position result;
      
      private mxt1xx_u_position PrepareBuilder() {
        if (resultIsReadOnly) {
          mxt1xx_u_position original = result;
          result = new mxt1xx_u_position();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mxt1xx_u_position MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_position.Descriptor; }
      }
      
      public override mxt1xx_u_position DefaultInstanceForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_position.DefaultInstance; }
      }
      
      public override mxt1xx_u_position BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mxt1xx_u_position) {
          return MergeFrom((mxt1xx_u_position) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mxt1xx_u_position other) {
        if (other == global::maxtrack.pb.mxt1xx.mxt1xx_u_position.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasFirmware) {
          MergeFirmware(other.Firmware);
        }
        if (other.HasGpsModem) {
          MergeGpsModem(other.GpsModem);
        }
        if (other.HasHardwareMonitor) {
          MergeHardwareMonitor(other.HardwareMonitor);
        }
        if (other.HasEmbedded) {
          MergeEmbedded(other.Embedded);
        }
        if (other.HasInfo) {
          MergeInfo(other.Info);
        }
        if (other.HasCellInfo) {
          MergeCellInfo(other.CellInfo);
        }
        if (other.HasAccessories) {
          MergeAccessories(other.Accessories);
        }
        if (other.HasTransparentData) {
          MergeTransparentData(other.TransparentData);
        }
        if (other.HasAdditionalData) {
          MergeAdditionalData(other.AdditionalData);
        }
        if (other.HasAccelerometerEvent) {
          MergeAccelerometerEvent(other.AccelerometerEvent);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mxt1XxUPositionFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mxt1XxUPositionFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::maxtrack.pb.mxt1xx.mxt1xx_u_firmware.Builder subBuilder = global::maxtrack.pb.mxt1xx.mxt1xx_u_firmware.CreateBuilder();
              if (result.hasFirmware) {
                subBuilder.MergeFrom(Firmware);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Firmware = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::maxtrack.pb.mxt1xx.mxt1xx_u_gps_modem.Builder subBuilder = global::maxtrack.pb.mxt1xx.mxt1xx_u_gps_modem.CreateBuilder();
              if (result.hasGpsModem) {
                subBuilder.MergeFrom(GpsModem);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              GpsModem = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::maxtrack.pb.mxt1xx.mxt1xx_u_hardware_monitor.Builder subBuilder = global::maxtrack.pb.mxt1xx.mxt1xx_u_hardware_monitor.CreateBuilder();
              if (result.hasHardwareMonitor) {
                subBuilder.MergeFrom(HardwareMonitor);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              HardwareMonitor = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::maxtrack.pb.mxt1xx.mxt1xx_u_embedded.Builder subBuilder = global::maxtrack.pb.mxt1xx.mxt1xx_u_embedded.CreateBuilder();
              if (result.hasEmbedded) {
                subBuilder.MergeFrom(Embedded);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Embedded = subBuilder.BuildPartial();
              break;
            }
            case 42: {
              global::maxtrack.pb.mxt1xx.mxt1xx_u_info.Builder subBuilder = global::maxtrack.pb.mxt1xx.mxt1xx_u_info.CreateBuilder();
              if (result.hasInfo) {
                subBuilder.MergeFrom(Info);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Info = subBuilder.BuildPartial();
              break;
            }
            case 50: {
              global::maxtrack.pb.mxt1xx.mxt1xx_u_cell_id_info.Builder subBuilder = global::maxtrack.pb.mxt1xx.mxt1xx_u_cell_id_info.CreateBuilder();
              if (result.hasCellInfo) {
                subBuilder.MergeFrom(CellInfo);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              CellInfo = subBuilder.BuildPartial();
              break;
            }
            case 58: {
              global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory.Builder subBuilder = global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory.CreateBuilder();
              if (result.hasAccessories) {
                subBuilder.MergeFrom(Accessories);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Accessories = subBuilder.BuildPartial();
              break;
            }
            case 66: {
              global::maxtrack.pb.mxt1xx.mxt1xx_u_transparent_data.Builder subBuilder = global::maxtrack.pb.mxt1xx.mxt1xx_u_transparent_data.CreateBuilder();
              if (result.hasTransparentData) {
                subBuilder.MergeFrom(TransparentData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              TransparentData = subBuilder.BuildPartial();
              break;
            }
            case 74: {
              global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data.Builder subBuilder = global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data.CreateBuilder();
              if (result.hasAdditionalData) {
                subBuilder.MergeFrom(AdditionalData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AdditionalData = subBuilder.BuildPartial();
              break;
            }
            case 82: {
              global::maxtrack.pb.mxt1xx.mxt1xx_u_accelerometer_event.Builder subBuilder = global::maxtrack.pb.mxt1xx.mxt1xx_u_accelerometer_event.CreateBuilder();
              if (result.hasAccelerometerEvent) {
                subBuilder.MergeFrom(AccelerometerEvent);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AccelerometerEvent = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasFirmware {
       get { return result.hasFirmware; }
      }
      public global::maxtrack.pb.mxt1xx.mxt1xx_u_firmware Firmware {
        get { return result.Firmware; }
        set { SetFirmware(value); }
      }
      public Builder SetFirmware(global::maxtrack.pb.mxt1xx.mxt1xx_u_firmware value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFirmware = true;
        result.firmware_ = value;
        return this;
      }
      public Builder SetFirmware(global::maxtrack.pb.mxt1xx.mxt1xx_u_firmware.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasFirmware = true;
        result.firmware_ = builderForValue.Build();
        return this;
      }
      public Builder MergeFirmware(global::maxtrack.pb.mxt1xx.mxt1xx_u_firmware value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasFirmware &&
            result.firmware_ != global::maxtrack.pb.mxt1xx.mxt1xx_u_firmware.DefaultInstance) {
            result.firmware_ = global::maxtrack.pb.mxt1xx.mxt1xx_u_firmware.CreateBuilder(result.firmware_).MergeFrom(value).BuildPartial();
        } else {
          result.firmware_ = value;
        }
        result.hasFirmware = true;
        return this;
      }
      public Builder ClearFirmware() {
        PrepareBuilder();
        result.hasFirmware = false;
        result.firmware_ = null;
        return this;
      }
      
      public bool HasGpsModem {
       get { return result.hasGpsModem; }
      }
      public global::maxtrack.pb.mxt1xx.mxt1xx_u_gps_modem GpsModem {
        get { return result.GpsModem; }
        set { SetGpsModem(value); }
      }
      public Builder SetGpsModem(global::maxtrack.pb.mxt1xx.mxt1xx_u_gps_modem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGpsModem = true;
        result.gpsModem_ = value;
        return this;
      }
      public Builder SetGpsModem(global::maxtrack.pb.mxt1xx.mxt1xx_u_gps_modem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasGpsModem = true;
        result.gpsModem_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGpsModem(global::maxtrack.pb.mxt1xx.mxt1xx_u_gps_modem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasGpsModem &&
            result.gpsModem_ != global::maxtrack.pb.mxt1xx.mxt1xx_u_gps_modem.DefaultInstance) {
            result.gpsModem_ = global::maxtrack.pb.mxt1xx.mxt1xx_u_gps_modem.CreateBuilder(result.gpsModem_).MergeFrom(value).BuildPartial();
        } else {
          result.gpsModem_ = value;
        }
        result.hasGpsModem = true;
        return this;
      }
      public Builder ClearGpsModem() {
        PrepareBuilder();
        result.hasGpsModem = false;
        result.gpsModem_ = null;
        return this;
      }
      
      public bool HasHardwareMonitor {
       get { return result.hasHardwareMonitor; }
      }
      public global::maxtrack.pb.mxt1xx.mxt1xx_u_hardware_monitor HardwareMonitor {
        get { return result.HardwareMonitor; }
        set { SetHardwareMonitor(value); }
      }
      public Builder SetHardwareMonitor(global::maxtrack.pb.mxt1xx.mxt1xx_u_hardware_monitor value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHardwareMonitor = true;
        result.hardwareMonitor_ = value;
        return this;
      }
      public Builder SetHardwareMonitor(global::maxtrack.pb.mxt1xx.mxt1xx_u_hardware_monitor.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasHardwareMonitor = true;
        result.hardwareMonitor_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHardwareMonitor(global::maxtrack.pb.mxt1xx.mxt1xx_u_hardware_monitor value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasHardwareMonitor &&
            result.hardwareMonitor_ != global::maxtrack.pb.mxt1xx.mxt1xx_u_hardware_monitor.DefaultInstance) {
            result.hardwareMonitor_ = global::maxtrack.pb.mxt1xx.mxt1xx_u_hardware_monitor.CreateBuilder(result.hardwareMonitor_).MergeFrom(value).BuildPartial();
        } else {
          result.hardwareMonitor_ = value;
        }
        result.hasHardwareMonitor = true;
        return this;
      }
      public Builder ClearHardwareMonitor() {
        PrepareBuilder();
        result.hasHardwareMonitor = false;
        result.hardwareMonitor_ = null;
        return this;
      }
      
      public bool HasEmbedded {
       get { return result.hasEmbedded; }
      }
      public global::maxtrack.pb.mxt1xx.mxt1xx_u_embedded Embedded {
        get { return result.Embedded; }
        set { SetEmbedded(value); }
      }
      public Builder SetEmbedded(global::maxtrack.pb.mxt1xx.mxt1xx_u_embedded value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasEmbedded = true;
        result.embedded_ = value;
        return this;
      }
      public Builder SetEmbedded(global::maxtrack.pb.mxt1xx.mxt1xx_u_embedded.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasEmbedded = true;
        result.embedded_ = builderForValue.Build();
        return this;
      }
      public Builder MergeEmbedded(global::maxtrack.pb.mxt1xx.mxt1xx_u_embedded value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasEmbedded &&
            result.embedded_ != global::maxtrack.pb.mxt1xx.mxt1xx_u_embedded.DefaultInstance) {
            result.embedded_ = global::maxtrack.pb.mxt1xx.mxt1xx_u_embedded.CreateBuilder(result.embedded_).MergeFrom(value).BuildPartial();
        } else {
          result.embedded_ = value;
        }
        result.hasEmbedded = true;
        return this;
      }
      public Builder ClearEmbedded() {
        PrepareBuilder();
        result.hasEmbedded = false;
        result.embedded_ = null;
        return this;
      }
      
      public bool HasInfo {
       get { return result.hasInfo; }
      }
      public global::maxtrack.pb.mxt1xx.mxt1xx_u_info Info {
        get { return result.Info; }
        set { SetInfo(value); }
      }
      public Builder SetInfo(global::maxtrack.pb.mxt1xx.mxt1xx_u_info value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasInfo = true;
        result.info_ = value;
        return this;
      }
      public Builder SetInfo(global::maxtrack.pb.mxt1xx.mxt1xx_u_info.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasInfo = true;
        result.info_ = builderForValue.Build();
        return this;
      }
      public Builder MergeInfo(global::maxtrack.pb.mxt1xx.mxt1xx_u_info value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasInfo &&
            result.info_ != global::maxtrack.pb.mxt1xx.mxt1xx_u_info.DefaultInstance) {
            result.info_ = global::maxtrack.pb.mxt1xx.mxt1xx_u_info.CreateBuilder(result.info_).MergeFrom(value).BuildPartial();
        } else {
          result.info_ = value;
        }
        result.hasInfo = true;
        return this;
      }
      public Builder ClearInfo() {
        PrepareBuilder();
        result.hasInfo = false;
        result.info_ = null;
        return this;
      }
      
      public bool HasCellInfo {
       get { return result.hasCellInfo; }
      }
      public global::maxtrack.pb.mxt1xx.mxt1xx_u_cell_id_info CellInfo {
        get { return result.CellInfo; }
        set { SetCellInfo(value); }
      }
      public Builder SetCellInfo(global::maxtrack.pb.mxt1xx.mxt1xx_u_cell_id_info value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCellInfo = true;
        result.cellInfo_ = value;
        return this;
      }
      public Builder SetCellInfo(global::maxtrack.pb.mxt1xx.mxt1xx_u_cell_id_info.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasCellInfo = true;
        result.cellInfo_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCellInfo(global::maxtrack.pb.mxt1xx.mxt1xx_u_cell_id_info value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasCellInfo &&
            result.cellInfo_ != global::maxtrack.pb.mxt1xx.mxt1xx_u_cell_id_info.DefaultInstance) {
            result.cellInfo_ = global::maxtrack.pb.mxt1xx.mxt1xx_u_cell_id_info.CreateBuilder(result.cellInfo_).MergeFrom(value).BuildPartial();
        } else {
          result.cellInfo_ = value;
        }
        result.hasCellInfo = true;
        return this;
      }
      public Builder ClearCellInfo() {
        PrepareBuilder();
        result.hasCellInfo = false;
        result.cellInfo_ = null;
        return this;
      }
      
      public bool HasAccessories {
       get { return result.hasAccessories; }
      }
      public global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory Accessories {
        get { return result.Accessories; }
        set { SetAccessories(value); }
      }
      public Builder SetAccessories(global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAccessories = true;
        result.accessories_ = value;
        return this;
      }
      public Builder SetAccessories(global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAccessories = true;
        result.accessories_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAccessories(global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAccessories &&
            result.accessories_ != global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory.DefaultInstance) {
            result.accessories_ = global::maxtrack.pb.mxt1xx.mxt1xx_u_accessory.CreateBuilder(result.accessories_).MergeFrom(value).BuildPartial();
        } else {
          result.accessories_ = value;
        }
        result.hasAccessories = true;
        return this;
      }
      public Builder ClearAccessories() {
        PrepareBuilder();
        result.hasAccessories = false;
        result.accessories_ = null;
        return this;
      }
      
      public bool HasTransparentData {
       get { return result.hasTransparentData; }
      }
      public global::maxtrack.pb.mxt1xx.mxt1xx_u_transparent_data TransparentData {
        get { return result.TransparentData; }
        set { SetTransparentData(value); }
      }
      public Builder SetTransparentData(global::maxtrack.pb.mxt1xx.mxt1xx_u_transparent_data value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTransparentData = true;
        result.transparentData_ = value;
        return this;
      }
      public Builder SetTransparentData(global::maxtrack.pb.mxt1xx.mxt1xx_u_transparent_data.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasTransparentData = true;
        result.transparentData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeTransparentData(global::maxtrack.pb.mxt1xx.mxt1xx_u_transparent_data value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasTransparentData &&
            result.transparentData_ != global::maxtrack.pb.mxt1xx.mxt1xx_u_transparent_data.DefaultInstance) {
            result.transparentData_ = global::maxtrack.pb.mxt1xx.mxt1xx_u_transparent_data.CreateBuilder(result.transparentData_).MergeFrom(value).BuildPartial();
        } else {
          result.transparentData_ = value;
        }
        result.hasTransparentData = true;
        return this;
      }
      public Builder ClearTransparentData() {
        PrepareBuilder();
        result.hasTransparentData = false;
        result.transparentData_ = null;
        return this;
      }
      
      public bool HasAdditionalData {
       get { return result.hasAdditionalData; }
      }
      public global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data AdditionalData {
        get { return result.AdditionalData; }
        set { SetAdditionalData(value); }
      }
      public Builder SetAdditionalData(global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAdditionalData = true;
        result.additionalData_ = value;
        return this;
      }
      public Builder SetAdditionalData(global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAdditionalData = true;
        result.additionalData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAdditionalData(global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAdditionalData &&
            result.additionalData_ != global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data.DefaultInstance) {
            result.additionalData_ = global::maxtrack.pb.mxt1xx.mxt1xx_u_additional_data.CreateBuilder(result.additionalData_).MergeFrom(value).BuildPartial();
        } else {
          result.additionalData_ = value;
        }
        result.hasAdditionalData = true;
        return this;
      }
      public Builder ClearAdditionalData() {
        PrepareBuilder();
        result.hasAdditionalData = false;
        result.additionalData_ = null;
        return this;
      }
      
      public bool HasAccelerometerEvent {
       get { return result.hasAccelerometerEvent; }
      }
      public global::maxtrack.pb.mxt1xx.mxt1xx_u_accelerometer_event AccelerometerEvent {
        get { return result.AccelerometerEvent; }
        set { SetAccelerometerEvent(value); }
      }
      public Builder SetAccelerometerEvent(global::maxtrack.pb.mxt1xx.mxt1xx_u_accelerometer_event value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAccelerometerEvent = true;
        result.accelerometerEvent_ = value;
        return this;
      }
      public Builder SetAccelerometerEvent(global::maxtrack.pb.mxt1xx.mxt1xx_u_accelerometer_event.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAccelerometerEvent = true;
        result.accelerometerEvent_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAccelerometerEvent(global::maxtrack.pb.mxt1xx.mxt1xx_u_accelerometer_event value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAccelerometerEvent &&
            result.accelerometerEvent_ != global::maxtrack.pb.mxt1xx.mxt1xx_u_accelerometer_event.DefaultInstance) {
            result.accelerometerEvent_ = global::maxtrack.pb.mxt1xx.mxt1xx_u_accelerometer_event.CreateBuilder(result.accelerometerEvent_).MergeFrom(value).BuildPartial();
        } else {
          result.accelerometerEvent_ = value;
        }
        result.hasAccelerometerEvent = true;
        return this;
      }
      public Builder ClearAccelerometerEvent() {
        PrepareBuilder();
        result.hasAccelerometerEvent = false;
        result.accelerometerEvent_ = null;
        return this;
      }
    }
    static mxt1xx_u_position() {
      object.ReferenceEquals(global::maxtrack.pb.mxt1xx.Mxt1Xx.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mxt1xx_u_setup_header : pb::GeneratedMessage<mxt1xx_u_setup_header, mxt1xx_u_setup_header.Builder> {
    private mxt1xx_u_setup_header() { }
    private static readonly mxt1xx_u_setup_header defaultInstance = new mxt1xx_u_setup_header().MakeReadOnly();
    private static readonly string[] _mxt1XxUSetupHeaderFieldNames = new string[] { "protocol", "receive_id", "sender_id", "serial", "timestamp" };
    private static readonly uint[] _mxt1XxUSetupHeaderFieldTags = new uint[] { 16, 40, 32, 8, 26 };
    public static mxt1xx_u_setup_header DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mxt1xx_u_setup_header DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mxt1xx_u_setup_header ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_setup_header__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mxt1xx_u_setup_header, mxt1xx_u_setup_header.Builder> InternalFieldAccessors {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_setup_header__FieldAccessorTable; }
    }
    
    public const int SerialFieldNumber = 1;
    private bool hasSerial;
    private uint serial_;
    public bool HasSerial {
      get { return hasSerial; }
    }
    [global::System.CLSCompliant(false)]
    public uint Serial {
      get { return serial_; }
    }
    
    public const int ProtocolFieldNumber = 2;
    private bool hasProtocol;
    private uint protocol_;
    public bool HasProtocol {
      get { return hasProtocol; }
    }
    [global::System.CLSCompliant(false)]
    public uint Protocol {
      get { return protocol_; }
    }
    
    public const int TimestampFieldNumber = 3;
    private bool hasTimestamp;
    private string timestamp_ = "";
    public bool HasTimestamp {
      get { return hasTimestamp; }
    }
    public string Timestamp {
      get { return timestamp_; }
    }
    
    public const int SenderIdFieldNumber = 4;
    private bool hasSenderId;
    private uint senderId_;
    public bool HasSenderId {
      get { return hasSenderId; }
    }
    [global::System.CLSCompliant(false)]
    public uint SenderId {
      get { return senderId_; }
    }
    
    public const int ReceiveIdFieldNumber = 5;
    private bool hasReceiveId;
    private uint receiveId_;
    public bool HasReceiveId {
      get { return hasReceiveId; }
    }
    [global::System.CLSCompliant(false)]
    public uint ReceiveId {
      get { return receiveId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSerial) return false;
        if (!hasProtocol) return false;
        if (!hasTimestamp) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mxt1XxUSetupHeaderFieldNames;
      if (hasSerial) {
        output.WriteUInt32(1, field_names[3], Serial);
      }
      if (hasProtocol) {
        output.WriteUInt32(2, field_names[0], Protocol);
      }
      if (hasTimestamp) {
        output.WriteString(3, field_names[4], Timestamp);
      }
      if (hasSenderId) {
        output.WriteUInt32(4, field_names[2], SenderId);
      }
      if (hasReceiveId) {
        output.WriteUInt32(5, field_names[1], ReceiveId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasSerial) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, Serial);
      }
      if (hasProtocol) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, Protocol);
      }
      if (hasTimestamp) {
        size += pb::CodedOutputStream.ComputeStringSize(3, Timestamp);
      }
      if (hasSenderId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, SenderId);
      }
      if (hasReceiveId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(5, ReceiveId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mxt1xx_u_setup_header ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_setup_header ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_setup_header ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_setup_header ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_setup_header ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_setup_header ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_setup_header ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mxt1xx_u_setup_header ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mxt1xx_u_setup_header ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_setup_header ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mxt1xx_u_setup_header MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mxt1xx_u_setup_header prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mxt1xx_u_setup_header, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mxt1xx_u_setup_header cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mxt1xx_u_setup_header result;
      
      private mxt1xx_u_setup_header PrepareBuilder() {
        if (resultIsReadOnly) {
          mxt1xx_u_setup_header original = result;
          result = new mxt1xx_u_setup_header();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mxt1xx_u_setup_header MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_setup_header.Descriptor; }
      }
      
      public override mxt1xx_u_setup_header DefaultInstanceForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_setup_header.DefaultInstance; }
      }
      
      public override mxt1xx_u_setup_header BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mxt1xx_u_setup_header) {
          return MergeFrom((mxt1xx_u_setup_header) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mxt1xx_u_setup_header other) {
        if (other == global::maxtrack.pb.mxt1xx.mxt1xx_u_setup_header.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSerial) {
          Serial = other.Serial;
        }
        if (other.HasProtocol) {
          Protocol = other.Protocol;
        }
        if (other.HasTimestamp) {
          Timestamp = other.Timestamp;
        }
        if (other.HasSenderId) {
          SenderId = other.SenderId;
        }
        if (other.HasReceiveId) {
          ReceiveId = other.ReceiveId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mxt1XxUSetupHeaderFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mxt1XxUSetupHeaderFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasSerial = input.ReadUInt32(ref result.serial_);
              break;
            }
            case 16: {
              result.hasProtocol = input.ReadUInt32(ref result.protocol_);
              break;
            }
            case 26: {
              result.hasTimestamp = input.ReadString(ref result.timestamp_);
              break;
            }
            case 32: {
              result.hasSenderId = input.ReadUInt32(ref result.senderId_);
              break;
            }
            case 40: {
              result.hasReceiveId = input.ReadUInt32(ref result.receiveId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSerial {
        get { return result.hasSerial; }
      }
      [global::System.CLSCompliant(false)]
      public uint Serial {
        get { return result.Serial; }
        set { SetSerial(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSerial(uint value) {
        PrepareBuilder();
        result.hasSerial = true;
        result.serial_ = value;
        return this;
      }
      public Builder ClearSerial() {
        PrepareBuilder();
        result.hasSerial = false;
        result.serial_ = 0;
        return this;
      }
      
      public bool HasProtocol {
        get { return result.hasProtocol; }
      }
      [global::System.CLSCompliant(false)]
      public uint Protocol {
        get { return result.Protocol; }
        set { SetProtocol(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetProtocol(uint value) {
        PrepareBuilder();
        result.hasProtocol = true;
        result.protocol_ = value;
        return this;
      }
      public Builder ClearProtocol() {
        PrepareBuilder();
        result.hasProtocol = false;
        result.protocol_ = 0;
        return this;
      }
      
      public bool HasTimestamp {
        get { return result.hasTimestamp; }
      }
      public string Timestamp {
        get { return result.Timestamp; }
        set { SetTimestamp(value); }
      }
      public Builder SetTimestamp(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTimestamp = true;
        result.timestamp_ = value;
        return this;
      }
      public Builder ClearTimestamp() {
        PrepareBuilder();
        result.hasTimestamp = false;
        result.timestamp_ = "";
        return this;
      }
      
      public bool HasSenderId {
        get { return result.hasSenderId; }
      }
      [global::System.CLSCompliant(false)]
      public uint SenderId {
        get { return result.SenderId; }
        set { SetSenderId(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSenderId(uint value) {
        PrepareBuilder();
        result.hasSenderId = true;
        result.senderId_ = value;
        return this;
      }
      public Builder ClearSenderId() {
        PrepareBuilder();
        result.hasSenderId = false;
        result.senderId_ = 0;
        return this;
      }
      
      public bool HasReceiveId {
        get { return result.hasReceiveId; }
      }
      [global::System.CLSCompliant(false)]
      public uint ReceiveId {
        get { return result.ReceiveId; }
        set { SetReceiveId(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetReceiveId(uint value) {
        PrepareBuilder();
        result.hasReceiveId = true;
        result.receiveId_ = value;
        return this;
      }
      public Builder ClearReceiveId() {
        PrepareBuilder();
        result.hasReceiveId = false;
        result.receiveId_ = 0;
        return this;
      }
    }
    static mxt1xx_u_setup_header() {
      object.ReferenceEquals(global::maxtrack.pb.mxt1xx.Mxt1Xx.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mxt1xx_u_device_info : pb::GeneratedMessage<mxt1xx_u_device_info, mxt1xx_u_device_info.Builder> {
    private mxt1xx_u_device_info() { }
    private static readonly mxt1xx_u_device_info defaultInstance = new mxt1xx_u_device_info().MakeReadOnly();
    private static readonly string[] _mxt1XxUDeviceInfoFieldNames = new string[] { "device_id", "sw_version" };
    private static readonly uint[] _mxt1XxUDeviceInfoFieldTags = new uint[] { 8, 18 };
    public static mxt1xx_u_device_info DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mxt1xx_u_device_info DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mxt1xx_u_device_info ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_device_info__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mxt1xx_u_device_info, mxt1xx_u_device_info.Builder> InternalFieldAccessors {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_device_info__FieldAccessorTable; }
    }
    
    public const int DeviceIdFieldNumber = 1;
    private bool hasDeviceId;
    private uint deviceId_;
    public bool HasDeviceId {
      get { return hasDeviceId; }
    }
    [global::System.CLSCompliant(false)]
    public uint DeviceId {
      get { return deviceId_; }
    }
    
    public const int SwVersionFieldNumber = 2;
    private bool hasSwVersion;
    private string swVersion_ = "";
    public bool HasSwVersion {
      get { return hasSwVersion; }
    }
    public string SwVersion {
      get { return swVersion_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasDeviceId) return false;
        if (!hasSwVersion) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mxt1XxUDeviceInfoFieldNames;
      if (hasDeviceId) {
        output.WriteUInt32(1, field_names[0], DeviceId);
      }
      if (hasSwVersion) {
        output.WriteString(2, field_names[1], SwVersion);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasDeviceId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, DeviceId);
      }
      if (hasSwVersion) {
        size += pb::CodedOutputStream.ComputeStringSize(2, SwVersion);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mxt1xx_u_device_info ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_device_info ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_device_info ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_device_info ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_device_info ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_device_info ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_device_info ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mxt1xx_u_device_info ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mxt1xx_u_device_info ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_device_info ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mxt1xx_u_device_info MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mxt1xx_u_device_info prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mxt1xx_u_device_info, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mxt1xx_u_device_info cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mxt1xx_u_device_info result;
      
      private mxt1xx_u_device_info PrepareBuilder() {
        if (resultIsReadOnly) {
          mxt1xx_u_device_info original = result;
          result = new mxt1xx_u_device_info();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mxt1xx_u_device_info MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_device_info.Descriptor; }
      }
      
      public override mxt1xx_u_device_info DefaultInstanceForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_device_info.DefaultInstance; }
      }
      
      public override mxt1xx_u_device_info BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mxt1xx_u_device_info) {
          return MergeFrom((mxt1xx_u_device_info) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mxt1xx_u_device_info other) {
        if (other == global::maxtrack.pb.mxt1xx.mxt1xx_u_device_info.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasDeviceId) {
          DeviceId = other.DeviceId;
        }
        if (other.HasSwVersion) {
          SwVersion = other.SwVersion;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mxt1XxUDeviceInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mxt1XxUDeviceInfoFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasDeviceId = input.ReadUInt32(ref result.deviceId_);
              break;
            }
            case 18: {
              result.hasSwVersion = input.ReadString(ref result.swVersion_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasDeviceId {
        get { return result.hasDeviceId; }
      }
      [global::System.CLSCompliant(false)]
      public uint DeviceId {
        get { return result.DeviceId; }
        set { SetDeviceId(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetDeviceId(uint value) {
        PrepareBuilder();
        result.hasDeviceId = true;
        result.deviceId_ = value;
        return this;
      }
      public Builder ClearDeviceId() {
        PrepareBuilder();
        result.hasDeviceId = false;
        result.deviceId_ = 0;
        return this;
      }
      
      public bool HasSwVersion {
        get { return result.hasSwVersion; }
      }
      public string SwVersion {
        get { return result.SwVersion; }
        set { SetSwVersion(value); }
      }
      public Builder SetSwVersion(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSwVersion = true;
        result.swVersion_ = value;
        return this;
      }
      public Builder ClearSwVersion() {
        PrepareBuilder();
        result.hasSwVersion = false;
        result.swVersion_ = "";
        return this;
      }
    }
    static mxt1xx_u_device_info() {
      object.ReferenceEquals(global::maxtrack.pb.mxt1xx.Mxt1Xx.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mxt1xx_u_net_attributes : pb::GeneratedMessage<mxt1xx_u_net_attributes, mxt1xx_u_net_attributes.Builder> {
    private mxt1xx_u_net_attributes() { }
    private static readonly mxt1xx_u_net_attributes defaultInstance = new mxt1xx_u_net_attributes().MakeReadOnly();
    private static readonly string[] _mxt1XxUNetAttributesFieldNames = new string[] { "apn", "apn2", "connection_type", "keep_alive_timer", "password", "password2", "user", "user2" };
    private static readonly uint[] _mxt1XxUNetAttributesFieldTags = new uint[] { 26, 50, 8, 16, 42, 66, 34, 58 };
    public static mxt1xx_u_net_attributes DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mxt1xx_u_net_attributes DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mxt1xx_u_net_attributes ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_net_attributes__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mxt1xx_u_net_attributes, mxt1xx_u_net_attributes.Builder> InternalFieldAccessors {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_net_attributes__FieldAccessorTable; }
    }
    
    public const int ConnectionTypeFieldNumber = 1;
    private bool hasConnectionType;
    private uint connectionType_;
    public bool HasConnectionType {
      get { return hasConnectionType; }
    }
    [global::System.CLSCompliant(false)]
    public uint ConnectionType {
      get { return connectionType_; }
    }
    
    public const int KeepAliveTimerFieldNumber = 2;
    private bool hasKeepAliveTimer;
    private uint keepAliveTimer_;
    public bool HasKeepAliveTimer {
      get { return hasKeepAliveTimer; }
    }
    [global::System.CLSCompliant(false)]
    public uint KeepAliveTimer {
      get { return keepAliveTimer_; }
    }
    
    public const int ApnFieldNumber = 3;
    private bool hasApn;
    private string apn_ = "";
    public bool HasApn {
      get { return hasApn; }
    }
    public string Apn {
      get { return apn_; }
    }
    
    public const int UserFieldNumber = 4;
    private bool hasUser;
    private string user_ = "";
    public bool HasUser {
      get { return hasUser; }
    }
    public string User {
      get { return user_; }
    }
    
    public const int PasswordFieldNumber = 5;
    private bool hasPassword;
    private string password_ = "";
    public bool HasPassword {
      get { return hasPassword; }
    }
    public string Password {
      get { return password_; }
    }
    
    public const int Apn2FieldNumber = 6;
    private bool hasApn2;
    private string apn2_ = "";
    public bool HasApn2 {
      get { return hasApn2; }
    }
    public string Apn2 {
      get { return apn2_; }
    }
    
    public const int User2FieldNumber = 7;
    private bool hasUser2;
    private string user2_ = "";
    public bool HasUser2 {
      get { return hasUser2; }
    }
    public string User2 {
      get { return user2_; }
    }
    
    public const int Password2FieldNumber = 8;
    private bool hasPassword2;
    private string password2_ = "";
    public bool HasPassword2 {
      get { return hasPassword2; }
    }
    public string Password2 {
      get { return password2_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasConnectionType) return false;
        if (!hasKeepAliveTimer) return false;
        if (!hasApn) return false;
        if (!hasUser) return false;
        if (!hasPassword) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mxt1XxUNetAttributesFieldNames;
      if (hasConnectionType) {
        output.WriteUInt32(1, field_names[2], ConnectionType);
      }
      if (hasKeepAliveTimer) {
        output.WriteUInt32(2, field_names[3], KeepAliveTimer);
      }
      if (hasApn) {
        output.WriteString(3, field_names[0], Apn);
      }
      if (hasUser) {
        output.WriteString(4, field_names[6], User);
      }
      if (hasPassword) {
        output.WriteString(5, field_names[4], Password);
      }
      if (hasApn2) {
        output.WriteString(6, field_names[1], Apn2);
      }
      if (hasUser2) {
        output.WriteString(7, field_names[7], User2);
      }
      if (hasPassword2) {
        output.WriteString(8, field_names[5], Password2);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasConnectionType) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, ConnectionType);
      }
      if (hasKeepAliveTimer) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, KeepAliveTimer);
      }
      if (hasApn) {
        size += pb::CodedOutputStream.ComputeStringSize(3, Apn);
      }
      if (hasUser) {
        size += pb::CodedOutputStream.ComputeStringSize(4, User);
      }
      if (hasPassword) {
        size += pb::CodedOutputStream.ComputeStringSize(5, Password);
      }
      if (hasApn2) {
        size += pb::CodedOutputStream.ComputeStringSize(6, Apn2);
      }
      if (hasUser2) {
        size += pb::CodedOutputStream.ComputeStringSize(7, User2);
      }
      if (hasPassword2) {
        size += pb::CodedOutputStream.ComputeStringSize(8, Password2);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mxt1xx_u_net_attributes ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_net_attributes ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_net_attributes ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_net_attributes ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_net_attributes ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_net_attributes ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_net_attributes ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mxt1xx_u_net_attributes ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mxt1xx_u_net_attributes ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_net_attributes ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mxt1xx_u_net_attributes MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mxt1xx_u_net_attributes prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mxt1xx_u_net_attributes, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mxt1xx_u_net_attributes cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mxt1xx_u_net_attributes result;
      
      private mxt1xx_u_net_attributes PrepareBuilder() {
        if (resultIsReadOnly) {
          mxt1xx_u_net_attributes original = result;
          result = new mxt1xx_u_net_attributes();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mxt1xx_u_net_attributes MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_net_attributes.Descriptor; }
      }
      
      public override mxt1xx_u_net_attributes DefaultInstanceForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_net_attributes.DefaultInstance; }
      }
      
      public override mxt1xx_u_net_attributes BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mxt1xx_u_net_attributes) {
          return MergeFrom((mxt1xx_u_net_attributes) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mxt1xx_u_net_attributes other) {
        if (other == global::maxtrack.pb.mxt1xx.mxt1xx_u_net_attributes.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasConnectionType) {
          ConnectionType = other.ConnectionType;
        }
        if (other.HasKeepAliveTimer) {
          KeepAliveTimer = other.KeepAliveTimer;
        }
        if (other.HasApn) {
          Apn = other.Apn;
        }
        if (other.HasUser) {
          User = other.User;
        }
        if (other.HasPassword) {
          Password = other.Password;
        }
        if (other.HasApn2) {
          Apn2 = other.Apn2;
        }
        if (other.HasUser2) {
          User2 = other.User2;
        }
        if (other.HasPassword2) {
          Password2 = other.Password2;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mxt1XxUNetAttributesFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mxt1XxUNetAttributesFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasConnectionType = input.ReadUInt32(ref result.connectionType_);
              break;
            }
            case 16: {
              result.hasKeepAliveTimer = input.ReadUInt32(ref result.keepAliveTimer_);
              break;
            }
            case 26: {
              result.hasApn = input.ReadString(ref result.apn_);
              break;
            }
            case 34: {
              result.hasUser = input.ReadString(ref result.user_);
              break;
            }
            case 42: {
              result.hasPassword = input.ReadString(ref result.password_);
              break;
            }
            case 50: {
              result.hasApn2 = input.ReadString(ref result.apn2_);
              break;
            }
            case 58: {
              result.hasUser2 = input.ReadString(ref result.user2_);
              break;
            }
            case 66: {
              result.hasPassword2 = input.ReadString(ref result.password2_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasConnectionType {
        get { return result.hasConnectionType; }
      }
      [global::System.CLSCompliant(false)]
      public uint ConnectionType {
        get { return result.ConnectionType; }
        set { SetConnectionType(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetConnectionType(uint value) {
        PrepareBuilder();
        result.hasConnectionType = true;
        result.connectionType_ = value;
        return this;
      }
      public Builder ClearConnectionType() {
        PrepareBuilder();
        result.hasConnectionType = false;
        result.connectionType_ = 0;
        return this;
      }
      
      public bool HasKeepAliveTimer {
        get { return result.hasKeepAliveTimer; }
      }
      [global::System.CLSCompliant(false)]
      public uint KeepAliveTimer {
        get { return result.KeepAliveTimer; }
        set { SetKeepAliveTimer(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetKeepAliveTimer(uint value) {
        PrepareBuilder();
        result.hasKeepAliveTimer = true;
        result.keepAliveTimer_ = value;
        return this;
      }
      public Builder ClearKeepAliveTimer() {
        PrepareBuilder();
        result.hasKeepAliveTimer = false;
        result.keepAliveTimer_ = 0;
        return this;
      }
      
      public bool HasApn {
        get { return result.hasApn; }
      }
      public string Apn {
        get { return result.Apn; }
        set { SetApn(value); }
      }
      public Builder SetApn(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasApn = true;
        result.apn_ = value;
        return this;
      }
      public Builder ClearApn() {
        PrepareBuilder();
        result.hasApn = false;
        result.apn_ = "";
        return this;
      }
      
      public bool HasUser {
        get { return result.hasUser; }
      }
      public string User {
        get { return result.User; }
        set { SetUser(value); }
      }
      public Builder SetUser(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUser = true;
        result.user_ = value;
        return this;
      }
      public Builder ClearUser() {
        PrepareBuilder();
        result.hasUser = false;
        result.user_ = "";
        return this;
      }
      
      public bool HasPassword {
        get { return result.hasPassword; }
      }
      public string Password {
        get { return result.Password; }
        set { SetPassword(value); }
      }
      public Builder SetPassword(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPassword = true;
        result.password_ = value;
        return this;
      }
      public Builder ClearPassword() {
        PrepareBuilder();
        result.hasPassword = false;
        result.password_ = "";
        return this;
      }
      
      public bool HasApn2 {
        get { return result.hasApn2; }
      }
      public string Apn2 {
        get { return result.Apn2; }
        set { SetApn2(value); }
      }
      public Builder SetApn2(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasApn2 = true;
        result.apn2_ = value;
        return this;
      }
      public Builder ClearApn2() {
        PrepareBuilder();
        result.hasApn2 = false;
        result.apn2_ = "";
        return this;
      }
      
      public bool HasUser2 {
        get { return result.hasUser2; }
      }
      public string User2 {
        get { return result.User2; }
        set { SetUser2(value); }
      }
      public Builder SetUser2(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUser2 = true;
        result.user2_ = value;
        return this;
      }
      public Builder ClearUser2() {
        PrepareBuilder();
        result.hasUser2 = false;
        result.user2_ = "";
        return this;
      }
      
      public bool HasPassword2 {
        get { return result.hasPassword2; }
      }
      public string Password2 {
        get { return result.Password2; }
        set { SetPassword2(value); }
      }
      public Builder SetPassword2(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPassword2 = true;
        result.password2_ = value;
        return this;
      }
      public Builder ClearPassword2() {
        PrepareBuilder();
        result.hasPassword2 = false;
        result.password2_ = "";
        return this;
      }
    }
    static mxt1xx_u_net_attributes() {
      object.ReferenceEquals(global::maxtrack.pb.mxt1xx.Mxt1Xx.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mxt1xx_u_ip_address : pb::GeneratedMessage<mxt1xx_u_ip_address, mxt1xx_u_ip_address.Builder> {
    private mxt1xx_u_ip_address() { }
    private static readonly mxt1xx_u_ip_address defaultInstance = new mxt1xx_u_ip_address().MakeReadOnly();
    private static readonly string[] _mxt1XxUIpAddressFieldNames = new string[] { "primary_ip_addr", "primary_ip_port", "secondary_ip_addr", "secondary_ip_port" };
    private static readonly uint[] _mxt1XxUIpAddressFieldTags = new uint[] { 10, 24, 18, 32 };
    public static mxt1xx_u_ip_address DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mxt1xx_u_ip_address DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mxt1xx_u_ip_address ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_ip_address__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mxt1xx_u_ip_address, mxt1xx_u_ip_address.Builder> InternalFieldAccessors {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_ip_address__FieldAccessorTable; }
    }
    
    public const int PrimaryIpAddrFieldNumber = 1;
    private bool hasPrimaryIpAddr;
    private string primaryIpAddr_ = "";
    public bool HasPrimaryIpAddr {
      get { return hasPrimaryIpAddr; }
    }
    public string PrimaryIpAddr {
      get { return primaryIpAddr_; }
    }
    
    public const int SecondaryIpAddrFieldNumber = 2;
    private bool hasSecondaryIpAddr;
    private string secondaryIpAddr_ = "";
    public bool HasSecondaryIpAddr {
      get { return hasSecondaryIpAddr; }
    }
    public string SecondaryIpAddr {
      get { return secondaryIpAddr_; }
    }
    
    public const int PrimaryIpPortFieldNumber = 3;
    private bool hasPrimaryIpPort;
    private uint primaryIpPort_;
    public bool HasPrimaryIpPort {
      get { return hasPrimaryIpPort; }
    }
    [global::System.CLSCompliant(false)]
    public uint PrimaryIpPort {
      get { return primaryIpPort_; }
    }
    
    public const int SecondaryIpPortFieldNumber = 4;
    private bool hasSecondaryIpPort;
    private uint secondaryIpPort_;
    public bool HasSecondaryIpPort {
      get { return hasSecondaryIpPort; }
    }
    [global::System.CLSCompliant(false)]
    public uint SecondaryIpPort {
      get { return secondaryIpPort_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPrimaryIpAddr) return false;
        if (!hasSecondaryIpAddr) return false;
        if (!hasPrimaryIpPort) return false;
        if (!hasSecondaryIpPort) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mxt1XxUIpAddressFieldNames;
      if (hasPrimaryIpAddr) {
        output.WriteString(1, field_names[0], PrimaryIpAddr);
      }
      if (hasSecondaryIpAddr) {
        output.WriteString(2, field_names[2], SecondaryIpAddr);
      }
      if (hasPrimaryIpPort) {
        output.WriteUInt32(3, field_names[1], PrimaryIpPort);
      }
      if (hasSecondaryIpPort) {
        output.WriteUInt32(4, field_names[3], SecondaryIpPort);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasPrimaryIpAddr) {
        size += pb::CodedOutputStream.ComputeStringSize(1, PrimaryIpAddr);
      }
      if (hasSecondaryIpAddr) {
        size += pb::CodedOutputStream.ComputeStringSize(2, SecondaryIpAddr);
      }
      if (hasPrimaryIpPort) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, PrimaryIpPort);
      }
      if (hasSecondaryIpPort) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, SecondaryIpPort);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mxt1xx_u_ip_address ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_ip_address ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_ip_address ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_ip_address ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_ip_address ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_ip_address ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_ip_address ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mxt1xx_u_ip_address ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mxt1xx_u_ip_address ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_ip_address ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mxt1xx_u_ip_address MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mxt1xx_u_ip_address prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mxt1xx_u_ip_address, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mxt1xx_u_ip_address cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mxt1xx_u_ip_address result;
      
      private mxt1xx_u_ip_address PrepareBuilder() {
        if (resultIsReadOnly) {
          mxt1xx_u_ip_address original = result;
          result = new mxt1xx_u_ip_address();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mxt1xx_u_ip_address MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_ip_address.Descriptor; }
      }
      
      public override mxt1xx_u_ip_address DefaultInstanceForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_ip_address.DefaultInstance; }
      }
      
      public override mxt1xx_u_ip_address BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mxt1xx_u_ip_address) {
          return MergeFrom((mxt1xx_u_ip_address) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mxt1xx_u_ip_address other) {
        if (other == global::maxtrack.pb.mxt1xx.mxt1xx_u_ip_address.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPrimaryIpAddr) {
          PrimaryIpAddr = other.PrimaryIpAddr;
        }
        if (other.HasSecondaryIpAddr) {
          SecondaryIpAddr = other.SecondaryIpAddr;
        }
        if (other.HasPrimaryIpPort) {
          PrimaryIpPort = other.PrimaryIpPort;
        }
        if (other.HasSecondaryIpPort) {
          SecondaryIpPort = other.SecondaryIpPort;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mxt1XxUIpAddressFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mxt1XxUIpAddressFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasPrimaryIpAddr = input.ReadString(ref result.primaryIpAddr_);
              break;
            }
            case 18: {
              result.hasSecondaryIpAddr = input.ReadString(ref result.secondaryIpAddr_);
              break;
            }
            case 24: {
              result.hasPrimaryIpPort = input.ReadUInt32(ref result.primaryIpPort_);
              break;
            }
            case 32: {
              result.hasSecondaryIpPort = input.ReadUInt32(ref result.secondaryIpPort_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPrimaryIpAddr {
        get { return result.hasPrimaryIpAddr; }
      }
      public string PrimaryIpAddr {
        get { return result.PrimaryIpAddr; }
        set { SetPrimaryIpAddr(value); }
      }
      public Builder SetPrimaryIpAddr(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPrimaryIpAddr = true;
        result.primaryIpAddr_ = value;
        return this;
      }
      public Builder ClearPrimaryIpAddr() {
        PrepareBuilder();
        result.hasPrimaryIpAddr = false;
        result.primaryIpAddr_ = "";
        return this;
      }
      
      public bool HasSecondaryIpAddr {
        get { return result.hasSecondaryIpAddr; }
      }
      public string SecondaryIpAddr {
        get { return result.SecondaryIpAddr; }
        set { SetSecondaryIpAddr(value); }
      }
      public Builder SetSecondaryIpAddr(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSecondaryIpAddr = true;
        result.secondaryIpAddr_ = value;
        return this;
      }
      public Builder ClearSecondaryIpAddr() {
        PrepareBuilder();
        result.hasSecondaryIpAddr = false;
        result.secondaryIpAddr_ = "";
        return this;
      }
      
      public bool HasPrimaryIpPort {
        get { return result.hasPrimaryIpPort; }
      }
      [global::System.CLSCompliant(false)]
      public uint PrimaryIpPort {
        get { return result.PrimaryIpPort; }
        set { SetPrimaryIpPort(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetPrimaryIpPort(uint value) {
        PrepareBuilder();
        result.hasPrimaryIpPort = true;
        result.primaryIpPort_ = value;
        return this;
      }
      public Builder ClearPrimaryIpPort() {
        PrepareBuilder();
        result.hasPrimaryIpPort = false;
        result.primaryIpPort_ = 0;
        return this;
      }
      
      public bool HasSecondaryIpPort {
        get { return result.hasSecondaryIpPort; }
      }
      [global::System.CLSCompliant(false)]
      public uint SecondaryIpPort {
        get { return result.SecondaryIpPort; }
        set { SetSecondaryIpPort(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSecondaryIpPort(uint value) {
        PrepareBuilder();
        result.hasSecondaryIpPort = true;
        result.secondaryIpPort_ = value;
        return this;
      }
      public Builder ClearSecondaryIpPort() {
        PrepareBuilder();
        result.hasSecondaryIpPort = false;
        result.secondaryIpPort_ = 0;
        return this;
      }
    }
    static mxt1xx_u_ip_address() {
      object.ReferenceEquals(global::maxtrack.pb.mxt1xx.Mxt1Xx.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mxt1xx_u_report_interval : pb::GeneratedMessage<mxt1xx_u_report_interval, mxt1xx_u_report_interval.Builder> {
    private mxt1xx_u_report_interval() { }
    private static readonly mxt1xx_u_report_interval defaultInstance = new mxt1xx_u_report_interval().MakeReadOnly();
    private static readonly string[] _mxt1XxUReportIntervalFieldNames = new string[] { "info_group", "keep_working_timer", "resend_attempts", "resend_timeout", "timeout_moving", "timer_of_ignition_off", "timer_of_movement", "timer_of_panic" };
    private static readonly uint[] _mxt1XxUReportIntervalFieldTags = new uint[] { 48, 56, 32, 40, 64, 8, 16, 24 };
    public static mxt1xx_u_report_interval DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mxt1xx_u_report_interval DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mxt1xx_u_report_interval ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_report_interval__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mxt1xx_u_report_interval, mxt1xx_u_report_interval.Builder> InternalFieldAccessors {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_report_interval__FieldAccessorTable; }
    }
    
    public const int TimerOfIgnitionOffFieldNumber = 1;
    private bool hasTimerOfIgnitionOff;
    private uint timerOfIgnitionOff_;
    public bool HasTimerOfIgnitionOff {
      get { return hasTimerOfIgnitionOff; }
    }
    [global::System.CLSCompliant(false)]
    public uint TimerOfIgnitionOff {
      get { return timerOfIgnitionOff_; }
    }
    
    public const int TimerOfMovementFieldNumber = 2;
    private bool hasTimerOfMovement;
    private uint timerOfMovement_;
    public bool HasTimerOfMovement {
      get { return hasTimerOfMovement; }
    }
    [global::System.CLSCompliant(false)]
    public uint TimerOfMovement {
      get { return timerOfMovement_; }
    }
    
    public const int TimerOfPanicFieldNumber = 3;
    private bool hasTimerOfPanic;
    private uint timerOfPanic_;
    public bool HasTimerOfPanic {
      get { return hasTimerOfPanic; }
    }
    [global::System.CLSCompliant(false)]
    public uint TimerOfPanic {
      get { return timerOfPanic_; }
    }
    
    public const int ResendAttemptsFieldNumber = 4;
    private bool hasResendAttempts;
    private uint resendAttempts_;
    public bool HasResendAttempts {
      get { return hasResendAttempts; }
    }
    [global::System.CLSCompliant(false)]
    public uint ResendAttempts {
      get { return resendAttempts_; }
    }
    
    public const int ResendTimeoutFieldNumber = 5;
    private bool hasResendTimeout;
    private uint resendTimeout_;
    public bool HasResendTimeout {
      get { return hasResendTimeout; }
    }
    [global::System.CLSCompliant(false)]
    public uint ResendTimeout {
      get { return resendTimeout_; }
    }
    
    public const int InfoGroupFieldNumber = 6;
    private bool hasInfoGroup;
    private uint infoGroup_;
    public bool HasInfoGroup {
      get { return hasInfoGroup; }
    }
    [global::System.CLSCompliant(false)]
    public uint InfoGroup {
      get { return infoGroup_; }
    }
    
    public const int KeepWorkingTimerFieldNumber = 7;
    private bool hasKeepWorkingTimer;
    private uint keepWorkingTimer_;
    public bool HasKeepWorkingTimer {
      get { return hasKeepWorkingTimer; }
    }
    [global::System.CLSCompliant(false)]
    public uint KeepWorkingTimer {
      get { return keepWorkingTimer_; }
    }
    
    public const int TimeoutMovingFieldNumber = 8;
    private bool hasTimeoutMoving;
    private uint timeoutMoving_;
    public bool HasTimeoutMoving {
      get { return hasTimeoutMoving; }
    }
    [global::System.CLSCompliant(false)]
    public uint TimeoutMoving {
      get { return timeoutMoving_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTimerOfIgnitionOff) return false;
        if (!hasTimerOfMovement) return false;
        if (!hasTimerOfPanic) return false;
        if (!hasResendAttempts) return false;
        if (!hasResendTimeout) return false;
        if (!hasInfoGroup) return false;
        if (!hasKeepWorkingTimer) return false;
        if (!hasTimeoutMoving) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mxt1XxUReportIntervalFieldNames;
      if (hasTimerOfIgnitionOff) {
        output.WriteUInt32(1, field_names[5], TimerOfIgnitionOff);
      }
      if (hasTimerOfMovement) {
        output.WriteUInt32(2, field_names[6], TimerOfMovement);
      }
      if (hasTimerOfPanic) {
        output.WriteUInt32(3, field_names[7], TimerOfPanic);
      }
      if (hasResendAttempts) {
        output.WriteUInt32(4, field_names[2], ResendAttempts);
      }
      if (hasResendTimeout) {
        output.WriteUInt32(5, field_names[3], ResendTimeout);
      }
      if (hasInfoGroup) {
        output.WriteUInt32(6, field_names[0], InfoGroup);
      }
      if (hasKeepWorkingTimer) {
        output.WriteUInt32(7, field_names[1], KeepWorkingTimer);
      }
      if (hasTimeoutMoving) {
        output.WriteUInt32(8, field_names[4], TimeoutMoving);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasTimerOfIgnitionOff) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, TimerOfIgnitionOff);
      }
      if (hasTimerOfMovement) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, TimerOfMovement);
      }
      if (hasTimerOfPanic) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, TimerOfPanic);
      }
      if (hasResendAttempts) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, ResendAttempts);
      }
      if (hasResendTimeout) {
        size += pb::CodedOutputStream.ComputeUInt32Size(5, ResendTimeout);
      }
      if (hasInfoGroup) {
        size += pb::CodedOutputStream.ComputeUInt32Size(6, InfoGroup);
      }
      if (hasKeepWorkingTimer) {
        size += pb::CodedOutputStream.ComputeUInt32Size(7, KeepWorkingTimer);
      }
      if (hasTimeoutMoving) {
        size += pb::CodedOutputStream.ComputeUInt32Size(8, TimeoutMoving);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mxt1xx_u_report_interval ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_report_interval ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_report_interval ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_report_interval ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_report_interval ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_report_interval ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_report_interval ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mxt1xx_u_report_interval ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mxt1xx_u_report_interval ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_report_interval ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mxt1xx_u_report_interval MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mxt1xx_u_report_interval prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mxt1xx_u_report_interval, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mxt1xx_u_report_interval cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mxt1xx_u_report_interval result;
      
      private mxt1xx_u_report_interval PrepareBuilder() {
        if (resultIsReadOnly) {
          mxt1xx_u_report_interval original = result;
          result = new mxt1xx_u_report_interval();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mxt1xx_u_report_interval MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_report_interval.Descriptor; }
      }
      
      public override mxt1xx_u_report_interval DefaultInstanceForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_report_interval.DefaultInstance; }
      }
      
      public override mxt1xx_u_report_interval BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mxt1xx_u_report_interval) {
          return MergeFrom((mxt1xx_u_report_interval) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mxt1xx_u_report_interval other) {
        if (other == global::maxtrack.pb.mxt1xx.mxt1xx_u_report_interval.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTimerOfIgnitionOff) {
          TimerOfIgnitionOff = other.TimerOfIgnitionOff;
        }
        if (other.HasTimerOfMovement) {
          TimerOfMovement = other.TimerOfMovement;
        }
        if (other.HasTimerOfPanic) {
          TimerOfPanic = other.TimerOfPanic;
        }
        if (other.HasResendAttempts) {
          ResendAttempts = other.ResendAttempts;
        }
        if (other.HasResendTimeout) {
          ResendTimeout = other.ResendTimeout;
        }
        if (other.HasInfoGroup) {
          InfoGroup = other.InfoGroup;
        }
        if (other.HasKeepWorkingTimer) {
          KeepWorkingTimer = other.KeepWorkingTimer;
        }
        if (other.HasTimeoutMoving) {
          TimeoutMoving = other.TimeoutMoving;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mxt1XxUReportIntervalFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mxt1XxUReportIntervalFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasTimerOfIgnitionOff = input.ReadUInt32(ref result.timerOfIgnitionOff_);
              break;
            }
            case 16: {
              result.hasTimerOfMovement = input.ReadUInt32(ref result.timerOfMovement_);
              break;
            }
            case 24: {
              result.hasTimerOfPanic = input.ReadUInt32(ref result.timerOfPanic_);
              break;
            }
            case 32: {
              result.hasResendAttempts = input.ReadUInt32(ref result.resendAttempts_);
              break;
            }
            case 40: {
              result.hasResendTimeout = input.ReadUInt32(ref result.resendTimeout_);
              break;
            }
            case 48: {
              result.hasInfoGroup = input.ReadUInt32(ref result.infoGroup_);
              break;
            }
            case 56: {
              result.hasKeepWorkingTimer = input.ReadUInt32(ref result.keepWorkingTimer_);
              break;
            }
            case 64: {
              result.hasTimeoutMoving = input.ReadUInt32(ref result.timeoutMoving_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTimerOfIgnitionOff {
        get { return result.hasTimerOfIgnitionOff; }
      }
      [global::System.CLSCompliant(false)]
      public uint TimerOfIgnitionOff {
        get { return result.TimerOfIgnitionOff; }
        set { SetTimerOfIgnitionOff(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetTimerOfIgnitionOff(uint value) {
        PrepareBuilder();
        result.hasTimerOfIgnitionOff = true;
        result.timerOfIgnitionOff_ = value;
        return this;
      }
      public Builder ClearTimerOfIgnitionOff() {
        PrepareBuilder();
        result.hasTimerOfIgnitionOff = false;
        result.timerOfIgnitionOff_ = 0;
        return this;
      }
      
      public bool HasTimerOfMovement {
        get { return result.hasTimerOfMovement; }
      }
      [global::System.CLSCompliant(false)]
      public uint TimerOfMovement {
        get { return result.TimerOfMovement; }
        set { SetTimerOfMovement(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetTimerOfMovement(uint value) {
        PrepareBuilder();
        result.hasTimerOfMovement = true;
        result.timerOfMovement_ = value;
        return this;
      }
      public Builder ClearTimerOfMovement() {
        PrepareBuilder();
        result.hasTimerOfMovement = false;
        result.timerOfMovement_ = 0;
        return this;
      }
      
      public bool HasTimerOfPanic {
        get { return result.hasTimerOfPanic; }
      }
      [global::System.CLSCompliant(false)]
      public uint TimerOfPanic {
        get { return result.TimerOfPanic; }
        set { SetTimerOfPanic(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetTimerOfPanic(uint value) {
        PrepareBuilder();
        result.hasTimerOfPanic = true;
        result.timerOfPanic_ = value;
        return this;
      }
      public Builder ClearTimerOfPanic() {
        PrepareBuilder();
        result.hasTimerOfPanic = false;
        result.timerOfPanic_ = 0;
        return this;
      }
      
      public bool HasResendAttempts {
        get { return result.hasResendAttempts; }
      }
      [global::System.CLSCompliant(false)]
      public uint ResendAttempts {
        get { return result.ResendAttempts; }
        set { SetResendAttempts(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetResendAttempts(uint value) {
        PrepareBuilder();
        result.hasResendAttempts = true;
        result.resendAttempts_ = value;
        return this;
      }
      public Builder ClearResendAttempts() {
        PrepareBuilder();
        result.hasResendAttempts = false;
        result.resendAttempts_ = 0;
        return this;
      }
      
      public bool HasResendTimeout {
        get { return result.hasResendTimeout; }
      }
      [global::System.CLSCompliant(false)]
      public uint ResendTimeout {
        get { return result.ResendTimeout; }
        set { SetResendTimeout(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetResendTimeout(uint value) {
        PrepareBuilder();
        result.hasResendTimeout = true;
        result.resendTimeout_ = value;
        return this;
      }
      public Builder ClearResendTimeout() {
        PrepareBuilder();
        result.hasResendTimeout = false;
        result.resendTimeout_ = 0;
        return this;
      }
      
      public bool HasInfoGroup {
        get { return result.hasInfoGroup; }
      }
      [global::System.CLSCompliant(false)]
      public uint InfoGroup {
        get { return result.InfoGroup; }
        set { SetInfoGroup(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetInfoGroup(uint value) {
        PrepareBuilder();
        result.hasInfoGroup = true;
        result.infoGroup_ = value;
        return this;
      }
      public Builder ClearInfoGroup() {
        PrepareBuilder();
        result.hasInfoGroup = false;
        result.infoGroup_ = 0;
        return this;
      }
      
      public bool HasKeepWorkingTimer {
        get { return result.hasKeepWorkingTimer; }
      }
      [global::System.CLSCompliant(false)]
      public uint KeepWorkingTimer {
        get { return result.KeepWorkingTimer; }
        set { SetKeepWorkingTimer(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetKeepWorkingTimer(uint value) {
        PrepareBuilder();
        result.hasKeepWorkingTimer = true;
        result.keepWorkingTimer_ = value;
        return this;
      }
      public Builder ClearKeepWorkingTimer() {
        PrepareBuilder();
        result.hasKeepWorkingTimer = false;
        result.keepWorkingTimer_ = 0;
        return this;
      }
      
      public bool HasTimeoutMoving {
        get { return result.hasTimeoutMoving; }
      }
      [global::System.CLSCompliant(false)]
      public uint TimeoutMoving {
        get { return result.TimeoutMoving; }
        set { SetTimeoutMoving(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetTimeoutMoving(uint value) {
        PrepareBuilder();
        result.hasTimeoutMoving = true;
        result.timeoutMoving_ = value;
        return this;
      }
      public Builder ClearTimeoutMoving() {
        PrepareBuilder();
        result.hasTimeoutMoving = false;
        result.timeoutMoving_ = 0;
        return this;
      }
    }
    static mxt1xx_u_report_interval() {
      object.ReferenceEquals(global::maxtrack.pb.mxt1xx.Mxt1Xx.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mxt1xx_u_gsr : pb::GeneratedMessage<mxt1xx_u_gsr, mxt1xx_u_gsr.Builder> {
    private mxt1xx_u_gsr() { }
    private static readonly mxt1xx_u_gsr defaultInstance = new mxt1xx_u_gsr().MakeReadOnly();
    private static readonly string[] _mxt1XxUGsrFieldNames = new string[] { "deb_moving", "deb_stopped", "detect_moving", "rolling_threshold", "rs_mode", "send_immediately", "shock_threshold", "side_threshold" };
    private static readonly uint[] _mxt1XxUGsrFieldTags = new uint[] { 16, 24, 32, 48, 40, 8, 64, 56 };
    public static mxt1xx_u_gsr DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mxt1xx_u_gsr DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mxt1xx_u_gsr ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_gsr__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mxt1xx_u_gsr, mxt1xx_u_gsr.Builder> InternalFieldAccessors {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_gsr__FieldAccessorTable; }
    }
    
    public const int SendImmediatelyFieldNumber = 1;
    private bool hasSendImmediately;
    private uint sendImmediately_;
    public bool HasSendImmediately {
      get { return hasSendImmediately; }
    }
    [global::System.CLSCompliant(false)]
    public uint SendImmediately {
      get { return sendImmediately_; }
    }
    
    public const int DebMovingFieldNumber = 2;
    private bool hasDebMoving;
    private uint debMoving_;
    public bool HasDebMoving {
      get { return hasDebMoving; }
    }
    [global::System.CLSCompliant(false)]
    public uint DebMoving {
      get { return debMoving_; }
    }
    
    public const int DebStoppedFieldNumber = 3;
    private bool hasDebStopped;
    private uint debStopped_;
    public bool HasDebStopped {
      get { return hasDebStopped; }
    }
    [global::System.CLSCompliant(false)]
    public uint DebStopped {
      get { return debStopped_; }
    }
    
    public const int DetectMovingFieldNumber = 4;
    private bool hasDetectMoving;
    private uint detectMoving_;
    public bool HasDetectMoving {
      get { return hasDetectMoving; }
    }
    [global::System.CLSCompliant(false)]
    public uint DetectMoving {
      get { return detectMoving_; }
    }
    
    public const int RsModeFieldNumber = 5;
    private bool hasRsMode;
    private uint rsMode_;
    public bool HasRsMode {
      get { return hasRsMode; }
    }
    [global::System.CLSCompliant(false)]
    public uint RsMode {
      get { return rsMode_; }
    }
    
    public const int RollingThresholdFieldNumber = 6;
    private bool hasRollingThreshold;
    private uint rollingThreshold_;
    public bool HasRollingThreshold {
      get { return hasRollingThreshold; }
    }
    [global::System.CLSCompliant(false)]
    public uint RollingThreshold {
      get { return rollingThreshold_; }
    }
    
    public const int SideThresholdFieldNumber = 7;
    private bool hasSideThreshold;
    private uint sideThreshold_;
    public bool HasSideThreshold {
      get { return hasSideThreshold; }
    }
    [global::System.CLSCompliant(false)]
    public uint SideThreshold {
      get { return sideThreshold_; }
    }
    
    public const int ShockThresholdFieldNumber = 8;
    private bool hasShockThreshold;
    private uint shockThreshold_;
    public bool HasShockThreshold {
      get { return hasShockThreshold; }
    }
    [global::System.CLSCompliant(false)]
    public uint ShockThreshold {
      get { return shockThreshold_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSendImmediately) return false;
        if (!hasDebMoving) return false;
        if (!hasDebStopped) return false;
        if (!hasDetectMoving) return false;
        if (!hasRsMode) return false;
        if (!hasRollingThreshold) return false;
        if (!hasSideThreshold) return false;
        if (!hasShockThreshold) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mxt1XxUGsrFieldNames;
      if (hasSendImmediately) {
        output.WriteUInt32(1, field_names[5], SendImmediately);
      }
      if (hasDebMoving) {
        output.WriteUInt32(2, field_names[0], DebMoving);
      }
      if (hasDebStopped) {
        output.WriteUInt32(3, field_names[1], DebStopped);
      }
      if (hasDetectMoving) {
        output.WriteUInt32(4, field_names[2], DetectMoving);
      }
      if (hasRsMode) {
        output.WriteUInt32(5, field_names[4], RsMode);
      }
      if (hasRollingThreshold) {
        output.WriteUInt32(6, field_names[3], RollingThreshold);
      }
      if (hasSideThreshold) {
        output.WriteUInt32(7, field_names[7], SideThreshold);
      }
      if (hasShockThreshold) {
        output.WriteUInt32(8, field_names[6], ShockThreshold);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasSendImmediately) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, SendImmediately);
      }
      if (hasDebMoving) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, DebMoving);
      }
      if (hasDebStopped) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, DebStopped);
      }
      if (hasDetectMoving) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, DetectMoving);
      }
      if (hasRsMode) {
        size += pb::CodedOutputStream.ComputeUInt32Size(5, RsMode);
      }
      if (hasRollingThreshold) {
        size += pb::CodedOutputStream.ComputeUInt32Size(6, RollingThreshold);
      }
      if (hasSideThreshold) {
        size += pb::CodedOutputStream.ComputeUInt32Size(7, SideThreshold);
      }
      if (hasShockThreshold) {
        size += pb::CodedOutputStream.ComputeUInt32Size(8, ShockThreshold);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mxt1xx_u_gsr ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_gsr ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_gsr ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_gsr ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_gsr ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_gsr ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_gsr ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mxt1xx_u_gsr ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mxt1xx_u_gsr ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_gsr ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mxt1xx_u_gsr MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mxt1xx_u_gsr prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mxt1xx_u_gsr, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mxt1xx_u_gsr cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mxt1xx_u_gsr result;
      
      private mxt1xx_u_gsr PrepareBuilder() {
        if (resultIsReadOnly) {
          mxt1xx_u_gsr original = result;
          result = new mxt1xx_u_gsr();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mxt1xx_u_gsr MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_gsr.Descriptor; }
      }
      
      public override mxt1xx_u_gsr DefaultInstanceForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_gsr.DefaultInstance; }
      }
      
      public override mxt1xx_u_gsr BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mxt1xx_u_gsr) {
          return MergeFrom((mxt1xx_u_gsr) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mxt1xx_u_gsr other) {
        if (other == global::maxtrack.pb.mxt1xx.mxt1xx_u_gsr.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSendImmediately) {
          SendImmediately = other.SendImmediately;
        }
        if (other.HasDebMoving) {
          DebMoving = other.DebMoving;
        }
        if (other.HasDebStopped) {
          DebStopped = other.DebStopped;
        }
        if (other.HasDetectMoving) {
          DetectMoving = other.DetectMoving;
        }
        if (other.HasRsMode) {
          RsMode = other.RsMode;
        }
        if (other.HasRollingThreshold) {
          RollingThreshold = other.RollingThreshold;
        }
        if (other.HasSideThreshold) {
          SideThreshold = other.SideThreshold;
        }
        if (other.HasShockThreshold) {
          ShockThreshold = other.ShockThreshold;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mxt1XxUGsrFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mxt1XxUGsrFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasSendImmediately = input.ReadUInt32(ref result.sendImmediately_);
              break;
            }
            case 16: {
              result.hasDebMoving = input.ReadUInt32(ref result.debMoving_);
              break;
            }
            case 24: {
              result.hasDebStopped = input.ReadUInt32(ref result.debStopped_);
              break;
            }
            case 32: {
              result.hasDetectMoving = input.ReadUInt32(ref result.detectMoving_);
              break;
            }
            case 40: {
              result.hasRsMode = input.ReadUInt32(ref result.rsMode_);
              break;
            }
            case 48: {
              result.hasRollingThreshold = input.ReadUInt32(ref result.rollingThreshold_);
              break;
            }
            case 56: {
              result.hasSideThreshold = input.ReadUInt32(ref result.sideThreshold_);
              break;
            }
            case 64: {
              result.hasShockThreshold = input.ReadUInt32(ref result.shockThreshold_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSendImmediately {
        get { return result.hasSendImmediately; }
      }
      [global::System.CLSCompliant(false)]
      public uint SendImmediately {
        get { return result.SendImmediately; }
        set { SetSendImmediately(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSendImmediately(uint value) {
        PrepareBuilder();
        result.hasSendImmediately = true;
        result.sendImmediately_ = value;
        return this;
      }
      public Builder ClearSendImmediately() {
        PrepareBuilder();
        result.hasSendImmediately = false;
        result.sendImmediately_ = 0;
        return this;
      }
      
      public bool HasDebMoving {
        get { return result.hasDebMoving; }
      }
      [global::System.CLSCompliant(false)]
      public uint DebMoving {
        get { return result.DebMoving; }
        set { SetDebMoving(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetDebMoving(uint value) {
        PrepareBuilder();
        result.hasDebMoving = true;
        result.debMoving_ = value;
        return this;
      }
      public Builder ClearDebMoving() {
        PrepareBuilder();
        result.hasDebMoving = false;
        result.debMoving_ = 0;
        return this;
      }
      
      public bool HasDebStopped {
        get { return result.hasDebStopped; }
      }
      [global::System.CLSCompliant(false)]
      public uint DebStopped {
        get { return result.DebStopped; }
        set { SetDebStopped(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetDebStopped(uint value) {
        PrepareBuilder();
        result.hasDebStopped = true;
        result.debStopped_ = value;
        return this;
      }
      public Builder ClearDebStopped() {
        PrepareBuilder();
        result.hasDebStopped = false;
        result.debStopped_ = 0;
        return this;
      }
      
      public bool HasDetectMoving {
        get { return result.hasDetectMoving; }
      }
      [global::System.CLSCompliant(false)]
      public uint DetectMoving {
        get { return result.DetectMoving; }
        set { SetDetectMoving(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetDetectMoving(uint value) {
        PrepareBuilder();
        result.hasDetectMoving = true;
        result.detectMoving_ = value;
        return this;
      }
      public Builder ClearDetectMoving() {
        PrepareBuilder();
        result.hasDetectMoving = false;
        result.detectMoving_ = 0;
        return this;
      }
      
      public bool HasRsMode {
        get { return result.hasRsMode; }
      }
      [global::System.CLSCompliant(false)]
      public uint RsMode {
        get { return result.RsMode; }
        set { SetRsMode(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetRsMode(uint value) {
        PrepareBuilder();
        result.hasRsMode = true;
        result.rsMode_ = value;
        return this;
      }
      public Builder ClearRsMode() {
        PrepareBuilder();
        result.hasRsMode = false;
        result.rsMode_ = 0;
        return this;
      }
      
      public bool HasRollingThreshold {
        get { return result.hasRollingThreshold; }
      }
      [global::System.CLSCompliant(false)]
      public uint RollingThreshold {
        get { return result.RollingThreshold; }
        set { SetRollingThreshold(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetRollingThreshold(uint value) {
        PrepareBuilder();
        result.hasRollingThreshold = true;
        result.rollingThreshold_ = value;
        return this;
      }
      public Builder ClearRollingThreshold() {
        PrepareBuilder();
        result.hasRollingThreshold = false;
        result.rollingThreshold_ = 0;
        return this;
      }
      
      public bool HasSideThreshold {
        get { return result.hasSideThreshold; }
      }
      [global::System.CLSCompliant(false)]
      public uint SideThreshold {
        get { return result.SideThreshold; }
        set { SetSideThreshold(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSideThreshold(uint value) {
        PrepareBuilder();
        result.hasSideThreshold = true;
        result.sideThreshold_ = value;
        return this;
      }
      public Builder ClearSideThreshold() {
        PrepareBuilder();
        result.hasSideThreshold = false;
        result.sideThreshold_ = 0;
        return this;
      }
      
      public bool HasShockThreshold {
        get { return result.hasShockThreshold; }
      }
      [global::System.CLSCompliant(false)]
      public uint ShockThreshold {
        get { return result.ShockThreshold; }
        set { SetShockThreshold(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetShockThreshold(uint value) {
        PrepareBuilder();
        result.hasShockThreshold = true;
        result.shockThreshold_ = value;
        return this;
      }
      public Builder ClearShockThreshold() {
        PrepareBuilder();
        result.hasShockThreshold = false;
        result.shockThreshold_ = 0;
        return this;
      }
    }
    static mxt1xx_u_gsr() {
      object.ReferenceEquals(global::maxtrack.pb.mxt1xx.Mxt1Xx.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mxt1xx_u_gps : pb::GeneratedMessage<mxt1xx_u_gps, mxt1xx_u_gps.Builder> {
    private mxt1xx_u_gps() { }
    private static readonly mxt1xx_u_gps defaultInstance = new mxt1xx_u_gps().MakeReadOnly();
    private static readonly string[] _mxt1XxUGpsFieldNames = new string[] { "acc_filter", "agps_server_ip_addr", "agps_server_ip_port", "keep_working_timer", "open_bf_trans_move", "open_bf_trans_stop", "unfix_cold_timeout", "unfix_timeout" };
    private static readonly uint[] _mxt1XxUGpsFieldTags = new uint[] { 48, 58, 64, 8, 32, 40, 24, 16 };
    public static mxt1xx_u_gps DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mxt1xx_u_gps DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mxt1xx_u_gps ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_gps__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mxt1xx_u_gps, mxt1xx_u_gps.Builder> InternalFieldAccessors {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_gps__FieldAccessorTable; }
    }
    
    public const int KeepWorkingTimerFieldNumber = 1;
    private bool hasKeepWorkingTimer;
    private uint keepWorkingTimer_;
    public bool HasKeepWorkingTimer {
      get { return hasKeepWorkingTimer; }
    }
    [global::System.CLSCompliant(false)]
    public uint KeepWorkingTimer {
      get { return keepWorkingTimer_; }
    }
    
    public const int UnfixTimeoutFieldNumber = 2;
    private bool hasUnfixTimeout;
    private uint unfixTimeout_;
    public bool HasUnfixTimeout {
      get { return hasUnfixTimeout; }
    }
    [global::System.CLSCompliant(false)]
    public uint UnfixTimeout {
      get { return unfixTimeout_; }
    }
    
    public const int UnfixColdTimeoutFieldNumber = 3;
    private bool hasUnfixColdTimeout;
    private uint unfixColdTimeout_;
    public bool HasUnfixColdTimeout {
      get { return hasUnfixColdTimeout; }
    }
    [global::System.CLSCompliant(false)]
    public uint UnfixColdTimeout {
      get { return unfixColdTimeout_; }
    }
    
    public const int OpenBfTransMoveFieldNumber = 4;
    private bool hasOpenBfTransMove;
    private uint openBfTransMove_;
    public bool HasOpenBfTransMove {
      get { return hasOpenBfTransMove; }
    }
    [global::System.CLSCompliant(false)]
    public uint OpenBfTransMove {
      get { return openBfTransMove_; }
    }
    
    public const int OpenBfTransStopFieldNumber = 5;
    private bool hasOpenBfTransStop;
    private uint openBfTransStop_;
    public bool HasOpenBfTransStop {
      get { return hasOpenBfTransStop; }
    }
    [global::System.CLSCompliant(false)]
    public uint OpenBfTransStop {
      get { return openBfTransStop_; }
    }
    
    public const int AccFilterFieldNumber = 6;
    private bool hasAccFilter;
    private uint accFilter_;
    public bool HasAccFilter {
      get { return hasAccFilter; }
    }
    [global::System.CLSCompliant(false)]
    public uint AccFilter {
      get { return accFilter_; }
    }
    
    public const int AgpsServerIpAddrFieldNumber = 7;
    private bool hasAgpsServerIpAddr;
    private string agpsServerIpAddr_ = "";
    public bool HasAgpsServerIpAddr {
      get { return hasAgpsServerIpAddr; }
    }
    public string AgpsServerIpAddr {
      get { return agpsServerIpAddr_; }
    }
    
    public const int AgpsServerIpPortFieldNumber = 8;
    private bool hasAgpsServerIpPort;
    private uint agpsServerIpPort_;
    public bool HasAgpsServerIpPort {
      get { return hasAgpsServerIpPort; }
    }
    [global::System.CLSCompliant(false)]
    public uint AgpsServerIpPort {
      get { return agpsServerIpPort_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasKeepWorkingTimer) return false;
        if (!hasUnfixTimeout) return false;
        if (!hasUnfixColdTimeout) return false;
        if (!hasOpenBfTransMove) return false;
        if (!hasOpenBfTransStop) return false;
        if (!hasAccFilter) return false;
        if (!hasAgpsServerIpAddr) return false;
        if (!hasAgpsServerIpPort) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mxt1XxUGpsFieldNames;
      if (hasKeepWorkingTimer) {
        output.WriteUInt32(1, field_names[3], KeepWorkingTimer);
      }
      if (hasUnfixTimeout) {
        output.WriteUInt32(2, field_names[7], UnfixTimeout);
      }
      if (hasUnfixColdTimeout) {
        output.WriteUInt32(3, field_names[6], UnfixColdTimeout);
      }
      if (hasOpenBfTransMove) {
        output.WriteUInt32(4, field_names[4], OpenBfTransMove);
      }
      if (hasOpenBfTransStop) {
        output.WriteUInt32(5, field_names[5], OpenBfTransStop);
      }
      if (hasAccFilter) {
        output.WriteUInt32(6, field_names[0], AccFilter);
      }
      if (hasAgpsServerIpAddr) {
        output.WriteString(7, field_names[1], AgpsServerIpAddr);
      }
      if (hasAgpsServerIpPort) {
        output.WriteUInt32(8, field_names[2], AgpsServerIpPort);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasKeepWorkingTimer) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, KeepWorkingTimer);
      }
      if (hasUnfixTimeout) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, UnfixTimeout);
      }
      if (hasUnfixColdTimeout) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, UnfixColdTimeout);
      }
      if (hasOpenBfTransMove) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, OpenBfTransMove);
      }
      if (hasOpenBfTransStop) {
        size += pb::CodedOutputStream.ComputeUInt32Size(5, OpenBfTransStop);
      }
      if (hasAccFilter) {
        size += pb::CodedOutputStream.ComputeUInt32Size(6, AccFilter);
      }
      if (hasAgpsServerIpAddr) {
        size += pb::CodedOutputStream.ComputeStringSize(7, AgpsServerIpAddr);
      }
      if (hasAgpsServerIpPort) {
        size += pb::CodedOutputStream.ComputeUInt32Size(8, AgpsServerIpPort);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mxt1xx_u_gps ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_gps ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_gps ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_gps ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_gps ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_gps ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_gps ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mxt1xx_u_gps ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mxt1xx_u_gps ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_gps ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mxt1xx_u_gps MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mxt1xx_u_gps prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mxt1xx_u_gps, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mxt1xx_u_gps cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mxt1xx_u_gps result;
      
      private mxt1xx_u_gps PrepareBuilder() {
        if (resultIsReadOnly) {
          mxt1xx_u_gps original = result;
          result = new mxt1xx_u_gps();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mxt1xx_u_gps MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_gps.Descriptor; }
      }
      
      public override mxt1xx_u_gps DefaultInstanceForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_gps.DefaultInstance; }
      }
      
      public override mxt1xx_u_gps BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mxt1xx_u_gps) {
          return MergeFrom((mxt1xx_u_gps) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mxt1xx_u_gps other) {
        if (other == global::maxtrack.pb.mxt1xx.mxt1xx_u_gps.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasKeepWorkingTimer) {
          KeepWorkingTimer = other.KeepWorkingTimer;
        }
        if (other.HasUnfixTimeout) {
          UnfixTimeout = other.UnfixTimeout;
        }
        if (other.HasUnfixColdTimeout) {
          UnfixColdTimeout = other.UnfixColdTimeout;
        }
        if (other.HasOpenBfTransMove) {
          OpenBfTransMove = other.OpenBfTransMove;
        }
        if (other.HasOpenBfTransStop) {
          OpenBfTransStop = other.OpenBfTransStop;
        }
        if (other.HasAccFilter) {
          AccFilter = other.AccFilter;
        }
        if (other.HasAgpsServerIpAddr) {
          AgpsServerIpAddr = other.AgpsServerIpAddr;
        }
        if (other.HasAgpsServerIpPort) {
          AgpsServerIpPort = other.AgpsServerIpPort;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mxt1XxUGpsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mxt1XxUGpsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasKeepWorkingTimer = input.ReadUInt32(ref result.keepWorkingTimer_);
              break;
            }
            case 16: {
              result.hasUnfixTimeout = input.ReadUInt32(ref result.unfixTimeout_);
              break;
            }
            case 24: {
              result.hasUnfixColdTimeout = input.ReadUInt32(ref result.unfixColdTimeout_);
              break;
            }
            case 32: {
              result.hasOpenBfTransMove = input.ReadUInt32(ref result.openBfTransMove_);
              break;
            }
            case 40: {
              result.hasOpenBfTransStop = input.ReadUInt32(ref result.openBfTransStop_);
              break;
            }
            case 48: {
              result.hasAccFilter = input.ReadUInt32(ref result.accFilter_);
              break;
            }
            case 58: {
              result.hasAgpsServerIpAddr = input.ReadString(ref result.agpsServerIpAddr_);
              break;
            }
            case 64: {
              result.hasAgpsServerIpPort = input.ReadUInt32(ref result.agpsServerIpPort_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasKeepWorkingTimer {
        get { return result.hasKeepWorkingTimer; }
      }
      [global::System.CLSCompliant(false)]
      public uint KeepWorkingTimer {
        get { return result.KeepWorkingTimer; }
        set { SetKeepWorkingTimer(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetKeepWorkingTimer(uint value) {
        PrepareBuilder();
        result.hasKeepWorkingTimer = true;
        result.keepWorkingTimer_ = value;
        return this;
      }
      public Builder ClearKeepWorkingTimer() {
        PrepareBuilder();
        result.hasKeepWorkingTimer = false;
        result.keepWorkingTimer_ = 0;
        return this;
      }
      
      public bool HasUnfixTimeout {
        get { return result.hasUnfixTimeout; }
      }
      [global::System.CLSCompliant(false)]
      public uint UnfixTimeout {
        get { return result.UnfixTimeout; }
        set { SetUnfixTimeout(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetUnfixTimeout(uint value) {
        PrepareBuilder();
        result.hasUnfixTimeout = true;
        result.unfixTimeout_ = value;
        return this;
      }
      public Builder ClearUnfixTimeout() {
        PrepareBuilder();
        result.hasUnfixTimeout = false;
        result.unfixTimeout_ = 0;
        return this;
      }
      
      public bool HasUnfixColdTimeout {
        get { return result.hasUnfixColdTimeout; }
      }
      [global::System.CLSCompliant(false)]
      public uint UnfixColdTimeout {
        get { return result.UnfixColdTimeout; }
        set { SetUnfixColdTimeout(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetUnfixColdTimeout(uint value) {
        PrepareBuilder();
        result.hasUnfixColdTimeout = true;
        result.unfixColdTimeout_ = value;
        return this;
      }
      public Builder ClearUnfixColdTimeout() {
        PrepareBuilder();
        result.hasUnfixColdTimeout = false;
        result.unfixColdTimeout_ = 0;
        return this;
      }
      
      public bool HasOpenBfTransMove {
        get { return result.hasOpenBfTransMove; }
      }
      [global::System.CLSCompliant(false)]
      public uint OpenBfTransMove {
        get { return result.OpenBfTransMove; }
        set { SetOpenBfTransMove(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetOpenBfTransMove(uint value) {
        PrepareBuilder();
        result.hasOpenBfTransMove = true;
        result.openBfTransMove_ = value;
        return this;
      }
      public Builder ClearOpenBfTransMove() {
        PrepareBuilder();
        result.hasOpenBfTransMove = false;
        result.openBfTransMove_ = 0;
        return this;
      }
      
      public bool HasOpenBfTransStop {
        get { return result.hasOpenBfTransStop; }
      }
      [global::System.CLSCompliant(false)]
      public uint OpenBfTransStop {
        get { return result.OpenBfTransStop; }
        set { SetOpenBfTransStop(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetOpenBfTransStop(uint value) {
        PrepareBuilder();
        result.hasOpenBfTransStop = true;
        result.openBfTransStop_ = value;
        return this;
      }
      public Builder ClearOpenBfTransStop() {
        PrepareBuilder();
        result.hasOpenBfTransStop = false;
        result.openBfTransStop_ = 0;
        return this;
      }
      
      public bool HasAccFilter {
        get { return result.hasAccFilter; }
      }
      [global::System.CLSCompliant(false)]
      public uint AccFilter {
        get { return result.AccFilter; }
        set { SetAccFilter(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetAccFilter(uint value) {
        PrepareBuilder();
        result.hasAccFilter = true;
        result.accFilter_ = value;
        return this;
      }
      public Builder ClearAccFilter() {
        PrepareBuilder();
        result.hasAccFilter = false;
        result.accFilter_ = 0;
        return this;
      }
      
      public bool HasAgpsServerIpAddr {
        get { return result.hasAgpsServerIpAddr; }
      }
      public string AgpsServerIpAddr {
        get { return result.AgpsServerIpAddr; }
        set { SetAgpsServerIpAddr(value); }
      }
      public Builder SetAgpsServerIpAddr(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAgpsServerIpAddr = true;
        result.agpsServerIpAddr_ = value;
        return this;
      }
      public Builder ClearAgpsServerIpAddr() {
        PrepareBuilder();
        result.hasAgpsServerIpAddr = false;
        result.agpsServerIpAddr_ = "";
        return this;
      }
      
      public bool HasAgpsServerIpPort {
        get { return result.hasAgpsServerIpPort; }
      }
      [global::System.CLSCompliant(false)]
      public uint AgpsServerIpPort {
        get { return result.AgpsServerIpPort; }
        set { SetAgpsServerIpPort(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetAgpsServerIpPort(uint value) {
        PrepareBuilder();
        result.hasAgpsServerIpPort = true;
        result.agpsServerIpPort_ = value;
        return this;
      }
      public Builder ClearAgpsServerIpPort() {
        PrepareBuilder();
        result.hasAgpsServerIpPort = false;
        result.agpsServerIpPort_ = 0;
        return this;
      }
    }
    static mxt1xx_u_gps() {
      object.ReferenceEquals(global::maxtrack.pb.mxt1xx.Mxt1Xx.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mxt1xx_u_sms : pb::GeneratedMessage<mxt1xx_u_sms, mxt1xx_u_sms.Builder> {
    private mxt1xx_u_sms() { }
    private static readonly mxt1xx_u_sms defaultInstance = new mxt1xx_u_sms().MakeReadOnly();
    private static readonly string[] _mxt1XxUSmsFieldNames = new string[] { "alias_name", "allow_number_mode", "destination", "send_mode", "sms_interval", "sms_max_send_count", "sms_number1", "sms_number2", "sms_number3" };
    private static readonly uint[] _mxt1XxUSmsFieldTags = new uint[] { 18, 32, 26, 8, 48, 40, 58, 66, 74 };
    public static mxt1xx_u_sms DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mxt1xx_u_sms DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mxt1xx_u_sms ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_sms__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mxt1xx_u_sms, mxt1xx_u_sms.Builder> InternalFieldAccessors {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_sms__FieldAccessorTable; }
    }
    
    public const int SendModeFieldNumber = 1;
    private bool hasSendMode;
    private uint sendMode_;
    public bool HasSendMode {
      get { return hasSendMode; }
    }
    [global::System.CLSCompliant(false)]
    public uint SendMode {
      get { return sendMode_; }
    }
    
    public const int AliasNameFieldNumber = 2;
    private bool hasAliasName;
    private string aliasName_ = "";
    public bool HasAliasName {
      get { return hasAliasName; }
    }
    public string AliasName {
      get { return aliasName_; }
    }
    
    public const int DestinationFieldNumber = 3;
    private bool hasDestination;
    private string destination_ = "";
    public bool HasDestination {
      get { return hasDestination; }
    }
    public string Destination {
      get { return destination_; }
    }
    
    public const int AllowNumberModeFieldNumber = 4;
    private bool hasAllowNumberMode;
    private uint allowNumberMode_;
    public bool HasAllowNumberMode {
      get { return hasAllowNumberMode; }
    }
    [global::System.CLSCompliant(false)]
    public uint AllowNumberMode {
      get { return allowNumberMode_; }
    }
    
    public const int SmsMaxSendCountFieldNumber = 5;
    private bool hasSmsMaxSendCount;
    private uint smsMaxSendCount_;
    public bool HasSmsMaxSendCount {
      get { return hasSmsMaxSendCount; }
    }
    [global::System.CLSCompliant(false)]
    public uint SmsMaxSendCount {
      get { return smsMaxSendCount_; }
    }
    
    public const int SmsIntervalFieldNumber = 6;
    private bool hasSmsInterval;
    private uint smsInterval_;
    public bool HasSmsInterval {
      get { return hasSmsInterval; }
    }
    [global::System.CLSCompliant(false)]
    public uint SmsInterval {
      get { return smsInterval_; }
    }
    
    public const int SmsNumber1FieldNumber = 7;
    private bool hasSmsNumber1;
    private string smsNumber1_ = "";
    public bool HasSmsNumber1 {
      get { return hasSmsNumber1; }
    }
    public string SmsNumber1 {
      get { return smsNumber1_; }
    }
    
    public const int SmsNumber2FieldNumber = 8;
    private bool hasSmsNumber2;
    private string smsNumber2_ = "";
    public bool HasSmsNumber2 {
      get { return hasSmsNumber2; }
    }
    public string SmsNumber2 {
      get { return smsNumber2_; }
    }
    
    public const int SmsNumber3FieldNumber = 9;
    private bool hasSmsNumber3;
    private string smsNumber3_ = "";
    public bool HasSmsNumber3 {
      get { return hasSmsNumber3; }
    }
    public string SmsNumber3 {
      get { return smsNumber3_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSendMode) return false;
        if (!hasAliasName) return false;
        if (!hasDestination) return false;
        if (!hasAllowNumberMode) return false;
        if (!hasSmsMaxSendCount) return false;
        if (!hasSmsInterval) return false;
        if (!hasSmsNumber1) return false;
        if (!hasSmsNumber2) return false;
        if (!hasSmsNumber3) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mxt1XxUSmsFieldNames;
      if (hasSendMode) {
        output.WriteUInt32(1, field_names[3], SendMode);
      }
      if (hasAliasName) {
        output.WriteString(2, field_names[0], AliasName);
      }
      if (hasDestination) {
        output.WriteString(3, field_names[2], Destination);
      }
      if (hasAllowNumberMode) {
        output.WriteUInt32(4, field_names[1], AllowNumberMode);
      }
      if (hasSmsMaxSendCount) {
        output.WriteUInt32(5, field_names[5], SmsMaxSendCount);
      }
      if (hasSmsInterval) {
        output.WriteUInt32(6, field_names[4], SmsInterval);
      }
      if (hasSmsNumber1) {
        output.WriteString(7, field_names[6], SmsNumber1);
      }
      if (hasSmsNumber2) {
        output.WriteString(8, field_names[7], SmsNumber2);
      }
      if (hasSmsNumber3) {
        output.WriteString(9, field_names[8], SmsNumber3);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasSendMode) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, SendMode);
      }
      if (hasAliasName) {
        size += pb::CodedOutputStream.ComputeStringSize(2, AliasName);
      }
      if (hasDestination) {
        size += pb::CodedOutputStream.ComputeStringSize(3, Destination);
      }
      if (hasAllowNumberMode) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, AllowNumberMode);
      }
      if (hasSmsMaxSendCount) {
        size += pb::CodedOutputStream.ComputeUInt32Size(5, SmsMaxSendCount);
      }
      if (hasSmsInterval) {
        size += pb::CodedOutputStream.ComputeUInt32Size(6, SmsInterval);
      }
      if (hasSmsNumber1) {
        size += pb::CodedOutputStream.ComputeStringSize(7, SmsNumber1);
      }
      if (hasSmsNumber2) {
        size += pb::CodedOutputStream.ComputeStringSize(8, SmsNumber2);
      }
      if (hasSmsNumber3) {
        size += pb::CodedOutputStream.ComputeStringSize(9, SmsNumber3);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mxt1xx_u_sms ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_sms ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_sms ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_sms ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_sms ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_sms ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_sms ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mxt1xx_u_sms ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mxt1xx_u_sms ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_sms ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mxt1xx_u_sms MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mxt1xx_u_sms prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mxt1xx_u_sms, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mxt1xx_u_sms cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mxt1xx_u_sms result;
      
      private mxt1xx_u_sms PrepareBuilder() {
        if (resultIsReadOnly) {
          mxt1xx_u_sms original = result;
          result = new mxt1xx_u_sms();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mxt1xx_u_sms MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_sms.Descriptor; }
      }
      
      public override mxt1xx_u_sms DefaultInstanceForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_sms.DefaultInstance; }
      }
      
      public override mxt1xx_u_sms BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mxt1xx_u_sms) {
          return MergeFrom((mxt1xx_u_sms) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mxt1xx_u_sms other) {
        if (other == global::maxtrack.pb.mxt1xx.mxt1xx_u_sms.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSendMode) {
          SendMode = other.SendMode;
        }
        if (other.HasAliasName) {
          AliasName = other.AliasName;
        }
        if (other.HasDestination) {
          Destination = other.Destination;
        }
        if (other.HasAllowNumberMode) {
          AllowNumberMode = other.AllowNumberMode;
        }
        if (other.HasSmsMaxSendCount) {
          SmsMaxSendCount = other.SmsMaxSendCount;
        }
        if (other.HasSmsInterval) {
          SmsInterval = other.SmsInterval;
        }
        if (other.HasSmsNumber1) {
          SmsNumber1 = other.SmsNumber1;
        }
        if (other.HasSmsNumber2) {
          SmsNumber2 = other.SmsNumber2;
        }
        if (other.HasSmsNumber3) {
          SmsNumber3 = other.SmsNumber3;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mxt1XxUSmsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mxt1XxUSmsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasSendMode = input.ReadUInt32(ref result.sendMode_);
              break;
            }
            case 18: {
              result.hasAliasName = input.ReadString(ref result.aliasName_);
              break;
            }
            case 26: {
              result.hasDestination = input.ReadString(ref result.destination_);
              break;
            }
            case 32: {
              result.hasAllowNumberMode = input.ReadUInt32(ref result.allowNumberMode_);
              break;
            }
            case 40: {
              result.hasSmsMaxSendCount = input.ReadUInt32(ref result.smsMaxSendCount_);
              break;
            }
            case 48: {
              result.hasSmsInterval = input.ReadUInt32(ref result.smsInterval_);
              break;
            }
            case 58: {
              result.hasSmsNumber1 = input.ReadString(ref result.smsNumber1_);
              break;
            }
            case 66: {
              result.hasSmsNumber2 = input.ReadString(ref result.smsNumber2_);
              break;
            }
            case 74: {
              result.hasSmsNumber3 = input.ReadString(ref result.smsNumber3_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSendMode {
        get { return result.hasSendMode; }
      }
      [global::System.CLSCompliant(false)]
      public uint SendMode {
        get { return result.SendMode; }
        set { SetSendMode(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSendMode(uint value) {
        PrepareBuilder();
        result.hasSendMode = true;
        result.sendMode_ = value;
        return this;
      }
      public Builder ClearSendMode() {
        PrepareBuilder();
        result.hasSendMode = false;
        result.sendMode_ = 0;
        return this;
      }
      
      public bool HasAliasName {
        get { return result.hasAliasName; }
      }
      public string AliasName {
        get { return result.AliasName; }
        set { SetAliasName(value); }
      }
      public Builder SetAliasName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAliasName = true;
        result.aliasName_ = value;
        return this;
      }
      public Builder ClearAliasName() {
        PrepareBuilder();
        result.hasAliasName = false;
        result.aliasName_ = "";
        return this;
      }
      
      public bool HasDestination {
        get { return result.hasDestination; }
      }
      public string Destination {
        get { return result.Destination; }
        set { SetDestination(value); }
      }
      public Builder SetDestination(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDestination = true;
        result.destination_ = value;
        return this;
      }
      public Builder ClearDestination() {
        PrepareBuilder();
        result.hasDestination = false;
        result.destination_ = "";
        return this;
      }
      
      public bool HasAllowNumberMode {
        get { return result.hasAllowNumberMode; }
      }
      [global::System.CLSCompliant(false)]
      public uint AllowNumberMode {
        get { return result.AllowNumberMode; }
        set { SetAllowNumberMode(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetAllowNumberMode(uint value) {
        PrepareBuilder();
        result.hasAllowNumberMode = true;
        result.allowNumberMode_ = value;
        return this;
      }
      public Builder ClearAllowNumberMode() {
        PrepareBuilder();
        result.hasAllowNumberMode = false;
        result.allowNumberMode_ = 0;
        return this;
      }
      
      public bool HasSmsMaxSendCount {
        get { return result.hasSmsMaxSendCount; }
      }
      [global::System.CLSCompliant(false)]
      public uint SmsMaxSendCount {
        get { return result.SmsMaxSendCount; }
        set { SetSmsMaxSendCount(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSmsMaxSendCount(uint value) {
        PrepareBuilder();
        result.hasSmsMaxSendCount = true;
        result.smsMaxSendCount_ = value;
        return this;
      }
      public Builder ClearSmsMaxSendCount() {
        PrepareBuilder();
        result.hasSmsMaxSendCount = false;
        result.smsMaxSendCount_ = 0;
        return this;
      }
      
      public bool HasSmsInterval {
        get { return result.hasSmsInterval; }
      }
      [global::System.CLSCompliant(false)]
      public uint SmsInterval {
        get { return result.SmsInterval; }
        set { SetSmsInterval(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSmsInterval(uint value) {
        PrepareBuilder();
        result.hasSmsInterval = true;
        result.smsInterval_ = value;
        return this;
      }
      public Builder ClearSmsInterval() {
        PrepareBuilder();
        result.hasSmsInterval = false;
        result.smsInterval_ = 0;
        return this;
      }
      
      public bool HasSmsNumber1 {
        get { return result.hasSmsNumber1; }
      }
      public string SmsNumber1 {
        get { return result.SmsNumber1; }
        set { SetSmsNumber1(value); }
      }
      public Builder SetSmsNumber1(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSmsNumber1 = true;
        result.smsNumber1_ = value;
        return this;
      }
      public Builder ClearSmsNumber1() {
        PrepareBuilder();
        result.hasSmsNumber1 = false;
        result.smsNumber1_ = "";
        return this;
      }
      
      public bool HasSmsNumber2 {
        get { return result.hasSmsNumber2; }
      }
      public string SmsNumber2 {
        get { return result.SmsNumber2; }
        set { SetSmsNumber2(value); }
      }
      public Builder SetSmsNumber2(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSmsNumber2 = true;
        result.smsNumber2_ = value;
        return this;
      }
      public Builder ClearSmsNumber2() {
        PrepareBuilder();
        result.hasSmsNumber2 = false;
        result.smsNumber2_ = "";
        return this;
      }
      
      public bool HasSmsNumber3 {
        get { return result.hasSmsNumber3; }
      }
      public string SmsNumber3 {
        get { return result.SmsNumber3; }
        set { SetSmsNumber3(value); }
      }
      public Builder SetSmsNumber3(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSmsNumber3 = true;
        result.smsNumber3_ = value;
        return this;
      }
      public Builder ClearSmsNumber3() {
        PrepareBuilder();
        result.hasSmsNumber3 = false;
        result.smsNumber3_ = "";
        return this;
      }
    }
    static mxt1xx_u_sms() {
      object.ReferenceEquals(global::maxtrack.pb.mxt1xx.Mxt1Xx.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mxt1xx_u_zig_info : pb::GeneratedMessage<mxt1xx_u_zig_info, mxt1xx_u_zig_info.Builder> {
    private mxt1xx_u_zig_info() { }
    private static readonly mxt1xx_u_zig_info defaultInstance = new mxt1xx_u_zig_info().MakeReadOnly();
    private static readonly string[] _mxt1XxUZigInfoFieldNames = new string[] { "acc_encrypt_key", "acc_retry", "acc_rx_timeout", "keep_alive_duration", "keep_alive_interval", "master_sleep_enable" };
    private static readonly uint[] _mxt1XxUZigInfoFieldTags = new uint[] { 50, 32, 40, 24, 16, 8 };
    public static mxt1xx_u_zig_info DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mxt1xx_u_zig_info DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mxt1xx_u_zig_info ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_zig_info__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mxt1xx_u_zig_info, mxt1xx_u_zig_info.Builder> InternalFieldAccessors {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_zig_info__FieldAccessorTable; }
    }
    
    public const int MasterSleepEnableFieldNumber = 1;
    private bool hasMasterSleepEnable;
    private uint masterSleepEnable_;
    public bool HasMasterSleepEnable {
      get { return hasMasterSleepEnable; }
    }
    [global::System.CLSCompliant(false)]
    public uint MasterSleepEnable {
      get { return masterSleepEnable_; }
    }
    
    public const int KeepAliveIntervalFieldNumber = 2;
    private bool hasKeepAliveInterval;
    private uint keepAliveInterval_;
    public bool HasKeepAliveInterval {
      get { return hasKeepAliveInterval; }
    }
    [global::System.CLSCompliant(false)]
    public uint KeepAliveInterval {
      get { return keepAliveInterval_; }
    }
    
    public const int KeepAliveDurationFieldNumber = 3;
    private bool hasKeepAliveDuration;
    private uint keepAliveDuration_;
    public bool HasKeepAliveDuration {
      get { return hasKeepAliveDuration; }
    }
    [global::System.CLSCompliant(false)]
    public uint KeepAliveDuration {
      get { return keepAliveDuration_; }
    }
    
    public const int AccRetryFieldNumber = 4;
    private bool hasAccRetry;
    private uint accRetry_;
    public bool HasAccRetry {
      get { return hasAccRetry; }
    }
    [global::System.CLSCompliant(false)]
    public uint AccRetry {
      get { return accRetry_; }
    }
    
    public const int AccRxTimeoutFieldNumber = 5;
    private bool hasAccRxTimeout;
    private uint accRxTimeout_;
    public bool HasAccRxTimeout {
      get { return hasAccRxTimeout; }
    }
    [global::System.CLSCompliant(false)]
    public uint AccRxTimeout {
      get { return accRxTimeout_; }
    }
    
    public const int AccEncryptKeyFieldNumber = 6;
    private bool hasAccEncryptKey;
    private string accEncryptKey_ = "";
    public bool HasAccEncryptKey {
      get { return hasAccEncryptKey; }
    }
    public string AccEncryptKey {
      get { return accEncryptKey_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasMasterSleepEnable) return false;
        if (!hasKeepAliveInterval) return false;
        if (!hasKeepAliveDuration) return false;
        if (!hasAccRetry) return false;
        if (!hasAccRxTimeout) return false;
        if (!hasAccEncryptKey) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mxt1XxUZigInfoFieldNames;
      if (hasMasterSleepEnable) {
        output.WriteUInt32(1, field_names[5], MasterSleepEnable);
      }
      if (hasKeepAliveInterval) {
        output.WriteUInt32(2, field_names[4], KeepAliveInterval);
      }
      if (hasKeepAliveDuration) {
        output.WriteUInt32(3, field_names[3], KeepAliveDuration);
      }
      if (hasAccRetry) {
        output.WriteUInt32(4, field_names[1], AccRetry);
      }
      if (hasAccRxTimeout) {
        output.WriteUInt32(5, field_names[2], AccRxTimeout);
      }
      if (hasAccEncryptKey) {
        output.WriteString(6, field_names[0], AccEncryptKey);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasMasterSleepEnable) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, MasterSleepEnable);
      }
      if (hasKeepAliveInterval) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, KeepAliveInterval);
      }
      if (hasKeepAliveDuration) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, KeepAliveDuration);
      }
      if (hasAccRetry) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, AccRetry);
      }
      if (hasAccRxTimeout) {
        size += pb::CodedOutputStream.ComputeUInt32Size(5, AccRxTimeout);
      }
      if (hasAccEncryptKey) {
        size += pb::CodedOutputStream.ComputeStringSize(6, AccEncryptKey);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mxt1xx_u_zig_info ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_zig_info ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_zig_info ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_zig_info ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_zig_info ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_zig_info ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_zig_info ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mxt1xx_u_zig_info ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mxt1xx_u_zig_info ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_zig_info ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mxt1xx_u_zig_info MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mxt1xx_u_zig_info prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mxt1xx_u_zig_info, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mxt1xx_u_zig_info cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mxt1xx_u_zig_info result;
      
      private mxt1xx_u_zig_info PrepareBuilder() {
        if (resultIsReadOnly) {
          mxt1xx_u_zig_info original = result;
          result = new mxt1xx_u_zig_info();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mxt1xx_u_zig_info MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_zig_info.Descriptor; }
      }
      
      public override mxt1xx_u_zig_info DefaultInstanceForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_zig_info.DefaultInstance; }
      }
      
      public override mxt1xx_u_zig_info BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mxt1xx_u_zig_info) {
          return MergeFrom((mxt1xx_u_zig_info) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mxt1xx_u_zig_info other) {
        if (other == global::maxtrack.pb.mxt1xx.mxt1xx_u_zig_info.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMasterSleepEnable) {
          MasterSleepEnable = other.MasterSleepEnable;
        }
        if (other.HasKeepAliveInterval) {
          KeepAliveInterval = other.KeepAliveInterval;
        }
        if (other.HasKeepAliveDuration) {
          KeepAliveDuration = other.KeepAliveDuration;
        }
        if (other.HasAccRetry) {
          AccRetry = other.AccRetry;
        }
        if (other.HasAccRxTimeout) {
          AccRxTimeout = other.AccRxTimeout;
        }
        if (other.HasAccEncryptKey) {
          AccEncryptKey = other.AccEncryptKey;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mxt1XxUZigInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mxt1XxUZigInfoFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasMasterSleepEnable = input.ReadUInt32(ref result.masterSleepEnable_);
              break;
            }
            case 16: {
              result.hasKeepAliveInterval = input.ReadUInt32(ref result.keepAliveInterval_);
              break;
            }
            case 24: {
              result.hasKeepAliveDuration = input.ReadUInt32(ref result.keepAliveDuration_);
              break;
            }
            case 32: {
              result.hasAccRetry = input.ReadUInt32(ref result.accRetry_);
              break;
            }
            case 40: {
              result.hasAccRxTimeout = input.ReadUInt32(ref result.accRxTimeout_);
              break;
            }
            case 50: {
              result.hasAccEncryptKey = input.ReadString(ref result.accEncryptKey_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMasterSleepEnable {
        get { return result.hasMasterSleepEnable; }
      }
      [global::System.CLSCompliant(false)]
      public uint MasterSleepEnable {
        get { return result.MasterSleepEnable; }
        set { SetMasterSleepEnable(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetMasterSleepEnable(uint value) {
        PrepareBuilder();
        result.hasMasterSleepEnable = true;
        result.masterSleepEnable_ = value;
        return this;
      }
      public Builder ClearMasterSleepEnable() {
        PrepareBuilder();
        result.hasMasterSleepEnable = false;
        result.masterSleepEnable_ = 0;
        return this;
      }
      
      public bool HasKeepAliveInterval {
        get { return result.hasKeepAliveInterval; }
      }
      [global::System.CLSCompliant(false)]
      public uint KeepAliveInterval {
        get { return result.KeepAliveInterval; }
        set { SetKeepAliveInterval(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetKeepAliveInterval(uint value) {
        PrepareBuilder();
        result.hasKeepAliveInterval = true;
        result.keepAliveInterval_ = value;
        return this;
      }
      public Builder ClearKeepAliveInterval() {
        PrepareBuilder();
        result.hasKeepAliveInterval = false;
        result.keepAliveInterval_ = 0;
        return this;
      }
      
      public bool HasKeepAliveDuration {
        get { return result.hasKeepAliveDuration; }
      }
      [global::System.CLSCompliant(false)]
      public uint KeepAliveDuration {
        get { return result.KeepAliveDuration; }
        set { SetKeepAliveDuration(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetKeepAliveDuration(uint value) {
        PrepareBuilder();
        result.hasKeepAliveDuration = true;
        result.keepAliveDuration_ = value;
        return this;
      }
      public Builder ClearKeepAliveDuration() {
        PrepareBuilder();
        result.hasKeepAliveDuration = false;
        result.keepAliveDuration_ = 0;
        return this;
      }
      
      public bool HasAccRetry {
        get { return result.hasAccRetry; }
      }
      [global::System.CLSCompliant(false)]
      public uint AccRetry {
        get { return result.AccRetry; }
        set { SetAccRetry(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetAccRetry(uint value) {
        PrepareBuilder();
        result.hasAccRetry = true;
        result.accRetry_ = value;
        return this;
      }
      public Builder ClearAccRetry() {
        PrepareBuilder();
        result.hasAccRetry = false;
        result.accRetry_ = 0;
        return this;
      }
      
      public bool HasAccRxTimeout {
        get { return result.hasAccRxTimeout; }
      }
      [global::System.CLSCompliant(false)]
      public uint AccRxTimeout {
        get { return result.AccRxTimeout; }
        set { SetAccRxTimeout(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetAccRxTimeout(uint value) {
        PrepareBuilder();
        result.hasAccRxTimeout = true;
        result.accRxTimeout_ = value;
        return this;
      }
      public Builder ClearAccRxTimeout() {
        PrepareBuilder();
        result.hasAccRxTimeout = false;
        result.accRxTimeout_ = 0;
        return this;
      }
      
      public bool HasAccEncryptKey {
        get { return result.hasAccEncryptKey; }
      }
      public string AccEncryptKey {
        get { return result.AccEncryptKey; }
        set { SetAccEncryptKey(value); }
      }
      public Builder SetAccEncryptKey(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAccEncryptKey = true;
        result.accEncryptKey_ = value;
        return this;
      }
      public Builder ClearAccEncryptKey() {
        PrepareBuilder();
        result.hasAccEncryptKey = false;
        result.accEncryptKey_ = "";
        return this;
      }
    }
    static mxt1xx_u_zig_info() {
      object.ReferenceEquals(global::maxtrack.pb.mxt1xx.Mxt1Xx.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mxt1xx_u_other_info : pb::GeneratedMessage<mxt1xx_u_other_info, mxt1xx_u_other_info.Builder> {
    private mxt1xx_u_other_info() { }
    private static readonly mxt1xx_u_other_info defaultInstance = new mxt1xx_u_other_info().MakeReadOnly();
    private static readonly string[] _mxt1XxUOtherInfoFieldNames = new string[] { "agps_timer", "alert_timer", "allow_any_tag_acc", "allow_set_apn_imxt", "anti_theft_enable", "b_disable_zig_bee", "b_microphone_enable", "b_move_trigger_alarm", "b_odometer_calc", "b_smart_output2", "backdoor", "buzzer_incoming_call", "cellinfo", "cfg_alias", "charging_ign_off", "charing_only", "debounce_max_rpm", "debounce_max_rpm_neutral", "debounce_rolling", "debounce_shock", "debounce_side", "debounce_speed_neutral", "direction_threshold", "distance_threshold", "door_detect", "dtmf_password", "enable_ap_set_output", "ex_power_deb_timer", "exceeded_max_speed_output", "gps_and_odometer_speed", "gps_failure_debounce", "gps_filter", "gps_for_alert", "gsensor_debounce_factor", "hourmeter", "ign_code", "ign_deb_timer", "ign_vol_threshold", "improper_moving_output", "incoming_number", "input1_enable", "input2_enable", "input3_enable", "input4_enable", "ip_priority", "ipt1_deb_timer", "ipt2_deb_timer", "ipt3_deb_timer", "ipt4_deb_timer", "jamming_alert", "jamming_output", "led_enable", "link_fail_output", "link_fail_times", "local_parking_mode", "long_timer_no_moving", "low_power_alert", "make_call_time", "max_speed_deb_timer", "max_speed_limit", "neutral_excessive_rpm", "neutral_max_speed", "neutral_rpm", "odo_pulses", "odo_rpm_enable", "odometer", "old_pos_trans_count", "opt1_invert", "opt1_mask", "opt2_mask", "opt3_mask", "outgoing_number", "output_for_siren", "packet_encrypt_key", "panic_and_door_as_input", "panic_deb_timer", "panic_via", "parking_output", "parking_output_active", "parking_output_circle", "parking_output_deactive", "parking_output_interval", "ring_mode", "rolling_output", "rpm_event_output1", "rpm_event_output2", "rpm_event_output3", "rpm_factor", "rpm_pulses", "rpm_threshold", "rpm_trigger", "sending_order", "shock_output", "side_output", "siren_activate", "siren_cycles", "siren_deactivate", "speaker_enable", "speaker_vol", "tag_fail_output", "tag_interval", "timezone", "wp_deb_timer", "zig_link_timer" };
    private static readonly uint[] _mxt1XxUOtherInfoFieldTags = new uint[] { 432, 584, 824, 664, 120, 144, 160, 168, 152, 112, 280, 352, 80, 362, 304, 16, 712, 720, 592, 608, 600, 704, 552, 544, 128, 90, 696, 240, 488, 616, 472, 424, 760, 776, 104, 408, 176, 288, 816, 394, 24, 32, 40, 96, 560, 192, 200, 208, 216, 504, 496, 8, 480, 568, 136, 832, 48, 376, 224, 64, 464, 448, 456, 328, 320, 72, 272, 296, 248, 256, 264, 402, 536, 578, 416, 184, 680, 624, 728, 744, 736, 752, 384, 632, 792, 800, 808, 768, 336, 344, 784, 656, 648, 640, 512, 528, 520, 312, 368, 688, 672, 56, 232, 440 };
    public static mxt1xx_u_other_info DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mxt1xx_u_other_info DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mxt1xx_u_other_info ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_other_info__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mxt1xx_u_other_info, mxt1xx_u_other_info.Builder> InternalFieldAccessors {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_other_info__FieldAccessorTable; }
    }
    
    public const int LedEnableFieldNumber = 1;
    private bool hasLedEnable;
    private uint ledEnable_;
    public bool HasLedEnable {
      get { return hasLedEnable; }
    }
    [global::System.CLSCompliant(false)]
    public uint LedEnable {
      get { return ledEnable_; }
    }
    
    public const int CharingOnlyFieldNumber = 2;
    private bool hasCharingOnly;
    private uint charingOnly_;
    public bool HasCharingOnly {
      get { return hasCharingOnly; }
    }
    [global::System.CLSCompliant(false)]
    public uint CharingOnly {
      get { return charingOnly_; }
    }
    
    public const int Input1EnableFieldNumber = 3;
    private bool hasInput1Enable;
    private uint input1Enable_;
    public bool HasInput1Enable {
      get { return hasInput1Enable; }
    }
    [global::System.CLSCompliant(false)]
    public uint Input1Enable {
      get { return input1Enable_; }
    }
    
    public const int Input2EnableFieldNumber = 4;
    private bool hasInput2Enable;
    private uint input2Enable_;
    public bool HasInput2Enable {
      get { return hasInput2Enable; }
    }
    [global::System.CLSCompliant(false)]
    public uint Input2Enable {
      get { return input2Enable_; }
    }
    
    public const int Input3EnableFieldNumber = 5;
    private bool hasInput3Enable;
    private uint input3Enable_;
    public bool HasInput3Enable {
      get { return hasInput3Enable; }
    }
    [global::System.CLSCompliant(false)]
    public uint Input3Enable {
      get { return input3Enable_; }
    }
    
    public const int LowPowerAlertFieldNumber = 6;
    private bool hasLowPowerAlert;
    private uint lowPowerAlert_;
    public bool HasLowPowerAlert {
      get { return hasLowPowerAlert; }
    }
    [global::System.CLSCompliant(false)]
    public uint LowPowerAlert {
      get { return lowPowerAlert_; }
    }
    
    public const int TimezoneFieldNumber = 7;
    private bool hasTimezone;
    private uint timezone_;
    public bool HasTimezone {
      get { return hasTimezone; }
    }
    [global::System.CLSCompliant(false)]
    public uint Timezone {
      get { return timezone_; }
    }
    
    public const int MaxSpeedLimitFieldNumber = 8;
    private bool hasMaxSpeedLimit;
    private uint maxSpeedLimit_;
    public bool HasMaxSpeedLimit {
      get { return hasMaxSpeedLimit; }
    }
    [global::System.CLSCompliant(false)]
    public uint MaxSpeedLimit {
      get { return maxSpeedLimit_; }
    }
    
    public const int OdometerFieldNumber = 9;
    private bool hasOdometer;
    private uint odometer_;
    public bool HasOdometer {
      get { return hasOdometer; }
    }
    [global::System.CLSCompliant(false)]
    public uint Odometer {
      get { return odometer_; }
    }
    
    public const int CellinfoFieldNumber = 10;
    private bool hasCellinfo;
    private uint cellinfo_;
    public bool HasCellinfo {
      get { return hasCellinfo; }
    }
    [global::System.CLSCompliant(false)]
    public uint Cellinfo {
      get { return cellinfo_; }
    }
    
    public const int DtmfPasswordFieldNumber = 11;
    private bool hasDtmfPassword;
    private string dtmfPassword_ = "";
    public bool HasDtmfPassword {
      get { return hasDtmfPassword; }
    }
    public string DtmfPassword {
      get { return dtmfPassword_; }
    }
    
    public const int Input4EnableFieldNumber = 12;
    private bool hasInput4Enable;
    private uint input4Enable_;
    public bool HasInput4Enable {
      get { return hasInput4Enable; }
    }
    [global::System.CLSCompliant(false)]
    public uint Input4Enable {
      get { return input4Enable_; }
    }
    
    public const int HourmeterFieldNumber = 13;
    private bool hasHourmeter;
    private uint hourmeter_;
    public bool HasHourmeter {
      get { return hasHourmeter; }
    }
    [global::System.CLSCompliant(false)]
    public uint Hourmeter {
      get { return hourmeter_; }
    }
    
    public const int BSmartOutput2FieldNumber = 14;
    private bool hasBSmartOutput2;
    private uint bSmartOutput2_;
    public bool HasBSmartOutput2 {
      get { return hasBSmartOutput2; }
    }
    [global::System.CLSCompliant(false)]
    public uint BSmartOutput2 {
      get { return bSmartOutput2_; }
    }
    
    public const int AntiTheftEnableFieldNumber = 15;
    private bool hasAntiTheftEnable;
    private uint antiTheftEnable_;
    public bool HasAntiTheftEnable {
      get { return hasAntiTheftEnable; }
    }
    [global::System.CLSCompliant(false)]
    public uint AntiTheftEnable {
      get { return antiTheftEnable_; }
    }
    
    public const int DoorDetectFieldNumber = 16;
    private bool hasDoorDetect;
    private uint doorDetect_;
    public bool HasDoorDetect {
      get { return hasDoorDetect; }
    }
    [global::System.CLSCompliant(false)]
    public uint DoorDetect {
      get { return doorDetect_; }
    }
    
    public const int LocalParkingModeFieldNumber = 17;
    private bool hasLocalParkingMode;
    private uint localParkingMode_;
    public bool HasLocalParkingMode {
      get { return hasLocalParkingMode; }
    }
    [global::System.CLSCompliant(false)]
    public uint LocalParkingMode {
      get { return localParkingMode_; }
    }
    
    public const int BDisableZigBeeFieldNumber = 18;
    private bool hasBDisableZigBee;
    private uint bDisableZigBee_;
    public bool HasBDisableZigBee {
      get { return hasBDisableZigBee; }
    }
    [global::System.CLSCompliant(false)]
    public uint BDisableZigBee {
      get { return bDisableZigBee_; }
    }
    
    public const int BOdometerCalcFieldNumber = 19;
    private bool hasBOdometerCalc;
    private uint bOdometerCalc_;
    public bool HasBOdometerCalc {
      get { return hasBOdometerCalc; }
    }
    [global::System.CLSCompliant(false)]
    public uint BOdometerCalc {
      get { return bOdometerCalc_; }
    }
    
    public const int BMicrophoneEnableFieldNumber = 20;
    private bool hasBMicrophoneEnable;
    private uint bMicrophoneEnable_;
    public bool HasBMicrophoneEnable {
      get { return hasBMicrophoneEnable; }
    }
    [global::System.CLSCompliant(false)]
    public uint BMicrophoneEnable {
      get { return bMicrophoneEnable_; }
    }
    
    public const int BMoveTriggerAlarmFieldNumber = 21;
    private bool hasBMoveTriggerAlarm;
    private uint bMoveTriggerAlarm_;
    public bool HasBMoveTriggerAlarm {
      get { return hasBMoveTriggerAlarm; }
    }
    [global::System.CLSCompliant(false)]
    public uint BMoveTriggerAlarm {
      get { return bMoveTriggerAlarm_; }
    }
    
    public const int IgnDebTimerFieldNumber = 22;
    private bool hasIgnDebTimer;
    private uint ignDebTimer_;
    public bool HasIgnDebTimer {
      get { return hasIgnDebTimer; }
    }
    [global::System.CLSCompliant(false)]
    public uint IgnDebTimer {
      get { return ignDebTimer_; }
    }
    
    public const int PanicDebTimerFieldNumber = 23;
    private bool hasPanicDebTimer;
    private uint panicDebTimer_;
    public bool HasPanicDebTimer {
      get { return hasPanicDebTimer; }
    }
    [global::System.CLSCompliant(false)]
    public uint PanicDebTimer {
      get { return panicDebTimer_; }
    }
    
    public const int Ipt1DebTimerFieldNumber = 24;
    private bool hasIpt1DebTimer;
    private uint ipt1DebTimer_;
    public bool HasIpt1DebTimer {
      get { return hasIpt1DebTimer; }
    }
    [global::System.CLSCompliant(false)]
    public uint Ipt1DebTimer {
      get { return ipt1DebTimer_; }
    }
    
    public const int Ipt2DebTimerFieldNumber = 25;
    private bool hasIpt2DebTimer;
    private uint ipt2DebTimer_;
    public bool HasIpt2DebTimer {
      get { return hasIpt2DebTimer; }
    }
    [global::System.CLSCompliant(false)]
    public uint Ipt2DebTimer {
      get { return ipt2DebTimer_; }
    }
    
    public const int Ipt3DebTimerFieldNumber = 26;
    private bool hasIpt3DebTimer;
    private uint ipt3DebTimer_;
    public bool HasIpt3DebTimer {
      get { return hasIpt3DebTimer; }
    }
    [global::System.CLSCompliant(false)]
    public uint Ipt3DebTimer {
      get { return ipt3DebTimer_; }
    }
    
    public const int Ipt4DebTimerFieldNumber = 27;
    private bool hasIpt4DebTimer;
    private uint ipt4DebTimer_;
    public bool HasIpt4DebTimer {
      get { return hasIpt4DebTimer; }
    }
    [global::System.CLSCompliant(false)]
    public uint Ipt4DebTimer {
      get { return ipt4DebTimer_; }
    }
    
    public const int MaxSpeedDebTimerFieldNumber = 28;
    private bool hasMaxSpeedDebTimer;
    private uint maxSpeedDebTimer_;
    public bool HasMaxSpeedDebTimer {
      get { return hasMaxSpeedDebTimer; }
    }
    [global::System.CLSCompliant(false)]
    public uint MaxSpeedDebTimer {
      get { return maxSpeedDebTimer_; }
    }
    
    public const int WpDebTimerFieldNumber = 29;
    private bool hasWpDebTimer;
    private uint wpDebTimer_;
    public bool HasWpDebTimer {
      get { return hasWpDebTimer; }
    }
    [global::System.CLSCompliant(false)]
    public uint WpDebTimer {
      get { return wpDebTimer_; }
    }
    
    public const int ExPowerDebTimerFieldNumber = 30;
    private bool hasExPowerDebTimer;
    private uint exPowerDebTimer_;
    public bool HasExPowerDebTimer {
      get { return hasExPowerDebTimer; }
    }
    [global::System.CLSCompliant(false)]
    public uint ExPowerDebTimer {
      get { return exPowerDebTimer_; }
    }
    
    public const int Opt1MaskFieldNumber = 31;
    private bool hasOpt1Mask;
    private uint opt1Mask_;
    public bool HasOpt1Mask {
      get { return hasOpt1Mask; }
    }
    [global::System.CLSCompliant(false)]
    public uint Opt1Mask {
      get { return opt1Mask_; }
    }
    
    public const int Opt2MaskFieldNumber = 32;
    private bool hasOpt2Mask;
    private uint opt2Mask_;
    public bool HasOpt2Mask {
      get { return hasOpt2Mask; }
    }
    [global::System.CLSCompliant(false)]
    public uint Opt2Mask {
      get { return opt2Mask_; }
    }
    
    public const int Opt3MaskFieldNumber = 33;
    private bool hasOpt3Mask;
    private uint opt3Mask_;
    public bool HasOpt3Mask {
      get { return hasOpt3Mask; }
    }
    [global::System.CLSCompliant(false)]
    public uint Opt3Mask {
      get { return opt3Mask_; }
    }
    
    public const int OldPosTransCountFieldNumber = 34;
    private bool hasOldPosTransCount;
    private uint oldPosTransCount_;
    public bool HasOldPosTransCount {
      get { return hasOldPosTransCount; }
    }
    [global::System.CLSCompliant(false)]
    public uint OldPosTransCount {
      get { return oldPosTransCount_; }
    }
    
    public const int BackdoorFieldNumber = 35;
    private bool hasBackdoor;
    private uint backdoor_;
    public bool HasBackdoor {
      get { return hasBackdoor; }
    }
    [global::System.CLSCompliant(false)]
    public uint Backdoor {
      get { return backdoor_; }
    }
    
    public const int IgnVolThresholdFieldNumber = 36;
    private bool hasIgnVolThreshold;
    private uint ignVolThreshold_;
    public bool HasIgnVolThreshold {
      get { return hasIgnVolThreshold; }
    }
    [global::System.CLSCompliant(false)]
    public uint IgnVolThreshold {
      get { return ignVolThreshold_; }
    }
    
    public const int Opt1InvertFieldNumber = 37;
    private bool hasOpt1Invert;
    private uint opt1Invert_;
    public bool HasOpt1Invert {
      get { return hasOpt1Invert; }
    }
    [global::System.CLSCompliant(false)]
    public uint Opt1Invert {
      get { return opt1Invert_; }
    }
    
    public const int ChargingIgnOffFieldNumber = 38;
    private bool hasChargingIgnOff;
    private uint chargingIgnOff_;
    public bool HasChargingIgnOff {
      get { return hasChargingIgnOff; }
    }
    [global::System.CLSCompliant(false)]
    public uint ChargingIgnOff {
      get { return chargingIgnOff_; }
    }
    
    public const int SpeakerEnableFieldNumber = 39;
    private bool hasSpeakerEnable;
    private uint speakerEnable_;
    public bool HasSpeakerEnable {
      get { return hasSpeakerEnable; }
    }
    [global::System.CLSCompliant(false)]
    public uint SpeakerEnable {
      get { return speakerEnable_; }
    }
    
    public const int OdoRpmEnableFieldNumber = 40;
    private bool hasOdoRpmEnable;
    private uint odoRpmEnable_;
    public bool HasOdoRpmEnable {
      get { return hasOdoRpmEnable; }
    }
    [global::System.CLSCompliant(false)]
    public uint OdoRpmEnable {
      get { return odoRpmEnable_; }
    }
    
    public const int OdoPulsesFieldNumber = 41;
    private bool hasOdoPulses;
    private uint odoPulses_;
    public bool HasOdoPulses {
      get { return hasOdoPulses; }
    }
    [global::System.CLSCompliant(false)]
    public uint OdoPulses {
      get { return odoPulses_; }
    }
    
    public const int RpmPulsesFieldNumber = 42;
    private bool hasRpmPulses;
    private uint rpmPulses_;
    public bool HasRpmPulses {
      get { return hasRpmPulses; }
    }
    [global::System.CLSCompliant(false)]
    public uint RpmPulses {
      get { return rpmPulses_; }
    }
    
    public const int RpmThresholdFieldNumber = 43;
    private bool hasRpmThreshold;
    private uint rpmThreshold_;
    public bool HasRpmThreshold {
      get { return hasRpmThreshold; }
    }
    [global::System.CLSCompliant(false)]
    public uint RpmThreshold {
      get { return rpmThreshold_; }
    }
    
    public const int BuzzerIncomingCallFieldNumber = 44;
    private bool hasBuzzerIncomingCall;
    private uint buzzerIncomingCall_;
    public bool HasBuzzerIncomingCall {
      get { return hasBuzzerIncomingCall; }
    }
    [global::System.CLSCompliant(false)]
    public uint BuzzerIncomingCall {
      get { return buzzerIncomingCall_; }
    }
    
    public const int CfgAliasFieldNumber = 45;
    private bool hasCfgAlias;
    private string cfgAlias_ = "";
    public bool HasCfgAlias {
      get { return hasCfgAlias; }
    }
    public string CfgAlias {
      get { return cfgAlias_; }
    }
    
    public const int SpeakerVolFieldNumber = 46;
    private bool hasSpeakerVol;
    private uint speakerVol_;
    public bool HasSpeakerVol {
      get { return hasSpeakerVol; }
    }
    [global::System.CLSCompliant(false)]
    public uint SpeakerVol {
      get { return speakerVol_; }
    }
    
    public const int MakeCallTimeFieldNumber = 47;
    private bool hasMakeCallTime;
    private uint makeCallTime_;
    public bool HasMakeCallTime {
      get { return hasMakeCallTime; }
    }
    [global::System.CLSCompliant(false)]
    public uint MakeCallTime {
      get { return makeCallTime_; }
    }
    
    public const int RingModeFieldNumber = 48;
    private bool hasRingMode;
    private uint ringMode_;
    public bool HasRingMode {
      get { return hasRingMode; }
    }
    [global::System.CLSCompliant(false)]
    public uint RingMode {
      get { return ringMode_; }
    }
    
    public const int IncomingNumberFieldNumber = 49;
    private pbc::PopsicleList<string> incomingNumber_ = new pbc::PopsicleList<string>();
    public scg::IList<string> IncomingNumberList {
      get { return pbc::Lists.AsReadOnly(incomingNumber_); }
    }
    public int IncomingNumberCount {
      get { return incomingNumber_.Count; }
    }
    public string GetIncomingNumber(int index) {
      return incomingNumber_[index];
    }
    
    public const int OutgoingNumberFieldNumber = 50;
    private pbc::PopsicleList<string> outgoingNumber_ = new pbc::PopsicleList<string>();
    public scg::IList<string> OutgoingNumberList {
      get { return pbc::Lists.AsReadOnly(outgoingNumber_); }
    }
    public int OutgoingNumberCount {
      get { return outgoingNumber_.Count; }
    }
    public string GetOutgoingNumber(int index) {
      return outgoingNumber_[index];
    }
    
    public const int IgnCodeFieldNumber = 51;
    private bool hasIgnCode;
    private uint ignCode_;
    public bool HasIgnCode {
      get { return hasIgnCode; }
    }
    [global::System.CLSCompliant(false)]
    public uint IgnCode {
      get { return ignCode_; }
    }
    
    public const int PanicAndDoorAsInputFieldNumber = 52;
    private bool hasPanicAndDoorAsInput;
    private uint panicAndDoorAsInput_;
    public bool HasPanicAndDoorAsInput {
      get { return hasPanicAndDoorAsInput; }
    }
    [global::System.CLSCompliant(false)]
    public uint PanicAndDoorAsInput {
      get { return panicAndDoorAsInput_; }
    }
    
    public const int GpsFilterFieldNumber = 53;
    private bool hasGpsFilter;
    private uint gpsFilter_;
    public bool HasGpsFilter {
      get { return hasGpsFilter; }
    }
    [global::System.CLSCompliant(false)]
    public uint GpsFilter {
      get { return gpsFilter_; }
    }
    
    public const int AgpsTimerFieldNumber = 54;
    private bool hasAgpsTimer;
    private uint agpsTimer_;
    public bool HasAgpsTimer {
      get { return hasAgpsTimer; }
    }
    [global::System.CLSCompliant(false)]
    public uint AgpsTimer {
      get { return agpsTimer_; }
    }
    
    public const int ZigLinkTimerFieldNumber = 55;
    private bool hasZigLinkTimer;
    private uint zigLinkTimer_;
    public bool HasZigLinkTimer {
      get { return hasZigLinkTimer; }
    }
    [global::System.CLSCompliant(false)]
    public uint ZigLinkTimer {
      get { return zigLinkTimer_; }
    }
    
    public const int NeutralMaxSpeedFieldNumber = 56;
    private bool hasNeutralMaxSpeed;
    private uint neutralMaxSpeed_;
    public bool HasNeutralMaxSpeed {
      get { return hasNeutralMaxSpeed; }
    }
    [global::System.CLSCompliant(false)]
    public uint NeutralMaxSpeed {
      get { return neutralMaxSpeed_; }
    }
    
    public const int NeutralRpmFieldNumber = 57;
    private bool hasNeutralRpm;
    private uint neutralRpm_;
    public bool HasNeutralRpm {
      get { return hasNeutralRpm; }
    }
    [global::System.CLSCompliant(false)]
    public uint NeutralRpm {
      get { return neutralRpm_; }
    }
    
    public const int NeutralExcessiveRpmFieldNumber = 58;
    private bool hasNeutralExcessiveRpm;
    private uint neutralExcessiveRpm_;
    public bool HasNeutralExcessiveRpm {
      get { return hasNeutralExcessiveRpm; }
    }
    [global::System.CLSCompliant(false)]
    public uint NeutralExcessiveRpm {
      get { return neutralExcessiveRpm_; }
    }
    
    public const int GpsFailureDebounceFieldNumber = 59;
    private bool hasGpsFailureDebounce;
    private uint gpsFailureDebounce_;
    public bool HasGpsFailureDebounce {
      get { return hasGpsFailureDebounce; }
    }
    [global::System.CLSCompliant(false)]
    public uint GpsFailureDebounce {
      get { return gpsFailureDebounce_; }
    }
    
    public const int LinkFailOutputFieldNumber = 60;
    private bool hasLinkFailOutput;
    private uint linkFailOutput_;
    public bool HasLinkFailOutput {
      get { return hasLinkFailOutput; }
    }
    [global::System.CLSCompliant(false)]
    public uint LinkFailOutput {
      get { return linkFailOutput_; }
    }
    
    public const int ExceededMaxSpeedOutputFieldNumber = 61;
    private bool hasExceededMaxSpeedOutput;
    private uint exceededMaxSpeedOutput_;
    public bool HasExceededMaxSpeedOutput {
      get { return hasExceededMaxSpeedOutput; }
    }
    [global::System.CLSCompliant(false)]
    public uint ExceededMaxSpeedOutput {
      get { return exceededMaxSpeedOutput_; }
    }
    
    public const int JammingOutputFieldNumber = 62;
    private bool hasJammingOutput;
    private uint jammingOutput_;
    public bool HasJammingOutput {
      get { return hasJammingOutput; }
    }
    [global::System.CLSCompliant(false)]
    public uint JammingOutput {
      get { return jammingOutput_; }
    }
    
    public const int JammingAlertFieldNumber = 63;
    private bool hasJammingAlert;
    private uint jammingAlert_;
    public bool HasJammingAlert {
      get { return hasJammingAlert; }
    }
    [global::System.CLSCompliant(false)]
    public uint JammingAlert {
      get { return jammingAlert_; }
    }
    
    public const int SirenActivateFieldNumber = 64;
    private bool hasSirenActivate;
    private uint sirenActivate_;
    public bool HasSirenActivate {
      get { return hasSirenActivate; }
    }
    [global::System.CLSCompliant(false)]
    public uint SirenActivate {
      get { return sirenActivate_; }
    }
    
    public const int SirenDeactivateFieldNumber = 65;
    private bool hasSirenDeactivate;
    private uint sirenDeactivate_;
    public bool HasSirenDeactivate {
      get { return hasSirenDeactivate; }
    }
    [global::System.CLSCompliant(false)]
    public uint SirenDeactivate {
      get { return sirenDeactivate_; }
    }
    
    public const int SirenCyclesFieldNumber = 66;
    private bool hasSirenCycles;
    private uint sirenCycles_;
    public bool HasSirenCycles {
      get { return hasSirenCycles; }
    }
    [global::System.CLSCompliant(false)]
    public uint SirenCycles {
      get { return sirenCycles_; }
    }
    
    public const int OutputForSirenFieldNumber = 67;
    private bool hasOutputForSiren;
    private uint outputForSiren_;
    public bool HasOutputForSiren {
      get { return hasOutputForSiren; }
    }
    [global::System.CLSCompliant(false)]
    public uint OutputForSiren {
      get { return outputForSiren_; }
    }
    
    public const int DistanceThresholdFieldNumber = 68;
    private bool hasDistanceThreshold;
    private uint distanceThreshold_;
    public bool HasDistanceThreshold {
      get { return hasDistanceThreshold; }
    }
    [global::System.CLSCompliant(false)]
    public uint DistanceThreshold {
      get { return distanceThreshold_; }
    }
    
    public const int DirectionThresholdFieldNumber = 69;
    private bool hasDirectionThreshold;
    private uint directionThreshold_;
    public bool HasDirectionThreshold {
      get { return hasDirectionThreshold; }
    }
    [global::System.CLSCompliant(false)]
    public uint DirectionThreshold {
      get { return directionThreshold_; }
    }
    
    public const int IpPriorityFieldNumber = 70;
    private bool hasIpPriority;
    private uint ipPriority_;
    public bool HasIpPriority {
      get { return hasIpPriority; }
    }
    [global::System.CLSCompliant(false)]
    public uint IpPriority {
      get { return ipPriority_; }
    }
    
    public const int LinkFailTimesFieldNumber = 71;
    private bool hasLinkFailTimes;
    private uint linkFailTimes_;
    public bool HasLinkFailTimes {
      get { return hasLinkFailTimes; }
    }
    [global::System.CLSCompliant(false)]
    public uint LinkFailTimes {
      get { return linkFailTimes_; }
    }
    
    public const int PacketEncryptKeyFieldNumber = 72;
    private bool hasPacketEncryptKey;
    private string packetEncryptKey_ = "";
    public bool HasPacketEncryptKey {
      get { return hasPacketEncryptKey; }
    }
    public string PacketEncryptKey {
      get { return packetEncryptKey_; }
    }
    
    public const int AlertTimerFieldNumber = 73;
    private bool hasAlertTimer;
    private uint alertTimer_;
    public bool HasAlertTimer {
      get { return hasAlertTimer; }
    }
    [global::System.CLSCompliant(false)]
    public uint AlertTimer {
      get { return alertTimer_; }
    }
    
    public const int DebounceRollingFieldNumber = 74;
    private bool hasDebounceRolling;
    private uint debounceRolling_;
    public bool HasDebounceRolling {
      get { return hasDebounceRolling; }
    }
    [global::System.CLSCompliant(false)]
    public uint DebounceRolling {
      get { return debounceRolling_; }
    }
    
    public const int DebounceSideFieldNumber = 75;
    private bool hasDebounceSide;
    private uint debounceSide_;
    public bool HasDebounceSide {
      get { return hasDebounceSide; }
    }
    [global::System.CLSCompliant(false)]
    public uint DebounceSide {
      get { return debounceSide_; }
    }
    
    public const int DebounceShockFieldNumber = 76;
    private bool hasDebounceShock;
    private uint debounceShock_;
    public bool HasDebounceShock {
      get { return hasDebounceShock; }
    }
    [global::System.CLSCompliant(false)]
    public uint DebounceShock {
      get { return debounceShock_; }
    }
    
    public const int GpsAndOdometerSpeedFieldNumber = 77;
    private bool hasGpsAndOdometerSpeed;
    private uint gpsAndOdometerSpeed_;
    public bool HasGpsAndOdometerSpeed {
      get { return hasGpsAndOdometerSpeed; }
    }
    [global::System.CLSCompliant(false)]
    public uint GpsAndOdometerSpeed {
      get { return gpsAndOdometerSpeed_; }
    }
    
    public const int ParkingOutputFieldNumber = 78;
    private bool hasParkingOutput;
    private uint parkingOutput_;
    public bool HasParkingOutput {
      get { return hasParkingOutput; }
    }
    [global::System.CLSCompliant(false)]
    public uint ParkingOutput {
      get { return parkingOutput_; }
    }
    
    public const int RollingOutputFieldNumber = 79;
    private bool hasRollingOutput;
    private uint rollingOutput_;
    public bool HasRollingOutput {
      get { return hasRollingOutput; }
    }
    [global::System.CLSCompliant(false)]
    public uint RollingOutput {
      get { return rollingOutput_; }
    }
    
    public const int SideOutputFieldNumber = 80;
    private bool hasSideOutput;
    private uint sideOutput_;
    public bool HasSideOutput {
      get { return hasSideOutput; }
    }
    [global::System.CLSCompliant(false)]
    public uint SideOutput {
      get { return sideOutput_; }
    }
    
    public const int ShockOutputFieldNumber = 81;
    private bool hasShockOutput;
    private uint shockOutput_;
    public bool HasShockOutput {
      get { return hasShockOutput; }
    }
    [global::System.CLSCompliant(false)]
    public uint ShockOutput {
      get { return shockOutput_; }
    }
    
    public const int SendingOrderFieldNumber = 82;
    private bool hasSendingOrder;
    private uint sendingOrder_;
    public bool HasSendingOrder {
      get { return hasSendingOrder; }
    }
    [global::System.CLSCompliant(false)]
    public uint SendingOrder {
      get { return sendingOrder_; }
    }
    
    public const int AllowSetApnImxtFieldNumber = 83;
    private bool hasAllowSetApnImxt;
    private uint allowSetApnImxt_;
    public bool HasAllowSetApnImxt {
      get { return hasAllowSetApnImxt; }
    }
    [global::System.CLSCompliant(false)]
    public uint AllowSetApnImxt {
      get { return allowSetApnImxt_; }
    }
    
    public const int TagIntervalFieldNumber = 84;
    private bool hasTagInterval;
    private uint tagInterval_;
    public bool HasTagInterval {
      get { return hasTagInterval; }
    }
    [global::System.CLSCompliant(false)]
    public uint TagInterval {
      get { return tagInterval_; }
    }
    
    public const int PanicViaFieldNumber = 85;
    private bool hasPanicVia;
    private uint panicVia_;
    public bool HasPanicVia {
      get { return hasPanicVia; }
    }
    [global::System.CLSCompliant(false)]
    public uint PanicVia {
      get { return panicVia_; }
    }
    
    public const int TagFailOutputFieldNumber = 86;
    private bool hasTagFailOutput;
    private uint tagFailOutput_;
    public bool HasTagFailOutput {
      get { return hasTagFailOutput; }
    }
    [global::System.CLSCompliant(false)]
    public uint TagFailOutput {
      get { return tagFailOutput_; }
    }
    
    public const int EnableApSetOutputFieldNumber = 87;
    private bool hasEnableApSetOutput;
    private uint enableApSetOutput_;
    public bool HasEnableApSetOutput {
      get { return hasEnableApSetOutput; }
    }
    [global::System.CLSCompliant(false)]
    public uint EnableApSetOutput {
      get { return enableApSetOutput_; }
    }
    
    public const int DebounceSpeedNeutralFieldNumber = 88;
    private bool hasDebounceSpeedNeutral;
    private uint debounceSpeedNeutral_;
    public bool HasDebounceSpeedNeutral {
      get { return hasDebounceSpeedNeutral; }
    }
    [global::System.CLSCompliant(false)]
    public uint DebounceSpeedNeutral {
      get { return debounceSpeedNeutral_; }
    }
    
    public const int DebounceMaxRpmFieldNumber = 89;
    private bool hasDebounceMaxRpm;
    private uint debounceMaxRpm_;
    public bool HasDebounceMaxRpm {
      get { return hasDebounceMaxRpm; }
    }
    [global::System.CLSCompliant(false)]
    public uint DebounceMaxRpm {
      get { return debounceMaxRpm_; }
    }
    
    public const int DebounceMaxRpmNeutralFieldNumber = 90;
    private bool hasDebounceMaxRpmNeutral;
    private uint debounceMaxRpmNeutral_;
    public bool HasDebounceMaxRpmNeutral {
      get { return hasDebounceMaxRpmNeutral; }
    }
    [global::System.CLSCompliant(false)]
    public uint DebounceMaxRpmNeutral {
      get { return debounceMaxRpmNeutral_; }
    }
    
    public const int ParkingOutputActiveFieldNumber = 91;
    private bool hasParkingOutputActive;
    private uint parkingOutputActive_;
    public bool HasParkingOutputActive {
      get { return hasParkingOutputActive; }
    }
    [global::System.CLSCompliant(false)]
    public uint ParkingOutputActive {
      get { return parkingOutputActive_; }
    }
    
    public const int ParkingOutputDeactiveFieldNumber = 92;
    private bool hasParkingOutputDeactive;
    private uint parkingOutputDeactive_;
    public bool HasParkingOutputDeactive {
      get { return hasParkingOutputDeactive; }
    }
    [global::System.CLSCompliant(false)]
    public uint ParkingOutputDeactive {
      get { return parkingOutputDeactive_; }
    }
    
    public const int ParkingOutputCircleFieldNumber = 93;
    private bool hasParkingOutputCircle;
    private uint parkingOutputCircle_;
    public bool HasParkingOutputCircle {
      get { return hasParkingOutputCircle; }
    }
    [global::System.CLSCompliant(false)]
    public uint ParkingOutputCircle {
      get { return parkingOutputCircle_; }
    }
    
    public const int ParkingOutputIntervalFieldNumber = 94;
    private bool hasParkingOutputInterval;
    private uint parkingOutputInterval_;
    public bool HasParkingOutputInterval {
      get { return hasParkingOutputInterval; }
    }
    [global::System.CLSCompliant(false)]
    public uint ParkingOutputInterval {
      get { return parkingOutputInterval_; }
    }
    
    public const int GpsForAlertFieldNumber = 95;
    private bool hasGpsForAlert;
    private uint gpsForAlert_;
    public bool HasGpsForAlert {
      get { return hasGpsForAlert; }
    }
    [global::System.CLSCompliant(false)]
    public uint GpsForAlert {
      get { return gpsForAlert_; }
    }
    
    public const int RpmFactorFieldNumber = 96;
    private bool hasRpmFactor;
    private uint rpmFactor_;
    public bool HasRpmFactor {
      get { return hasRpmFactor; }
    }
    [global::System.CLSCompliant(false)]
    public uint RpmFactor {
      get { return rpmFactor_; }
    }
    
    public const int GsensorDebounceFactorFieldNumber = 97;
    private bool hasGsensorDebounceFactor;
    private uint gsensorDebounceFactor_;
    public bool HasGsensorDebounceFactor {
      get { return hasGsensorDebounceFactor; }
    }
    [global::System.CLSCompliant(false)]
    public uint GsensorDebounceFactor {
      get { return gsensorDebounceFactor_; }
    }
    
    public const int RpmTriggerFieldNumber = 98;
    private bool hasRpmTrigger;
    private uint rpmTrigger_;
    public bool HasRpmTrigger {
      get { return hasRpmTrigger; }
    }
    [global::System.CLSCompliant(false)]
    public uint RpmTrigger {
      get { return rpmTrigger_; }
    }
    
    public const int RpmEventOutput1FieldNumber = 99;
    private bool hasRpmEventOutput1;
    private uint rpmEventOutput1_;
    public bool HasRpmEventOutput1 {
      get { return hasRpmEventOutput1; }
    }
    [global::System.CLSCompliant(false)]
    public uint RpmEventOutput1 {
      get { return rpmEventOutput1_; }
    }
    
    public const int RpmEventOutput2FieldNumber = 100;
    private bool hasRpmEventOutput2;
    private uint rpmEventOutput2_;
    public bool HasRpmEventOutput2 {
      get { return hasRpmEventOutput2; }
    }
    [global::System.CLSCompliant(false)]
    public uint RpmEventOutput2 {
      get { return rpmEventOutput2_; }
    }
    
    public const int RpmEventOutput3FieldNumber = 101;
    private bool hasRpmEventOutput3;
    private uint rpmEventOutput3_;
    public bool HasRpmEventOutput3 {
      get { return hasRpmEventOutput3; }
    }
    [global::System.CLSCompliant(false)]
    public uint RpmEventOutput3 {
      get { return rpmEventOutput3_; }
    }
    
    public const int ImproperMovingOutputFieldNumber = 102;
    private bool hasImproperMovingOutput;
    private uint improperMovingOutput_;
    public bool HasImproperMovingOutput {
      get { return hasImproperMovingOutput; }
    }
    [global::System.CLSCompliant(false)]
    public uint ImproperMovingOutput {
      get { return improperMovingOutput_; }
    }
    
    public const int AllowAnyTagAccFieldNumber = 103;
    private bool hasAllowAnyTagAcc;
    private uint allowAnyTagAcc_;
    public bool HasAllowAnyTagAcc {
      get { return hasAllowAnyTagAcc; }
    }
    [global::System.CLSCompliant(false)]
    public uint AllowAnyTagAcc {
      get { return allowAnyTagAcc_; }
    }
    
    public const int LongTimerNoMovingFieldNumber = 104;
    private bool hasLongTimerNoMoving;
    private uint longTimerNoMoving_;
    public bool HasLongTimerNoMoving {
      get { return hasLongTimerNoMoving; }
    }
    [global::System.CLSCompliant(false)]
    public uint LongTimerNoMoving {
      get { return longTimerNoMoving_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasLedEnable) return false;
        if (!hasCharingOnly) return false;
        if (!hasInput1Enable) return false;
        if (!hasInput2Enable) return false;
        if (!hasInput3Enable) return false;
        if (!hasLowPowerAlert) return false;
        if (!hasTimezone) return false;
        if (!hasMaxSpeedLimit) return false;
        if (!hasOdometer) return false;
        if (!hasCellinfo) return false;
        if (!hasDtmfPassword) return false;
        if (!hasInput4Enable) return false;
        if (!hasHourmeter) return false;
        if (!hasBSmartOutput2) return false;
        if (!hasAntiTheftEnable) return false;
        if (!hasDoorDetect) return false;
        if (!hasLocalParkingMode) return false;
        if (!hasBDisableZigBee) return false;
        if (!hasBOdometerCalc) return false;
        if (!hasBMicrophoneEnable) return false;
        if (!hasBMoveTriggerAlarm) return false;
        if (!hasIgnDebTimer) return false;
        if (!hasPanicDebTimer) return false;
        if (!hasIpt1DebTimer) return false;
        if (!hasIpt2DebTimer) return false;
        if (!hasIpt3DebTimer) return false;
        if (!hasIpt4DebTimer) return false;
        if (!hasMaxSpeedDebTimer) return false;
        if (!hasWpDebTimer) return false;
        if (!hasExPowerDebTimer) return false;
        if (!hasOpt1Mask) return false;
        if (!hasOpt2Mask) return false;
        if (!hasOpt3Mask) return false;
        if (!hasOldPosTransCount) return false;
        if (!hasBackdoor) return false;
        if (!hasIgnVolThreshold) return false;
        if (!hasOpt1Invert) return false;
        if (!hasChargingIgnOff) return false;
        if (!hasSpeakerEnable) return false;
        if (!hasOdoRpmEnable) return false;
        if (!hasOdoPulses) return false;
        if (!hasRpmPulses) return false;
        if (!hasRpmThreshold) return false;
        if (!hasBuzzerIncomingCall) return false;
        if (!hasCfgAlias) return false;
        if (!hasSpeakerVol) return false;
        if (!hasMakeCallTime) return false;
        if (!hasRingMode) return false;
        if (!hasIgnCode) return false;
        if (!hasPanicAndDoorAsInput) return false;
        if (!hasGpsFilter) return false;
        if (!hasAgpsTimer) return false;
        if (!hasZigLinkTimer) return false;
        if (!hasNeutralMaxSpeed) return false;
        if (!hasNeutralRpm) return false;
        if (!hasNeutralExcessiveRpm) return false;
        if (!hasGpsFailureDebounce) return false;
        if (!hasLinkFailOutput) return false;
        if (!hasExceededMaxSpeedOutput) return false;
        if (!hasJammingOutput) return false;
        if (!hasJammingAlert) return false;
        if (!hasSirenActivate) return false;
        if (!hasSirenDeactivate) return false;
        if (!hasSirenCycles) return false;
        if (!hasOutputForSiren) return false;
        if (!hasDistanceThreshold) return false;
        if (!hasDirectionThreshold) return false;
        if (!hasIpPriority) return false;
        if (!hasLinkFailTimes) return false;
        if (!hasPacketEncryptKey) return false;
        if (!hasAlertTimer) return false;
        if (!hasDebounceRolling) return false;
        if (!hasDebounceSide) return false;
        if (!hasDebounceShock) return false;
        if (!hasGpsAndOdometerSpeed) return false;
        if (!hasParkingOutput) return false;
        if (!hasRollingOutput) return false;
        if (!hasSideOutput) return false;
        if (!hasShockOutput) return false;
        if (!hasSendingOrder) return false;
        if (!hasAllowSetApnImxt) return false;
        if (!hasTagInterval) return false;
        if (!hasPanicVia) return false;
        if (!hasTagFailOutput) return false;
        if (!hasEnableApSetOutput) return false;
        if (!hasDebounceSpeedNeutral) return false;
        if (!hasDebounceMaxRpm) return false;
        if (!hasDebounceMaxRpmNeutral) return false;
        if (!hasParkingOutputActive) return false;
        if (!hasParkingOutputDeactive) return false;
        if (!hasParkingOutputCircle) return false;
        if (!hasParkingOutputInterval) return false;
        if (!hasGpsForAlert) return false;
        if (!hasRpmFactor) return false;
        if (!hasGsensorDebounceFactor) return false;
        if (!hasRpmTrigger) return false;
        if (!hasRpmEventOutput1) return false;
        if (!hasRpmEventOutput2) return false;
        if (!hasRpmEventOutput3) return false;
        if (!hasImproperMovingOutput) return false;
        if (!hasAllowAnyTagAcc) return false;
        if (!hasLongTimerNoMoving) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mxt1XxUOtherInfoFieldNames;
      if (hasLedEnable) {
        output.WriteUInt32(1, field_names[51], LedEnable);
      }
      if (hasCharingOnly) {
        output.WriteUInt32(2, field_names[15], CharingOnly);
      }
      if (hasInput1Enable) {
        output.WriteUInt32(3, field_names[40], Input1Enable);
      }
      if (hasInput2Enable) {
        output.WriteUInt32(4, field_names[41], Input2Enable);
      }
      if (hasInput3Enable) {
        output.WriteUInt32(5, field_names[42], Input3Enable);
      }
      if (hasLowPowerAlert) {
        output.WriteUInt32(6, field_names[56], LowPowerAlert);
      }
      if (hasTimezone) {
        output.WriteUInt32(7, field_names[101], Timezone);
      }
      if (hasMaxSpeedLimit) {
        output.WriteUInt32(8, field_names[59], MaxSpeedLimit);
      }
      if (hasOdometer) {
        output.WriteUInt32(9, field_names[65], Odometer);
      }
      if (hasCellinfo) {
        output.WriteUInt32(10, field_names[12], Cellinfo);
      }
      if (hasDtmfPassword) {
        output.WriteString(11, field_names[25], DtmfPassword);
      }
      if (hasInput4Enable) {
        output.WriteUInt32(12, field_names[43], Input4Enable);
      }
      if (hasHourmeter) {
        output.WriteUInt32(13, field_names[34], Hourmeter);
      }
      if (hasBSmartOutput2) {
        output.WriteUInt32(14, field_names[9], BSmartOutput2);
      }
      if (hasAntiTheftEnable) {
        output.WriteUInt32(15, field_names[4], AntiTheftEnable);
      }
      if (hasDoorDetect) {
        output.WriteUInt32(16, field_names[24], DoorDetect);
      }
      if (hasLocalParkingMode) {
        output.WriteUInt32(17, field_names[54], LocalParkingMode);
      }
      if (hasBDisableZigBee) {
        output.WriteUInt32(18, field_names[5], BDisableZigBee);
      }
      if (hasBOdometerCalc) {
        output.WriteUInt32(19, field_names[8], BOdometerCalc);
      }
      if (hasBMicrophoneEnable) {
        output.WriteUInt32(20, field_names[6], BMicrophoneEnable);
      }
      if (hasBMoveTriggerAlarm) {
        output.WriteUInt32(21, field_names[7], BMoveTriggerAlarm);
      }
      if (hasIgnDebTimer) {
        output.WriteUInt32(22, field_names[36], IgnDebTimer);
      }
      if (hasPanicDebTimer) {
        output.WriteUInt32(23, field_names[75], PanicDebTimer);
      }
      if (hasIpt1DebTimer) {
        output.WriteUInt32(24, field_names[45], Ipt1DebTimer);
      }
      if (hasIpt2DebTimer) {
        output.WriteUInt32(25, field_names[46], Ipt2DebTimer);
      }
      if (hasIpt3DebTimer) {
        output.WriteUInt32(26, field_names[47], Ipt3DebTimer);
      }
      if (hasIpt4DebTimer) {
        output.WriteUInt32(27, field_names[48], Ipt4DebTimer);
      }
      if (hasMaxSpeedDebTimer) {
        output.WriteUInt32(28, field_names[58], MaxSpeedDebTimer);
      }
      if (hasWpDebTimer) {
        output.WriteUInt32(29, field_names[102], WpDebTimer);
      }
      if (hasExPowerDebTimer) {
        output.WriteUInt32(30, field_names[27], ExPowerDebTimer);
      }
      if (hasOpt1Mask) {
        output.WriteUInt32(31, field_names[68], Opt1Mask);
      }
      if (hasOpt2Mask) {
        output.WriteUInt32(32, field_names[69], Opt2Mask);
      }
      if (hasOpt3Mask) {
        output.WriteUInt32(33, field_names[70], Opt3Mask);
      }
      if (hasOldPosTransCount) {
        output.WriteUInt32(34, field_names[66], OldPosTransCount);
      }
      if (hasBackdoor) {
        output.WriteUInt32(35, field_names[10], Backdoor);
      }
      if (hasIgnVolThreshold) {
        output.WriteUInt32(36, field_names[37], IgnVolThreshold);
      }
      if (hasOpt1Invert) {
        output.WriteUInt32(37, field_names[67], Opt1Invert);
      }
      if (hasChargingIgnOff) {
        output.WriteUInt32(38, field_names[14], ChargingIgnOff);
      }
      if (hasSpeakerEnable) {
        output.WriteUInt32(39, field_names[97], SpeakerEnable);
      }
      if (hasOdoRpmEnable) {
        output.WriteUInt32(40, field_names[64], OdoRpmEnable);
      }
      if (hasOdoPulses) {
        output.WriteUInt32(41, field_names[63], OdoPulses);
      }
      if (hasRpmPulses) {
        output.WriteUInt32(42, field_names[88], RpmPulses);
      }
      if (hasRpmThreshold) {
        output.WriteUInt32(43, field_names[89], RpmThreshold);
      }
      if (hasBuzzerIncomingCall) {
        output.WriteUInt32(44, field_names[11], BuzzerIncomingCall);
      }
      if (hasCfgAlias) {
        output.WriteString(45, field_names[13], CfgAlias);
      }
      if (hasSpeakerVol) {
        output.WriteUInt32(46, field_names[98], SpeakerVol);
      }
      if (hasMakeCallTime) {
        output.WriteUInt32(47, field_names[57], MakeCallTime);
      }
      if (hasRingMode) {
        output.WriteUInt32(48, field_names[82], RingMode);
      }
      if (incomingNumber_.Count > 0) {
        output.WriteStringArray(49, field_names[39], incomingNumber_);
      }
      if (outgoingNumber_.Count > 0) {
        output.WriteStringArray(50, field_names[71], outgoingNumber_);
      }
      if (hasIgnCode) {
        output.WriteUInt32(51, field_names[35], IgnCode);
      }
      if (hasPanicAndDoorAsInput) {
        output.WriteUInt32(52, field_names[74], PanicAndDoorAsInput);
      }
      if (hasGpsFilter) {
        output.WriteUInt32(53, field_names[31], GpsFilter);
      }
      if (hasAgpsTimer) {
        output.WriteUInt32(54, field_names[0], AgpsTimer);
      }
      if (hasZigLinkTimer) {
        output.WriteUInt32(55, field_names[103], ZigLinkTimer);
      }
      if (hasNeutralMaxSpeed) {
        output.WriteUInt32(56, field_names[61], NeutralMaxSpeed);
      }
      if (hasNeutralRpm) {
        output.WriteUInt32(57, field_names[62], NeutralRpm);
      }
      if (hasNeutralExcessiveRpm) {
        output.WriteUInt32(58, field_names[60], NeutralExcessiveRpm);
      }
      if (hasGpsFailureDebounce) {
        output.WriteUInt32(59, field_names[30], GpsFailureDebounce);
      }
      if (hasLinkFailOutput) {
        output.WriteUInt32(60, field_names[52], LinkFailOutput);
      }
      if (hasExceededMaxSpeedOutput) {
        output.WriteUInt32(61, field_names[28], ExceededMaxSpeedOutput);
      }
      if (hasJammingOutput) {
        output.WriteUInt32(62, field_names[50], JammingOutput);
      }
      if (hasJammingAlert) {
        output.WriteUInt32(63, field_names[49], JammingAlert);
      }
      if (hasSirenActivate) {
        output.WriteUInt32(64, field_names[94], SirenActivate);
      }
      if (hasSirenDeactivate) {
        output.WriteUInt32(65, field_names[96], SirenDeactivate);
      }
      if (hasSirenCycles) {
        output.WriteUInt32(66, field_names[95], SirenCycles);
      }
      if (hasOutputForSiren) {
        output.WriteUInt32(67, field_names[72], OutputForSiren);
      }
      if (hasDistanceThreshold) {
        output.WriteUInt32(68, field_names[23], DistanceThreshold);
      }
      if (hasDirectionThreshold) {
        output.WriteUInt32(69, field_names[22], DirectionThreshold);
      }
      if (hasIpPriority) {
        output.WriteUInt32(70, field_names[44], IpPriority);
      }
      if (hasLinkFailTimes) {
        output.WriteUInt32(71, field_names[53], LinkFailTimes);
      }
      if (hasPacketEncryptKey) {
        output.WriteString(72, field_names[73], PacketEncryptKey);
      }
      if (hasAlertTimer) {
        output.WriteUInt32(73, field_names[1], AlertTimer);
      }
      if (hasDebounceRolling) {
        output.WriteUInt32(74, field_names[18], DebounceRolling);
      }
      if (hasDebounceSide) {
        output.WriteUInt32(75, field_names[20], DebounceSide);
      }
      if (hasDebounceShock) {
        output.WriteUInt32(76, field_names[19], DebounceShock);
      }
      if (hasGpsAndOdometerSpeed) {
        output.WriteUInt32(77, field_names[29], GpsAndOdometerSpeed);
      }
      if (hasParkingOutput) {
        output.WriteUInt32(78, field_names[77], ParkingOutput);
      }
      if (hasRollingOutput) {
        output.WriteUInt32(79, field_names[83], RollingOutput);
      }
      if (hasSideOutput) {
        output.WriteUInt32(80, field_names[93], SideOutput);
      }
      if (hasShockOutput) {
        output.WriteUInt32(81, field_names[92], ShockOutput);
      }
      if (hasSendingOrder) {
        output.WriteUInt32(82, field_names[91], SendingOrder);
      }
      if (hasAllowSetApnImxt) {
        output.WriteUInt32(83, field_names[3], AllowSetApnImxt);
      }
      if (hasTagInterval) {
        output.WriteUInt32(84, field_names[100], TagInterval);
      }
      if (hasPanicVia) {
        output.WriteUInt32(85, field_names[76], PanicVia);
      }
      if (hasTagFailOutput) {
        output.WriteUInt32(86, field_names[99], TagFailOutput);
      }
      if (hasEnableApSetOutput) {
        output.WriteUInt32(87, field_names[26], EnableApSetOutput);
      }
      if (hasDebounceSpeedNeutral) {
        output.WriteUInt32(88, field_names[21], DebounceSpeedNeutral);
      }
      if (hasDebounceMaxRpm) {
        output.WriteUInt32(89, field_names[16], DebounceMaxRpm);
      }
      if (hasDebounceMaxRpmNeutral) {
        output.WriteUInt32(90, field_names[17], DebounceMaxRpmNeutral);
      }
      if (hasParkingOutputActive) {
        output.WriteUInt32(91, field_names[78], ParkingOutputActive);
      }
      if (hasParkingOutputDeactive) {
        output.WriteUInt32(92, field_names[80], ParkingOutputDeactive);
      }
      if (hasParkingOutputCircle) {
        output.WriteUInt32(93, field_names[79], ParkingOutputCircle);
      }
      if (hasParkingOutputInterval) {
        output.WriteUInt32(94, field_names[81], ParkingOutputInterval);
      }
      if (hasGpsForAlert) {
        output.WriteUInt32(95, field_names[32], GpsForAlert);
      }
      if (hasRpmFactor) {
        output.WriteUInt32(96, field_names[87], RpmFactor);
      }
      if (hasGsensorDebounceFactor) {
        output.WriteUInt32(97, field_names[33], GsensorDebounceFactor);
      }
      if (hasRpmTrigger) {
        output.WriteUInt32(98, field_names[90], RpmTrigger);
      }
      if (hasRpmEventOutput1) {
        output.WriteUInt32(99, field_names[84], RpmEventOutput1);
      }
      if (hasRpmEventOutput2) {
        output.WriteUInt32(100, field_names[85], RpmEventOutput2);
      }
      if (hasRpmEventOutput3) {
        output.WriteUInt32(101, field_names[86], RpmEventOutput3);
      }
      if (hasImproperMovingOutput) {
        output.WriteUInt32(102, field_names[38], ImproperMovingOutput);
      }
      if (hasAllowAnyTagAcc) {
        output.WriteUInt32(103, field_names[2], AllowAnyTagAcc);
      }
      if (hasLongTimerNoMoving) {
        output.WriteUInt32(104, field_names[55], LongTimerNoMoving);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasLedEnable) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, LedEnable);
      }
      if (hasCharingOnly) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, CharingOnly);
      }
      if (hasInput1Enable) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, Input1Enable);
      }
      if (hasInput2Enable) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, Input2Enable);
      }
      if (hasInput3Enable) {
        size += pb::CodedOutputStream.ComputeUInt32Size(5, Input3Enable);
      }
      if (hasLowPowerAlert) {
        size += pb::CodedOutputStream.ComputeUInt32Size(6, LowPowerAlert);
      }
      if (hasTimezone) {
        size += pb::CodedOutputStream.ComputeUInt32Size(7, Timezone);
      }
      if (hasMaxSpeedLimit) {
        size += pb::CodedOutputStream.ComputeUInt32Size(8, MaxSpeedLimit);
      }
      if (hasOdometer) {
        size += pb::CodedOutputStream.ComputeUInt32Size(9, Odometer);
      }
      if (hasCellinfo) {
        size += pb::CodedOutputStream.ComputeUInt32Size(10, Cellinfo);
      }
      if (hasDtmfPassword) {
        size += pb::CodedOutputStream.ComputeStringSize(11, DtmfPassword);
      }
      if (hasInput4Enable) {
        size += pb::CodedOutputStream.ComputeUInt32Size(12, Input4Enable);
      }
      if (hasHourmeter) {
        size += pb::CodedOutputStream.ComputeUInt32Size(13, Hourmeter);
      }
      if (hasBSmartOutput2) {
        size += pb::CodedOutputStream.ComputeUInt32Size(14, BSmartOutput2);
      }
      if (hasAntiTheftEnable) {
        size += pb::CodedOutputStream.ComputeUInt32Size(15, AntiTheftEnable);
      }
      if (hasDoorDetect) {
        size += pb::CodedOutputStream.ComputeUInt32Size(16, DoorDetect);
      }
      if (hasLocalParkingMode) {
        size += pb::CodedOutputStream.ComputeUInt32Size(17, LocalParkingMode);
      }
      if (hasBDisableZigBee) {
        size += pb::CodedOutputStream.ComputeUInt32Size(18, BDisableZigBee);
      }
      if (hasBOdometerCalc) {
        size += pb::CodedOutputStream.ComputeUInt32Size(19, BOdometerCalc);
      }
      if (hasBMicrophoneEnable) {
        size += pb::CodedOutputStream.ComputeUInt32Size(20, BMicrophoneEnable);
      }
      if (hasBMoveTriggerAlarm) {
        size += pb::CodedOutputStream.ComputeUInt32Size(21, BMoveTriggerAlarm);
      }
      if (hasIgnDebTimer) {
        size += pb::CodedOutputStream.ComputeUInt32Size(22, IgnDebTimer);
      }
      if (hasPanicDebTimer) {
        size += pb::CodedOutputStream.ComputeUInt32Size(23, PanicDebTimer);
      }
      if (hasIpt1DebTimer) {
        size += pb::CodedOutputStream.ComputeUInt32Size(24, Ipt1DebTimer);
      }
      if (hasIpt2DebTimer) {
        size += pb::CodedOutputStream.ComputeUInt32Size(25, Ipt2DebTimer);
      }
      if (hasIpt3DebTimer) {
        size += pb::CodedOutputStream.ComputeUInt32Size(26, Ipt3DebTimer);
      }
      if (hasIpt4DebTimer) {
        size += pb::CodedOutputStream.ComputeUInt32Size(27, Ipt4DebTimer);
      }
      if (hasMaxSpeedDebTimer) {
        size += pb::CodedOutputStream.ComputeUInt32Size(28, MaxSpeedDebTimer);
      }
      if (hasWpDebTimer) {
        size += pb::CodedOutputStream.ComputeUInt32Size(29, WpDebTimer);
      }
      if (hasExPowerDebTimer) {
        size += pb::CodedOutputStream.ComputeUInt32Size(30, ExPowerDebTimer);
      }
      if (hasOpt1Mask) {
        size += pb::CodedOutputStream.ComputeUInt32Size(31, Opt1Mask);
      }
      if (hasOpt2Mask) {
        size += pb::CodedOutputStream.ComputeUInt32Size(32, Opt2Mask);
      }
      if (hasOpt3Mask) {
        size += pb::CodedOutputStream.ComputeUInt32Size(33, Opt3Mask);
      }
      if (hasOldPosTransCount) {
        size += pb::CodedOutputStream.ComputeUInt32Size(34, OldPosTransCount);
      }
      if (hasBackdoor) {
        size += pb::CodedOutputStream.ComputeUInt32Size(35, Backdoor);
      }
      if (hasIgnVolThreshold) {
        size += pb::CodedOutputStream.ComputeUInt32Size(36, IgnVolThreshold);
      }
      if (hasOpt1Invert) {
        size += pb::CodedOutputStream.ComputeUInt32Size(37, Opt1Invert);
      }
      if (hasChargingIgnOff) {
        size += pb::CodedOutputStream.ComputeUInt32Size(38, ChargingIgnOff);
      }
      if (hasSpeakerEnable) {
        size += pb::CodedOutputStream.ComputeUInt32Size(39, SpeakerEnable);
      }
      if (hasOdoRpmEnable) {
        size += pb::CodedOutputStream.ComputeUInt32Size(40, OdoRpmEnable);
      }
      if (hasOdoPulses) {
        size += pb::CodedOutputStream.ComputeUInt32Size(41, OdoPulses);
      }
      if (hasRpmPulses) {
        size += pb::CodedOutputStream.ComputeUInt32Size(42, RpmPulses);
      }
      if (hasRpmThreshold) {
        size += pb::CodedOutputStream.ComputeUInt32Size(43, RpmThreshold);
      }
      if (hasBuzzerIncomingCall) {
        size += pb::CodedOutputStream.ComputeUInt32Size(44, BuzzerIncomingCall);
      }
      if (hasCfgAlias) {
        size += pb::CodedOutputStream.ComputeStringSize(45, CfgAlias);
      }
      if (hasSpeakerVol) {
        size += pb::CodedOutputStream.ComputeUInt32Size(46, SpeakerVol);
      }
      if (hasMakeCallTime) {
        size += pb::CodedOutputStream.ComputeUInt32Size(47, MakeCallTime);
      }
      if (hasRingMode) {
        size += pb::CodedOutputStream.ComputeUInt32Size(48, RingMode);
      }
      {
        int dataSize = 0;
        foreach (string element in IncomingNumberList) {
          dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
        }
        size += dataSize;
        size += 2 * incomingNumber_.Count;
      }
      {
        int dataSize = 0;
        foreach (string element in OutgoingNumberList) {
          dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
        }
        size += dataSize;
        size += 2 * outgoingNumber_.Count;
      }
      if (hasIgnCode) {
        size += pb::CodedOutputStream.ComputeUInt32Size(51, IgnCode);
      }
      if (hasPanicAndDoorAsInput) {
        size += pb::CodedOutputStream.ComputeUInt32Size(52, PanicAndDoorAsInput);
      }
      if (hasGpsFilter) {
        size += pb::CodedOutputStream.ComputeUInt32Size(53, GpsFilter);
      }
      if (hasAgpsTimer) {
        size += pb::CodedOutputStream.ComputeUInt32Size(54, AgpsTimer);
      }
      if (hasZigLinkTimer) {
        size += pb::CodedOutputStream.ComputeUInt32Size(55, ZigLinkTimer);
      }
      if (hasNeutralMaxSpeed) {
        size += pb::CodedOutputStream.ComputeUInt32Size(56, NeutralMaxSpeed);
      }
      if (hasNeutralRpm) {
        size += pb::CodedOutputStream.ComputeUInt32Size(57, NeutralRpm);
      }
      if (hasNeutralExcessiveRpm) {
        size += pb::CodedOutputStream.ComputeUInt32Size(58, NeutralExcessiveRpm);
      }
      if (hasGpsFailureDebounce) {
        size += pb::CodedOutputStream.ComputeUInt32Size(59, GpsFailureDebounce);
      }
      if (hasLinkFailOutput) {
        size += pb::CodedOutputStream.ComputeUInt32Size(60, LinkFailOutput);
      }
      if (hasExceededMaxSpeedOutput) {
        size += pb::CodedOutputStream.ComputeUInt32Size(61, ExceededMaxSpeedOutput);
      }
      if (hasJammingOutput) {
        size += pb::CodedOutputStream.ComputeUInt32Size(62, JammingOutput);
      }
      if (hasJammingAlert) {
        size += pb::CodedOutputStream.ComputeUInt32Size(63, JammingAlert);
      }
      if (hasSirenActivate) {
        size += pb::CodedOutputStream.ComputeUInt32Size(64, SirenActivate);
      }
      if (hasSirenDeactivate) {
        size += pb::CodedOutputStream.ComputeUInt32Size(65, SirenDeactivate);
      }
      if (hasSirenCycles) {
        size += pb::CodedOutputStream.ComputeUInt32Size(66, SirenCycles);
      }
      if (hasOutputForSiren) {
        size += pb::CodedOutputStream.ComputeUInt32Size(67, OutputForSiren);
      }
      if (hasDistanceThreshold) {
        size += pb::CodedOutputStream.ComputeUInt32Size(68, DistanceThreshold);
      }
      if (hasDirectionThreshold) {
        size += pb::CodedOutputStream.ComputeUInt32Size(69, DirectionThreshold);
      }
      if (hasIpPriority) {
        size += pb::CodedOutputStream.ComputeUInt32Size(70, IpPriority);
      }
      if (hasLinkFailTimes) {
        size += pb::CodedOutputStream.ComputeUInt32Size(71, LinkFailTimes);
      }
      if (hasPacketEncryptKey) {
        size += pb::CodedOutputStream.ComputeStringSize(72, PacketEncryptKey);
      }
      if (hasAlertTimer) {
        size += pb::CodedOutputStream.ComputeUInt32Size(73, AlertTimer);
      }
      if (hasDebounceRolling) {
        size += pb::CodedOutputStream.ComputeUInt32Size(74, DebounceRolling);
      }
      if (hasDebounceSide) {
        size += pb::CodedOutputStream.ComputeUInt32Size(75, DebounceSide);
      }
      if (hasDebounceShock) {
        size += pb::CodedOutputStream.ComputeUInt32Size(76, DebounceShock);
      }
      if (hasGpsAndOdometerSpeed) {
        size += pb::CodedOutputStream.ComputeUInt32Size(77, GpsAndOdometerSpeed);
      }
      if (hasParkingOutput) {
        size += pb::CodedOutputStream.ComputeUInt32Size(78, ParkingOutput);
      }
      if (hasRollingOutput) {
        size += pb::CodedOutputStream.ComputeUInt32Size(79, RollingOutput);
      }
      if (hasSideOutput) {
        size += pb::CodedOutputStream.ComputeUInt32Size(80, SideOutput);
      }
      if (hasShockOutput) {
        size += pb::CodedOutputStream.ComputeUInt32Size(81, ShockOutput);
      }
      if (hasSendingOrder) {
        size += pb::CodedOutputStream.ComputeUInt32Size(82, SendingOrder);
      }
      if (hasAllowSetApnImxt) {
        size += pb::CodedOutputStream.ComputeUInt32Size(83, AllowSetApnImxt);
      }
      if (hasTagInterval) {
        size += pb::CodedOutputStream.ComputeUInt32Size(84, TagInterval);
      }
      if (hasPanicVia) {
        size += pb::CodedOutputStream.ComputeUInt32Size(85, PanicVia);
      }
      if (hasTagFailOutput) {
        size += pb::CodedOutputStream.ComputeUInt32Size(86, TagFailOutput);
      }
      if (hasEnableApSetOutput) {
        size += pb::CodedOutputStream.ComputeUInt32Size(87, EnableApSetOutput);
      }
      if (hasDebounceSpeedNeutral) {
        size += pb::CodedOutputStream.ComputeUInt32Size(88, DebounceSpeedNeutral);
      }
      if (hasDebounceMaxRpm) {
        size += pb::CodedOutputStream.ComputeUInt32Size(89, DebounceMaxRpm);
      }
      if (hasDebounceMaxRpmNeutral) {
        size += pb::CodedOutputStream.ComputeUInt32Size(90, DebounceMaxRpmNeutral);
      }
      if (hasParkingOutputActive) {
        size += pb::CodedOutputStream.ComputeUInt32Size(91, ParkingOutputActive);
      }
      if (hasParkingOutputDeactive) {
        size += pb::CodedOutputStream.ComputeUInt32Size(92, ParkingOutputDeactive);
      }
      if (hasParkingOutputCircle) {
        size += pb::CodedOutputStream.ComputeUInt32Size(93, ParkingOutputCircle);
      }
      if (hasParkingOutputInterval) {
        size += pb::CodedOutputStream.ComputeUInt32Size(94, ParkingOutputInterval);
      }
      if (hasGpsForAlert) {
        size += pb::CodedOutputStream.ComputeUInt32Size(95, GpsForAlert);
      }
      if (hasRpmFactor) {
        size += pb::CodedOutputStream.ComputeUInt32Size(96, RpmFactor);
      }
      if (hasGsensorDebounceFactor) {
        size += pb::CodedOutputStream.ComputeUInt32Size(97, GsensorDebounceFactor);
      }
      if (hasRpmTrigger) {
        size += pb::CodedOutputStream.ComputeUInt32Size(98, RpmTrigger);
      }
      if (hasRpmEventOutput1) {
        size += pb::CodedOutputStream.ComputeUInt32Size(99, RpmEventOutput1);
      }
      if (hasRpmEventOutput2) {
        size += pb::CodedOutputStream.ComputeUInt32Size(100, RpmEventOutput2);
      }
      if (hasRpmEventOutput3) {
        size += pb::CodedOutputStream.ComputeUInt32Size(101, RpmEventOutput3);
      }
      if (hasImproperMovingOutput) {
        size += pb::CodedOutputStream.ComputeUInt32Size(102, ImproperMovingOutput);
      }
      if (hasAllowAnyTagAcc) {
        size += pb::CodedOutputStream.ComputeUInt32Size(103, AllowAnyTagAcc);
      }
      if (hasLongTimerNoMoving) {
        size += pb::CodedOutputStream.ComputeUInt32Size(104, LongTimerNoMoving);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mxt1xx_u_other_info ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_other_info ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_other_info ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_other_info ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_other_info ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_other_info ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_other_info ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mxt1xx_u_other_info ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mxt1xx_u_other_info ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_other_info ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mxt1xx_u_other_info MakeReadOnly() {
      incomingNumber_.MakeReadOnly();
      outgoingNumber_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mxt1xx_u_other_info prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mxt1xx_u_other_info, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mxt1xx_u_other_info cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mxt1xx_u_other_info result;
      
      private mxt1xx_u_other_info PrepareBuilder() {
        if (resultIsReadOnly) {
          mxt1xx_u_other_info original = result;
          result = new mxt1xx_u_other_info();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mxt1xx_u_other_info MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_other_info.Descriptor; }
      }
      
      public override mxt1xx_u_other_info DefaultInstanceForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_other_info.DefaultInstance; }
      }
      
      public override mxt1xx_u_other_info BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mxt1xx_u_other_info) {
          return MergeFrom((mxt1xx_u_other_info) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mxt1xx_u_other_info other) {
        if (other == global::maxtrack.pb.mxt1xx.mxt1xx_u_other_info.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasLedEnable) {
          LedEnable = other.LedEnable;
        }
        if (other.HasCharingOnly) {
          CharingOnly = other.CharingOnly;
        }
        if (other.HasInput1Enable) {
          Input1Enable = other.Input1Enable;
        }
        if (other.HasInput2Enable) {
          Input2Enable = other.Input2Enable;
        }
        if (other.HasInput3Enable) {
          Input3Enable = other.Input3Enable;
        }
        if (other.HasLowPowerAlert) {
          LowPowerAlert = other.LowPowerAlert;
        }
        if (other.HasTimezone) {
          Timezone = other.Timezone;
        }
        if (other.HasMaxSpeedLimit) {
          MaxSpeedLimit = other.MaxSpeedLimit;
        }
        if (other.HasOdometer) {
          Odometer = other.Odometer;
        }
        if (other.HasCellinfo) {
          Cellinfo = other.Cellinfo;
        }
        if (other.HasDtmfPassword) {
          DtmfPassword = other.DtmfPassword;
        }
        if (other.HasInput4Enable) {
          Input4Enable = other.Input4Enable;
        }
        if (other.HasHourmeter) {
          Hourmeter = other.Hourmeter;
        }
        if (other.HasBSmartOutput2) {
          BSmartOutput2 = other.BSmartOutput2;
        }
        if (other.HasAntiTheftEnable) {
          AntiTheftEnable = other.AntiTheftEnable;
        }
        if (other.HasDoorDetect) {
          DoorDetect = other.DoorDetect;
        }
        if (other.HasLocalParkingMode) {
          LocalParkingMode = other.LocalParkingMode;
        }
        if (other.HasBDisableZigBee) {
          BDisableZigBee = other.BDisableZigBee;
        }
        if (other.HasBOdometerCalc) {
          BOdometerCalc = other.BOdometerCalc;
        }
        if (other.HasBMicrophoneEnable) {
          BMicrophoneEnable = other.BMicrophoneEnable;
        }
        if (other.HasBMoveTriggerAlarm) {
          BMoveTriggerAlarm = other.BMoveTriggerAlarm;
        }
        if (other.HasIgnDebTimer) {
          IgnDebTimer = other.IgnDebTimer;
        }
        if (other.HasPanicDebTimer) {
          PanicDebTimer = other.PanicDebTimer;
        }
        if (other.HasIpt1DebTimer) {
          Ipt1DebTimer = other.Ipt1DebTimer;
        }
        if (other.HasIpt2DebTimer) {
          Ipt2DebTimer = other.Ipt2DebTimer;
        }
        if (other.HasIpt3DebTimer) {
          Ipt3DebTimer = other.Ipt3DebTimer;
        }
        if (other.HasIpt4DebTimer) {
          Ipt4DebTimer = other.Ipt4DebTimer;
        }
        if (other.HasMaxSpeedDebTimer) {
          MaxSpeedDebTimer = other.MaxSpeedDebTimer;
        }
        if (other.HasWpDebTimer) {
          WpDebTimer = other.WpDebTimer;
        }
        if (other.HasExPowerDebTimer) {
          ExPowerDebTimer = other.ExPowerDebTimer;
        }
        if (other.HasOpt1Mask) {
          Opt1Mask = other.Opt1Mask;
        }
        if (other.HasOpt2Mask) {
          Opt2Mask = other.Opt2Mask;
        }
        if (other.HasOpt3Mask) {
          Opt3Mask = other.Opt3Mask;
        }
        if (other.HasOldPosTransCount) {
          OldPosTransCount = other.OldPosTransCount;
        }
        if (other.HasBackdoor) {
          Backdoor = other.Backdoor;
        }
        if (other.HasIgnVolThreshold) {
          IgnVolThreshold = other.IgnVolThreshold;
        }
        if (other.HasOpt1Invert) {
          Opt1Invert = other.Opt1Invert;
        }
        if (other.HasChargingIgnOff) {
          ChargingIgnOff = other.ChargingIgnOff;
        }
        if (other.HasSpeakerEnable) {
          SpeakerEnable = other.SpeakerEnable;
        }
        if (other.HasOdoRpmEnable) {
          OdoRpmEnable = other.OdoRpmEnable;
        }
        if (other.HasOdoPulses) {
          OdoPulses = other.OdoPulses;
        }
        if (other.HasRpmPulses) {
          RpmPulses = other.RpmPulses;
        }
        if (other.HasRpmThreshold) {
          RpmThreshold = other.RpmThreshold;
        }
        if (other.HasBuzzerIncomingCall) {
          BuzzerIncomingCall = other.BuzzerIncomingCall;
        }
        if (other.HasCfgAlias) {
          CfgAlias = other.CfgAlias;
        }
        if (other.HasSpeakerVol) {
          SpeakerVol = other.SpeakerVol;
        }
        if (other.HasMakeCallTime) {
          MakeCallTime = other.MakeCallTime;
        }
        if (other.HasRingMode) {
          RingMode = other.RingMode;
        }
        if (other.incomingNumber_.Count != 0) {
          result.incomingNumber_.Add(other.incomingNumber_);
        }
        if (other.outgoingNumber_.Count != 0) {
          result.outgoingNumber_.Add(other.outgoingNumber_);
        }
        if (other.HasIgnCode) {
          IgnCode = other.IgnCode;
        }
        if (other.HasPanicAndDoorAsInput) {
          PanicAndDoorAsInput = other.PanicAndDoorAsInput;
        }
        if (other.HasGpsFilter) {
          GpsFilter = other.GpsFilter;
        }
        if (other.HasAgpsTimer) {
          AgpsTimer = other.AgpsTimer;
        }
        if (other.HasZigLinkTimer) {
          ZigLinkTimer = other.ZigLinkTimer;
        }
        if (other.HasNeutralMaxSpeed) {
          NeutralMaxSpeed = other.NeutralMaxSpeed;
        }
        if (other.HasNeutralRpm) {
          NeutralRpm = other.NeutralRpm;
        }
        if (other.HasNeutralExcessiveRpm) {
          NeutralExcessiveRpm = other.NeutralExcessiveRpm;
        }
        if (other.HasGpsFailureDebounce) {
          GpsFailureDebounce = other.GpsFailureDebounce;
        }
        if (other.HasLinkFailOutput) {
          LinkFailOutput = other.LinkFailOutput;
        }
        if (other.HasExceededMaxSpeedOutput) {
          ExceededMaxSpeedOutput = other.ExceededMaxSpeedOutput;
        }
        if (other.HasJammingOutput) {
          JammingOutput = other.JammingOutput;
        }
        if (other.HasJammingAlert) {
          JammingAlert = other.JammingAlert;
        }
        if (other.HasSirenActivate) {
          SirenActivate = other.SirenActivate;
        }
        if (other.HasSirenDeactivate) {
          SirenDeactivate = other.SirenDeactivate;
        }
        if (other.HasSirenCycles) {
          SirenCycles = other.SirenCycles;
        }
        if (other.HasOutputForSiren) {
          OutputForSiren = other.OutputForSiren;
        }
        if (other.HasDistanceThreshold) {
          DistanceThreshold = other.DistanceThreshold;
        }
        if (other.HasDirectionThreshold) {
          DirectionThreshold = other.DirectionThreshold;
        }
        if (other.HasIpPriority) {
          IpPriority = other.IpPriority;
        }
        if (other.HasLinkFailTimes) {
          LinkFailTimes = other.LinkFailTimes;
        }
        if (other.HasPacketEncryptKey) {
          PacketEncryptKey = other.PacketEncryptKey;
        }
        if (other.HasAlertTimer) {
          AlertTimer = other.AlertTimer;
        }
        if (other.HasDebounceRolling) {
          DebounceRolling = other.DebounceRolling;
        }
        if (other.HasDebounceSide) {
          DebounceSide = other.DebounceSide;
        }
        if (other.HasDebounceShock) {
          DebounceShock = other.DebounceShock;
        }
        if (other.HasGpsAndOdometerSpeed) {
          GpsAndOdometerSpeed = other.GpsAndOdometerSpeed;
        }
        if (other.HasParkingOutput) {
          ParkingOutput = other.ParkingOutput;
        }
        if (other.HasRollingOutput) {
          RollingOutput = other.RollingOutput;
        }
        if (other.HasSideOutput) {
          SideOutput = other.SideOutput;
        }
        if (other.HasShockOutput) {
          ShockOutput = other.ShockOutput;
        }
        if (other.HasSendingOrder) {
          SendingOrder = other.SendingOrder;
        }
        if (other.HasAllowSetApnImxt) {
          AllowSetApnImxt = other.AllowSetApnImxt;
        }
        if (other.HasTagInterval) {
          TagInterval = other.TagInterval;
        }
        if (other.HasPanicVia) {
          PanicVia = other.PanicVia;
        }
        if (other.HasTagFailOutput) {
          TagFailOutput = other.TagFailOutput;
        }
        if (other.HasEnableApSetOutput) {
          EnableApSetOutput = other.EnableApSetOutput;
        }
        if (other.HasDebounceSpeedNeutral) {
          DebounceSpeedNeutral = other.DebounceSpeedNeutral;
        }
        if (other.HasDebounceMaxRpm) {
          DebounceMaxRpm = other.DebounceMaxRpm;
        }
        if (other.HasDebounceMaxRpmNeutral) {
          DebounceMaxRpmNeutral = other.DebounceMaxRpmNeutral;
        }
        if (other.HasParkingOutputActive) {
          ParkingOutputActive = other.ParkingOutputActive;
        }
        if (other.HasParkingOutputDeactive) {
          ParkingOutputDeactive = other.ParkingOutputDeactive;
        }
        if (other.HasParkingOutputCircle) {
          ParkingOutputCircle = other.ParkingOutputCircle;
        }
        if (other.HasParkingOutputInterval) {
          ParkingOutputInterval = other.ParkingOutputInterval;
        }
        if (other.HasGpsForAlert) {
          GpsForAlert = other.GpsForAlert;
        }
        if (other.HasRpmFactor) {
          RpmFactor = other.RpmFactor;
        }
        if (other.HasGsensorDebounceFactor) {
          GsensorDebounceFactor = other.GsensorDebounceFactor;
        }
        if (other.HasRpmTrigger) {
          RpmTrigger = other.RpmTrigger;
        }
        if (other.HasRpmEventOutput1) {
          RpmEventOutput1 = other.RpmEventOutput1;
        }
        if (other.HasRpmEventOutput2) {
          RpmEventOutput2 = other.RpmEventOutput2;
        }
        if (other.HasRpmEventOutput3) {
          RpmEventOutput3 = other.RpmEventOutput3;
        }
        if (other.HasImproperMovingOutput) {
          ImproperMovingOutput = other.ImproperMovingOutput;
        }
        if (other.HasAllowAnyTagAcc) {
          AllowAnyTagAcc = other.AllowAnyTagAcc;
        }
        if (other.HasLongTimerNoMoving) {
          LongTimerNoMoving = other.LongTimerNoMoving;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mxt1XxUOtherInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mxt1XxUOtherInfoFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasLedEnable = input.ReadUInt32(ref result.ledEnable_);
              break;
            }
            case 16: {
              result.hasCharingOnly = input.ReadUInt32(ref result.charingOnly_);
              break;
            }
            case 24: {
              result.hasInput1Enable = input.ReadUInt32(ref result.input1Enable_);
              break;
            }
            case 32: {
              result.hasInput2Enable = input.ReadUInt32(ref result.input2Enable_);
              break;
            }
            case 40: {
              result.hasInput3Enable = input.ReadUInt32(ref result.input3Enable_);
              break;
            }
            case 48: {
              result.hasLowPowerAlert = input.ReadUInt32(ref result.lowPowerAlert_);
              break;
            }
            case 56: {
              result.hasTimezone = input.ReadUInt32(ref result.timezone_);
              break;
            }
            case 64: {
              result.hasMaxSpeedLimit = input.ReadUInt32(ref result.maxSpeedLimit_);
              break;
            }
            case 72: {
              result.hasOdometer = input.ReadUInt32(ref result.odometer_);
              break;
            }
            case 80: {
              result.hasCellinfo = input.ReadUInt32(ref result.cellinfo_);
              break;
            }
            case 90: {
              result.hasDtmfPassword = input.ReadString(ref result.dtmfPassword_);
              break;
            }
            case 96: {
              result.hasInput4Enable = input.ReadUInt32(ref result.input4Enable_);
              break;
            }
            case 104: {
              result.hasHourmeter = input.ReadUInt32(ref result.hourmeter_);
              break;
            }
            case 112: {
              result.hasBSmartOutput2 = input.ReadUInt32(ref result.bSmartOutput2_);
              break;
            }
            case 120: {
              result.hasAntiTheftEnable = input.ReadUInt32(ref result.antiTheftEnable_);
              break;
            }
            case 128: {
              result.hasDoorDetect = input.ReadUInt32(ref result.doorDetect_);
              break;
            }
            case 136: {
              result.hasLocalParkingMode = input.ReadUInt32(ref result.localParkingMode_);
              break;
            }
            case 144: {
              result.hasBDisableZigBee = input.ReadUInt32(ref result.bDisableZigBee_);
              break;
            }
            case 152: {
              result.hasBOdometerCalc = input.ReadUInt32(ref result.bOdometerCalc_);
              break;
            }
            case 160: {
              result.hasBMicrophoneEnable = input.ReadUInt32(ref result.bMicrophoneEnable_);
              break;
            }
            case 168: {
              result.hasBMoveTriggerAlarm = input.ReadUInt32(ref result.bMoveTriggerAlarm_);
              break;
            }
            case 176: {
              result.hasIgnDebTimer = input.ReadUInt32(ref result.ignDebTimer_);
              break;
            }
            case 184: {
              result.hasPanicDebTimer = input.ReadUInt32(ref result.panicDebTimer_);
              break;
            }
            case 192: {
              result.hasIpt1DebTimer = input.ReadUInt32(ref result.ipt1DebTimer_);
              break;
            }
            case 200: {
              result.hasIpt2DebTimer = input.ReadUInt32(ref result.ipt2DebTimer_);
              break;
            }
            case 208: {
              result.hasIpt3DebTimer = input.ReadUInt32(ref result.ipt3DebTimer_);
              break;
            }
            case 216: {
              result.hasIpt4DebTimer = input.ReadUInt32(ref result.ipt4DebTimer_);
              break;
            }
            case 224: {
              result.hasMaxSpeedDebTimer = input.ReadUInt32(ref result.maxSpeedDebTimer_);
              break;
            }
            case 232: {
              result.hasWpDebTimer = input.ReadUInt32(ref result.wpDebTimer_);
              break;
            }
            case 240: {
              result.hasExPowerDebTimer = input.ReadUInt32(ref result.exPowerDebTimer_);
              break;
            }
            case 248: {
              result.hasOpt1Mask = input.ReadUInt32(ref result.opt1Mask_);
              break;
            }
            case 256: {
              result.hasOpt2Mask = input.ReadUInt32(ref result.opt2Mask_);
              break;
            }
            case 264: {
              result.hasOpt3Mask = input.ReadUInt32(ref result.opt3Mask_);
              break;
            }
            case 272: {
              result.hasOldPosTransCount = input.ReadUInt32(ref result.oldPosTransCount_);
              break;
            }
            case 280: {
              result.hasBackdoor = input.ReadUInt32(ref result.backdoor_);
              break;
            }
            case 288: {
              result.hasIgnVolThreshold = input.ReadUInt32(ref result.ignVolThreshold_);
              break;
            }
            case 296: {
              result.hasOpt1Invert = input.ReadUInt32(ref result.opt1Invert_);
              break;
            }
            case 304: {
              result.hasChargingIgnOff = input.ReadUInt32(ref result.chargingIgnOff_);
              break;
            }
            case 312: {
              result.hasSpeakerEnable = input.ReadUInt32(ref result.speakerEnable_);
              break;
            }
            case 320: {
              result.hasOdoRpmEnable = input.ReadUInt32(ref result.odoRpmEnable_);
              break;
            }
            case 328: {
              result.hasOdoPulses = input.ReadUInt32(ref result.odoPulses_);
              break;
            }
            case 336: {
              result.hasRpmPulses = input.ReadUInt32(ref result.rpmPulses_);
              break;
            }
            case 344: {
              result.hasRpmThreshold = input.ReadUInt32(ref result.rpmThreshold_);
              break;
            }
            case 352: {
              result.hasBuzzerIncomingCall = input.ReadUInt32(ref result.buzzerIncomingCall_);
              break;
            }
            case 362: {
              result.hasCfgAlias = input.ReadString(ref result.cfgAlias_);
              break;
            }
            case 368: {
              result.hasSpeakerVol = input.ReadUInt32(ref result.speakerVol_);
              break;
            }
            case 376: {
              result.hasMakeCallTime = input.ReadUInt32(ref result.makeCallTime_);
              break;
            }
            case 384: {
              result.hasRingMode = input.ReadUInt32(ref result.ringMode_);
              break;
            }
            case 394: {
              input.ReadStringArray(tag, field_name, result.incomingNumber_);
              break;
            }
            case 402: {
              input.ReadStringArray(tag, field_name, result.outgoingNumber_);
              break;
            }
            case 408: {
              result.hasIgnCode = input.ReadUInt32(ref result.ignCode_);
              break;
            }
            case 416: {
              result.hasPanicAndDoorAsInput = input.ReadUInt32(ref result.panicAndDoorAsInput_);
              break;
            }
            case 424: {
              result.hasGpsFilter = input.ReadUInt32(ref result.gpsFilter_);
              break;
            }
            case 432: {
              result.hasAgpsTimer = input.ReadUInt32(ref result.agpsTimer_);
              break;
            }
            case 440: {
              result.hasZigLinkTimer = input.ReadUInt32(ref result.zigLinkTimer_);
              break;
            }
            case 448: {
              result.hasNeutralMaxSpeed = input.ReadUInt32(ref result.neutralMaxSpeed_);
              break;
            }
            case 456: {
              result.hasNeutralRpm = input.ReadUInt32(ref result.neutralRpm_);
              break;
            }
            case 464: {
              result.hasNeutralExcessiveRpm = input.ReadUInt32(ref result.neutralExcessiveRpm_);
              break;
            }
            case 472: {
              result.hasGpsFailureDebounce = input.ReadUInt32(ref result.gpsFailureDebounce_);
              break;
            }
            case 480: {
              result.hasLinkFailOutput = input.ReadUInt32(ref result.linkFailOutput_);
              break;
            }
            case 488: {
              result.hasExceededMaxSpeedOutput = input.ReadUInt32(ref result.exceededMaxSpeedOutput_);
              break;
            }
            case 496: {
              result.hasJammingOutput = input.ReadUInt32(ref result.jammingOutput_);
              break;
            }
            case 504: {
              result.hasJammingAlert = input.ReadUInt32(ref result.jammingAlert_);
              break;
            }
            case 512: {
              result.hasSirenActivate = input.ReadUInt32(ref result.sirenActivate_);
              break;
            }
            case 520: {
              result.hasSirenDeactivate = input.ReadUInt32(ref result.sirenDeactivate_);
              break;
            }
            case 528: {
              result.hasSirenCycles = input.ReadUInt32(ref result.sirenCycles_);
              break;
            }
            case 536: {
              result.hasOutputForSiren = input.ReadUInt32(ref result.outputForSiren_);
              break;
            }
            case 544: {
              result.hasDistanceThreshold = input.ReadUInt32(ref result.distanceThreshold_);
              break;
            }
            case 552: {
              result.hasDirectionThreshold = input.ReadUInt32(ref result.directionThreshold_);
              break;
            }
            case 560: {
              result.hasIpPriority = input.ReadUInt32(ref result.ipPriority_);
              break;
            }
            case 568: {
              result.hasLinkFailTimes = input.ReadUInt32(ref result.linkFailTimes_);
              break;
            }
            case 578: {
              result.hasPacketEncryptKey = input.ReadString(ref result.packetEncryptKey_);
              break;
            }
            case 584: {
              result.hasAlertTimer = input.ReadUInt32(ref result.alertTimer_);
              break;
            }
            case 592: {
              result.hasDebounceRolling = input.ReadUInt32(ref result.debounceRolling_);
              break;
            }
            case 600: {
              result.hasDebounceSide = input.ReadUInt32(ref result.debounceSide_);
              break;
            }
            case 608: {
              result.hasDebounceShock = input.ReadUInt32(ref result.debounceShock_);
              break;
            }
            case 616: {
              result.hasGpsAndOdometerSpeed = input.ReadUInt32(ref result.gpsAndOdometerSpeed_);
              break;
            }
            case 624: {
              result.hasParkingOutput = input.ReadUInt32(ref result.parkingOutput_);
              break;
            }
            case 632: {
              result.hasRollingOutput = input.ReadUInt32(ref result.rollingOutput_);
              break;
            }
            case 640: {
              result.hasSideOutput = input.ReadUInt32(ref result.sideOutput_);
              break;
            }
            case 648: {
              result.hasShockOutput = input.ReadUInt32(ref result.shockOutput_);
              break;
            }
            case 656: {
              result.hasSendingOrder = input.ReadUInt32(ref result.sendingOrder_);
              break;
            }
            case 664: {
              result.hasAllowSetApnImxt = input.ReadUInt32(ref result.allowSetApnImxt_);
              break;
            }
            case 672: {
              result.hasTagInterval = input.ReadUInt32(ref result.tagInterval_);
              break;
            }
            case 680: {
              result.hasPanicVia = input.ReadUInt32(ref result.panicVia_);
              break;
            }
            case 688: {
              result.hasTagFailOutput = input.ReadUInt32(ref result.tagFailOutput_);
              break;
            }
            case 696: {
              result.hasEnableApSetOutput = input.ReadUInt32(ref result.enableApSetOutput_);
              break;
            }
            case 704: {
              result.hasDebounceSpeedNeutral = input.ReadUInt32(ref result.debounceSpeedNeutral_);
              break;
            }
            case 712: {
              result.hasDebounceMaxRpm = input.ReadUInt32(ref result.debounceMaxRpm_);
              break;
            }
            case 720: {
              result.hasDebounceMaxRpmNeutral = input.ReadUInt32(ref result.debounceMaxRpmNeutral_);
              break;
            }
            case 728: {
              result.hasParkingOutputActive = input.ReadUInt32(ref result.parkingOutputActive_);
              break;
            }
            case 736: {
              result.hasParkingOutputDeactive = input.ReadUInt32(ref result.parkingOutputDeactive_);
              break;
            }
            case 744: {
              result.hasParkingOutputCircle = input.ReadUInt32(ref result.parkingOutputCircle_);
              break;
            }
            case 752: {
              result.hasParkingOutputInterval = input.ReadUInt32(ref result.parkingOutputInterval_);
              break;
            }
            case 760: {
              result.hasGpsForAlert = input.ReadUInt32(ref result.gpsForAlert_);
              break;
            }
            case 768: {
              result.hasRpmFactor = input.ReadUInt32(ref result.rpmFactor_);
              break;
            }
            case 776: {
              result.hasGsensorDebounceFactor = input.ReadUInt32(ref result.gsensorDebounceFactor_);
              break;
            }
            case 784: {
              result.hasRpmTrigger = input.ReadUInt32(ref result.rpmTrigger_);
              break;
            }
            case 792: {
              result.hasRpmEventOutput1 = input.ReadUInt32(ref result.rpmEventOutput1_);
              break;
            }
            case 800: {
              result.hasRpmEventOutput2 = input.ReadUInt32(ref result.rpmEventOutput2_);
              break;
            }
            case 808: {
              result.hasRpmEventOutput3 = input.ReadUInt32(ref result.rpmEventOutput3_);
              break;
            }
            case 816: {
              result.hasImproperMovingOutput = input.ReadUInt32(ref result.improperMovingOutput_);
              break;
            }
            case 824: {
              result.hasAllowAnyTagAcc = input.ReadUInt32(ref result.allowAnyTagAcc_);
              break;
            }
            case 832: {
              result.hasLongTimerNoMoving = input.ReadUInt32(ref result.longTimerNoMoving_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasLedEnable {
        get { return result.hasLedEnable; }
      }
      [global::System.CLSCompliant(false)]
      public uint LedEnable {
        get { return result.LedEnable; }
        set { SetLedEnable(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetLedEnable(uint value) {
        PrepareBuilder();
        result.hasLedEnable = true;
        result.ledEnable_ = value;
        return this;
      }
      public Builder ClearLedEnable() {
        PrepareBuilder();
        result.hasLedEnable = false;
        result.ledEnable_ = 0;
        return this;
      }
      
      public bool HasCharingOnly {
        get { return result.hasCharingOnly; }
      }
      [global::System.CLSCompliant(false)]
      public uint CharingOnly {
        get { return result.CharingOnly; }
        set { SetCharingOnly(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetCharingOnly(uint value) {
        PrepareBuilder();
        result.hasCharingOnly = true;
        result.charingOnly_ = value;
        return this;
      }
      public Builder ClearCharingOnly() {
        PrepareBuilder();
        result.hasCharingOnly = false;
        result.charingOnly_ = 0;
        return this;
      }
      
      public bool HasInput1Enable {
        get { return result.hasInput1Enable; }
      }
      [global::System.CLSCompliant(false)]
      public uint Input1Enable {
        get { return result.Input1Enable; }
        set { SetInput1Enable(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetInput1Enable(uint value) {
        PrepareBuilder();
        result.hasInput1Enable = true;
        result.input1Enable_ = value;
        return this;
      }
      public Builder ClearInput1Enable() {
        PrepareBuilder();
        result.hasInput1Enable = false;
        result.input1Enable_ = 0;
        return this;
      }
      
      public bool HasInput2Enable {
        get { return result.hasInput2Enable; }
      }
      [global::System.CLSCompliant(false)]
      public uint Input2Enable {
        get { return result.Input2Enable; }
        set { SetInput2Enable(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetInput2Enable(uint value) {
        PrepareBuilder();
        result.hasInput2Enable = true;
        result.input2Enable_ = value;
        return this;
      }
      public Builder ClearInput2Enable() {
        PrepareBuilder();
        result.hasInput2Enable = false;
        result.input2Enable_ = 0;
        return this;
      }
      
      public bool HasInput3Enable {
        get { return result.hasInput3Enable; }
      }
      [global::System.CLSCompliant(false)]
      public uint Input3Enable {
        get { return result.Input3Enable; }
        set { SetInput3Enable(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetInput3Enable(uint value) {
        PrepareBuilder();
        result.hasInput3Enable = true;
        result.input3Enable_ = value;
        return this;
      }
      public Builder ClearInput3Enable() {
        PrepareBuilder();
        result.hasInput3Enable = false;
        result.input3Enable_ = 0;
        return this;
      }
      
      public bool HasLowPowerAlert {
        get { return result.hasLowPowerAlert; }
      }
      [global::System.CLSCompliant(false)]
      public uint LowPowerAlert {
        get { return result.LowPowerAlert; }
        set { SetLowPowerAlert(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetLowPowerAlert(uint value) {
        PrepareBuilder();
        result.hasLowPowerAlert = true;
        result.lowPowerAlert_ = value;
        return this;
      }
      public Builder ClearLowPowerAlert() {
        PrepareBuilder();
        result.hasLowPowerAlert = false;
        result.lowPowerAlert_ = 0;
        return this;
      }
      
      public bool HasTimezone {
        get { return result.hasTimezone; }
      }
      [global::System.CLSCompliant(false)]
      public uint Timezone {
        get { return result.Timezone; }
        set { SetTimezone(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetTimezone(uint value) {
        PrepareBuilder();
        result.hasTimezone = true;
        result.timezone_ = value;
        return this;
      }
      public Builder ClearTimezone() {
        PrepareBuilder();
        result.hasTimezone = false;
        result.timezone_ = 0;
        return this;
      }
      
      public bool HasMaxSpeedLimit {
        get { return result.hasMaxSpeedLimit; }
      }
      [global::System.CLSCompliant(false)]
      public uint MaxSpeedLimit {
        get { return result.MaxSpeedLimit; }
        set { SetMaxSpeedLimit(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetMaxSpeedLimit(uint value) {
        PrepareBuilder();
        result.hasMaxSpeedLimit = true;
        result.maxSpeedLimit_ = value;
        return this;
      }
      public Builder ClearMaxSpeedLimit() {
        PrepareBuilder();
        result.hasMaxSpeedLimit = false;
        result.maxSpeedLimit_ = 0;
        return this;
      }
      
      public bool HasOdometer {
        get { return result.hasOdometer; }
      }
      [global::System.CLSCompliant(false)]
      public uint Odometer {
        get { return result.Odometer; }
        set { SetOdometer(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetOdometer(uint value) {
        PrepareBuilder();
        result.hasOdometer = true;
        result.odometer_ = value;
        return this;
      }
      public Builder ClearOdometer() {
        PrepareBuilder();
        result.hasOdometer = false;
        result.odometer_ = 0;
        return this;
      }
      
      public bool HasCellinfo {
        get { return result.hasCellinfo; }
      }
      [global::System.CLSCompliant(false)]
      public uint Cellinfo {
        get { return result.Cellinfo; }
        set { SetCellinfo(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetCellinfo(uint value) {
        PrepareBuilder();
        result.hasCellinfo = true;
        result.cellinfo_ = value;
        return this;
      }
      public Builder ClearCellinfo() {
        PrepareBuilder();
        result.hasCellinfo = false;
        result.cellinfo_ = 0;
        return this;
      }
      
      public bool HasDtmfPassword {
        get { return result.hasDtmfPassword; }
      }
      public string DtmfPassword {
        get { return result.DtmfPassword; }
        set { SetDtmfPassword(value); }
      }
      public Builder SetDtmfPassword(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDtmfPassword = true;
        result.dtmfPassword_ = value;
        return this;
      }
      public Builder ClearDtmfPassword() {
        PrepareBuilder();
        result.hasDtmfPassword = false;
        result.dtmfPassword_ = "";
        return this;
      }
      
      public bool HasInput4Enable {
        get { return result.hasInput4Enable; }
      }
      [global::System.CLSCompliant(false)]
      public uint Input4Enable {
        get { return result.Input4Enable; }
        set { SetInput4Enable(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetInput4Enable(uint value) {
        PrepareBuilder();
        result.hasInput4Enable = true;
        result.input4Enable_ = value;
        return this;
      }
      public Builder ClearInput4Enable() {
        PrepareBuilder();
        result.hasInput4Enable = false;
        result.input4Enable_ = 0;
        return this;
      }
      
      public bool HasHourmeter {
        get { return result.hasHourmeter; }
      }
      [global::System.CLSCompliant(false)]
      public uint Hourmeter {
        get { return result.Hourmeter; }
        set { SetHourmeter(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetHourmeter(uint value) {
        PrepareBuilder();
        result.hasHourmeter = true;
        result.hourmeter_ = value;
        return this;
      }
      public Builder ClearHourmeter() {
        PrepareBuilder();
        result.hasHourmeter = false;
        result.hourmeter_ = 0;
        return this;
      }
      
      public bool HasBSmartOutput2 {
        get { return result.hasBSmartOutput2; }
      }
      [global::System.CLSCompliant(false)]
      public uint BSmartOutput2 {
        get { return result.BSmartOutput2; }
        set { SetBSmartOutput2(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetBSmartOutput2(uint value) {
        PrepareBuilder();
        result.hasBSmartOutput2 = true;
        result.bSmartOutput2_ = value;
        return this;
      }
      public Builder ClearBSmartOutput2() {
        PrepareBuilder();
        result.hasBSmartOutput2 = false;
        result.bSmartOutput2_ = 0;
        return this;
      }
      
      public bool HasAntiTheftEnable {
        get { return result.hasAntiTheftEnable; }
      }
      [global::System.CLSCompliant(false)]
      public uint AntiTheftEnable {
        get { return result.AntiTheftEnable; }
        set { SetAntiTheftEnable(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetAntiTheftEnable(uint value) {
        PrepareBuilder();
        result.hasAntiTheftEnable = true;
        result.antiTheftEnable_ = value;
        return this;
      }
      public Builder ClearAntiTheftEnable() {
        PrepareBuilder();
        result.hasAntiTheftEnable = false;
        result.antiTheftEnable_ = 0;
        return this;
      }
      
      public bool HasDoorDetect {
        get { return result.hasDoorDetect; }
      }
      [global::System.CLSCompliant(false)]
      public uint DoorDetect {
        get { return result.DoorDetect; }
        set { SetDoorDetect(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetDoorDetect(uint value) {
        PrepareBuilder();
        result.hasDoorDetect = true;
        result.doorDetect_ = value;
        return this;
      }
      public Builder ClearDoorDetect() {
        PrepareBuilder();
        result.hasDoorDetect = false;
        result.doorDetect_ = 0;
        return this;
      }
      
      public bool HasLocalParkingMode {
        get { return result.hasLocalParkingMode; }
      }
      [global::System.CLSCompliant(false)]
      public uint LocalParkingMode {
        get { return result.LocalParkingMode; }
        set { SetLocalParkingMode(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetLocalParkingMode(uint value) {
        PrepareBuilder();
        result.hasLocalParkingMode = true;
        result.localParkingMode_ = value;
        return this;
      }
      public Builder ClearLocalParkingMode() {
        PrepareBuilder();
        result.hasLocalParkingMode = false;
        result.localParkingMode_ = 0;
        return this;
      }
      
      public bool HasBDisableZigBee {
        get { return result.hasBDisableZigBee; }
      }
      [global::System.CLSCompliant(false)]
      public uint BDisableZigBee {
        get { return result.BDisableZigBee; }
        set { SetBDisableZigBee(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetBDisableZigBee(uint value) {
        PrepareBuilder();
        result.hasBDisableZigBee = true;
        result.bDisableZigBee_ = value;
        return this;
      }
      public Builder ClearBDisableZigBee() {
        PrepareBuilder();
        result.hasBDisableZigBee = false;
        result.bDisableZigBee_ = 0;
        return this;
      }
      
      public bool HasBOdometerCalc {
        get { return result.hasBOdometerCalc; }
      }
      [global::System.CLSCompliant(false)]
      public uint BOdometerCalc {
        get { return result.BOdometerCalc; }
        set { SetBOdometerCalc(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetBOdometerCalc(uint value) {
        PrepareBuilder();
        result.hasBOdometerCalc = true;
        result.bOdometerCalc_ = value;
        return this;
      }
      public Builder ClearBOdometerCalc() {
        PrepareBuilder();
        result.hasBOdometerCalc = false;
        result.bOdometerCalc_ = 0;
        return this;
      }
      
      public bool HasBMicrophoneEnable {
        get { return result.hasBMicrophoneEnable; }
      }
      [global::System.CLSCompliant(false)]
      public uint BMicrophoneEnable {
        get { return result.BMicrophoneEnable; }
        set { SetBMicrophoneEnable(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetBMicrophoneEnable(uint value) {
        PrepareBuilder();
        result.hasBMicrophoneEnable = true;
        result.bMicrophoneEnable_ = value;
        return this;
      }
      public Builder ClearBMicrophoneEnable() {
        PrepareBuilder();
        result.hasBMicrophoneEnable = false;
        result.bMicrophoneEnable_ = 0;
        return this;
      }
      
      public bool HasBMoveTriggerAlarm {
        get { return result.hasBMoveTriggerAlarm; }
      }
      [global::System.CLSCompliant(false)]
      public uint BMoveTriggerAlarm {
        get { return result.BMoveTriggerAlarm; }
        set { SetBMoveTriggerAlarm(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetBMoveTriggerAlarm(uint value) {
        PrepareBuilder();
        result.hasBMoveTriggerAlarm = true;
        result.bMoveTriggerAlarm_ = value;
        return this;
      }
      public Builder ClearBMoveTriggerAlarm() {
        PrepareBuilder();
        result.hasBMoveTriggerAlarm = false;
        result.bMoveTriggerAlarm_ = 0;
        return this;
      }
      
      public bool HasIgnDebTimer {
        get { return result.hasIgnDebTimer; }
      }
      [global::System.CLSCompliant(false)]
      public uint IgnDebTimer {
        get { return result.IgnDebTimer; }
        set { SetIgnDebTimer(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetIgnDebTimer(uint value) {
        PrepareBuilder();
        result.hasIgnDebTimer = true;
        result.ignDebTimer_ = value;
        return this;
      }
      public Builder ClearIgnDebTimer() {
        PrepareBuilder();
        result.hasIgnDebTimer = false;
        result.ignDebTimer_ = 0;
        return this;
      }
      
      public bool HasPanicDebTimer {
        get { return result.hasPanicDebTimer; }
      }
      [global::System.CLSCompliant(false)]
      public uint PanicDebTimer {
        get { return result.PanicDebTimer; }
        set { SetPanicDebTimer(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetPanicDebTimer(uint value) {
        PrepareBuilder();
        result.hasPanicDebTimer = true;
        result.panicDebTimer_ = value;
        return this;
      }
      public Builder ClearPanicDebTimer() {
        PrepareBuilder();
        result.hasPanicDebTimer = false;
        result.panicDebTimer_ = 0;
        return this;
      }
      
      public bool HasIpt1DebTimer {
        get { return result.hasIpt1DebTimer; }
      }
      [global::System.CLSCompliant(false)]
      public uint Ipt1DebTimer {
        get { return result.Ipt1DebTimer; }
        set { SetIpt1DebTimer(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetIpt1DebTimer(uint value) {
        PrepareBuilder();
        result.hasIpt1DebTimer = true;
        result.ipt1DebTimer_ = value;
        return this;
      }
      public Builder ClearIpt1DebTimer() {
        PrepareBuilder();
        result.hasIpt1DebTimer = false;
        result.ipt1DebTimer_ = 0;
        return this;
      }
      
      public bool HasIpt2DebTimer {
        get { return result.hasIpt2DebTimer; }
      }
      [global::System.CLSCompliant(false)]
      public uint Ipt2DebTimer {
        get { return result.Ipt2DebTimer; }
        set { SetIpt2DebTimer(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetIpt2DebTimer(uint value) {
        PrepareBuilder();
        result.hasIpt2DebTimer = true;
        result.ipt2DebTimer_ = value;
        return this;
      }
      public Builder ClearIpt2DebTimer() {
        PrepareBuilder();
        result.hasIpt2DebTimer = false;
        result.ipt2DebTimer_ = 0;
        return this;
      }
      
      public bool HasIpt3DebTimer {
        get { return result.hasIpt3DebTimer; }
      }
      [global::System.CLSCompliant(false)]
      public uint Ipt3DebTimer {
        get { return result.Ipt3DebTimer; }
        set { SetIpt3DebTimer(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetIpt3DebTimer(uint value) {
        PrepareBuilder();
        result.hasIpt3DebTimer = true;
        result.ipt3DebTimer_ = value;
        return this;
      }
      public Builder ClearIpt3DebTimer() {
        PrepareBuilder();
        result.hasIpt3DebTimer = false;
        result.ipt3DebTimer_ = 0;
        return this;
      }
      
      public bool HasIpt4DebTimer {
        get { return result.hasIpt4DebTimer; }
      }
      [global::System.CLSCompliant(false)]
      public uint Ipt4DebTimer {
        get { return result.Ipt4DebTimer; }
        set { SetIpt4DebTimer(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetIpt4DebTimer(uint value) {
        PrepareBuilder();
        result.hasIpt4DebTimer = true;
        result.ipt4DebTimer_ = value;
        return this;
      }
      public Builder ClearIpt4DebTimer() {
        PrepareBuilder();
        result.hasIpt4DebTimer = false;
        result.ipt4DebTimer_ = 0;
        return this;
      }
      
      public bool HasMaxSpeedDebTimer {
        get { return result.hasMaxSpeedDebTimer; }
      }
      [global::System.CLSCompliant(false)]
      public uint MaxSpeedDebTimer {
        get { return result.MaxSpeedDebTimer; }
        set { SetMaxSpeedDebTimer(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetMaxSpeedDebTimer(uint value) {
        PrepareBuilder();
        result.hasMaxSpeedDebTimer = true;
        result.maxSpeedDebTimer_ = value;
        return this;
      }
      public Builder ClearMaxSpeedDebTimer() {
        PrepareBuilder();
        result.hasMaxSpeedDebTimer = false;
        result.maxSpeedDebTimer_ = 0;
        return this;
      }
      
      public bool HasWpDebTimer {
        get { return result.hasWpDebTimer; }
      }
      [global::System.CLSCompliant(false)]
      public uint WpDebTimer {
        get { return result.WpDebTimer; }
        set { SetWpDebTimer(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetWpDebTimer(uint value) {
        PrepareBuilder();
        result.hasWpDebTimer = true;
        result.wpDebTimer_ = value;
        return this;
      }
      public Builder ClearWpDebTimer() {
        PrepareBuilder();
        result.hasWpDebTimer = false;
        result.wpDebTimer_ = 0;
        return this;
      }
      
      public bool HasExPowerDebTimer {
        get { return result.hasExPowerDebTimer; }
      }
      [global::System.CLSCompliant(false)]
      public uint ExPowerDebTimer {
        get { return result.ExPowerDebTimer; }
        set { SetExPowerDebTimer(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetExPowerDebTimer(uint value) {
        PrepareBuilder();
        result.hasExPowerDebTimer = true;
        result.exPowerDebTimer_ = value;
        return this;
      }
      public Builder ClearExPowerDebTimer() {
        PrepareBuilder();
        result.hasExPowerDebTimer = false;
        result.exPowerDebTimer_ = 0;
        return this;
      }
      
      public bool HasOpt1Mask {
        get { return result.hasOpt1Mask; }
      }
      [global::System.CLSCompliant(false)]
      public uint Opt1Mask {
        get { return result.Opt1Mask; }
        set { SetOpt1Mask(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetOpt1Mask(uint value) {
        PrepareBuilder();
        result.hasOpt1Mask = true;
        result.opt1Mask_ = value;
        return this;
      }
      public Builder ClearOpt1Mask() {
        PrepareBuilder();
        result.hasOpt1Mask = false;
        result.opt1Mask_ = 0;
        return this;
      }
      
      public bool HasOpt2Mask {
        get { return result.hasOpt2Mask; }
      }
      [global::System.CLSCompliant(false)]
      public uint Opt2Mask {
        get { return result.Opt2Mask; }
        set { SetOpt2Mask(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetOpt2Mask(uint value) {
        PrepareBuilder();
        result.hasOpt2Mask = true;
        result.opt2Mask_ = value;
        return this;
      }
      public Builder ClearOpt2Mask() {
        PrepareBuilder();
        result.hasOpt2Mask = false;
        result.opt2Mask_ = 0;
        return this;
      }
      
      public bool HasOpt3Mask {
        get { return result.hasOpt3Mask; }
      }
      [global::System.CLSCompliant(false)]
      public uint Opt3Mask {
        get { return result.Opt3Mask; }
        set { SetOpt3Mask(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetOpt3Mask(uint value) {
        PrepareBuilder();
        result.hasOpt3Mask = true;
        result.opt3Mask_ = value;
        return this;
      }
      public Builder ClearOpt3Mask() {
        PrepareBuilder();
        result.hasOpt3Mask = false;
        result.opt3Mask_ = 0;
        return this;
      }
      
      public bool HasOldPosTransCount {
        get { return result.hasOldPosTransCount; }
      }
      [global::System.CLSCompliant(false)]
      public uint OldPosTransCount {
        get { return result.OldPosTransCount; }
        set { SetOldPosTransCount(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetOldPosTransCount(uint value) {
        PrepareBuilder();
        result.hasOldPosTransCount = true;
        result.oldPosTransCount_ = value;
        return this;
      }
      public Builder ClearOldPosTransCount() {
        PrepareBuilder();
        result.hasOldPosTransCount = false;
        result.oldPosTransCount_ = 0;
        return this;
      }
      
      public bool HasBackdoor {
        get { return result.hasBackdoor; }
      }
      [global::System.CLSCompliant(false)]
      public uint Backdoor {
        get { return result.Backdoor; }
        set { SetBackdoor(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetBackdoor(uint value) {
        PrepareBuilder();
        result.hasBackdoor = true;
        result.backdoor_ = value;
        return this;
      }
      public Builder ClearBackdoor() {
        PrepareBuilder();
        result.hasBackdoor = false;
        result.backdoor_ = 0;
        return this;
      }
      
      public bool HasIgnVolThreshold {
        get { return result.hasIgnVolThreshold; }
      }
      [global::System.CLSCompliant(false)]
      public uint IgnVolThreshold {
        get { return result.IgnVolThreshold; }
        set { SetIgnVolThreshold(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetIgnVolThreshold(uint value) {
        PrepareBuilder();
        result.hasIgnVolThreshold = true;
        result.ignVolThreshold_ = value;
        return this;
      }
      public Builder ClearIgnVolThreshold() {
        PrepareBuilder();
        result.hasIgnVolThreshold = false;
        result.ignVolThreshold_ = 0;
        return this;
      }
      
      public bool HasOpt1Invert {
        get { return result.hasOpt1Invert; }
      }
      [global::System.CLSCompliant(false)]
      public uint Opt1Invert {
        get { return result.Opt1Invert; }
        set { SetOpt1Invert(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetOpt1Invert(uint value) {
        PrepareBuilder();
        result.hasOpt1Invert = true;
        result.opt1Invert_ = value;
        return this;
      }
      public Builder ClearOpt1Invert() {
        PrepareBuilder();
        result.hasOpt1Invert = false;
        result.opt1Invert_ = 0;
        return this;
      }
      
      public bool HasChargingIgnOff {
        get { return result.hasChargingIgnOff; }
      }
      [global::System.CLSCompliant(false)]
      public uint ChargingIgnOff {
        get { return result.ChargingIgnOff; }
        set { SetChargingIgnOff(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetChargingIgnOff(uint value) {
        PrepareBuilder();
        result.hasChargingIgnOff = true;
        result.chargingIgnOff_ = value;
        return this;
      }
      public Builder ClearChargingIgnOff() {
        PrepareBuilder();
        result.hasChargingIgnOff = false;
        result.chargingIgnOff_ = 0;
        return this;
      }
      
      public bool HasSpeakerEnable {
        get { return result.hasSpeakerEnable; }
      }
      [global::System.CLSCompliant(false)]
      public uint SpeakerEnable {
        get { return result.SpeakerEnable; }
        set { SetSpeakerEnable(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSpeakerEnable(uint value) {
        PrepareBuilder();
        result.hasSpeakerEnable = true;
        result.speakerEnable_ = value;
        return this;
      }
      public Builder ClearSpeakerEnable() {
        PrepareBuilder();
        result.hasSpeakerEnable = false;
        result.speakerEnable_ = 0;
        return this;
      }
      
      public bool HasOdoRpmEnable {
        get { return result.hasOdoRpmEnable; }
      }
      [global::System.CLSCompliant(false)]
      public uint OdoRpmEnable {
        get { return result.OdoRpmEnable; }
        set { SetOdoRpmEnable(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetOdoRpmEnable(uint value) {
        PrepareBuilder();
        result.hasOdoRpmEnable = true;
        result.odoRpmEnable_ = value;
        return this;
      }
      public Builder ClearOdoRpmEnable() {
        PrepareBuilder();
        result.hasOdoRpmEnable = false;
        result.odoRpmEnable_ = 0;
        return this;
      }
      
      public bool HasOdoPulses {
        get { return result.hasOdoPulses; }
      }
      [global::System.CLSCompliant(false)]
      public uint OdoPulses {
        get { return result.OdoPulses; }
        set { SetOdoPulses(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetOdoPulses(uint value) {
        PrepareBuilder();
        result.hasOdoPulses = true;
        result.odoPulses_ = value;
        return this;
      }
      public Builder ClearOdoPulses() {
        PrepareBuilder();
        result.hasOdoPulses = false;
        result.odoPulses_ = 0;
        return this;
      }
      
      public bool HasRpmPulses {
        get { return result.hasRpmPulses; }
      }
      [global::System.CLSCompliant(false)]
      public uint RpmPulses {
        get { return result.RpmPulses; }
        set { SetRpmPulses(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetRpmPulses(uint value) {
        PrepareBuilder();
        result.hasRpmPulses = true;
        result.rpmPulses_ = value;
        return this;
      }
      public Builder ClearRpmPulses() {
        PrepareBuilder();
        result.hasRpmPulses = false;
        result.rpmPulses_ = 0;
        return this;
      }
      
      public bool HasRpmThreshold {
        get { return result.hasRpmThreshold; }
      }
      [global::System.CLSCompliant(false)]
      public uint RpmThreshold {
        get { return result.RpmThreshold; }
        set { SetRpmThreshold(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetRpmThreshold(uint value) {
        PrepareBuilder();
        result.hasRpmThreshold = true;
        result.rpmThreshold_ = value;
        return this;
      }
      public Builder ClearRpmThreshold() {
        PrepareBuilder();
        result.hasRpmThreshold = false;
        result.rpmThreshold_ = 0;
        return this;
      }
      
      public bool HasBuzzerIncomingCall {
        get { return result.hasBuzzerIncomingCall; }
      }
      [global::System.CLSCompliant(false)]
      public uint BuzzerIncomingCall {
        get { return result.BuzzerIncomingCall; }
        set { SetBuzzerIncomingCall(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetBuzzerIncomingCall(uint value) {
        PrepareBuilder();
        result.hasBuzzerIncomingCall = true;
        result.buzzerIncomingCall_ = value;
        return this;
      }
      public Builder ClearBuzzerIncomingCall() {
        PrepareBuilder();
        result.hasBuzzerIncomingCall = false;
        result.buzzerIncomingCall_ = 0;
        return this;
      }
      
      public bool HasCfgAlias {
        get { return result.hasCfgAlias; }
      }
      public string CfgAlias {
        get { return result.CfgAlias; }
        set { SetCfgAlias(value); }
      }
      public Builder SetCfgAlias(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCfgAlias = true;
        result.cfgAlias_ = value;
        return this;
      }
      public Builder ClearCfgAlias() {
        PrepareBuilder();
        result.hasCfgAlias = false;
        result.cfgAlias_ = "";
        return this;
      }
      
      public bool HasSpeakerVol {
        get { return result.hasSpeakerVol; }
      }
      [global::System.CLSCompliant(false)]
      public uint SpeakerVol {
        get { return result.SpeakerVol; }
        set { SetSpeakerVol(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSpeakerVol(uint value) {
        PrepareBuilder();
        result.hasSpeakerVol = true;
        result.speakerVol_ = value;
        return this;
      }
      public Builder ClearSpeakerVol() {
        PrepareBuilder();
        result.hasSpeakerVol = false;
        result.speakerVol_ = 0;
        return this;
      }
      
      public bool HasMakeCallTime {
        get { return result.hasMakeCallTime; }
      }
      [global::System.CLSCompliant(false)]
      public uint MakeCallTime {
        get { return result.MakeCallTime; }
        set { SetMakeCallTime(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetMakeCallTime(uint value) {
        PrepareBuilder();
        result.hasMakeCallTime = true;
        result.makeCallTime_ = value;
        return this;
      }
      public Builder ClearMakeCallTime() {
        PrepareBuilder();
        result.hasMakeCallTime = false;
        result.makeCallTime_ = 0;
        return this;
      }
      
      public bool HasRingMode {
        get { return result.hasRingMode; }
      }
      [global::System.CLSCompliant(false)]
      public uint RingMode {
        get { return result.RingMode; }
        set { SetRingMode(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetRingMode(uint value) {
        PrepareBuilder();
        result.hasRingMode = true;
        result.ringMode_ = value;
        return this;
      }
      public Builder ClearRingMode() {
        PrepareBuilder();
        result.hasRingMode = false;
        result.ringMode_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<string> IncomingNumberList {
        get { return PrepareBuilder().incomingNumber_; }
      }
      public int IncomingNumberCount {
        get { return result.IncomingNumberCount; }
      }
      public string GetIncomingNumber(int index) {
        return result.GetIncomingNumber(index);
      }
      public Builder SetIncomingNumber(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.incomingNumber_[index] = value;
        return this;
      }
      public Builder AddIncomingNumber(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.incomingNumber_.Add(value);
        return this;
      }
      public Builder AddRangeIncomingNumber(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.incomingNumber_.Add(values);
        return this;
      }
      public Builder ClearIncomingNumber() {
        PrepareBuilder();
        result.incomingNumber_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<string> OutgoingNumberList {
        get { return PrepareBuilder().outgoingNumber_; }
      }
      public int OutgoingNumberCount {
        get { return result.OutgoingNumberCount; }
      }
      public string GetOutgoingNumber(int index) {
        return result.GetOutgoingNumber(index);
      }
      public Builder SetOutgoingNumber(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.outgoingNumber_[index] = value;
        return this;
      }
      public Builder AddOutgoingNumber(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.outgoingNumber_.Add(value);
        return this;
      }
      public Builder AddRangeOutgoingNumber(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.outgoingNumber_.Add(values);
        return this;
      }
      public Builder ClearOutgoingNumber() {
        PrepareBuilder();
        result.outgoingNumber_.Clear();
        return this;
      }
      
      public bool HasIgnCode {
        get { return result.hasIgnCode; }
      }
      [global::System.CLSCompliant(false)]
      public uint IgnCode {
        get { return result.IgnCode; }
        set { SetIgnCode(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetIgnCode(uint value) {
        PrepareBuilder();
        result.hasIgnCode = true;
        result.ignCode_ = value;
        return this;
      }
      public Builder ClearIgnCode() {
        PrepareBuilder();
        result.hasIgnCode = false;
        result.ignCode_ = 0;
        return this;
      }
      
      public bool HasPanicAndDoorAsInput {
        get { return result.hasPanicAndDoorAsInput; }
      }
      [global::System.CLSCompliant(false)]
      public uint PanicAndDoorAsInput {
        get { return result.PanicAndDoorAsInput; }
        set { SetPanicAndDoorAsInput(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetPanicAndDoorAsInput(uint value) {
        PrepareBuilder();
        result.hasPanicAndDoorAsInput = true;
        result.panicAndDoorAsInput_ = value;
        return this;
      }
      public Builder ClearPanicAndDoorAsInput() {
        PrepareBuilder();
        result.hasPanicAndDoorAsInput = false;
        result.panicAndDoorAsInput_ = 0;
        return this;
      }
      
      public bool HasGpsFilter {
        get { return result.hasGpsFilter; }
      }
      [global::System.CLSCompliant(false)]
      public uint GpsFilter {
        get { return result.GpsFilter; }
        set { SetGpsFilter(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetGpsFilter(uint value) {
        PrepareBuilder();
        result.hasGpsFilter = true;
        result.gpsFilter_ = value;
        return this;
      }
      public Builder ClearGpsFilter() {
        PrepareBuilder();
        result.hasGpsFilter = false;
        result.gpsFilter_ = 0;
        return this;
      }
      
      public bool HasAgpsTimer {
        get { return result.hasAgpsTimer; }
      }
      [global::System.CLSCompliant(false)]
      public uint AgpsTimer {
        get { return result.AgpsTimer; }
        set { SetAgpsTimer(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetAgpsTimer(uint value) {
        PrepareBuilder();
        result.hasAgpsTimer = true;
        result.agpsTimer_ = value;
        return this;
      }
      public Builder ClearAgpsTimer() {
        PrepareBuilder();
        result.hasAgpsTimer = false;
        result.agpsTimer_ = 0;
        return this;
      }
      
      public bool HasZigLinkTimer {
        get { return result.hasZigLinkTimer; }
      }
      [global::System.CLSCompliant(false)]
      public uint ZigLinkTimer {
        get { return result.ZigLinkTimer; }
        set { SetZigLinkTimer(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetZigLinkTimer(uint value) {
        PrepareBuilder();
        result.hasZigLinkTimer = true;
        result.zigLinkTimer_ = value;
        return this;
      }
      public Builder ClearZigLinkTimer() {
        PrepareBuilder();
        result.hasZigLinkTimer = false;
        result.zigLinkTimer_ = 0;
        return this;
      }
      
      public bool HasNeutralMaxSpeed {
        get { return result.hasNeutralMaxSpeed; }
      }
      [global::System.CLSCompliant(false)]
      public uint NeutralMaxSpeed {
        get { return result.NeutralMaxSpeed; }
        set { SetNeutralMaxSpeed(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetNeutralMaxSpeed(uint value) {
        PrepareBuilder();
        result.hasNeutralMaxSpeed = true;
        result.neutralMaxSpeed_ = value;
        return this;
      }
      public Builder ClearNeutralMaxSpeed() {
        PrepareBuilder();
        result.hasNeutralMaxSpeed = false;
        result.neutralMaxSpeed_ = 0;
        return this;
      }
      
      public bool HasNeutralRpm {
        get { return result.hasNeutralRpm; }
      }
      [global::System.CLSCompliant(false)]
      public uint NeutralRpm {
        get { return result.NeutralRpm; }
        set { SetNeutralRpm(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetNeutralRpm(uint value) {
        PrepareBuilder();
        result.hasNeutralRpm = true;
        result.neutralRpm_ = value;
        return this;
      }
      public Builder ClearNeutralRpm() {
        PrepareBuilder();
        result.hasNeutralRpm = false;
        result.neutralRpm_ = 0;
        return this;
      }
      
      public bool HasNeutralExcessiveRpm {
        get { return result.hasNeutralExcessiveRpm; }
      }
      [global::System.CLSCompliant(false)]
      public uint NeutralExcessiveRpm {
        get { return result.NeutralExcessiveRpm; }
        set { SetNeutralExcessiveRpm(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetNeutralExcessiveRpm(uint value) {
        PrepareBuilder();
        result.hasNeutralExcessiveRpm = true;
        result.neutralExcessiveRpm_ = value;
        return this;
      }
      public Builder ClearNeutralExcessiveRpm() {
        PrepareBuilder();
        result.hasNeutralExcessiveRpm = false;
        result.neutralExcessiveRpm_ = 0;
        return this;
      }
      
      public bool HasGpsFailureDebounce {
        get { return result.hasGpsFailureDebounce; }
      }
      [global::System.CLSCompliant(false)]
      public uint GpsFailureDebounce {
        get { return result.GpsFailureDebounce; }
        set { SetGpsFailureDebounce(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetGpsFailureDebounce(uint value) {
        PrepareBuilder();
        result.hasGpsFailureDebounce = true;
        result.gpsFailureDebounce_ = value;
        return this;
      }
      public Builder ClearGpsFailureDebounce() {
        PrepareBuilder();
        result.hasGpsFailureDebounce = false;
        result.gpsFailureDebounce_ = 0;
        return this;
      }
      
      public bool HasLinkFailOutput {
        get { return result.hasLinkFailOutput; }
      }
      [global::System.CLSCompliant(false)]
      public uint LinkFailOutput {
        get { return result.LinkFailOutput; }
        set { SetLinkFailOutput(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetLinkFailOutput(uint value) {
        PrepareBuilder();
        result.hasLinkFailOutput = true;
        result.linkFailOutput_ = value;
        return this;
      }
      public Builder ClearLinkFailOutput() {
        PrepareBuilder();
        result.hasLinkFailOutput = false;
        result.linkFailOutput_ = 0;
        return this;
      }
      
      public bool HasExceededMaxSpeedOutput {
        get { return result.hasExceededMaxSpeedOutput; }
      }
      [global::System.CLSCompliant(false)]
      public uint ExceededMaxSpeedOutput {
        get { return result.ExceededMaxSpeedOutput; }
        set { SetExceededMaxSpeedOutput(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetExceededMaxSpeedOutput(uint value) {
        PrepareBuilder();
        result.hasExceededMaxSpeedOutput = true;
        result.exceededMaxSpeedOutput_ = value;
        return this;
      }
      public Builder ClearExceededMaxSpeedOutput() {
        PrepareBuilder();
        result.hasExceededMaxSpeedOutput = false;
        result.exceededMaxSpeedOutput_ = 0;
        return this;
      }
      
      public bool HasJammingOutput {
        get { return result.hasJammingOutput; }
      }
      [global::System.CLSCompliant(false)]
      public uint JammingOutput {
        get { return result.JammingOutput; }
        set { SetJammingOutput(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetJammingOutput(uint value) {
        PrepareBuilder();
        result.hasJammingOutput = true;
        result.jammingOutput_ = value;
        return this;
      }
      public Builder ClearJammingOutput() {
        PrepareBuilder();
        result.hasJammingOutput = false;
        result.jammingOutput_ = 0;
        return this;
      }
      
      public bool HasJammingAlert {
        get { return result.hasJammingAlert; }
      }
      [global::System.CLSCompliant(false)]
      public uint JammingAlert {
        get { return result.JammingAlert; }
        set { SetJammingAlert(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetJammingAlert(uint value) {
        PrepareBuilder();
        result.hasJammingAlert = true;
        result.jammingAlert_ = value;
        return this;
      }
      public Builder ClearJammingAlert() {
        PrepareBuilder();
        result.hasJammingAlert = false;
        result.jammingAlert_ = 0;
        return this;
      }
      
      public bool HasSirenActivate {
        get { return result.hasSirenActivate; }
      }
      [global::System.CLSCompliant(false)]
      public uint SirenActivate {
        get { return result.SirenActivate; }
        set { SetSirenActivate(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSirenActivate(uint value) {
        PrepareBuilder();
        result.hasSirenActivate = true;
        result.sirenActivate_ = value;
        return this;
      }
      public Builder ClearSirenActivate() {
        PrepareBuilder();
        result.hasSirenActivate = false;
        result.sirenActivate_ = 0;
        return this;
      }
      
      public bool HasSirenDeactivate {
        get { return result.hasSirenDeactivate; }
      }
      [global::System.CLSCompliant(false)]
      public uint SirenDeactivate {
        get { return result.SirenDeactivate; }
        set { SetSirenDeactivate(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSirenDeactivate(uint value) {
        PrepareBuilder();
        result.hasSirenDeactivate = true;
        result.sirenDeactivate_ = value;
        return this;
      }
      public Builder ClearSirenDeactivate() {
        PrepareBuilder();
        result.hasSirenDeactivate = false;
        result.sirenDeactivate_ = 0;
        return this;
      }
      
      public bool HasSirenCycles {
        get { return result.hasSirenCycles; }
      }
      [global::System.CLSCompliant(false)]
      public uint SirenCycles {
        get { return result.SirenCycles; }
        set { SetSirenCycles(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSirenCycles(uint value) {
        PrepareBuilder();
        result.hasSirenCycles = true;
        result.sirenCycles_ = value;
        return this;
      }
      public Builder ClearSirenCycles() {
        PrepareBuilder();
        result.hasSirenCycles = false;
        result.sirenCycles_ = 0;
        return this;
      }
      
      public bool HasOutputForSiren {
        get { return result.hasOutputForSiren; }
      }
      [global::System.CLSCompliant(false)]
      public uint OutputForSiren {
        get { return result.OutputForSiren; }
        set { SetOutputForSiren(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetOutputForSiren(uint value) {
        PrepareBuilder();
        result.hasOutputForSiren = true;
        result.outputForSiren_ = value;
        return this;
      }
      public Builder ClearOutputForSiren() {
        PrepareBuilder();
        result.hasOutputForSiren = false;
        result.outputForSiren_ = 0;
        return this;
      }
      
      public bool HasDistanceThreshold {
        get { return result.hasDistanceThreshold; }
      }
      [global::System.CLSCompliant(false)]
      public uint DistanceThreshold {
        get { return result.DistanceThreshold; }
        set { SetDistanceThreshold(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetDistanceThreshold(uint value) {
        PrepareBuilder();
        result.hasDistanceThreshold = true;
        result.distanceThreshold_ = value;
        return this;
      }
      public Builder ClearDistanceThreshold() {
        PrepareBuilder();
        result.hasDistanceThreshold = false;
        result.distanceThreshold_ = 0;
        return this;
      }
      
      public bool HasDirectionThreshold {
        get { return result.hasDirectionThreshold; }
      }
      [global::System.CLSCompliant(false)]
      public uint DirectionThreshold {
        get { return result.DirectionThreshold; }
        set { SetDirectionThreshold(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetDirectionThreshold(uint value) {
        PrepareBuilder();
        result.hasDirectionThreshold = true;
        result.directionThreshold_ = value;
        return this;
      }
      public Builder ClearDirectionThreshold() {
        PrepareBuilder();
        result.hasDirectionThreshold = false;
        result.directionThreshold_ = 0;
        return this;
      }
      
      public bool HasIpPriority {
        get { return result.hasIpPriority; }
      }
      [global::System.CLSCompliant(false)]
      public uint IpPriority {
        get { return result.IpPriority; }
        set { SetIpPriority(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetIpPriority(uint value) {
        PrepareBuilder();
        result.hasIpPriority = true;
        result.ipPriority_ = value;
        return this;
      }
      public Builder ClearIpPriority() {
        PrepareBuilder();
        result.hasIpPriority = false;
        result.ipPriority_ = 0;
        return this;
      }
      
      public bool HasLinkFailTimes {
        get { return result.hasLinkFailTimes; }
      }
      [global::System.CLSCompliant(false)]
      public uint LinkFailTimes {
        get { return result.LinkFailTimes; }
        set { SetLinkFailTimes(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetLinkFailTimes(uint value) {
        PrepareBuilder();
        result.hasLinkFailTimes = true;
        result.linkFailTimes_ = value;
        return this;
      }
      public Builder ClearLinkFailTimes() {
        PrepareBuilder();
        result.hasLinkFailTimes = false;
        result.linkFailTimes_ = 0;
        return this;
      }
      
      public bool HasPacketEncryptKey {
        get { return result.hasPacketEncryptKey; }
      }
      public string PacketEncryptKey {
        get { return result.PacketEncryptKey; }
        set { SetPacketEncryptKey(value); }
      }
      public Builder SetPacketEncryptKey(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPacketEncryptKey = true;
        result.packetEncryptKey_ = value;
        return this;
      }
      public Builder ClearPacketEncryptKey() {
        PrepareBuilder();
        result.hasPacketEncryptKey = false;
        result.packetEncryptKey_ = "";
        return this;
      }
      
      public bool HasAlertTimer {
        get { return result.hasAlertTimer; }
      }
      [global::System.CLSCompliant(false)]
      public uint AlertTimer {
        get { return result.AlertTimer; }
        set { SetAlertTimer(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetAlertTimer(uint value) {
        PrepareBuilder();
        result.hasAlertTimer = true;
        result.alertTimer_ = value;
        return this;
      }
      public Builder ClearAlertTimer() {
        PrepareBuilder();
        result.hasAlertTimer = false;
        result.alertTimer_ = 0;
        return this;
      }
      
      public bool HasDebounceRolling {
        get { return result.hasDebounceRolling; }
      }
      [global::System.CLSCompliant(false)]
      public uint DebounceRolling {
        get { return result.DebounceRolling; }
        set { SetDebounceRolling(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetDebounceRolling(uint value) {
        PrepareBuilder();
        result.hasDebounceRolling = true;
        result.debounceRolling_ = value;
        return this;
      }
      public Builder ClearDebounceRolling() {
        PrepareBuilder();
        result.hasDebounceRolling = false;
        result.debounceRolling_ = 0;
        return this;
      }
      
      public bool HasDebounceSide {
        get { return result.hasDebounceSide; }
      }
      [global::System.CLSCompliant(false)]
      public uint DebounceSide {
        get { return result.DebounceSide; }
        set { SetDebounceSide(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetDebounceSide(uint value) {
        PrepareBuilder();
        result.hasDebounceSide = true;
        result.debounceSide_ = value;
        return this;
      }
      public Builder ClearDebounceSide() {
        PrepareBuilder();
        result.hasDebounceSide = false;
        result.debounceSide_ = 0;
        return this;
      }
      
      public bool HasDebounceShock {
        get { return result.hasDebounceShock; }
      }
      [global::System.CLSCompliant(false)]
      public uint DebounceShock {
        get { return result.DebounceShock; }
        set { SetDebounceShock(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetDebounceShock(uint value) {
        PrepareBuilder();
        result.hasDebounceShock = true;
        result.debounceShock_ = value;
        return this;
      }
      public Builder ClearDebounceShock() {
        PrepareBuilder();
        result.hasDebounceShock = false;
        result.debounceShock_ = 0;
        return this;
      }
      
      public bool HasGpsAndOdometerSpeed {
        get { return result.hasGpsAndOdometerSpeed; }
      }
      [global::System.CLSCompliant(false)]
      public uint GpsAndOdometerSpeed {
        get { return result.GpsAndOdometerSpeed; }
        set { SetGpsAndOdometerSpeed(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetGpsAndOdometerSpeed(uint value) {
        PrepareBuilder();
        result.hasGpsAndOdometerSpeed = true;
        result.gpsAndOdometerSpeed_ = value;
        return this;
      }
      public Builder ClearGpsAndOdometerSpeed() {
        PrepareBuilder();
        result.hasGpsAndOdometerSpeed = false;
        result.gpsAndOdometerSpeed_ = 0;
        return this;
      }
      
      public bool HasParkingOutput {
        get { return result.hasParkingOutput; }
      }
      [global::System.CLSCompliant(false)]
      public uint ParkingOutput {
        get { return result.ParkingOutput; }
        set { SetParkingOutput(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetParkingOutput(uint value) {
        PrepareBuilder();
        result.hasParkingOutput = true;
        result.parkingOutput_ = value;
        return this;
      }
      public Builder ClearParkingOutput() {
        PrepareBuilder();
        result.hasParkingOutput = false;
        result.parkingOutput_ = 0;
        return this;
      }
      
      public bool HasRollingOutput {
        get { return result.hasRollingOutput; }
      }
      [global::System.CLSCompliant(false)]
      public uint RollingOutput {
        get { return result.RollingOutput; }
        set { SetRollingOutput(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetRollingOutput(uint value) {
        PrepareBuilder();
        result.hasRollingOutput = true;
        result.rollingOutput_ = value;
        return this;
      }
      public Builder ClearRollingOutput() {
        PrepareBuilder();
        result.hasRollingOutput = false;
        result.rollingOutput_ = 0;
        return this;
      }
      
      public bool HasSideOutput {
        get { return result.hasSideOutput; }
      }
      [global::System.CLSCompliant(false)]
      public uint SideOutput {
        get { return result.SideOutput; }
        set { SetSideOutput(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSideOutput(uint value) {
        PrepareBuilder();
        result.hasSideOutput = true;
        result.sideOutput_ = value;
        return this;
      }
      public Builder ClearSideOutput() {
        PrepareBuilder();
        result.hasSideOutput = false;
        result.sideOutput_ = 0;
        return this;
      }
      
      public bool HasShockOutput {
        get { return result.hasShockOutput; }
      }
      [global::System.CLSCompliant(false)]
      public uint ShockOutput {
        get { return result.ShockOutput; }
        set { SetShockOutput(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetShockOutput(uint value) {
        PrepareBuilder();
        result.hasShockOutput = true;
        result.shockOutput_ = value;
        return this;
      }
      public Builder ClearShockOutput() {
        PrepareBuilder();
        result.hasShockOutput = false;
        result.shockOutput_ = 0;
        return this;
      }
      
      public bool HasSendingOrder {
        get { return result.hasSendingOrder; }
      }
      [global::System.CLSCompliant(false)]
      public uint SendingOrder {
        get { return result.SendingOrder; }
        set { SetSendingOrder(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSendingOrder(uint value) {
        PrepareBuilder();
        result.hasSendingOrder = true;
        result.sendingOrder_ = value;
        return this;
      }
      public Builder ClearSendingOrder() {
        PrepareBuilder();
        result.hasSendingOrder = false;
        result.sendingOrder_ = 0;
        return this;
      }
      
      public bool HasAllowSetApnImxt {
        get { return result.hasAllowSetApnImxt; }
      }
      [global::System.CLSCompliant(false)]
      public uint AllowSetApnImxt {
        get { return result.AllowSetApnImxt; }
        set { SetAllowSetApnImxt(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetAllowSetApnImxt(uint value) {
        PrepareBuilder();
        result.hasAllowSetApnImxt = true;
        result.allowSetApnImxt_ = value;
        return this;
      }
      public Builder ClearAllowSetApnImxt() {
        PrepareBuilder();
        result.hasAllowSetApnImxt = false;
        result.allowSetApnImxt_ = 0;
        return this;
      }
      
      public bool HasTagInterval {
        get { return result.hasTagInterval; }
      }
      [global::System.CLSCompliant(false)]
      public uint TagInterval {
        get { return result.TagInterval; }
        set { SetTagInterval(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetTagInterval(uint value) {
        PrepareBuilder();
        result.hasTagInterval = true;
        result.tagInterval_ = value;
        return this;
      }
      public Builder ClearTagInterval() {
        PrepareBuilder();
        result.hasTagInterval = false;
        result.tagInterval_ = 0;
        return this;
      }
      
      public bool HasPanicVia {
        get { return result.hasPanicVia; }
      }
      [global::System.CLSCompliant(false)]
      public uint PanicVia {
        get { return result.PanicVia; }
        set { SetPanicVia(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetPanicVia(uint value) {
        PrepareBuilder();
        result.hasPanicVia = true;
        result.panicVia_ = value;
        return this;
      }
      public Builder ClearPanicVia() {
        PrepareBuilder();
        result.hasPanicVia = false;
        result.panicVia_ = 0;
        return this;
      }
      
      public bool HasTagFailOutput {
        get { return result.hasTagFailOutput; }
      }
      [global::System.CLSCompliant(false)]
      public uint TagFailOutput {
        get { return result.TagFailOutput; }
        set { SetTagFailOutput(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetTagFailOutput(uint value) {
        PrepareBuilder();
        result.hasTagFailOutput = true;
        result.tagFailOutput_ = value;
        return this;
      }
      public Builder ClearTagFailOutput() {
        PrepareBuilder();
        result.hasTagFailOutput = false;
        result.tagFailOutput_ = 0;
        return this;
      }
      
      public bool HasEnableApSetOutput {
        get { return result.hasEnableApSetOutput; }
      }
      [global::System.CLSCompliant(false)]
      public uint EnableApSetOutput {
        get { return result.EnableApSetOutput; }
        set { SetEnableApSetOutput(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetEnableApSetOutput(uint value) {
        PrepareBuilder();
        result.hasEnableApSetOutput = true;
        result.enableApSetOutput_ = value;
        return this;
      }
      public Builder ClearEnableApSetOutput() {
        PrepareBuilder();
        result.hasEnableApSetOutput = false;
        result.enableApSetOutput_ = 0;
        return this;
      }
      
      public bool HasDebounceSpeedNeutral {
        get { return result.hasDebounceSpeedNeutral; }
      }
      [global::System.CLSCompliant(false)]
      public uint DebounceSpeedNeutral {
        get { return result.DebounceSpeedNeutral; }
        set { SetDebounceSpeedNeutral(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetDebounceSpeedNeutral(uint value) {
        PrepareBuilder();
        result.hasDebounceSpeedNeutral = true;
        result.debounceSpeedNeutral_ = value;
        return this;
      }
      public Builder ClearDebounceSpeedNeutral() {
        PrepareBuilder();
        result.hasDebounceSpeedNeutral = false;
        result.debounceSpeedNeutral_ = 0;
        return this;
      }
      
      public bool HasDebounceMaxRpm {
        get { return result.hasDebounceMaxRpm; }
      }
      [global::System.CLSCompliant(false)]
      public uint DebounceMaxRpm {
        get { return result.DebounceMaxRpm; }
        set { SetDebounceMaxRpm(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetDebounceMaxRpm(uint value) {
        PrepareBuilder();
        result.hasDebounceMaxRpm = true;
        result.debounceMaxRpm_ = value;
        return this;
      }
      public Builder ClearDebounceMaxRpm() {
        PrepareBuilder();
        result.hasDebounceMaxRpm = false;
        result.debounceMaxRpm_ = 0;
        return this;
      }
      
      public bool HasDebounceMaxRpmNeutral {
        get { return result.hasDebounceMaxRpmNeutral; }
      }
      [global::System.CLSCompliant(false)]
      public uint DebounceMaxRpmNeutral {
        get { return result.DebounceMaxRpmNeutral; }
        set { SetDebounceMaxRpmNeutral(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetDebounceMaxRpmNeutral(uint value) {
        PrepareBuilder();
        result.hasDebounceMaxRpmNeutral = true;
        result.debounceMaxRpmNeutral_ = value;
        return this;
      }
      public Builder ClearDebounceMaxRpmNeutral() {
        PrepareBuilder();
        result.hasDebounceMaxRpmNeutral = false;
        result.debounceMaxRpmNeutral_ = 0;
        return this;
      }
      
      public bool HasParkingOutputActive {
        get { return result.hasParkingOutputActive; }
      }
      [global::System.CLSCompliant(false)]
      public uint ParkingOutputActive {
        get { return result.ParkingOutputActive; }
        set { SetParkingOutputActive(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetParkingOutputActive(uint value) {
        PrepareBuilder();
        result.hasParkingOutputActive = true;
        result.parkingOutputActive_ = value;
        return this;
      }
      public Builder ClearParkingOutputActive() {
        PrepareBuilder();
        result.hasParkingOutputActive = false;
        result.parkingOutputActive_ = 0;
        return this;
      }
      
      public bool HasParkingOutputDeactive {
        get { return result.hasParkingOutputDeactive; }
      }
      [global::System.CLSCompliant(false)]
      public uint ParkingOutputDeactive {
        get { return result.ParkingOutputDeactive; }
        set { SetParkingOutputDeactive(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetParkingOutputDeactive(uint value) {
        PrepareBuilder();
        result.hasParkingOutputDeactive = true;
        result.parkingOutputDeactive_ = value;
        return this;
      }
      public Builder ClearParkingOutputDeactive() {
        PrepareBuilder();
        result.hasParkingOutputDeactive = false;
        result.parkingOutputDeactive_ = 0;
        return this;
      }
      
      public bool HasParkingOutputCircle {
        get { return result.hasParkingOutputCircle; }
      }
      [global::System.CLSCompliant(false)]
      public uint ParkingOutputCircle {
        get { return result.ParkingOutputCircle; }
        set { SetParkingOutputCircle(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetParkingOutputCircle(uint value) {
        PrepareBuilder();
        result.hasParkingOutputCircle = true;
        result.parkingOutputCircle_ = value;
        return this;
      }
      public Builder ClearParkingOutputCircle() {
        PrepareBuilder();
        result.hasParkingOutputCircle = false;
        result.parkingOutputCircle_ = 0;
        return this;
      }
      
      public bool HasParkingOutputInterval {
        get { return result.hasParkingOutputInterval; }
      }
      [global::System.CLSCompliant(false)]
      public uint ParkingOutputInterval {
        get { return result.ParkingOutputInterval; }
        set { SetParkingOutputInterval(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetParkingOutputInterval(uint value) {
        PrepareBuilder();
        result.hasParkingOutputInterval = true;
        result.parkingOutputInterval_ = value;
        return this;
      }
      public Builder ClearParkingOutputInterval() {
        PrepareBuilder();
        result.hasParkingOutputInterval = false;
        result.parkingOutputInterval_ = 0;
        return this;
      }
      
      public bool HasGpsForAlert {
        get { return result.hasGpsForAlert; }
      }
      [global::System.CLSCompliant(false)]
      public uint GpsForAlert {
        get { return result.GpsForAlert; }
        set { SetGpsForAlert(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetGpsForAlert(uint value) {
        PrepareBuilder();
        result.hasGpsForAlert = true;
        result.gpsForAlert_ = value;
        return this;
      }
      public Builder ClearGpsForAlert() {
        PrepareBuilder();
        result.hasGpsForAlert = false;
        result.gpsForAlert_ = 0;
        return this;
      }
      
      public bool HasRpmFactor {
        get { return result.hasRpmFactor; }
      }
      [global::System.CLSCompliant(false)]
      public uint RpmFactor {
        get { return result.RpmFactor; }
        set { SetRpmFactor(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetRpmFactor(uint value) {
        PrepareBuilder();
        result.hasRpmFactor = true;
        result.rpmFactor_ = value;
        return this;
      }
      public Builder ClearRpmFactor() {
        PrepareBuilder();
        result.hasRpmFactor = false;
        result.rpmFactor_ = 0;
        return this;
      }
      
      public bool HasGsensorDebounceFactor {
        get { return result.hasGsensorDebounceFactor; }
      }
      [global::System.CLSCompliant(false)]
      public uint GsensorDebounceFactor {
        get { return result.GsensorDebounceFactor; }
        set { SetGsensorDebounceFactor(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetGsensorDebounceFactor(uint value) {
        PrepareBuilder();
        result.hasGsensorDebounceFactor = true;
        result.gsensorDebounceFactor_ = value;
        return this;
      }
      public Builder ClearGsensorDebounceFactor() {
        PrepareBuilder();
        result.hasGsensorDebounceFactor = false;
        result.gsensorDebounceFactor_ = 0;
        return this;
      }
      
      public bool HasRpmTrigger {
        get { return result.hasRpmTrigger; }
      }
      [global::System.CLSCompliant(false)]
      public uint RpmTrigger {
        get { return result.RpmTrigger; }
        set { SetRpmTrigger(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetRpmTrigger(uint value) {
        PrepareBuilder();
        result.hasRpmTrigger = true;
        result.rpmTrigger_ = value;
        return this;
      }
      public Builder ClearRpmTrigger() {
        PrepareBuilder();
        result.hasRpmTrigger = false;
        result.rpmTrigger_ = 0;
        return this;
      }
      
      public bool HasRpmEventOutput1 {
        get { return result.hasRpmEventOutput1; }
      }
      [global::System.CLSCompliant(false)]
      public uint RpmEventOutput1 {
        get { return result.RpmEventOutput1; }
        set { SetRpmEventOutput1(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetRpmEventOutput1(uint value) {
        PrepareBuilder();
        result.hasRpmEventOutput1 = true;
        result.rpmEventOutput1_ = value;
        return this;
      }
      public Builder ClearRpmEventOutput1() {
        PrepareBuilder();
        result.hasRpmEventOutput1 = false;
        result.rpmEventOutput1_ = 0;
        return this;
      }
      
      public bool HasRpmEventOutput2 {
        get { return result.hasRpmEventOutput2; }
      }
      [global::System.CLSCompliant(false)]
      public uint RpmEventOutput2 {
        get { return result.RpmEventOutput2; }
        set { SetRpmEventOutput2(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetRpmEventOutput2(uint value) {
        PrepareBuilder();
        result.hasRpmEventOutput2 = true;
        result.rpmEventOutput2_ = value;
        return this;
      }
      public Builder ClearRpmEventOutput2() {
        PrepareBuilder();
        result.hasRpmEventOutput2 = false;
        result.rpmEventOutput2_ = 0;
        return this;
      }
      
      public bool HasRpmEventOutput3 {
        get { return result.hasRpmEventOutput3; }
      }
      [global::System.CLSCompliant(false)]
      public uint RpmEventOutput3 {
        get { return result.RpmEventOutput3; }
        set { SetRpmEventOutput3(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetRpmEventOutput3(uint value) {
        PrepareBuilder();
        result.hasRpmEventOutput3 = true;
        result.rpmEventOutput3_ = value;
        return this;
      }
      public Builder ClearRpmEventOutput3() {
        PrepareBuilder();
        result.hasRpmEventOutput3 = false;
        result.rpmEventOutput3_ = 0;
        return this;
      }
      
      public bool HasImproperMovingOutput {
        get { return result.hasImproperMovingOutput; }
      }
      [global::System.CLSCompliant(false)]
      public uint ImproperMovingOutput {
        get { return result.ImproperMovingOutput; }
        set { SetImproperMovingOutput(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetImproperMovingOutput(uint value) {
        PrepareBuilder();
        result.hasImproperMovingOutput = true;
        result.improperMovingOutput_ = value;
        return this;
      }
      public Builder ClearImproperMovingOutput() {
        PrepareBuilder();
        result.hasImproperMovingOutput = false;
        result.improperMovingOutput_ = 0;
        return this;
      }
      
      public bool HasAllowAnyTagAcc {
        get { return result.hasAllowAnyTagAcc; }
      }
      [global::System.CLSCompliant(false)]
      public uint AllowAnyTagAcc {
        get { return result.AllowAnyTagAcc; }
        set { SetAllowAnyTagAcc(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetAllowAnyTagAcc(uint value) {
        PrepareBuilder();
        result.hasAllowAnyTagAcc = true;
        result.allowAnyTagAcc_ = value;
        return this;
      }
      public Builder ClearAllowAnyTagAcc() {
        PrepareBuilder();
        result.hasAllowAnyTagAcc = false;
        result.allowAnyTagAcc_ = 0;
        return this;
      }
      
      public bool HasLongTimerNoMoving {
        get { return result.hasLongTimerNoMoving; }
      }
      [global::System.CLSCompliant(false)]
      public uint LongTimerNoMoving {
        get { return result.LongTimerNoMoving; }
        set { SetLongTimerNoMoving(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetLongTimerNoMoving(uint value) {
        PrepareBuilder();
        result.hasLongTimerNoMoving = true;
        result.longTimerNoMoving_ = value;
        return this;
      }
      public Builder ClearLongTimerNoMoving() {
        PrepareBuilder();
        result.hasLongTimerNoMoving = false;
        result.longTimerNoMoving_ = 0;
        return this;
      }
    }
    static mxt1xx_u_other_info() {
      object.ReferenceEquals(global::maxtrack.pb.mxt1xx.Mxt1Xx.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mxt1xx_u_ver_info : pb::GeneratedMessage<mxt1xx_u_ver_info, mxt1xx_u_ver_info.Builder> {
    private mxt1xx_u_ver_info() { }
    private static readonly mxt1xx_u_ver_info defaultInstance = new mxt1xx_u_ver_info().MakeReadOnly();
    private static readonly string[] _mxt1XxUVerInfoFieldNames = new string[] { "app_version", "flags", "imei", "imsi", "modem_version", "pin_status", "serial" };
    private static readonly uint[] _mxt1XxUVerInfoFieldTags = new uint[] { 26, 40, 58, 50, 18, 32, 8 };
    public static mxt1xx_u_ver_info DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mxt1xx_u_ver_info DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mxt1xx_u_ver_info ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_ver_info__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mxt1xx_u_ver_info, mxt1xx_u_ver_info.Builder> InternalFieldAccessors {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_ver_info__FieldAccessorTable; }
    }
    
    public const int SerialFieldNumber = 1;
    private bool hasSerial;
    private uint serial_;
    public bool HasSerial {
      get { return hasSerial; }
    }
    [global::System.CLSCompliant(false)]
    public uint Serial {
      get { return serial_; }
    }
    
    public const int ModemVersionFieldNumber = 2;
    private bool hasModemVersion;
    private string modemVersion_ = "";
    public bool HasModemVersion {
      get { return hasModemVersion; }
    }
    public string ModemVersion {
      get { return modemVersion_; }
    }
    
    public const int AppVersionFieldNumber = 3;
    private bool hasAppVersion;
    private string appVersion_ = "";
    public bool HasAppVersion {
      get { return hasAppVersion; }
    }
    public string AppVersion {
      get { return appVersion_; }
    }
    
    public const int PinStatusFieldNumber = 4;
    private bool hasPinStatus;
    private uint pinStatus_;
    public bool HasPinStatus {
      get { return hasPinStatus; }
    }
    [global::System.CLSCompliant(false)]
    public uint PinStatus {
      get { return pinStatus_; }
    }
    
    public const int FlagsFieldNumber = 5;
    private bool hasFlags;
    private uint flags_;
    public bool HasFlags {
      get { return hasFlags; }
    }
    [global::System.CLSCompliant(false)]
    public uint Flags {
      get { return flags_; }
    }
    
    public const int ImsiFieldNumber = 6;
    private bool hasImsi;
    private string imsi_ = "";
    public bool HasImsi {
      get { return hasImsi; }
    }
    public string Imsi {
      get { return imsi_; }
    }
    
    public const int ImeiFieldNumber = 7;
    private bool hasImei;
    private string imei_ = "";
    public bool HasImei {
      get { return hasImei; }
    }
    public string Imei {
      get { return imei_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSerial) return false;
        if (!hasModemVersion) return false;
        if (!hasAppVersion) return false;
        if (!hasPinStatus) return false;
        if (!hasFlags) return false;
        if (!hasImsi) return false;
        if (!hasImei) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mxt1XxUVerInfoFieldNames;
      if (hasSerial) {
        output.WriteUInt32(1, field_names[6], Serial);
      }
      if (hasModemVersion) {
        output.WriteString(2, field_names[4], ModemVersion);
      }
      if (hasAppVersion) {
        output.WriteString(3, field_names[0], AppVersion);
      }
      if (hasPinStatus) {
        output.WriteUInt32(4, field_names[5], PinStatus);
      }
      if (hasFlags) {
        output.WriteUInt32(5, field_names[1], Flags);
      }
      if (hasImsi) {
        output.WriteString(6, field_names[3], Imsi);
      }
      if (hasImei) {
        output.WriteString(7, field_names[2], Imei);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasSerial) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, Serial);
      }
      if (hasModemVersion) {
        size += pb::CodedOutputStream.ComputeStringSize(2, ModemVersion);
      }
      if (hasAppVersion) {
        size += pb::CodedOutputStream.ComputeStringSize(3, AppVersion);
      }
      if (hasPinStatus) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, PinStatus);
      }
      if (hasFlags) {
        size += pb::CodedOutputStream.ComputeUInt32Size(5, Flags);
      }
      if (hasImsi) {
        size += pb::CodedOutputStream.ComputeStringSize(6, Imsi);
      }
      if (hasImei) {
        size += pb::CodedOutputStream.ComputeStringSize(7, Imei);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mxt1xx_u_ver_info ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_ver_info ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_ver_info ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_ver_info ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_ver_info ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_ver_info ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_ver_info ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mxt1xx_u_ver_info ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mxt1xx_u_ver_info ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_ver_info ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mxt1xx_u_ver_info MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mxt1xx_u_ver_info prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mxt1xx_u_ver_info, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mxt1xx_u_ver_info cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mxt1xx_u_ver_info result;
      
      private mxt1xx_u_ver_info PrepareBuilder() {
        if (resultIsReadOnly) {
          mxt1xx_u_ver_info original = result;
          result = new mxt1xx_u_ver_info();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mxt1xx_u_ver_info MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_ver_info.Descriptor; }
      }
      
      public override mxt1xx_u_ver_info DefaultInstanceForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_ver_info.DefaultInstance; }
      }
      
      public override mxt1xx_u_ver_info BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mxt1xx_u_ver_info) {
          return MergeFrom((mxt1xx_u_ver_info) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mxt1xx_u_ver_info other) {
        if (other == global::maxtrack.pb.mxt1xx.mxt1xx_u_ver_info.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSerial) {
          Serial = other.Serial;
        }
        if (other.HasModemVersion) {
          ModemVersion = other.ModemVersion;
        }
        if (other.HasAppVersion) {
          AppVersion = other.AppVersion;
        }
        if (other.HasPinStatus) {
          PinStatus = other.PinStatus;
        }
        if (other.HasFlags) {
          Flags = other.Flags;
        }
        if (other.HasImsi) {
          Imsi = other.Imsi;
        }
        if (other.HasImei) {
          Imei = other.Imei;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mxt1XxUVerInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mxt1XxUVerInfoFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasSerial = input.ReadUInt32(ref result.serial_);
              break;
            }
            case 18: {
              result.hasModemVersion = input.ReadString(ref result.modemVersion_);
              break;
            }
            case 26: {
              result.hasAppVersion = input.ReadString(ref result.appVersion_);
              break;
            }
            case 32: {
              result.hasPinStatus = input.ReadUInt32(ref result.pinStatus_);
              break;
            }
            case 40: {
              result.hasFlags = input.ReadUInt32(ref result.flags_);
              break;
            }
            case 50: {
              result.hasImsi = input.ReadString(ref result.imsi_);
              break;
            }
            case 58: {
              result.hasImei = input.ReadString(ref result.imei_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSerial {
        get { return result.hasSerial; }
      }
      [global::System.CLSCompliant(false)]
      public uint Serial {
        get { return result.Serial; }
        set { SetSerial(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSerial(uint value) {
        PrepareBuilder();
        result.hasSerial = true;
        result.serial_ = value;
        return this;
      }
      public Builder ClearSerial() {
        PrepareBuilder();
        result.hasSerial = false;
        result.serial_ = 0;
        return this;
      }
      
      public bool HasModemVersion {
        get { return result.hasModemVersion; }
      }
      public string ModemVersion {
        get { return result.ModemVersion; }
        set { SetModemVersion(value); }
      }
      public Builder SetModemVersion(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasModemVersion = true;
        result.modemVersion_ = value;
        return this;
      }
      public Builder ClearModemVersion() {
        PrepareBuilder();
        result.hasModemVersion = false;
        result.modemVersion_ = "";
        return this;
      }
      
      public bool HasAppVersion {
        get { return result.hasAppVersion; }
      }
      public string AppVersion {
        get { return result.AppVersion; }
        set { SetAppVersion(value); }
      }
      public Builder SetAppVersion(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAppVersion = true;
        result.appVersion_ = value;
        return this;
      }
      public Builder ClearAppVersion() {
        PrepareBuilder();
        result.hasAppVersion = false;
        result.appVersion_ = "";
        return this;
      }
      
      public bool HasPinStatus {
        get { return result.hasPinStatus; }
      }
      [global::System.CLSCompliant(false)]
      public uint PinStatus {
        get { return result.PinStatus; }
        set { SetPinStatus(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetPinStatus(uint value) {
        PrepareBuilder();
        result.hasPinStatus = true;
        result.pinStatus_ = value;
        return this;
      }
      public Builder ClearPinStatus() {
        PrepareBuilder();
        result.hasPinStatus = false;
        result.pinStatus_ = 0;
        return this;
      }
      
      public bool HasFlags {
        get { return result.hasFlags; }
      }
      [global::System.CLSCompliant(false)]
      public uint Flags {
        get { return result.Flags; }
        set { SetFlags(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetFlags(uint value) {
        PrepareBuilder();
        result.hasFlags = true;
        result.flags_ = value;
        return this;
      }
      public Builder ClearFlags() {
        PrepareBuilder();
        result.hasFlags = false;
        result.flags_ = 0;
        return this;
      }
      
      public bool HasImsi {
        get { return result.hasImsi; }
      }
      public string Imsi {
        get { return result.Imsi; }
        set { SetImsi(value); }
      }
      public Builder SetImsi(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasImsi = true;
        result.imsi_ = value;
        return this;
      }
      public Builder ClearImsi() {
        PrepareBuilder();
        result.hasImsi = false;
        result.imsi_ = "";
        return this;
      }
      
      public bool HasImei {
        get { return result.hasImei; }
      }
      public string Imei {
        get { return result.Imei; }
        set { SetImei(value); }
      }
      public Builder SetImei(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasImei = true;
        result.imei_ = value;
        return this;
      }
      public Builder ClearImei() {
        PrepareBuilder();
        result.hasImei = false;
        result.imei_ = "";
        return this;
      }
    }
    static mxt1xx_u_ver_info() {
      object.ReferenceEquals(global::maxtrack.pb.mxt1xx.Mxt1Xx.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mxt1xx_u_zig_ver_info : pb::GeneratedMessage<mxt1xx_u_zig_ver_info, mxt1xx_u_zig_ver_info.Builder> {
    private mxt1xx_u_zig_ver_info() { }
    private static readonly mxt1xx_u_zig_ver_info defaultInstance = new mxt1xx_u_zig_ver_info().MakeReadOnly();
    private static readonly string[] _mxt1XxUZigVerInfoFieldNames = new string[] { "zigbee_version" };
    private static readonly uint[] _mxt1XxUZigVerInfoFieldTags = new uint[] { 10 };
    public static mxt1xx_u_zig_ver_info DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mxt1xx_u_zig_ver_info DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mxt1xx_u_zig_ver_info ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_zig_ver_info__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mxt1xx_u_zig_ver_info, mxt1xx_u_zig_ver_info.Builder> InternalFieldAccessors {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_zig_ver_info__FieldAccessorTable; }
    }
    
    public const int ZigbeeVersionFieldNumber = 1;
    private bool hasZigbeeVersion;
    private string zigbeeVersion_ = "";
    public bool HasZigbeeVersion {
      get { return hasZigbeeVersion; }
    }
    public string ZigbeeVersion {
      get { return zigbeeVersion_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasZigbeeVersion) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mxt1XxUZigVerInfoFieldNames;
      if (hasZigbeeVersion) {
        output.WriteString(1, field_names[0], ZigbeeVersion);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasZigbeeVersion) {
        size += pb::CodedOutputStream.ComputeStringSize(1, ZigbeeVersion);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mxt1xx_u_zig_ver_info ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_zig_ver_info ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_zig_ver_info ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_zig_ver_info ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_zig_ver_info ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_zig_ver_info ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_zig_ver_info ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mxt1xx_u_zig_ver_info ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mxt1xx_u_zig_ver_info ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_zig_ver_info ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mxt1xx_u_zig_ver_info MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mxt1xx_u_zig_ver_info prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mxt1xx_u_zig_ver_info, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mxt1xx_u_zig_ver_info cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mxt1xx_u_zig_ver_info result;
      
      private mxt1xx_u_zig_ver_info PrepareBuilder() {
        if (resultIsReadOnly) {
          mxt1xx_u_zig_ver_info original = result;
          result = new mxt1xx_u_zig_ver_info();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mxt1xx_u_zig_ver_info MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_zig_ver_info.Descriptor; }
      }
      
      public override mxt1xx_u_zig_ver_info DefaultInstanceForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_zig_ver_info.DefaultInstance; }
      }
      
      public override mxt1xx_u_zig_ver_info BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mxt1xx_u_zig_ver_info) {
          return MergeFrom((mxt1xx_u_zig_ver_info) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mxt1xx_u_zig_ver_info other) {
        if (other == global::maxtrack.pb.mxt1xx.mxt1xx_u_zig_ver_info.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasZigbeeVersion) {
          ZigbeeVersion = other.ZigbeeVersion;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mxt1XxUZigVerInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mxt1XxUZigVerInfoFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasZigbeeVersion = input.ReadString(ref result.zigbeeVersion_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasZigbeeVersion {
        get { return result.hasZigbeeVersion; }
      }
      public string ZigbeeVersion {
        get { return result.ZigbeeVersion; }
        set { SetZigbeeVersion(value); }
      }
      public Builder SetZigbeeVersion(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasZigbeeVersion = true;
        result.zigbeeVersion_ = value;
        return this;
      }
      public Builder ClearZigbeeVersion() {
        PrepareBuilder();
        result.hasZigbeeVersion = false;
        result.zigbeeVersion_ = "";
        return this;
      }
    }
    static mxt1xx_u_zig_ver_info() {
      object.ReferenceEquals(global::maxtrack.pb.mxt1xx.Mxt1Xx.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mxt1xx_u_zig_info_ext : pb::GeneratedMessage<mxt1xx_u_zig_info_ext, mxt1xx_u_zig_info_ext.Builder> {
    private mxt1xx_u_zig_info_ext() { }
    private static readonly mxt1xx_u_zig_info_ext defaultInstance = new mxt1xx_u_zig_info_ext().MakeReadOnly();
    private static readonly string[] _mxt1XxUZigInfoExtFieldNames = new string[] { "ap_power_level", "ap_radio_chan", "ap_rev_all_bc", "ed_cmd_interval", "ed_relink_interval", "ed_time_retry_max", "link_token", "time_without_gsm", "upd_by_zig_bee", "zig_alarm_info", "zig_alarm_time", "zig_rssi_filter" };
    private static readonly uint[] _mxt1XxUZigInfoExtFieldTags = new uint[] { 8, 16, 40, 32, 24, 48, 56, 72, 64, 98, 80, 88 };
    public static mxt1xx_u_zig_info_ext DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mxt1xx_u_zig_info_ext DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mxt1xx_u_zig_info_ext ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_zig_info_ext__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mxt1xx_u_zig_info_ext, mxt1xx_u_zig_info_ext.Builder> InternalFieldAccessors {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_zig_info_ext__FieldAccessorTable; }
    }
    
    public const int ApPowerLevelFieldNumber = 1;
    private bool hasApPowerLevel;
    private uint apPowerLevel_;
    public bool HasApPowerLevel {
      get { return hasApPowerLevel; }
    }
    [global::System.CLSCompliant(false)]
    public uint ApPowerLevel {
      get { return apPowerLevel_; }
    }
    
    public const int ApRadioChanFieldNumber = 2;
    private bool hasApRadioChan;
    private uint apRadioChan_;
    public bool HasApRadioChan {
      get { return hasApRadioChan; }
    }
    [global::System.CLSCompliant(false)]
    public uint ApRadioChan {
      get { return apRadioChan_; }
    }
    
    public const int EdRelinkIntervalFieldNumber = 3;
    private bool hasEdRelinkInterval;
    private uint edRelinkInterval_;
    public bool HasEdRelinkInterval {
      get { return hasEdRelinkInterval; }
    }
    [global::System.CLSCompliant(false)]
    public uint EdRelinkInterval {
      get { return edRelinkInterval_; }
    }
    
    public const int EdCmdIntervalFieldNumber = 4;
    private bool hasEdCmdInterval;
    private uint edCmdInterval_;
    public bool HasEdCmdInterval {
      get { return hasEdCmdInterval; }
    }
    [global::System.CLSCompliant(false)]
    public uint EdCmdInterval {
      get { return edCmdInterval_; }
    }
    
    public const int ApRevAllBcFieldNumber = 5;
    private bool hasApRevAllBc;
    private uint apRevAllBc_;
    public bool HasApRevAllBc {
      get { return hasApRevAllBc; }
    }
    [global::System.CLSCompliant(false)]
    public uint ApRevAllBc {
      get { return apRevAllBc_; }
    }
    
    public const int EdTimeRetryMaxFieldNumber = 6;
    private bool hasEdTimeRetryMax;
    private uint edTimeRetryMax_;
    public bool HasEdTimeRetryMax {
      get { return hasEdTimeRetryMax; }
    }
    [global::System.CLSCompliant(false)]
    public uint EdTimeRetryMax {
      get { return edTimeRetryMax_; }
    }
    
    public const int LinkTokenFieldNumber = 7;
    private bool hasLinkToken;
    private uint linkToken_;
    public bool HasLinkToken {
      get { return hasLinkToken; }
    }
    [global::System.CLSCompliant(false)]
    public uint LinkToken {
      get { return linkToken_; }
    }
    
    public const int UpdByZigBeeFieldNumber = 8;
    private bool hasUpdByZigBee;
    private uint updByZigBee_;
    public bool HasUpdByZigBee {
      get { return hasUpdByZigBee; }
    }
    [global::System.CLSCompliant(false)]
    public uint UpdByZigBee {
      get { return updByZigBee_; }
    }
    
    public const int TimeWithoutGsmFieldNumber = 9;
    private bool hasTimeWithoutGsm;
    private uint timeWithoutGsm_;
    public bool HasTimeWithoutGsm {
      get { return hasTimeWithoutGsm; }
    }
    [global::System.CLSCompliant(false)]
    public uint TimeWithoutGsm {
      get { return timeWithoutGsm_; }
    }
    
    public const int ZigAlarmTimeFieldNumber = 10;
    private bool hasZigAlarmTime;
    private uint zigAlarmTime_;
    public bool HasZigAlarmTime {
      get { return hasZigAlarmTime; }
    }
    [global::System.CLSCompliant(false)]
    public uint ZigAlarmTime {
      get { return zigAlarmTime_; }
    }
    
    public const int ZigRssiFilterFieldNumber = 11;
    private bool hasZigRssiFilter;
    private uint zigRssiFilter_;
    public bool HasZigRssiFilter {
      get { return hasZigRssiFilter; }
    }
    [global::System.CLSCompliant(false)]
    public uint ZigRssiFilter {
      get { return zigRssiFilter_; }
    }
    
    public const int ZigAlarmInfoFieldNumber = 12;
    private bool hasZigAlarmInfo;
    private string zigAlarmInfo_ = "";
    public bool HasZigAlarmInfo {
      get { return hasZigAlarmInfo; }
    }
    public string ZigAlarmInfo {
      get { return zigAlarmInfo_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasApPowerLevel) return false;
        if (!hasApRadioChan) return false;
        if (!hasEdRelinkInterval) return false;
        if (!hasEdCmdInterval) return false;
        if (!hasApRevAllBc) return false;
        if (!hasEdTimeRetryMax) return false;
        if (!hasLinkToken) return false;
        if (!hasUpdByZigBee) return false;
        if (!hasTimeWithoutGsm) return false;
        if (!hasZigAlarmTime) return false;
        if (!hasZigRssiFilter) return false;
        if (!hasZigAlarmInfo) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mxt1XxUZigInfoExtFieldNames;
      if (hasApPowerLevel) {
        output.WriteUInt32(1, field_names[0], ApPowerLevel);
      }
      if (hasApRadioChan) {
        output.WriteUInt32(2, field_names[1], ApRadioChan);
      }
      if (hasEdRelinkInterval) {
        output.WriteUInt32(3, field_names[4], EdRelinkInterval);
      }
      if (hasEdCmdInterval) {
        output.WriteUInt32(4, field_names[3], EdCmdInterval);
      }
      if (hasApRevAllBc) {
        output.WriteUInt32(5, field_names[2], ApRevAllBc);
      }
      if (hasEdTimeRetryMax) {
        output.WriteUInt32(6, field_names[5], EdTimeRetryMax);
      }
      if (hasLinkToken) {
        output.WriteUInt32(7, field_names[6], LinkToken);
      }
      if (hasUpdByZigBee) {
        output.WriteUInt32(8, field_names[8], UpdByZigBee);
      }
      if (hasTimeWithoutGsm) {
        output.WriteUInt32(9, field_names[7], TimeWithoutGsm);
      }
      if (hasZigAlarmTime) {
        output.WriteUInt32(10, field_names[10], ZigAlarmTime);
      }
      if (hasZigRssiFilter) {
        output.WriteUInt32(11, field_names[11], ZigRssiFilter);
      }
      if (hasZigAlarmInfo) {
        output.WriteString(12, field_names[9], ZigAlarmInfo);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasApPowerLevel) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, ApPowerLevel);
      }
      if (hasApRadioChan) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, ApRadioChan);
      }
      if (hasEdRelinkInterval) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, EdRelinkInterval);
      }
      if (hasEdCmdInterval) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, EdCmdInterval);
      }
      if (hasApRevAllBc) {
        size += pb::CodedOutputStream.ComputeUInt32Size(5, ApRevAllBc);
      }
      if (hasEdTimeRetryMax) {
        size += pb::CodedOutputStream.ComputeUInt32Size(6, EdTimeRetryMax);
      }
      if (hasLinkToken) {
        size += pb::CodedOutputStream.ComputeUInt32Size(7, LinkToken);
      }
      if (hasUpdByZigBee) {
        size += pb::CodedOutputStream.ComputeUInt32Size(8, UpdByZigBee);
      }
      if (hasTimeWithoutGsm) {
        size += pb::CodedOutputStream.ComputeUInt32Size(9, TimeWithoutGsm);
      }
      if (hasZigAlarmTime) {
        size += pb::CodedOutputStream.ComputeUInt32Size(10, ZigAlarmTime);
      }
      if (hasZigRssiFilter) {
        size += pb::CodedOutputStream.ComputeUInt32Size(11, ZigRssiFilter);
      }
      if (hasZigAlarmInfo) {
        size += pb::CodedOutputStream.ComputeStringSize(12, ZigAlarmInfo);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mxt1xx_u_zig_info_ext ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_zig_info_ext ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_zig_info_ext ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_zig_info_ext ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_zig_info_ext ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_zig_info_ext ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_zig_info_ext ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mxt1xx_u_zig_info_ext ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mxt1xx_u_zig_info_ext ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_zig_info_ext ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mxt1xx_u_zig_info_ext MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mxt1xx_u_zig_info_ext prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mxt1xx_u_zig_info_ext, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mxt1xx_u_zig_info_ext cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mxt1xx_u_zig_info_ext result;
      
      private mxt1xx_u_zig_info_ext PrepareBuilder() {
        if (resultIsReadOnly) {
          mxt1xx_u_zig_info_ext original = result;
          result = new mxt1xx_u_zig_info_ext();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mxt1xx_u_zig_info_ext MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_zig_info_ext.Descriptor; }
      }
      
      public override mxt1xx_u_zig_info_ext DefaultInstanceForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_zig_info_ext.DefaultInstance; }
      }
      
      public override mxt1xx_u_zig_info_ext BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mxt1xx_u_zig_info_ext) {
          return MergeFrom((mxt1xx_u_zig_info_ext) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mxt1xx_u_zig_info_ext other) {
        if (other == global::maxtrack.pb.mxt1xx.mxt1xx_u_zig_info_ext.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasApPowerLevel) {
          ApPowerLevel = other.ApPowerLevel;
        }
        if (other.HasApRadioChan) {
          ApRadioChan = other.ApRadioChan;
        }
        if (other.HasEdRelinkInterval) {
          EdRelinkInterval = other.EdRelinkInterval;
        }
        if (other.HasEdCmdInterval) {
          EdCmdInterval = other.EdCmdInterval;
        }
        if (other.HasApRevAllBc) {
          ApRevAllBc = other.ApRevAllBc;
        }
        if (other.HasEdTimeRetryMax) {
          EdTimeRetryMax = other.EdTimeRetryMax;
        }
        if (other.HasLinkToken) {
          LinkToken = other.LinkToken;
        }
        if (other.HasUpdByZigBee) {
          UpdByZigBee = other.UpdByZigBee;
        }
        if (other.HasTimeWithoutGsm) {
          TimeWithoutGsm = other.TimeWithoutGsm;
        }
        if (other.HasZigAlarmTime) {
          ZigAlarmTime = other.ZigAlarmTime;
        }
        if (other.HasZigRssiFilter) {
          ZigRssiFilter = other.ZigRssiFilter;
        }
        if (other.HasZigAlarmInfo) {
          ZigAlarmInfo = other.ZigAlarmInfo;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mxt1XxUZigInfoExtFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mxt1XxUZigInfoExtFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasApPowerLevel = input.ReadUInt32(ref result.apPowerLevel_);
              break;
            }
            case 16: {
              result.hasApRadioChan = input.ReadUInt32(ref result.apRadioChan_);
              break;
            }
            case 24: {
              result.hasEdRelinkInterval = input.ReadUInt32(ref result.edRelinkInterval_);
              break;
            }
            case 32: {
              result.hasEdCmdInterval = input.ReadUInt32(ref result.edCmdInterval_);
              break;
            }
            case 40: {
              result.hasApRevAllBc = input.ReadUInt32(ref result.apRevAllBc_);
              break;
            }
            case 48: {
              result.hasEdTimeRetryMax = input.ReadUInt32(ref result.edTimeRetryMax_);
              break;
            }
            case 56: {
              result.hasLinkToken = input.ReadUInt32(ref result.linkToken_);
              break;
            }
            case 64: {
              result.hasUpdByZigBee = input.ReadUInt32(ref result.updByZigBee_);
              break;
            }
            case 72: {
              result.hasTimeWithoutGsm = input.ReadUInt32(ref result.timeWithoutGsm_);
              break;
            }
            case 80: {
              result.hasZigAlarmTime = input.ReadUInt32(ref result.zigAlarmTime_);
              break;
            }
            case 88: {
              result.hasZigRssiFilter = input.ReadUInt32(ref result.zigRssiFilter_);
              break;
            }
            case 98: {
              result.hasZigAlarmInfo = input.ReadString(ref result.zigAlarmInfo_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasApPowerLevel {
        get { return result.hasApPowerLevel; }
      }
      [global::System.CLSCompliant(false)]
      public uint ApPowerLevel {
        get { return result.ApPowerLevel; }
        set { SetApPowerLevel(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetApPowerLevel(uint value) {
        PrepareBuilder();
        result.hasApPowerLevel = true;
        result.apPowerLevel_ = value;
        return this;
      }
      public Builder ClearApPowerLevel() {
        PrepareBuilder();
        result.hasApPowerLevel = false;
        result.apPowerLevel_ = 0;
        return this;
      }
      
      public bool HasApRadioChan {
        get { return result.hasApRadioChan; }
      }
      [global::System.CLSCompliant(false)]
      public uint ApRadioChan {
        get { return result.ApRadioChan; }
        set { SetApRadioChan(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetApRadioChan(uint value) {
        PrepareBuilder();
        result.hasApRadioChan = true;
        result.apRadioChan_ = value;
        return this;
      }
      public Builder ClearApRadioChan() {
        PrepareBuilder();
        result.hasApRadioChan = false;
        result.apRadioChan_ = 0;
        return this;
      }
      
      public bool HasEdRelinkInterval {
        get { return result.hasEdRelinkInterval; }
      }
      [global::System.CLSCompliant(false)]
      public uint EdRelinkInterval {
        get { return result.EdRelinkInterval; }
        set { SetEdRelinkInterval(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetEdRelinkInterval(uint value) {
        PrepareBuilder();
        result.hasEdRelinkInterval = true;
        result.edRelinkInterval_ = value;
        return this;
      }
      public Builder ClearEdRelinkInterval() {
        PrepareBuilder();
        result.hasEdRelinkInterval = false;
        result.edRelinkInterval_ = 0;
        return this;
      }
      
      public bool HasEdCmdInterval {
        get { return result.hasEdCmdInterval; }
      }
      [global::System.CLSCompliant(false)]
      public uint EdCmdInterval {
        get { return result.EdCmdInterval; }
        set { SetEdCmdInterval(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetEdCmdInterval(uint value) {
        PrepareBuilder();
        result.hasEdCmdInterval = true;
        result.edCmdInterval_ = value;
        return this;
      }
      public Builder ClearEdCmdInterval() {
        PrepareBuilder();
        result.hasEdCmdInterval = false;
        result.edCmdInterval_ = 0;
        return this;
      }
      
      public bool HasApRevAllBc {
        get { return result.hasApRevAllBc; }
      }
      [global::System.CLSCompliant(false)]
      public uint ApRevAllBc {
        get { return result.ApRevAllBc; }
        set { SetApRevAllBc(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetApRevAllBc(uint value) {
        PrepareBuilder();
        result.hasApRevAllBc = true;
        result.apRevAllBc_ = value;
        return this;
      }
      public Builder ClearApRevAllBc() {
        PrepareBuilder();
        result.hasApRevAllBc = false;
        result.apRevAllBc_ = 0;
        return this;
      }
      
      public bool HasEdTimeRetryMax {
        get { return result.hasEdTimeRetryMax; }
      }
      [global::System.CLSCompliant(false)]
      public uint EdTimeRetryMax {
        get { return result.EdTimeRetryMax; }
        set { SetEdTimeRetryMax(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetEdTimeRetryMax(uint value) {
        PrepareBuilder();
        result.hasEdTimeRetryMax = true;
        result.edTimeRetryMax_ = value;
        return this;
      }
      public Builder ClearEdTimeRetryMax() {
        PrepareBuilder();
        result.hasEdTimeRetryMax = false;
        result.edTimeRetryMax_ = 0;
        return this;
      }
      
      public bool HasLinkToken {
        get { return result.hasLinkToken; }
      }
      [global::System.CLSCompliant(false)]
      public uint LinkToken {
        get { return result.LinkToken; }
        set { SetLinkToken(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetLinkToken(uint value) {
        PrepareBuilder();
        result.hasLinkToken = true;
        result.linkToken_ = value;
        return this;
      }
      public Builder ClearLinkToken() {
        PrepareBuilder();
        result.hasLinkToken = false;
        result.linkToken_ = 0;
        return this;
      }
      
      public bool HasUpdByZigBee {
        get { return result.hasUpdByZigBee; }
      }
      [global::System.CLSCompliant(false)]
      public uint UpdByZigBee {
        get { return result.UpdByZigBee; }
        set { SetUpdByZigBee(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetUpdByZigBee(uint value) {
        PrepareBuilder();
        result.hasUpdByZigBee = true;
        result.updByZigBee_ = value;
        return this;
      }
      public Builder ClearUpdByZigBee() {
        PrepareBuilder();
        result.hasUpdByZigBee = false;
        result.updByZigBee_ = 0;
        return this;
      }
      
      public bool HasTimeWithoutGsm {
        get { return result.hasTimeWithoutGsm; }
      }
      [global::System.CLSCompliant(false)]
      public uint TimeWithoutGsm {
        get { return result.TimeWithoutGsm; }
        set { SetTimeWithoutGsm(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetTimeWithoutGsm(uint value) {
        PrepareBuilder();
        result.hasTimeWithoutGsm = true;
        result.timeWithoutGsm_ = value;
        return this;
      }
      public Builder ClearTimeWithoutGsm() {
        PrepareBuilder();
        result.hasTimeWithoutGsm = false;
        result.timeWithoutGsm_ = 0;
        return this;
      }
      
      public bool HasZigAlarmTime {
        get { return result.hasZigAlarmTime; }
      }
      [global::System.CLSCompliant(false)]
      public uint ZigAlarmTime {
        get { return result.ZigAlarmTime; }
        set { SetZigAlarmTime(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetZigAlarmTime(uint value) {
        PrepareBuilder();
        result.hasZigAlarmTime = true;
        result.zigAlarmTime_ = value;
        return this;
      }
      public Builder ClearZigAlarmTime() {
        PrepareBuilder();
        result.hasZigAlarmTime = false;
        result.zigAlarmTime_ = 0;
        return this;
      }
      
      public bool HasZigRssiFilter {
        get { return result.hasZigRssiFilter; }
      }
      [global::System.CLSCompliant(false)]
      public uint ZigRssiFilter {
        get { return result.ZigRssiFilter; }
        set { SetZigRssiFilter(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetZigRssiFilter(uint value) {
        PrepareBuilder();
        result.hasZigRssiFilter = true;
        result.zigRssiFilter_ = value;
        return this;
      }
      public Builder ClearZigRssiFilter() {
        PrepareBuilder();
        result.hasZigRssiFilter = false;
        result.zigRssiFilter_ = 0;
        return this;
      }
      
      public bool HasZigAlarmInfo {
        get { return result.hasZigAlarmInfo; }
      }
      public string ZigAlarmInfo {
        get { return result.ZigAlarmInfo; }
        set { SetZigAlarmInfo(value); }
      }
      public Builder SetZigAlarmInfo(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasZigAlarmInfo = true;
        result.zigAlarmInfo_ = value;
        return this;
      }
      public Builder ClearZigAlarmInfo() {
        PrepareBuilder();
        result.hasZigAlarmInfo = false;
        result.zigAlarmInfo_ = "";
        return this;
      }
    }
    static mxt1xx_u_zig_info_ext() {
      object.ReferenceEquals(global::maxtrack.pb.mxt1xx.Mxt1Xx.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mxt1xx_u_setup : pb::GeneratedMessage<mxt1xx_u_setup, mxt1xx_u_setup.Builder> {
    private mxt1xx_u_setup() { }
    private static readonly mxt1xx_u_setup defaultInstance = new mxt1xx_u_setup().MakeReadOnly();
    private static readonly string[] _mxt1XxUSetupFieldNames = new string[] { "device_info", "events", "gps", "gsr", "header", "ip_address", "net_attributes", "other_info", "panic_mode", "report_interval", "sms", "ver_info", "zig_info", "zig_info_ext", "zig_ver_info" };
    private static readonly uint[] _mxt1XxUSetupFieldTags = new uint[] { 18, 122, 58, 50, 10, 34, 26, 82, 96, 42, 66, 90, 74, 106, 114 };
    public static mxt1xx_u_setup DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mxt1xx_u_setup DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mxt1xx_u_setup ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_setup__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mxt1xx_u_setup, mxt1xx_u_setup.Builder> InternalFieldAccessors {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_setup__FieldAccessorTable; }
    }
    
    public const int HeaderFieldNumber = 1;
    private bool hasHeader;
    private global::maxtrack.pb.mxt1xx.mxt1xx_u_setup_header header_;
    public bool HasHeader {
      get { return hasHeader; }
    }
    public global::maxtrack.pb.mxt1xx.mxt1xx_u_setup_header Header {
      get { return header_ ?? global::maxtrack.pb.mxt1xx.mxt1xx_u_setup_header.DefaultInstance; }
    }
    
    public const int DeviceInfoFieldNumber = 2;
    private bool hasDeviceInfo;
    private global::maxtrack.pb.mxt1xx.mxt1xx_u_device_info deviceInfo_;
    public bool HasDeviceInfo {
      get { return hasDeviceInfo; }
    }
    public global::maxtrack.pb.mxt1xx.mxt1xx_u_device_info DeviceInfo {
      get { return deviceInfo_ ?? global::maxtrack.pb.mxt1xx.mxt1xx_u_device_info.DefaultInstance; }
    }
    
    public const int NetAttributesFieldNumber = 3;
    private bool hasNetAttributes;
    private global::maxtrack.pb.mxt1xx.mxt1xx_u_net_attributes netAttributes_;
    public bool HasNetAttributes {
      get { return hasNetAttributes; }
    }
    public global::maxtrack.pb.mxt1xx.mxt1xx_u_net_attributes NetAttributes {
      get { return netAttributes_ ?? global::maxtrack.pb.mxt1xx.mxt1xx_u_net_attributes.DefaultInstance; }
    }
    
    public const int IpAddressFieldNumber = 4;
    private bool hasIpAddress;
    private global::maxtrack.pb.mxt1xx.mxt1xx_u_ip_address ipAddress_;
    public bool HasIpAddress {
      get { return hasIpAddress; }
    }
    public global::maxtrack.pb.mxt1xx.mxt1xx_u_ip_address IpAddress {
      get { return ipAddress_ ?? global::maxtrack.pb.mxt1xx.mxt1xx_u_ip_address.DefaultInstance; }
    }
    
    public const int ReportIntervalFieldNumber = 5;
    private bool hasReportInterval;
    private global::maxtrack.pb.mxt1xx.mxt1xx_u_report_interval reportInterval_;
    public bool HasReportInterval {
      get { return hasReportInterval; }
    }
    public global::maxtrack.pb.mxt1xx.mxt1xx_u_report_interval ReportInterval {
      get { return reportInterval_ ?? global::maxtrack.pb.mxt1xx.mxt1xx_u_report_interval.DefaultInstance; }
    }
    
    public const int GsrFieldNumber = 6;
    private bool hasGsr;
    private global::maxtrack.pb.mxt1xx.mxt1xx_u_gsr gsr_;
    public bool HasGsr {
      get { return hasGsr; }
    }
    public global::maxtrack.pb.mxt1xx.mxt1xx_u_gsr Gsr {
      get { return gsr_ ?? global::maxtrack.pb.mxt1xx.mxt1xx_u_gsr.DefaultInstance; }
    }
    
    public const int GpsFieldNumber = 7;
    private bool hasGps;
    private global::maxtrack.pb.mxt1xx.mxt1xx_u_gps gps_;
    public bool HasGps {
      get { return hasGps; }
    }
    public global::maxtrack.pb.mxt1xx.mxt1xx_u_gps Gps {
      get { return gps_ ?? global::maxtrack.pb.mxt1xx.mxt1xx_u_gps.DefaultInstance; }
    }
    
    public const int SmsFieldNumber = 8;
    private bool hasSms;
    private global::maxtrack.pb.mxt1xx.mxt1xx_u_sms sms_;
    public bool HasSms {
      get { return hasSms; }
    }
    public global::maxtrack.pb.mxt1xx.mxt1xx_u_sms Sms {
      get { return sms_ ?? global::maxtrack.pb.mxt1xx.mxt1xx_u_sms.DefaultInstance; }
    }
    
    public const int ZigInfoFieldNumber = 9;
    private bool hasZigInfo;
    private global::maxtrack.pb.mxt1xx.mxt1xx_u_zig_info zigInfo_;
    public bool HasZigInfo {
      get { return hasZigInfo; }
    }
    public global::maxtrack.pb.mxt1xx.mxt1xx_u_zig_info ZigInfo {
      get { return zigInfo_ ?? global::maxtrack.pb.mxt1xx.mxt1xx_u_zig_info.DefaultInstance; }
    }
    
    public const int OtherInfoFieldNumber = 10;
    private bool hasOtherInfo;
    private global::maxtrack.pb.mxt1xx.mxt1xx_u_other_info otherInfo_;
    public bool HasOtherInfo {
      get { return hasOtherInfo; }
    }
    public global::maxtrack.pb.mxt1xx.mxt1xx_u_other_info OtherInfo {
      get { return otherInfo_ ?? global::maxtrack.pb.mxt1xx.mxt1xx_u_other_info.DefaultInstance; }
    }
    
    public const int VerInfoFieldNumber = 11;
    private bool hasVerInfo;
    private global::maxtrack.pb.mxt1xx.mxt1xx_u_ver_info verInfo_;
    public bool HasVerInfo {
      get { return hasVerInfo; }
    }
    public global::maxtrack.pb.mxt1xx.mxt1xx_u_ver_info VerInfo {
      get { return verInfo_ ?? global::maxtrack.pb.mxt1xx.mxt1xx_u_ver_info.DefaultInstance; }
    }
    
    public const int PanicModeFieldNumber = 12;
    private bool hasPanicMode;
    private uint panicMode_;
    public bool HasPanicMode {
      get { return hasPanicMode; }
    }
    [global::System.CLSCompliant(false)]
    public uint PanicMode {
      get { return panicMode_; }
    }
    
    public const int ZigInfoExtFieldNumber = 13;
    private bool hasZigInfoExt;
    private global::maxtrack.pb.mxt1xx.mxt1xx_u_zig_info_ext zigInfoExt_;
    public bool HasZigInfoExt {
      get { return hasZigInfoExt; }
    }
    public global::maxtrack.pb.mxt1xx.mxt1xx_u_zig_info_ext ZigInfoExt {
      get { return zigInfoExt_ ?? global::maxtrack.pb.mxt1xx.mxt1xx_u_zig_info_ext.DefaultInstance; }
    }
    
    public const int ZigVerInfoFieldNumber = 14;
    private bool hasZigVerInfo;
    private global::maxtrack.pb.mxt1xx.mxt1xx_u_zig_ver_info zigVerInfo_;
    public bool HasZigVerInfo {
      get { return hasZigVerInfo; }
    }
    public global::maxtrack.pb.mxt1xx.mxt1xx_u_zig_ver_info ZigVerInfo {
      get { return zigVerInfo_ ?? global::maxtrack.pb.mxt1xx.mxt1xx_u_zig_ver_info.DefaultInstance; }
    }
    
    public const int EventsFieldNumber = 15;
    private bool hasEvents;
    private global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_event events_;
    public bool HasEvents {
      get { return hasEvents; }
    }
    public global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_event Events {
      get { return events_ ?? global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_event.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasHeader) return false;
        if (!Header.IsInitialized) return false;
        if (HasDeviceInfo) {
          if (!DeviceInfo.IsInitialized) return false;
        }
        if (HasNetAttributes) {
          if (!NetAttributes.IsInitialized) return false;
        }
        if (HasIpAddress) {
          if (!IpAddress.IsInitialized) return false;
        }
        if (HasReportInterval) {
          if (!ReportInterval.IsInitialized) return false;
        }
        if (HasGsr) {
          if (!Gsr.IsInitialized) return false;
        }
        if (HasGps) {
          if (!Gps.IsInitialized) return false;
        }
        if (HasSms) {
          if (!Sms.IsInitialized) return false;
        }
        if (HasZigInfo) {
          if (!ZigInfo.IsInitialized) return false;
        }
        if (HasOtherInfo) {
          if (!OtherInfo.IsInitialized) return false;
        }
        if (HasVerInfo) {
          if (!VerInfo.IsInitialized) return false;
        }
        if (HasZigInfoExt) {
          if (!ZigInfoExt.IsInitialized) return false;
        }
        if (HasZigVerInfo) {
          if (!ZigVerInfo.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mxt1XxUSetupFieldNames;
      if (hasHeader) {
        output.WriteMessage(1, field_names[4], Header);
      }
      if (hasDeviceInfo) {
        output.WriteMessage(2, field_names[0], DeviceInfo);
      }
      if (hasNetAttributes) {
        output.WriteMessage(3, field_names[6], NetAttributes);
      }
      if (hasIpAddress) {
        output.WriteMessage(4, field_names[5], IpAddress);
      }
      if (hasReportInterval) {
        output.WriteMessage(5, field_names[9], ReportInterval);
      }
      if (hasGsr) {
        output.WriteMessage(6, field_names[3], Gsr);
      }
      if (hasGps) {
        output.WriteMessage(7, field_names[2], Gps);
      }
      if (hasSms) {
        output.WriteMessage(8, field_names[10], Sms);
      }
      if (hasZigInfo) {
        output.WriteMessage(9, field_names[12], ZigInfo);
      }
      if (hasOtherInfo) {
        output.WriteMessage(10, field_names[7], OtherInfo);
      }
      if (hasVerInfo) {
        output.WriteMessage(11, field_names[11], VerInfo);
      }
      if (hasPanicMode) {
        output.WriteUInt32(12, field_names[8], PanicMode);
      }
      if (hasZigInfoExt) {
        output.WriteMessage(13, field_names[13], ZigInfoExt);
      }
      if (hasZigVerInfo) {
        output.WriteMessage(14, field_names[14], ZigVerInfo);
      }
      if (hasEvents) {
        output.WriteMessage(15, field_names[1], Events);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasHeader) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, Header);
      }
      if (hasDeviceInfo) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, DeviceInfo);
      }
      if (hasNetAttributes) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, NetAttributes);
      }
      if (hasIpAddress) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, IpAddress);
      }
      if (hasReportInterval) {
        size += pb::CodedOutputStream.ComputeMessageSize(5, ReportInterval);
      }
      if (hasGsr) {
        size += pb::CodedOutputStream.ComputeMessageSize(6, Gsr);
      }
      if (hasGps) {
        size += pb::CodedOutputStream.ComputeMessageSize(7, Gps);
      }
      if (hasSms) {
        size += pb::CodedOutputStream.ComputeMessageSize(8, Sms);
      }
      if (hasZigInfo) {
        size += pb::CodedOutputStream.ComputeMessageSize(9, ZigInfo);
      }
      if (hasOtherInfo) {
        size += pb::CodedOutputStream.ComputeMessageSize(10, OtherInfo);
      }
      if (hasVerInfo) {
        size += pb::CodedOutputStream.ComputeMessageSize(11, VerInfo);
      }
      if (hasPanicMode) {
        size += pb::CodedOutputStream.ComputeUInt32Size(12, PanicMode);
      }
      if (hasZigInfoExt) {
        size += pb::CodedOutputStream.ComputeMessageSize(13, ZigInfoExt);
      }
      if (hasZigVerInfo) {
        size += pb::CodedOutputStream.ComputeMessageSize(14, ZigVerInfo);
      }
      if (hasEvents) {
        size += pb::CodedOutputStream.ComputeMessageSize(15, Events);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mxt1xx_u_setup ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_setup ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_setup ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_setup ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_setup ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_setup ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_setup ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mxt1xx_u_setup ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mxt1xx_u_setup ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_setup ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mxt1xx_u_setup MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mxt1xx_u_setup prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mxt1xx_u_setup, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mxt1xx_u_setup cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mxt1xx_u_setup result;
      
      private mxt1xx_u_setup PrepareBuilder() {
        if (resultIsReadOnly) {
          mxt1xx_u_setup original = result;
          result = new mxt1xx_u_setup();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mxt1xx_u_setup MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_setup.Descriptor; }
      }
      
      public override mxt1xx_u_setup DefaultInstanceForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_setup.DefaultInstance; }
      }
      
      public override mxt1xx_u_setup BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mxt1xx_u_setup) {
          return MergeFrom((mxt1xx_u_setup) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mxt1xx_u_setup other) {
        if (other == global::maxtrack.pb.mxt1xx.mxt1xx_u_setup.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasHeader) {
          MergeHeader(other.Header);
        }
        if (other.HasDeviceInfo) {
          MergeDeviceInfo(other.DeviceInfo);
        }
        if (other.HasNetAttributes) {
          MergeNetAttributes(other.NetAttributes);
        }
        if (other.HasIpAddress) {
          MergeIpAddress(other.IpAddress);
        }
        if (other.HasReportInterval) {
          MergeReportInterval(other.ReportInterval);
        }
        if (other.HasGsr) {
          MergeGsr(other.Gsr);
        }
        if (other.HasGps) {
          MergeGps(other.Gps);
        }
        if (other.HasSms) {
          MergeSms(other.Sms);
        }
        if (other.HasZigInfo) {
          MergeZigInfo(other.ZigInfo);
        }
        if (other.HasOtherInfo) {
          MergeOtherInfo(other.OtherInfo);
        }
        if (other.HasVerInfo) {
          MergeVerInfo(other.VerInfo);
        }
        if (other.HasPanicMode) {
          PanicMode = other.PanicMode;
        }
        if (other.HasZigInfoExt) {
          MergeZigInfoExt(other.ZigInfoExt);
        }
        if (other.HasZigVerInfo) {
          MergeZigVerInfo(other.ZigVerInfo);
        }
        if (other.HasEvents) {
          MergeEvents(other.Events);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mxt1XxUSetupFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mxt1XxUSetupFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::maxtrack.pb.mxt1xx.mxt1xx_u_setup_header.Builder subBuilder = global::maxtrack.pb.mxt1xx.mxt1xx_u_setup_header.CreateBuilder();
              if (result.hasHeader) {
                subBuilder.MergeFrom(Header);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Header = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::maxtrack.pb.mxt1xx.mxt1xx_u_device_info.Builder subBuilder = global::maxtrack.pb.mxt1xx.mxt1xx_u_device_info.CreateBuilder();
              if (result.hasDeviceInfo) {
                subBuilder.MergeFrom(DeviceInfo);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              DeviceInfo = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::maxtrack.pb.mxt1xx.mxt1xx_u_net_attributes.Builder subBuilder = global::maxtrack.pb.mxt1xx.mxt1xx_u_net_attributes.CreateBuilder();
              if (result.hasNetAttributes) {
                subBuilder.MergeFrom(NetAttributes);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              NetAttributes = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::maxtrack.pb.mxt1xx.mxt1xx_u_ip_address.Builder subBuilder = global::maxtrack.pb.mxt1xx.mxt1xx_u_ip_address.CreateBuilder();
              if (result.hasIpAddress) {
                subBuilder.MergeFrom(IpAddress);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              IpAddress = subBuilder.BuildPartial();
              break;
            }
            case 42: {
              global::maxtrack.pb.mxt1xx.mxt1xx_u_report_interval.Builder subBuilder = global::maxtrack.pb.mxt1xx.mxt1xx_u_report_interval.CreateBuilder();
              if (result.hasReportInterval) {
                subBuilder.MergeFrom(ReportInterval);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ReportInterval = subBuilder.BuildPartial();
              break;
            }
            case 50: {
              global::maxtrack.pb.mxt1xx.mxt1xx_u_gsr.Builder subBuilder = global::maxtrack.pb.mxt1xx.mxt1xx_u_gsr.CreateBuilder();
              if (result.hasGsr) {
                subBuilder.MergeFrom(Gsr);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Gsr = subBuilder.BuildPartial();
              break;
            }
            case 58: {
              global::maxtrack.pb.mxt1xx.mxt1xx_u_gps.Builder subBuilder = global::maxtrack.pb.mxt1xx.mxt1xx_u_gps.CreateBuilder();
              if (result.hasGps) {
                subBuilder.MergeFrom(Gps);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Gps = subBuilder.BuildPartial();
              break;
            }
            case 66: {
              global::maxtrack.pb.mxt1xx.mxt1xx_u_sms.Builder subBuilder = global::maxtrack.pb.mxt1xx.mxt1xx_u_sms.CreateBuilder();
              if (result.hasSms) {
                subBuilder.MergeFrom(Sms);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Sms = subBuilder.BuildPartial();
              break;
            }
            case 74: {
              global::maxtrack.pb.mxt1xx.mxt1xx_u_zig_info.Builder subBuilder = global::maxtrack.pb.mxt1xx.mxt1xx_u_zig_info.CreateBuilder();
              if (result.hasZigInfo) {
                subBuilder.MergeFrom(ZigInfo);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ZigInfo = subBuilder.BuildPartial();
              break;
            }
            case 82: {
              global::maxtrack.pb.mxt1xx.mxt1xx_u_other_info.Builder subBuilder = global::maxtrack.pb.mxt1xx.mxt1xx_u_other_info.CreateBuilder();
              if (result.hasOtherInfo) {
                subBuilder.MergeFrom(OtherInfo);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              OtherInfo = subBuilder.BuildPartial();
              break;
            }
            case 90: {
              global::maxtrack.pb.mxt1xx.mxt1xx_u_ver_info.Builder subBuilder = global::maxtrack.pb.mxt1xx.mxt1xx_u_ver_info.CreateBuilder();
              if (result.hasVerInfo) {
                subBuilder.MergeFrom(VerInfo);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              VerInfo = subBuilder.BuildPartial();
              break;
            }
            case 96: {
              result.hasPanicMode = input.ReadUInt32(ref result.panicMode_);
              break;
            }
            case 106: {
              global::maxtrack.pb.mxt1xx.mxt1xx_u_zig_info_ext.Builder subBuilder = global::maxtrack.pb.mxt1xx.mxt1xx_u_zig_info_ext.CreateBuilder();
              if (result.hasZigInfoExt) {
                subBuilder.MergeFrom(ZigInfoExt);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ZigInfoExt = subBuilder.BuildPartial();
              break;
            }
            case 114: {
              global::maxtrack.pb.mxt1xx.mxt1xx_u_zig_ver_info.Builder subBuilder = global::maxtrack.pb.mxt1xx.mxt1xx_u_zig_ver_info.CreateBuilder();
              if (result.hasZigVerInfo) {
                subBuilder.MergeFrom(ZigVerInfo);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ZigVerInfo = subBuilder.BuildPartial();
              break;
            }
            case 122: {
              global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_event.Builder subBuilder = global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_event.CreateBuilder();
              if (result.hasEvents) {
                subBuilder.MergeFrom(Events);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Events = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasHeader {
       get { return result.hasHeader; }
      }
      public global::maxtrack.pb.mxt1xx.mxt1xx_u_setup_header Header {
        get { return result.Header; }
        set { SetHeader(value); }
      }
      public Builder SetHeader(global::maxtrack.pb.mxt1xx.mxt1xx_u_setup_header value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHeader = true;
        result.header_ = value;
        return this;
      }
      public Builder SetHeader(global::maxtrack.pb.mxt1xx.mxt1xx_u_setup_header.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasHeader = true;
        result.header_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHeader(global::maxtrack.pb.mxt1xx.mxt1xx_u_setup_header value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasHeader &&
            result.header_ != global::maxtrack.pb.mxt1xx.mxt1xx_u_setup_header.DefaultInstance) {
            result.header_ = global::maxtrack.pb.mxt1xx.mxt1xx_u_setup_header.CreateBuilder(result.header_).MergeFrom(value).BuildPartial();
        } else {
          result.header_ = value;
        }
        result.hasHeader = true;
        return this;
      }
      public Builder ClearHeader() {
        PrepareBuilder();
        result.hasHeader = false;
        result.header_ = null;
        return this;
      }
      
      public bool HasDeviceInfo {
       get { return result.hasDeviceInfo; }
      }
      public global::maxtrack.pb.mxt1xx.mxt1xx_u_device_info DeviceInfo {
        get { return result.DeviceInfo; }
        set { SetDeviceInfo(value); }
      }
      public Builder SetDeviceInfo(global::maxtrack.pb.mxt1xx.mxt1xx_u_device_info value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDeviceInfo = true;
        result.deviceInfo_ = value;
        return this;
      }
      public Builder SetDeviceInfo(global::maxtrack.pb.mxt1xx.mxt1xx_u_device_info.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasDeviceInfo = true;
        result.deviceInfo_ = builderForValue.Build();
        return this;
      }
      public Builder MergeDeviceInfo(global::maxtrack.pb.mxt1xx.mxt1xx_u_device_info value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasDeviceInfo &&
            result.deviceInfo_ != global::maxtrack.pb.mxt1xx.mxt1xx_u_device_info.DefaultInstance) {
            result.deviceInfo_ = global::maxtrack.pb.mxt1xx.mxt1xx_u_device_info.CreateBuilder(result.deviceInfo_).MergeFrom(value).BuildPartial();
        } else {
          result.deviceInfo_ = value;
        }
        result.hasDeviceInfo = true;
        return this;
      }
      public Builder ClearDeviceInfo() {
        PrepareBuilder();
        result.hasDeviceInfo = false;
        result.deviceInfo_ = null;
        return this;
      }
      
      public bool HasNetAttributes {
       get { return result.hasNetAttributes; }
      }
      public global::maxtrack.pb.mxt1xx.mxt1xx_u_net_attributes NetAttributes {
        get { return result.NetAttributes; }
        set { SetNetAttributes(value); }
      }
      public Builder SetNetAttributes(global::maxtrack.pb.mxt1xx.mxt1xx_u_net_attributes value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasNetAttributes = true;
        result.netAttributes_ = value;
        return this;
      }
      public Builder SetNetAttributes(global::maxtrack.pb.mxt1xx.mxt1xx_u_net_attributes.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasNetAttributes = true;
        result.netAttributes_ = builderForValue.Build();
        return this;
      }
      public Builder MergeNetAttributes(global::maxtrack.pb.mxt1xx.mxt1xx_u_net_attributes value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasNetAttributes &&
            result.netAttributes_ != global::maxtrack.pb.mxt1xx.mxt1xx_u_net_attributes.DefaultInstance) {
            result.netAttributes_ = global::maxtrack.pb.mxt1xx.mxt1xx_u_net_attributes.CreateBuilder(result.netAttributes_).MergeFrom(value).BuildPartial();
        } else {
          result.netAttributes_ = value;
        }
        result.hasNetAttributes = true;
        return this;
      }
      public Builder ClearNetAttributes() {
        PrepareBuilder();
        result.hasNetAttributes = false;
        result.netAttributes_ = null;
        return this;
      }
      
      public bool HasIpAddress {
       get { return result.hasIpAddress; }
      }
      public global::maxtrack.pb.mxt1xx.mxt1xx_u_ip_address IpAddress {
        get { return result.IpAddress; }
        set { SetIpAddress(value); }
      }
      public Builder SetIpAddress(global::maxtrack.pb.mxt1xx.mxt1xx_u_ip_address value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasIpAddress = true;
        result.ipAddress_ = value;
        return this;
      }
      public Builder SetIpAddress(global::maxtrack.pb.mxt1xx.mxt1xx_u_ip_address.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasIpAddress = true;
        result.ipAddress_ = builderForValue.Build();
        return this;
      }
      public Builder MergeIpAddress(global::maxtrack.pb.mxt1xx.mxt1xx_u_ip_address value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasIpAddress &&
            result.ipAddress_ != global::maxtrack.pb.mxt1xx.mxt1xx_u_ip_address.DefaultInstance) {
            result.ipAddress_ = global::maxtrack.pb.mxt1xx.mxt1xx_u_ip_address.CreateBuilder(result.ipAddress_).MergeFrom(value).BuildPartial();
        } else {
          result.ipAddress_ = value;
        }
        result.hasIpAddress = true;
        return this;
      }
      public Builder ClearIpAddress() {
        PrepareBuilder();
        result.hasIpAddress = false;
        result.ipAddress_ = null;
        return this;
      }
      
      public bool HasReportInterval {
       get { return result.hasReportInterval; }
      }
      public global::maxtrack.pb.mxt1xx.mxt1xx_u_report_interval ReportInterval {
        get { return result.ReportInterval; }
        set { SetReportInterval(value); }
      }
      public Builder SetReportInterval(global::maxtrack.pb.mxt1xx.mxt1xx_u_report_interval value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasReportInterval = true;
        result.reportInterval_ = value;
        return this;
      }
      public Builder SetReportInterval(global::maxtrack.pb.mxt1xx.mxt1xx_u_report_interval.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasReportInterval = true;
        result.reportInterval_ = builderForValue.Build();
        return this;
      }
      public Builder MergeReportInterval(global::maxtrack.pb.mxt1xx.mxt1xx_u_report_interval value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasReportInterval &&
            result.reportInterval_ != global::maxtrack.pb.mxt1xx.mxt1xx_u_report_interval.DefaultInstance) {
            result.reportInterval_ = global::maxtrack.pb.mxt1xx.mxt1xx_u_report_interval.CreateBuilder(result.reportInterval_).MergeFrom(value).BuildPartial();
        } else {
          result.reportInterval_ = value;
        }
        result.hasReportInterval = true;
        return this;
      }
      public Builder ClearReportInterval() {
        PrepareBuilder();
        result.hasReportInterval = false;
        result.reportInterval_ = null;
        return this;
      }
      
      public bool HasGsr {
       get { return result.hasGsr; }
      }
      public global::maxtrack.pb.mxt1xx.mxt1xx_u_gsr Gsr {
        get { return result.Gsr; }
        set { SetGsr(value); }
      }
      public Builder SetGsr(global::maxtrack.pb.mxt1xx.mxt1xx_u_gsr value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGsr = true;
        result.gsr_ = value;
        return this;
      }
      public Builder SetGsr(global::maxtrack.pb.mxt1xx.mxt1xx_u_gsr.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasGsr = true;
        result.gsr_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGsr(global::maxtrack.pb.mxt1xx.mxt1xx_u_gsr value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasGsr &&
            result.gsr_ != global::maxtrack.pb.mxt1xx.mxt1xx_u_gsr.DefaultInstance) {
            result.gsr_ = global::maxtrack.pb.mxt1xx.mxt1xx_u_gsr.CreateBuilder(result.gsr_).MergeFrom(value).BuildPartial();
        } else {
          result.gsr_ = value;
        }
        result.hasGsr = true;
        return this;
      }
      public Builder ClearGsr() {
        PrepareBuilder();
        result.hasGsr = false;
        result.gsr_ = null;
        return this;
      }
      
      public bool HasGps {
       get { return result.hasGps; }
      }
      public global::maxtrack.pb.mxt1xx.mxt1xx_u_gps Gps {
        get { return result.Gps; }
        set { SetGps(value); }
      }
      public Builder SetGps(global::maxtrack.pb.mxt1xx.mxt1xx_u_gps value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGps = true;
        result.gps_ = value;
        return this;
      }
      public Builder SetGps(global::maxtrack.pb.mxt1xx.mxt1xx_u_gps.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasGps = true;
        result.gps_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGps(global::maxtrack.pb.mxt1xx.mxt1xx_u_gps value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasGps &&
            result.gps_ != global::maxtrack.pb.mxt1xx.mxt1xx_u_gps.DefaultInstance) {
            result.gps_ = global::maxtrack.pb.mxt1xx.mxt1xx_u_gps.CreateBuilder(result.gps_).MergeFrom(value).BuildPartial();
        } else {
          result.gps_ = value;
        }
        result.hasGps = true;
        return this;
      }
      public Builder ClearGps() {
        PrepareBuilder();
        result.hasGps = false;
        result.gps_ = null;
        return this;
      }
      
      public bool HasSms {
       get { return result.hasSms; }
      }
      public global::maxtrack.pb.mxt1xx.mxt1xx_u_sms Sms {
        get { return result.Sms; }
        set { SetSms(value); }
      }
      public Builder SetSms(global::maxtrack.pb.mxt1xx.mxt1xx_u_sms value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSms = true;
        result.sms_ = value;
        return this;
      }
      public Builder SetSms(global::maxtrack.pb.mxt1xx.mxt1xx_u_sms.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSms = true;
        result.sms_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSms(global::maxtrack.pb.mxt1xx.mxt1xx_u_sms value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSms &&
            result.sms_ != global::maxtrack.pb.mxt1xx.mxt1xx_u_sms.DefaultInstance) {
            result.sms_ = global::maxtrack.pb.mxt1xx.mxt1xx_u_sms.CreateBuilder(result.sms_).MergeFrom(value).BuildPartial();
        } else {
          result.sms_ = value;
        }
        result.hasSms = true;
        return this;
      }
      public Builder ClearSms() {
        PrepareBuilder();
        result.hasSms = false;
        result.sms_ = null;
        return this;
      }
      
      public bool HasZigInfo {
       get { return result.hasZigInfo; }
      }
      public global::maxtrack.pb.mxt1xx.mxt1xx_u_zig_info ZigInfo {
        get { return result.ZigInfo; }
        set { SetZigInfo(value); }
      }
      public Builder SetZigInfo(global::maxtrack.pb.mxt1xx.mxt1xx_u_zig_info value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasZigInfo = true;
        result.zigInfo_ = value;
        return this;
      }
      public Builder SetZigInfo(global::maxtrack.pb.mxt1xx.mxt1xx_u_zig_info.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasZigInfo = true;
        result.zigInfo_ = builderForValue.Build();
        return this;
      }
      public Builder MergeZigInfo(global::maxtrack.pb.mxt1xx.mxt1xx_u_zig_info value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasZigInfo &&
            result.zigInfo_ != global::maxtrack.pb.mxt1xx.mxt1xx_u_zig_info.DefaultInstance) {
            result.zigInfo_ = global::maxtrack.pb.mxt1xx.mxt1xx_u_zig_info.CreateBuilder(result.zigInfo_).MergeFrom(value).BuildPartial();
        } else {
          result.zigInfo_ = value;
        }
        result.hasZigInfo = true;
        return this;
      }
      public Builder ClearZigInfo() {
        PrepareBuilder();
        result.hasZigInfo = false;
        result.zigInfo_ = null;
        return this;
      }
      
      public bool HasOtherInfo {
       get { return result.hasOtherInfo; }
      }
      public global::maxtrack.pb.mxt1xx.mxt1xx_u_other_info OtherInfo {
        get { return result.OtherInfo; }
        set { SetOtherInfo(value); }
      }
      public Builder SetOtherInfo(global::maxtrack.pb.mxt1xx.mxt1xx_u_other_info value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOtherInfo = true;
        result.otherInfo_ = value;
        return this;
      }
      public Builder SetOtherInfo(global::maxtrack.pb.mxt1xx.mxt1xx_u_other_info.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasOtherInfo = true;
        result.otherInfo_ = builderForValue.Build();
        return this;
      }
      public Builder MergeOtherInfo(global::maxtrack.pb.mxt1xx.mxt1xx_u_other_info value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasOtherInfo &&
            result.otherInfo_ != global::maxtrack.pb.mxt1xx.mxt1xx_u_other_info.DefaultInstance) {
            result.otherInfo_ = global::maxtrack.pb.mxt1xx.mxt1xx_u_other_info.CreateBuilder(result.otherInfo_).MergeFrom(value).BuildPartial();
        } else {
          result.otherInfo_ = value;
        }
        result.hasOtherInfo = true;
        return this;
      }
      public Builder ClearOtherInfo() {
        PrepareBuilder();
        result.hasOtherInfo = false;
        result.otherInfo_ = null;
        return this;
      }
      
      public bool HasVerInfo {
       get { return result.hasVerInfo; }
      }
      public global::maxtrack.pb.mxt1xx.mxt1xx_u_ver_info VerInfo {
        get { return result.VerInfo; }
        set { SetVerInfo(value); }
      }
      public Builder SetVerInfo(global::maxtrack.pb.mxt1xx.mxt1xx_u_ver_info value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasVerInfo = true;
        result.verInfo_ = value;
        return this;
      }
      public Builder SetVerInfo(global::maxtrack.pb.mxt1xx.mxt1xx_u_ver_info.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasVerInfo = true;
        result.verInfo_ = builderForValue.Build();
        return this;
      }
      public Builder MergeVerInfo(global::maxtrack.pb.mxt1xx.mxt1xx_u_ver_info value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasVerInfo &&
            result.verInfo_ != global::maxtrack.pb.mxt1xx.mxt1xx_u_ver_info.DefaultInstance) {
            result.verInfo_ = global::maxtrack.pb.mxt1xx.mxt1xx_u_ver_info.CreateBuilder(result.verInfo_).MergeFrom(value).BuildPartial();
        } else {
          result.verInfo_ = value;
        }
        result.hasVerInfo = true;
        return this;
      }
      public Builder ClearVerInfo() {
        PrepareBuilder();
        result.hasVerInfo = false;
        result.verInfo_ = null;
        return this;
      }
      
      public bool HasPanicMode {
        get { return result.hasPanicMode; }
      }
      [global::System.CLSCompliant(false)]
      public uint PanicMode {
        get { return result.PanicMode; }
        set { SetPanicMode(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetPanicMode(uint value) {
        PrepareBuilder();
        result.hasPanicMode = true;
        result.panicMode_ = value;
        return this;
      }
      public Builder ClearPanicMode() {
        PrepareBuilder();
        result.hasPanicMode = false;
        result.panicMode_ = 0;
        return this;
      }
      
      public bool HasZigInfoExt {
       get { return result.hasZigInfoExt; }
      }
      public global::maxtrack.pb.mxt1xx.mxt1xx_u_zig_info_ext ZigInfoExt {
        get { return result.ZigInfoExt; }
        set { SetZigInfoExt(value); }
      }
      public Builder SetZigInfoExt(global::maxtrack.pb.mxt1xx.mxt1xx_u_zig_info_ext value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasZigInfoExt = true;
        result.zigInfoExt_ = value;
        return this;
      }
      public Builder SetZigInfoExt(global::maxtrack.pb.mxt1xx.mxt1xx_u_zig_info_ext.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasZigInfoExt = true;
        result.zigInfoExt_ = builderForValue.Build();
        return this;
      }
      public Builder MergeZigInfoExt(global::maxtrack.pb.mxt1xx.mxt1xx_u_zig_info_ext value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasZigInfoExt &&
            result.zigInfoExt_ != global::maxtrack.pb.mxt1xx.mxt1xx_u_zig_info_ext.DefaultInstance) {
            result.zigInfoExt_ = global::maxtrack.pb.mxt1xx.mxt1xx_u_zig_info_ext.CreateBuilder(result.zigInfoExt_).MergeFrom(value).BuildPartial();
        } else {
          result.zigInfoExt_ = value;
        }
        result.hasZigInfoExt = true;
        return this;
      }
      public Builder ClearZigInfoExt() {
        PrepareBuilder();
        result.hasZigInfoExt = false;
        result.zigInfoExt_ = null;
        return this;
      }
      
      public bool HasZigVerInfo {
       get { return result.hasZigVerInfo; }
      }
      public global::maxtrack.pb.mxt1xx.mxt1xx_u_zig_ver_info ZigVerInfo {
        get { return result.ZigVerInfo; }
        set { SetZigVerInfo(value); }
      }
      public Builder SetZigVerInfo(global::maxtrack.pb.mxt1xx.mxt1xx_u_zig_ver_info value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasZigVerInfo = true;
        result.zigVerInfo_ = value;
        return this;
      }
      public Builder SetZigVerInfo(global::maxtrack.pb.mxt1xx.mxt1xx_u_zig_ver_info.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasZigVerInfo = true;
        result.zigVerInfo_ = builderForValue.Build();
        return this;
      }
      public Builder MergeZigVerInfo(global::maxtrack.pb.mxt1xx.mxt1xx_u_zig_ver_info value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasZigVerInfo &&
            result.zigVerInfo_ != global::maxtrack.pb.mxt1xx.mxt1xx_u_zig_ver_info.DefaultInstance) {
            result.zigVerInfo_ = global::maxtrack.pb.mxt1xx.mxt1xx_u_zig_ver_info.CreateBuilder(result.zigVerInfo_).MergeFrom(value).BuildPartial();
        } else {
          result.zigVerInfo_ = value;
        }
        result.hasZigVerInfo = true;
        return this;
      }
      public Builder ClearZigVerInfo() {
        PrepareBuilder();
        result.hasZigVerInfo = false;
        result.zigVerInfo_ = null;
        return this;
      }
      
      public bool HasEvents {
       get { return result.hasEvents; }
      }
      public global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_event Events {
        get { return result.Events; }
        set { SetEvents(value); }
      }
      public Builder SetEvents(global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_event value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasEvents = true;
        result.events_ = value;
        return this;
      }
      public Builder SetEvents(global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_event.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasEvents = true;
        result.events_ = builderForValue.Build();
        return this;
      }
      public Builder MergeEvents(global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_event value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasEvents &&
            result.events_ != global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_event.DefaultInstance) {
            result.events_ = global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_event.CreateBuilder(result.events_).MergeFrom(value).BuildPartial();
        } else {
          result.events_ = value;
        }
        result.hasEvents = true;
        return this;
      }
      public Builder ClearEvents() {
        PrepareBuilder();
        result.hasEvents = false;
        result.events_ = null;
        return this;
      }
    }
    static mxt1xx_u_setup() {
      object.ReferenceEquals(global::maxtrack.pb.mxt1xx.Mxt1Xx.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mxt1xx_u_g100_return_code : pb::GeneratedMessage<mxt1xx_u_g100_return_code, mxt1xx_u_g100_return_code.Builder> {
    private mxt1xx_u_g100_return_code() { }
    private static readonly mxt1xx_u_g100_return_code defaultInstance = new mxt1xx_u_g100_return_code().MakeReadOnly();
    private static readonly string[] _mxt1XxUG100ReturnCodeFieldNames = new string[] { "crc", "error", "operate", "type" };
    private static readonly uint[] _mxt1XxUG100ReturnCodeFieldTags = new uint[] { 16, 8, 32, 24 };
    public static mxt1xx_u_g100_return_code DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mxt1xx_u_g100_return_code DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mxt1xx_u_g100_return_code ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_g100_return_code__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mxt1xx_u_g100_return_code, mxt1xx_u_g100_return_code.Builder> InternalFieldAccessors {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_g100_return_code__FieldAccessorTable; }
    }
    
    public const int ErrorFieldNumber = 1;
    private bool hasError;
    private bool error_;
    public bool HasError {
      get { return hasError; }
    }
    public bool Error {
      get { return error_; }
    }
    
    public const int CrcFieldNumber = 2;
    private bool hasCrc;
    private uint crc_;
    public bool HasCrc {
      get { return hasCrc; }
    }
    [global::System.CLSCompliant(false)]
    public uint Crc {
      get { return crc_; }
    }
    
    public const int TypeFieldNumber = 3;
    private bool hasType;
    private uint type_;
    public bool HasType {
      get { return hasType; }
    }
    [global::System.CLSCompliant(false)]
    public uint Type {
      get { return type_; }
    }
    
    public const int OperateFieldNumber = 4;
    private bool hasOperate;
    private uint operate_;
    public bool HasOperate {
      get { return hasOperate; }
    }
    [global::System.CLSCompliant(false)]
    public uint Operate {
      get { return operate_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mxt1XxUG100ReturnCodeFieldNames;
      if (hasError) {
        output.WriteBool(1, field_names[1], Error);
      }
      if (hasCrc) {
        output.WriteUInt32(2, field_names[0], Crc);
      }
      if (hasType) {
        output.WriteUInt32(3, field_names[3], Type);
      }
      if (hasOperate) {
        output.WriteUInt32(4, field_names[2], Operate);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasError) {
        size += pb::CodedOutputStream.ComputeBoolSize(1, Error);
      }
      if (hasCrc) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, Crc);
      }
      if (hasType) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, Type);
      }
      if (hasOperate) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, Operate);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mxt1xx_u_g100_return_code ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_g100_return_code ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_g100_return_code ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_g100_return_code ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_g100_return_code ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_g100_return_code ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_g100_return_code ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mxt1xx_u_g100_return_code ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mxt1xx_u_g100_return_code ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_g100_return_code ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mxt1xx_u_g100_return_code MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mxt1xx_u_g100_return_code prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mxt1xx_u_g100_return_code, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mxt1xx_u_g100_return_code cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mxt1xx_u_g100_return_code result;
      
      private mxt1xx_u_g100_return_code PrepareBuilder() {
        if (resultIsReadOnly) {
          mxt1xx_u_g100_return_code original = result;
          result = new mxt1xx_u_g100_return_code();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mxt1xx_u_g100_return_code MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_g100_return_code.Descriptor; }
      }
      
      public override mxt1xx_u_g100_return_code DefaultInstanceForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_g100_return_code.DefaultInstance; }
      }
      
      public override mxt1xx_u_g100_return_code BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mxt1xx_u_g100_return_code) {
          return MergeFrom((mxt1xx_u_g100_return_code) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mxt1xx_u_g100_return_code other) {
        if (other == global::maxtrack.pb.mxt1xx.mxt1xx_u_g100_return_code.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasError) {
          Error = other.Error;
        }
        if (other.HasCrc) {
          Crc = other.Crc;
        }
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasOperate) {
          Operate = other.Operate;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mxt1XxUG100ReturnCodeFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mxt1XxUG100ReturnCodeFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasError = input.ReadBool(ref result.error_);
              break;
            }
            case 16: {
              result.hasCrc = input.ReadUInt32(ref result.crc_);
              break;
            }
            case 24: {
              result.hasType = input.ReadUInt32(ref result.type_);
              break;
            }
            case 32: {
              result.hasOperate = input.ReadUInt32(ref result.operate_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasError {
        get { return result.hasError; }
      }
      public bool Error {
        get { return result.Error; }
        set { SetError(value); }
      }
      public Builder SetError(bool value) {
        PrepareBuilder();
        result.hasError = true;
        result.error_ = value;
        return this;
      }
      public Builder ClearError() {
        PrepareBuilder();
        result.hasError = false;
        result.error_ = false;
        return this;
      }
      
      public bool HasCrc {
        get { return result.hasCrc; }
      }
      [global::System.CLSCompliant(false)]
      public uint Crc {
        get { return result.Crc; }
        set { SetCrc(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetCrc(uint value) {
        PrepareBuilder();
        result.hasCrc = true;
        result.crc_ = value;
        return this;
      }
      public Builder ClearCrc() {
        PrepareBuilder();
        result.hasCrc = false;
        result.crc_ = 0;
        return this;
      }
      
      public bool HasType {
        get { return result.hasType; }
      }
      [global::System.CLSCompliant(false)]
      public uint Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetType(uint value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = 0;
        return this;
      }
      
      public bool HasOperate {
        get { return result.hasOperate; }
      }
      [global::System.CLSCompliant(false)]
      public uint Operate {
        get { return result.Operate; }
        set { SetOperate(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetOperate(uint value) {
        PrepareBuilder();
        result.hasOperate = true;
        result.operate_ = value;
        return this;
      }
      public Builder ClearOperate() {
        PrepareBuilder();
        result.hasOperate = false;
        result.operate_ = 0;
        return this;
      }
    }
    static mxt1xx_u_g100_return_code() {
      object.ReferenceEquals(global::maxtrack.pb.mxt1xx.Mxt1Xx.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mxt1xx_u_g100_config : pb::GeneratedMessage<mxt1xx_u_g100_config, mxt1xx_u_g100_config.Builder> {
    private mxt1xx_u_g100_config() { }
    private static readonly mxt1xx_u_g100_config defaultInstance = new mxt1xx_u_g100_config().MakeReadOnly();
    private static readonly string[] _mxt1XxUG100ConfigFieldNames = new string[] { "bit_rate", "cam_frame_rate", "cam_standard_id", "cam_video_height", "cam_video_width", "cap_auto_save_path", "cap_auto_save_path_size", "cap_manual_save_path", "cap_manual_save_path_size", "debug_mode", "default_record_state", "default_stream_state", "dvr_mode", "ip", "port", "rec_auto_save_path", "rec_auto_save_path_size", "rec_manual_save_path", "rec_manual_save_path_size", "record_lenght", "total_size" };
    private static readonly uint[] _mxt1XxUG100ConfigFieldTags = new uint[] { 64, 40, 32, 24, 16, 114, 104, 130, 120, 160, 152, 144, 168, 50, 56, 82, 72, 98, 88, 136, 8 };
    public static mxt1xx_u_g100_config DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mxt1xx_u_g100_config DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mxt1xx_u_g100_config ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_g100_config__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mxt1xx_u_g100_config, mxt1xx_u_g100_config.Builder> InternalFieldAccessors {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_g100_config__FieldAccessorTable; }
    }
    
    public const int TotalSizeFieldNumber = 1;
    private bool hasTotalSize;
    private uint totalSize_;
    public bool HasTotalSize {
      get { return hasTotalSize; }
    }
    [global::System.CLSCompliant(false)]
    public uint TotalSize {
      get { return totalSize_; }
    }
    
    public const int CamVideoWidthFieldNumber = 2;
    private bool hasCamVideoWidth;
    private uint camVideoWidth_;
    public bool HasCamVideoWidth {
      get { return hasCamVideoWidth; }
    }
    [global::System.CLSCompliant(false)]
    public uint CamVideoWidth {
      get { return camVideoWidth_; }
    }
    
    public const int CamVideoHeightFieldNumber = 3;
    private bool hasCamVideoHeight;
    private uint camVideoHeight_;
    public bool HasCamVideoHeight {
      get { return hasCamVideoHeight; }
    }
    [global::System.CLSCompliant(false)]
    public uint CamVideoHeight {
      get { return camVideoHeight_; }
    }
    
    public const int CamStandardIdFieldNumber = 4;
    private bool hasCamStandardId;
    private bool camStandardId_;
    public bool HasCamStandardId {
      get { return hasCamStandardId; }
    }
    public bool CamStandardId {
      get { return camStandardId_; }
    }
    
    public const int CamFrameRateFieldNumber = 5;
    private bool hasCamFrameRate;
    private uint camFrameRate_;
    public bool HasCamFrameRate {
      get { return hasCamFrameRate; }
    }
    [global::System.CLSCompliant(false)]
    public uint CamFrameRate {
      get { return camFrameRate_; }
    }
    
    public const int IpFieldNumber = 6;
    private bool hasIp;
    private string ip_ = "";
    public bool HasIp {
      get { return hasIp; }
    }
    public string Ip {
      get { return ip_; }
    }
    
    public const int PortFieldNumber = 7;
    private bool hasPort;
    private uint port_;
    public bool HasPort {
      get { return hasPort; }
    }
    [global::System.CLSCompliant(false)]
    public uint Port {
      get { return port_; }
    }
    
    public const int BitRateFieldNumber = 8;
    private bool hasBitRate;
    private uint bitRate_;
    public bool HasBitRate {
      get { return hasBitRate; }
    }
    [global::System.CLSCompliant(false)]
    public uint BitRate {
      get { return bitRate_; }
    }
    
    public const int RecAutoSavePathSizeFieldNumber = 9;
    private bool hasRecAutoSavePathSize;
    private uint recAutoSavePathSize_;
    public bool HasRecAutoSavePathSize {
      get { return hasRecAutoSavePathSize; }
    }
    [global::System.CLSCompliant(false)]
    public uint RecAutoSavePathSize {
      get { return recAutoSavePathSize_; }
    }
    
    public const int RecAutoSavePathFieldNumber = 10;
    private bool hasRecAutoSavePath;
    private string recAutoSavePath_ = "";
    public bool HasRecAutoSavePath {
      get { return hasRecAutoSavePath; }
    }
    public string RecAutoSavePath {
      get { return recAutoSavePath_; }
    }
    
    public const int RecManualSavePathSizeFieldNumber = 11;
    private bool hasRecManualSavePathSize;
    private uint recManualSavePathSize_;
    public bool HasRecManualSavePathSize {
      get { return hasRecManualSavePathSize; }
    }
    [global::System.CLSCompliant(false)]
    public uint RecManualSavePathSize {
      get { return recManualSavePathSize_; }
    }
    
    public const int RecManualSavePathFieldNumber = 12;
    private bool hasRecManualSavePath;
    private string recManualSavePath_ = "";
    public bool HasRecManualSavePath {
      get { return hasRecManualSavePath; }
    }
    public string RecManualSavePath {
      get { return recManualSavePath_; }
    }
    
    public const int CapAutoSavePathSizeFieldNumber = 13;
    private bool hasCapAutoSavePathSize;
    private uint capAutoSavePathSize_;
    public bool HasCapAutoSavePathSize {
      get { return hasCapAutoSavePathSize; }
    }
    [global::System.CLSCompliant(false)]
    public uint CapAutoSavePathSize {
      get { return capAutoSavePathSize_; }
    }
    
    public const int CapAutoSavePathFieldNumber = 14;
    private bool hasCapAutoSavePath;
    private string capAutoSavePath_ = "";
    public bool HasCapAutoSavePath {
      get { return hasCapAutoSavePath; }
    }
    public string CapAutoSavePath {
      get { return capAutoSavePath_; }
    }
    
    public const int CapManualSavePathSizeFieldNumber = 15;
    private bool hasCapManualSavePathSize;
    private uint capManualSavePathSize_;
    public bool HasCapManualSavePathSize {
      get { return hasCapManualSavePathSize; }
    }
    [global::System.CLSCompliant(false)]
    public uint CapManualSavePathSize {
      get { return capManualSavePathSize_; }
    }
    
    public const int CapManualSavePathFieldNumber = 16;
    private bool hasCapManualSavePath;
    private string capManualSavePath_ = "";
    public bool HasCapManualSavePath {
      get { return hasCapManualSavePath; }
    }
    public string CapManualSavePath {
      get { return capManualSavePath_; }
    }
    
    public const int RecordLenghtFieldNumber = 17;
    private bool hasRecordLenght;
    private uint recordLenght_;
    public bool HasRecordLenght {
      get { return hasRecordLenght; }
    }
    [global::System.CLSCompliant(false)]
    public uint RecordLenght {
      get { return recordLenght_; }
    }
    
    public const int DefaultStreamStateFieldNumber = 18;
    private bool hasDefaultStreamState;
    private bool defaultStreamState_;
    public bool HasDefaultStreamState {
      get { return hasDefaultStreamState; }
    }
    public bool DefaultStreamState {
      get { return defaultStreamState_; }
    }
    
    public const int DefaultRecordStateFieldNumber = 19;
    private bool hasDefaultRecordState;
    private bool defaultRecordState_;
    public bool HasDefaultRecordState {
      get { return hasDefaultRecordState; }
    }
    public bool DefaultRecordState {
      get { return defaultRecordState_; }
    }
    
    public const int DebugModeFieldNumber = 20;
    private bool hasDebugMode;
    private bool debugMode_;
    public bool HasDebugMode {
      get { return hasDebugMode; }
    }
    public bool DebugMode {
      get { return debugMode_; }
    }
    
    public const int DvrModeFieldNumber = 21;
    private bool hasDvrMode;
    private uint dvrMode_;
    public bool HasDvrMode {
      get { return hasDvrMode; }
    }
    [global::System.CLSCompliant(false)]
    public uint DvrMode {
      get { return dvrMode_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTotalSize) return false;
        if (!hasCamVideoWidth) return false;
        if (!hasCamVideoHeight) return false;
        if (!hasCamStandardId) return false;
        if (!hasCamFrameRate) return false;
        if (!hasIp) return false;
        if (!hasPort) return false;
        if (!hasBitRate) return false;
        if (!hasRecAutoSavePathSize) return false;
        if (!hasRecAutoSavePath) return false;
        if (!hasRecManualSavePathSize) return false;
        if (!hasRecManualSavePath) return false;
        if (!hasCapAutoSavePathSize) return false;
        if (!hasCapAutoSavePath) return false;
        if (!hasCapManualSavePathSize) return false;
        if (!hasCapManualSavePath) return false;
        if (!hasRecordLenght) return false;
        if (!hasDefaultStreamState) return false;
        if (!hasDefaultRecordState) return false;
        if (!hasDebugMode) return false;
        if (!hasDvrMode) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mxt1XxUG100ConfigFieldNames;
      if (hasTotalSize) {
        output.WriteUInt32(1, field_names[20], TotalSize);
      }
      if (hasCamVideoWidth) {
        output.WriteUInt32(2, field_names[4], CamVideoWidth);
      }
      if (hasCamVideoHeight) {
        output.WriteUInt32(3, field_names[3], CamVideoHeight);
      }
      if (hasCamStandardId) {
        output.WriteBool(4, field_names[2], CamStandardId);
      }
      if (hasCamFrameRate) {
        output.WriteUInt32(5, field_names[1], CamFrameRate);
      }
      if (hasIp) {
        output.WriteString(6, field_names[13], Ip);
      }
      if (hasPort) {
        output.WriteUInt32(7, field_names[14], Port);
      }
      if (hasBitRate) {
        output.WriteUInt32(8, field_names[0], BitRate);
      }
      if (hasRecAutoSavePathSize) {
        output.WriteUInt32(9, field_names[16], RecAutoSavePathSize);
      }
      if (hasRecAutoSavePath) {
        output.WriteString(10, field_names[15], RecAutoSavePath);
      }
      if (hasRecManualSavePathSize) {
        output.WriteUInt32(11, field_names[18], RecManualSavePathSize);
      }
      if (hasRecManualSavePath) {
        output.WriteString(12, field_names[17], RecManualSavePath);
      }
      if (hasCapAutoSavePathSize) {
        output.WriteUInt32(13, field_names[6], CapAutoSavePathSize);
      }
      if (hasCapAutoSavePath) {
        output.WriteString(14, field_names[5], CapAutoSavePath);
      }
      if (hasCapManualSavePathSize) {
        output.WriteUInt32(15, field_names[8], CapManualSavePathSize);
      }
      if (hasCapManualSavePath) {
        output.WriteString(16, field_names[7], CapManualSavePath);
      }
      if (hasRecordLenght) {
        output.WriteUInt32(17, field_names[19], RecordLenght);
      }
      if (hasDefaultStreamState) {
        output.WriteBool(18, field_names[11], DefaultStreamState);
      }
      if (hasDefaultRecordState) {
        output.WriteBool(19, field_names[10], DefaultRecordState);
      }
      if (hasDebugMode) {
        output.WriteBool(20, field_names[9], DebugMode);
      }
      if (hasDvrMode) {
        output.WriteUInt32(21, field_names[12], DvrMode);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasTotalSize) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, TotalSize);
      }
      if (hasCamVideoWidth) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, CamVideoWidth);
      }
      if (hasCamVideoHeight) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, CamVideoHeight);
      }
      if (hasCamStandardId) {
        size += pb::CodedOutputStream.ComputeBoolSize(4, CamStandardId);
      }
      if (hasCamFrameRate) {
        size += pb::CodedOutputStream.ComputeUInt32Size(5, CamFrameRate);
      }
      if (hasIp) {
        size += pb::CodedOutputStream.ComputeStringSize(6, Ip);
      }
      if (hasPort) {
        size += pb::CodedOutputStream.ComputeUInt32Size(7, Port);
      }
      if (hasBitRate) {
        size += pb::CodedOutputStream.ComputeUInt32Size(8, BitRate);
      }
      if (hasRecAutoSavePathSize) {
        size += pb::CodedOutputStream.ComputeUInt32Size(9, RecAutoSavePathSize);
      }
      if (hasRecAutoSavePath) {
        size += pb::CodedOutputStream.ComputeStringSize(10, RecAutoSavePath);
      }
      if (hasRecManualSavePathSize) {
        size += pb::CodedOutputStream.ComputeUInt32Size(11, RecManualSavePathSize);
      }
      if (hasRecManualSavePath) {
        size += pb::CodedOutputStream.ComputeStringSize(12, RecManualSavePath);
      }
      if (hasCapAutoSavePathSize) {
        size += pb::CodedOutputStream.ComputeUInt32Size(13, CapAutoSavePathSize);
      }
      if (hasCapAutoSavePath) {
        size += pb::CodedOutputStream.ComputeStringSize(14, CapAutoSavePath);
      }
      if (hasCapManualSavePathSize) {
        size += pb::CodedOutputStream.ComputeUInt32Size(15, CapManualSavePathSize);
      }
      if (hasCapManualSavePath) {
        size += pb::CodedOutputStream.ComputeStringSize(16, CapManualSavePath);
      }
      if (hasRecordLenght) {
        size += pb::CodedOutputStream.ComputeUInt32Size(17, RecordLenght);
      }
      if (hasDefaultStreamState) {
        size += pb::CodedOutputStream.ComputeBoolSize(18, DefaultStreamState);
      }
      if (hasDefaultRecordState) {
        size += pb::CodedOutputStream.ComputeBoolSize(19, DefaultRecordState);
      }
      if (hasDebugMode) {
        size += pb::CodedOutputStream.ComputeBoolSize(20, DebugMode);
      }
      if (hasDvrMode) {
        size += pb::CodedOutputStream.ComputeUInt32Size(21, DvrMode);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mxt1xx_u_g100_config ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_g100_config ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_g100_config ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_g100_config ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_g100_config ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_g100_config ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_g100_config ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mxt1xx_u_g100_config ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mxt1xx_u_g100_config ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_g100_config ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mxt1xx_u_g100_config MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mxt1xx_u_g100_config prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mxt1xx_u_g100_config, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mxt1xx_u_g100_config cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mxt1xx_u_g100_config result;
      
      private mxt1xx_u_g100_config PrepareBuilder() {
        if (resultIsReadOnly) {
          mxt1xx_u_g100_config original = result;
          result = new mxt1xx_u_g100_config();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mxt1xx_u_g100_config MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_g100_config.Descriptor; }
      }
      
      public override mxt1xx_u_g100_config DefaultInstanceForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_g100_config.DefaultInstance; }
      }
      
      public override mxt1xx_u_g100_config BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mxt1xx_u_g100_config) {
          return MergeFrom((mxt1xx_u_g100_config) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mxt1xx_u_g100_config other) {
        if (other == global::maxtrack.pb.mxt1xx.mxt1xx_u_g100_config.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTotalSize) {
          TotalSize = other.TotalSize;
        }
        if (other.HasCamVideoWidth) {
          CamVideoWidth = other.CamVideoWidth;
        }
        if (other.HasCamVideoHeight) {
          CamVideoHeight = other.CamVideoHeight;
        }
        if (other.HasCamStandardId) {
          CamStandardId = other.CamStandardId;
        }
        if (other.HasCamFrameRate) {
          CamFrameRate = other.CamFrameRate;
        }
        if (other.HasIp) {
          Ip = other.Ip;
        }
        if (other.HasPort) {
          Port = other.Port;
        }
        if (other.HasBitRate) {
          BitRate = other.BitRate;
        }
        if (other.HasRecAutoSavePathSize) {
          RecAutoSavePathSize = other.RecAutoSavePathSize;
        }
        if (other.HasRecAutoSavePath) {
          RecAutoSavePath = other.RecAutoSavePath;
        }
        if (other.HasRecManualSavePathSize) {
          RecManualSavePathSize = other.RecManualSavePathSize;
        }
        if (other.HasRecManualSavePath) {
          RecManualSavePath = other.RecManualSavePath;
        }
        if (other.HasCapAutoSavePathSize) {
          CapAutoSavePathSize = other.CapAutoSavePathSize;
        }
        if (other.HasCapAutoSavePath) {
          CapAutoSavePath = other.CapAutoSavePath;
        }
        if (other.HasCapManualSavePathSize) {
          CapManualSavePathSize = other.CapManualSavePathSize;
        }
        if (other.HasCapManualSavePath) {
          CapManualSavePath = other.CapManualSavePath;
        }
        if (other.HasRecordLenght) {
          RecordLenght = other.RecordLenght;
        }
        if (other.HasDefaultStreamState) {
          DefaultStreamState = other.DefaultStreamState;
        }
        if (other.HasDefaultRecordState) {
          DefaultRecordState = other.DefaultRecordState;
        }
        if (other.HasDebugMode) {
          DebugMode = other.DebugMode;
        }
        if (other.HasDvrMode) {
          DvrMode = other.DvrMode;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mxt1XxUG100ConfigFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mxt1XxUG100ConfigFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasTotalSize = input.ReadUInt32(ref result.totalSize_);
              break;
            }
            case 16: {
              result.hasCamVideoWidth = input.ReadUInt32(ref result.camVideoWidth_);
              break;
            }
            case 24: {
              result.hasCamVideoHeight = input.ReadUInt32(ref result.camVideoHeight_);
              break;
            }
            case 32: {
              result.hasCamStandardId = input.ReadBool(ref result.camStandardId_);
              break;
            }
            case 40: {
              result.hasCamFrameRate = input.ReadUInt32(ref result.camFrameRate_);
              break;
            }
            case 50: {
              result.hasIp = input.ReadString(ref result.ip_);
              break;
            }
            case 56: {
              result.hasPort = input.ReadUInt32(ref result.port_);
              break;
            }
            case 64: {
              result.hasBitRate = input.ReadUInt32(ref result.bitRate_);
              break;
            }
            case 72: {
              result.hasRecAutoSavePathSize = input.ReadUInt32(ref result.recAutoSavePathSize_);
              break;
            }
            case 82: {
              result.hasRecAutoSavePath = input.ReadString(ref result.recAutoSavePath_);
              break;
            }
            case 88: {
              result.hasRecManualSavePathSize = input.ReadUInt32(ref result.recManualSavePathSize_);
              break;
            }
            case 98: {
              result.hasRecManualSavePath = input.ReadString(ref result.recManualSavePath_);
              break;
            }
            case 104: {
              result.hasCapAutoSavePathSize = input.ReadUInt32(ref result.capAutoSavePathSize_);
              break;
            }
            case 114: {
              result.hasCapAutoSavePath = input.ReadString(ref result.capAutoSavePath_);
              break;
            }
            case 120: {
              result.hasCapManualSavePathSize = input.ReadUInt32(ref result.capManualSavePathSize_);
              break;
            }
            case 130: {
              result.hasCapManualSavePath = input.ReadString(ref result.capManualSavePath_);
              break;
            }
            case 136: {
              result.hasRecordLenght = input.ReadUInt32(ref result.recordLenght_);
              break;
            }
            case 144: {
              result.hasDefaultStreamState = input.ReadBool(ref result.defaultStreamState_);
              break;
            }
            case 152: {
              result.hasDefaultRecordState = input.ReadBool(ref result.defaultRecordState_);
              break;
            }
            case 160: {
              result.hasDebugMode = input.ReadBool(ref result.debugMode_);
              break;
            }
            case 168: {
              result.hasDvrMode = input.ReadUInt32(ref result.dvrMode_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTotalSize {
        get { return result.hasTotalSize; }
      }
      [global::System.CLSCompliant(false)]
      public uint TotalSize {
        get { return result.TotalSize; }
        set { SetTotalSize(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetTotalSize(uint value) {
        PrepareBuilder();
        result.hasTotalSize = true;
        result.totalSize_ = value;
        return this;
      }
      public Builder ClearTotalSize() {
        PrepareBuilder();
        result.hasTotalSize = false;
        result.totalSize_ = 0;
        return this;
      }
      
      public bool HasCamVideoWidth {
        get { return result.hasCamVideoWidth; }
      }
      [global::System.CLSCompliant(false)]
      public uint CamVideoWidth {
        get { return result.CamVideoWidth; }
        set { SetCamVideoWidth(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetCamVideoWidth(uint value) {
        PrepareBuilder();
        result.hasCamVideoWidth = true;
        result.camVideoWidth_ = value;
        return this;
      }
      public Builder ClearCamVideoWidth() {
        PrepareBuilder();
        result.hasCamVideoWidth = false;
        result.camVideoWidth_ = 0;
        return this;
      }
      
      public bool HasCamVideoHeight {
        get { return result.hasCamVideoHeight; }
      }
      [global::System.CLSCompliant(false)]
      public uint CamVideoHeight {
        get { return result.CamVideoHeight; }
        set { SetCamVideoHeight(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetCamVideoHeight(uint value) {
        PrepareBuilder();
        result.hasCamVideoHeight = true;
        result.camVideoHeight_ = value;
        return this;
      }
      public Builder ClearCamVideoHeight() {
        PrepareBuilder();
        result.hasCamVideoHeight = false;
        result.camVideoHeight_ = 0;
        return this;
      }
      
      public bool HasCamStandardId {
        get { return result.hasCamStandardId; }
      }
      public bool CamStandardId {
        get { return result.CamStandardId; }
        set { SetCamStandardId(value); }
      }
      public Builder SetCamStandardId(bool value) {
        PrepareBuilder();
        result.hasCamStandardId = true;
        result.camStandardId_ = value;
        return this;
      }
      public Builder ClearCamStandardId() {
        PrepareBuilder();
        result.hasCamStandardId = false;
        result.camStandardId_ = false;
        return this;
      }
      
      public bool HasCamFrameRate {
        get { return result.hasCamFrameRate; }
      }
      [global::System.CLSCompliant(false)]
      public uint CamFrameRate {
        get { return result.CamFrameRate; }
        set { SetCamFrameRate(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetCamFrameRate(uint value) {
        PrepareBuilder();
        result.hasCamFrameRate = true;
        result.camFrameRate_ = value;
        return this;
      }
      public Builder ClearCamFrameRate() {
        PrepareBuilder();
        result.hasCamFrameRate = false;
        result.camFrameRate_ = 0;
        return this;
      }
      
      public bool HasIp {
        get { return result.hasIp; }
      }
      public string Ip {
        get { return result.Ip; }
        set { SetIp(value); }
      }
      public Builder SetIp(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasIp = true;
        result.ip_ = value;
        return this;
      }
      public Builder ClearIp() {
        PrepareBuilder();
        result.hasIp = false;
        result.ip_ = "";
        return this;
      }
      
      public bool HasPort {
        get { return result.hasPort; }
      }
      [global::System.CLSCompliant(false)]
      public uint Port {
        get { return result.Port; }
        set { SetPort(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetPort(uint value) {
        PrepareBuilder();
        result.hasPort = true;
        result.port_ = value;
        return this;
      }
      public Builder ClearPort() {
        PrepareBuilder();
        result.hasPort = false;
        result.port_ = 0;
        return this;
      }
      
      public bool HasBitRate {
        get { return result.hasBitRate; }
      }
      [global::System.CLSCompliant(false)]
      public uint BitRate {
        get { return result.BitRate; }
        set { SetBitRate(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetBitRate(uint value) {
        PrepareBuilder();
        result.hasBitRate = true;
        result.bitRate_ = value;
        return this;
      }
      public Builder ClearBitRate() {
        PrepareBuilder();
        result.hasBitRate = false;
        result.bitRate_ = 0;
        return this;
      }
      
      public bool HasRecAutoSavePathSize {
        get { return result.hasRecAutoSavePathSize; }
      }
      [global::System.CLSCompliant(false)]
      public uint RecAutoSavePathSize {
        get { return result.RecAutoSavePathSize; }
        set { SetRecAutoSavePathSize(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetRecAutoSavePathSize(uint value) {
        PrepareBuilder();
        result.hasRecAutoSavePathSize = true;
        result.recAutoSavePathSize_ = value;
        return this;
      }
      public Builder ClearRecAutoSavePathSize() {
        PrepareBuilder();
        result.hasRecAutoSavePathSize = false;
        result.recAutoSavePathSize_ = 0;
        return this;
      }
      
      public bool HasRecAutoSavePath {
        get { return result.hasRecAutoSavePath; }
      }
      public string RecAutoSavePath {
        get { return result.RecAutoSavePath; }
        set { SetRecAutoSavePath(value); }
      }
      public Builder SetRecAutoSavePath(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRecAutoSavePath = true;
        result.recAutoSavePath_ = value;
        return this;
      }
      public Builder ClearRecAutoSavePath() {
        PrepareBuilder();
        result.hasRecAutoSavePath = false;
        result.recAutoSavePath_ = "";
        return this;
      }
      
      public bool HasRecManualSavePathSize {
        get { return result.hasRecManualSavePathSize; }
      }
      [global::System.CLSCompliant(false)]
      public uint RecManualSavePathSize {
        get { return result.RecManualSavePathSize; }
        set { SetRecManualSavePathSize(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetRecManualSavePathSize(uint value) {
        PrepareBuilder();
        result.hasRecManualSavePathSize = true;
        result.recManualSavePathSize_ = value;
        return this;
      }
      public Builder ClearRecManualSavePathSize() {
        PrepareBuilder();
        result.hasRecManualSavePathSize = false;
        result.recManualSavePathSize_ = 0;
        return this;
      }
      
      public bool HasRecManualSavePath {
        get { return result.hasRecManualSavePath; }
      }
      public string RecManualSavePath {
        get { return result.RecManualSavePath; }
        set { SetRecManualSavePath(value); }
      }
      public Builder SetRecManualSavePath(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRecManualSavePath = true;
        result.recManualSavePath_ = value;
        return this;
      }
      public Builder ClearRecManualSavePath() {
        PrepareBuilder();
        result.hasRecManualSavePath = false;
        result.recManualSavePath_ = "";
        return this;
      }
      
      public bool HasCapAutoSavePathSize {
        get { return result.hasCapAutoSavePathSize; }
      }
      [global::System.CLSCompliant(false)]
      public uint CapAutoSavePathSize {
        get { return result.CapAutoSavePathSize; }
        set { SetCapAutoSavePathSize(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetCapAutoSavePathSize(uint value) {
        PrepareBuilder();
        result.hasCapAutoSavePathSize = true;
        result.capAutoSavePathSize_ = value;
        return this;
      }
      public Builder ClearCapAutoSavePathSize() {
        PrepareBuilder();
        result.hasCapAutoSavePathSize = false;
        result.capAutoSavePathSize_ = 0;
        return this;
      }
      
      public bool HasCapAutoSavePath {
        get { return result.hasCapAutoSavePath; }
      }
      public string CapAutoSavePath {
        get { return result.CapAutoSavePath; }
        set { SetCapAutoSavePath(value); }
      }
      public Builder SetCapAutoSavePath(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCapAutoSavePath = true;
        result.capAutoSavePath_ = value;
        return this;
      }
      public Builder ClearCapAutoSavePath() {
        PrepareBuilder();
        result.hasCapAutoSavePath = false;
        result.capAutoSavePath_ = "";
        return this;
      }
      
      public bool HasCapManualSavePathSize {
        get { return result.hasCapManualSavePathSize; }
      }
      [global::System.CLSCompliant(false)]
      public uint CapManualSavePathSize {
        get { return result.CapManualSavePathSize; }
        set { SetCapManualSavePathSize(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetCapManualSavePathSize(uint value) {
        PrepareBuilder();
        result.hasCapManualSavePathSize = true;
        result.capManualSavePathSize_ = value;
        return this;
      }
      public Builder ClearCapManualSavePathSize() {
        PrepareBuilder();
        result.hasCapManualSavePathSize = false;
        result.capManualSavePathSize_ = 0;
        return this;
      }
      
      public bool HasCapManualSavePath {
        get { return result.hasCapManualSavePath; }
      }
      public string CapManualSavePath {
        get { return result.CapManualSavePath; }
        set { SetCapManualSavePath(value); }
      }
      public Builder SetCapManualSavePath(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCapManualSavePath = true;
        result.capManualSavePath_ = value;
        return this;
      }
      public Builder ClearCapManualSavePath() {
        PrepareBuilder();
        result.hasCapManualSavePath = false;
        result.capManualSavePath_ = "";
        return this;
      }
      
      public bool HasRecordLenght {
        get { return result.hasRecordLenght; }
      }
      [global::System.CLSCompliant(false)]
      public uint RecordLenght {
        get { return result.RecordLenght; }
        set { SetRecordLenght(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetRecordLenght(uint value) {
        PrepareBuilder();
        result.hasRecordLenght = true;
        result.recordLenght_ = value;
        return this;
      }
      public Builder ClearRecordLenght() {
        PrepareBuilder();
        result.hasRecordLenght = false;
        result.recordLenght_ = 0;
        return this;
      }
      
      public bool HasDefaultStreamState {
        get { return result.hasDefaultStreamState; }
      }
      public bool DefaultStreamState {
        get { return result.DefaultStreamState; }
        set { SetDefaultStreamState(value); }
      }
      public Builder SetDefaultStreamState(bool value) {
        PrepareBuilder();
        result.hasDefaultStreamState = true;
        result.defaultStreamState_ = value;
        return this;
      }
      public Builder ClearDefaultStreamState() {
        PrepareBuilder();
        result.hasDefaultStreamState = false;
        result.defaultStreamState_ = false;
        return this;
      }
      
      public bool HasDefaultRecordState {
        get { return result.hasDefaultRecordState; }
      }
      public bool DefaultRecordState {
        get { return result.DefaultRecordState; }
        set { SetDefaultRecordState(value); }
      }
      public Builder SetDefaultRecordState(bool value) {
        PrepareBuilder();
        result.hasDefaultRecordState = true;
        result.defaultRecordState_ = value;
        return this;
      }
      public Builder ClearDefaultRecordState() {
        PrepareBuilder();
        result.hasDefaultRecordState = false;
        result.defaultRecordState_ = false;
        return this;
      }
      
      public bool HasDebugMode {
        get { return result.hasDebugMode; }
      }
      public bool DebugMode {
        get { return result.DebugMode; }
        set { SetDebugMode(value); }
      }
      public Builder SetDebugMode(bool value) {
        PrepareBuilder();
        result.hasDebugMode = true;
        result.debugMode_ = value;
        return this;
      }
      public Builder ClearDebugMode() {
        PrepareBuilder();
        result.hasDebugMode = false;
        result.debugMode_ = false;
        return this;
      }
      
      public bool HasDvrMode {
        get { return result.hasDvrMode; }
      }
      [global::System.CLSCompliant(false)]
      public uint DvrMode {
        get { return result.DvrMode; }
        set { SetDvrMode(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetDvrMode(uint value) {
        PrepareBuilder();
        result.hasDvrMode = true;
        result.dvrMode_ = value;
        return this;
      }
      public Builder ClearDvrMode() {
        PrepareBuilder();
        result.hasDvrMode = false;
        result.dvrMode_ = 0;
        return this;
      }
    }
    static mxt1xx_u_g100_config() {
      object.ReferenceEquals(global::maxtrack.pb.mxt1xx.Mxt1Xx.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mxt1xx_u_g100 : pb::GeneratedMessage<mxt1xx_u_g100, mxt1xx_u_g100.Builder> {
    private mxt1xx_u_g100() { }
    private static readonly mxt1xx_u_g100 defaultInstance = new mxt1xx_u_g100().MakeReadOnly();
    private static readonly string[] _mxt1XxUG100FieldNames = new string[] { "config", "header", "ret_code" };
    private static readonly uint[] _mxt1XxUG100FieldTags = new uint[] { 26, 10, 18 };
    public static mxt1xx_u_g100 DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mxt1xx_u_g100 DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mxt1xx_u_g100 ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_g100__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mxt1xx_u_g100, mxt1xx_u_g100.Builder> InternalFieldAccessors {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_g100__FieldAccessorTable; }
    }
    
    public const int HeaderFieldNumber = 1;
    private bool hasHeader;
    private global::maxtrack.pb.mxt1xx.mxt1xx_u_setup_header header_;
    public bool HasHeader {
      get { return hasHeader; }
    }
    public global::maxtrack.pb.mxt1xx.mxt1xx_u_setup_header Header {
      get { return header_ ?? global::maxtrack.pb.mxt1xx.mxt1xx_u_setup_header.DefaultInstance; }
    }
    
    public const int RetCodeFieldNumber = 2;
    private bool hasRetCode;
    private global::maxtrack.pb.mxt1xx.mxt1xx_u_g100_return_code retCode_;
    public bool HasRetCode {
      get { return hasRetCode; }
    }
    public global::maxtrack.pb.mxt1xx.mxt1xx_u_g100_return_code RetCode {
      get { return retCode_ ?? global::maxtrack.pb.mxt1xx.mxt1xx_u_g100_return_code.DefaultInstance; }
    }
    
    public const int ConfigFieldNumber = 3;
    private bool hasConfig;
    private global::maxtrack.pb.mxt1xx.mxt1xx_u_g100_config config_;
    public bool HasConfig {
      get { return hasConfig; }
    }
    public global::maxtrack.pb.mxt1xx.mxt1xx_u_g100_config Config {
      get { return config_ ?? global::maxtrack.pb.mxt1xx.mxt1xx_u_g100_config.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasHeader) return false;
        if (!Header.IsInitialized) return false;
        if (HasConfig) {
          if (!Config.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mxt1XxUG100FieldNames;
      if (hasHeader) {
        output.WriteMessage(1, field_names[1], Header);
      }
      if (hasRetCode) {
        output.WriteMessage(2, field_names[2], RetCode);
      }
      if (hasConfig) {
        output.WriteMessage(3, field_names[0], Config);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasHeader) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, Header);
      }
      if (hasRetCode) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, RetCode);
      }
      if (hasConfig) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, Config);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mxt1xx_u_g100 ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_g100 ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_g100 ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_g100 ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_g100 ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_g100 ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_g100 ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mxt1xx_u_g100 ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mxt1xx_u_g100 ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_g100 ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mxt1xx_u_g100 MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mxt1xx_u_g100 prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mxt1xx_u_g100, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mxt1xx_u_g100 cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mxt1xx_u_g100 result;
      
      private mxt1xx_u_g100 PrepareBuilder() {
        if (resultIsReadOnly) {
          mxt1xx_u_g100 original = result;
          result = new mxt1xx_u_g100();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mxt1xx_u_g100 MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_g100.Descriptor; }
      }
      
      public override mxt1xx_u_g100 DefaultInstanceForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_g100.DefaultInstance; }
      }
      
      public override mxt1xx_u_g100 BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mxt1xx_u_g100) {
          return MergeFrom((mxt1xx_u_g100) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mxt1xx_u_g100 other) {
        if (other == global::maxtrack.pb.mxt1xx.mxt1xx_u_g100.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasHeader) {
          MergeHeader(other.Header);
        }
        if (other.HasRetCode) {
          MergeRetCode(other.RetCode);
        }
        if (other.HasConfig) {
          MergeConfig(other.Config);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mxt1XxUG100FieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mxt1XxUG100FieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::maxtrack.pb.mxt1xx.mxt1xx_u_setup_header.Builder subBuilder = global::maxtrack.pb.mxt1xx.mxt1xx_u_setup_header.CreateBuilder();
              if (result.hasHeader) {
                subBuilder.MergeFrom(Header);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Header = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::maxtrack.pb.mxt1xx.mxt1xx_u_g100_return_code.Builder subBuilder = global::maxtrack.pb.mxt1xx.mxt1xx_u_g100_return_code.CreateBuilder();
              if (result.hasRetCode) {
                subBuilder.MergeFrom(RetCode);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              RetCode = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::maxtrack.pb.mxt1xx.mxt1xx_u_g100_config.Builder subBuilder = global::maxtrack.pb.mxt1xx.mxt1xx_u_g100_config.CreateBuilder();
              if (result.hasConfig) {
                subBuilder.MergeFrom(Config);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Config = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasHeader {
       get { return result.hasHeader; }
      }
      public global::maxtrack.pb.mxt1xx.mxt1xx_u_setup_header Header {
        get { return result.Header; }
        set { SetHeader(value); }
      }
      public Builder SetHeader(global::maxtrack.pb.mxt1xx.mxt1xx_u_setup_header value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHeader = true;
        result.header_ = value;
        return this;
      }
      public Builder SetHeader(global::maxtrack.pb.mxt1xx.mxt1xx_u_setup_header.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasHeader = true;
        result.header_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHeader(global::maxtrack.pb.mxt1xx.mxt1xx_u_setup_header value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasHeader &&
            result.header_ != global::maxtrack.pb.mxt1xx.mxt1xx_u_setup_header.DefaultInstance) {
            result.header_ = global::maxtrack.pb.mxt1xx.mxt1xx_u_setup_header.CreateBuilder(result.header_).MergeFrom(value).BuildPartial();
        } else {
          result.header_ = value;
        }
        result.hasHeader = true;
        return this;
      }
      public Builder ClearHeader() {
        PrepareBuilder();
        result.hasHeader = false;
        result.header_ = null;
        return this;
      }
      
      public bool HasRetCode {
       get { return result.hasRetCode; }
      }
      public global::maxtrack.pb.mxt1xx.mxt1xx_u_g100_return_code RetCode {
        get { return result.RetCode; }
        set { SetRetCode(value); }
      }
      public Builder SetRetCode(global::maxtrack.pb.mxt1xx.mxt1xx_u_g100_return_code value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRetCode = true;
        result.retCode_ = value;
        return this;
      }
      public Builder SetRetCode(global::maxtrack.pb.mxt1xx.mxt1xx_u_g100_return_code.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasRetCode = true;
        result.retCode_ = builderForValue.Build();
        return this;
      }
      public Builder MergeRetCode(global::maxtrack.pb.mxt1xx.mxt1xx_u_g100_return_code value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasRetCode &&
            result.retCode_ != global::maxtrack.pb.mxt1xx.mxt1xx_u_g100_return_code.DefaultInstance) {
            result.retCode_ = global::maxtrack.pb.mxt1xx.mxt1xx_u_g100_return_code.CreateBuilder(result.retCode_).MergeFrom(value).BuildPartial();
        } else {
          result.retCode_ = value;
        }
        result.hasRetCode = true;
        return this;
      }
      public Builder ClearRetCode() {
        PrepareBuilder();
        result.hasRetCode = false;
        result.retCode_ = null;
        return this;
      }
      
      public bool HasConfig {
       get { return result.hasConfig; }
      }
      public global::maxtrack.pb.mxt1xx.mxt1xx_u_g100_config Config {
        get { return result.Config; }
        set { SetConfig(value); }
      }
      public Builder SetConfig(global::maxtrack.pb.mxt1xx.mxt1xx_u_g100_config value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasConfig = true;
        result.config_ = value;
        return this;
      }
      public Builder SetConfig(global::maxtrack.pb.mxt1xx.mxt1xx_u_g100_config.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasConfig = true;
        result.config_ = builderForValue.Build();
        return this;
      }
      public Builder MergeConfig(global::maxtrack.pb.mxt1xx.mxt1xx_u_g100_config value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasConfig &&
            result.config_ != global::maxtrack.pb.mxt1xx.mxt1xx_u_g100_config.DefaultInstance) {
            result.config_ = global::maxtrack.pb.mxt1xx.mxt1xx_u_g100_config.CreateBuilder(result.config_).MergeFrom(value).BuildPartial();
        } else {
          result.config_ = value;
        }
        result.hasConfig = true;
        return this;
      }
      public Builder ClearConfig() {
        PrepareBuilder();
        result.hasConfig = false;
        result.config_ = null;
        return this;
      }
    }
    static mxt1xx_u_g100() {
      object.ReferenceEquals(global::maxtrack.pb.mxt1xx.Mxt1Xx.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mxt1xx_u_ip_gprs_connect : pb::GeneratedMessage<mxt1xx_u_ip_gprs_connect, mxt1xx_u_ip_gprs_connect.Builder> {
    private mxt1xx_u_ip_gprs_connect() { }
    private static readonly mxt1xx_u_ip_gprs_connect defaultInstance = new mxt1xx_u_ip_gprs_connect().MakeReadOnly();
    private static readonly string[] _mxt1XxUIpGprsConnectFieldNames = new string[] { "ip", "protocol", "serial", "timestamp" };
    private static readonly uint[] _mxt1XxUIpGprsConnectFieldTags = new uint[] { 34, 16, 8, 26 };
    public static mxt1xx_u_ip_gprs_connect DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mxt1xx_u_ip_gprs_connect DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mxt1xx_u_ip_gprs_connect ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_ip_gprs_connect__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mxt1xx_u_ip_gprs_connect, mxt1xx_u_ip_gprs_connect.Builder> InternalFieldAccessors {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_ip_gprs_connect__FieldAccessorTable; }
    }
    
    public const int SerialFieldNumber = 1;
    private bool hasSerial;
    private uint serial_;
    public bool HasSerial {
      get { return hasSerial; }
    }
    [global::System.CLSCompliant(false)]
    public uint Serial {
      get { return serial_; }
    }
    
    public const int ProtocolFieldNumber = 2;
    private bool hasProtocol;
    private uint protocol_;
    public bool HasProtocol {
      get { return hasProtocol; }
    }
    [global::System.CLSCompliant(false)]
    public uint Protocol {
      get { return protocol_; }
    }
    
    public const int TimestampFieldNumber = 3;
    private bool hasTimestamp;
    private string timestamp_ = "";
    public bool HasTimestamp {
      get { return hasTimestamp; }
    }
    public string Timestamp {
      get { return timestamp_; }
    }
    
    public const int IpFieldNumber = 4;
    private bool hasIp;
    private string ip_ = "";
    public bool HasIp {
      get { return hasIp; }
    }
    public string Ip {
      get { return ip_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSerial) return false;
        if (!hasProtocol) return false;
        if (!hasTimestamp) return false;
        if (!hasIp) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mxt1XxUIpGprsConnectFieldNames;
      if (hasSerial) {
        output.WriteUInt32(1, field_names[2], Serial);
      }
      if (hasProtocol) {
        output.WriteUInt32(2, field_names[1], Protocol);
      }
      if (hasTimestamp) {
        output.WriteString(3, field_names[3], Timestamp);
      }
      if (hasIp) {
        output.WriteString(4, field_names[0], Ip);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasSerial) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, Serial);
      }
      if (hasProtocol) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, Protocol);
      }
      if (hasTimestamp) {
        size += pb::CodedOutputStream.ComputeStringSize(3, Timestamp);
      }
      if (hasIp) {
        size += pb::CodedOutputStream.ComputeStringSize(4, Ip);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mxt1xx_u_ip_gprs_connect ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_ip_gprs_connect ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_ip_gprs_connect ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_ip_gprs_connect ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_ip_gprs_connect ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_ip_gprs_connect ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_ip_gprs_connect ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mxt1xx_u_ip_gprs_connect ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mxt1xx_u_ip_gprs_connect ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_ip_gprs_connect ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mxt1xx_u_ip_gprs_connect MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mxt1xx_u_ip_gprs_connect prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mxt1xx_u_ip_gprs_connect, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mxt1xx_u_ip_gprs_connect cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mxt1xx_u_ip_gprs_connect result;
      
      private mxt1xx_u_ip_gprs_connect PrepareBuilder() {
        if (resultIsReadOnly) {
          mxt1xx_u_ip_gprs_connect original = result;
          result = new mxt1xx_u_ip_gprs_connect();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mxt1xx_u_ip_gprs_connect MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_ip_gprs_connect.Descriptor; }
      }
      
      public override mxt1xx_u_ip_gprs_connect DefaultInstanceForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_ip_gprs_connect.DefaultInstance; }
      }
      
      public override mxt1xx_u_ip_gprs_connect BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mxt1xx_u_ip_gprs_connect) {
          return MergeFrom((mxt1xx_u_ip_gprs_connect) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mxt1xx_u_ip_gprs_connect other) {
        if (other == global::maxtrack.pb.mxt1xx.mxt1xx_u_ip_gprs_connect.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSerial) {
          Serial = other.Serial;
        }
        if (other.HasProtocol) {
          Protocol = other.Protocol;
        }
        if (other.HasTimestamp) {
          Timestamp = other.Timestamp;
        }
        if (other.HasIp) {
          Ip = other.Ip;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mxt1XxUIpGprsConnectFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mxt1XxUIpGprsConnectFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasSerial = input.ReadUInt32(ref result.serial_);
              break;
            }
            case 16: {
              result.hasProtocol = input.ReadUInt32(ref result.protocol_);
              break;
            }
            case 26: {
              result.hasTimestamp = input.ReadString(ref result.timestamp_);
              break;
            }
            case 34: {
              result.hasIp = input.ReadString(ref result.ip_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSerial {
        get { return result.hasSerial; }
      }
      [global::System.CLSCompliant(false)]
      public uint Serial {
        get { return result.Serial; }
        set { SetSerial(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSerial(uint value) {
        PrepareBuilder();
        result.hasSerial = true;
        result.serial_ = value;
        return this;
      }
      public Builder ClearSerial() {
        PrepareBuilder();
        result.hasSerial = false;
        result.serial_ = 0;
        return this;
      }
      
      public bool HasProtocol {
        get { return result.hasProtocol; }
      }
      [global::System.CLSCompliant(false)]
      public uint Protocol {
        get { return result.Protocol; }
        set { SetProtocol(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetProtocol(uint value) {
        PrepareBuilder();
        result.hasProtocol = true;
        result.protocol_ = value;
        return this;
      }
      public Builder ClearProtocol() {
        PrepareBuilder();
        result.hasProtocol = false;
        result.protocol_ = 0;
        return this;
      }
      
      public bool HasTimestamp {
        get { return result.hasTimestamp; }
      }
      public string Timestamp {
        get { return result.Timestamp; }
        set { SetTimestamp(value); }
      }
      public Builder SetTimestamp(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTimestamp = true;
        result.timestamp_ = value;
        return this;
      }
      public Builder ClearTimestamp() {
        PrepareBuilder();
        result.hasTimestamp = false;
        result.timestamp_ = "";
        return this;
      }
      
      public bool HasIp {
        get { return result.hasIp; }
      }
      public string Ip {
        get { return result.Ip; }
        set { SetIp(value); }
      }
      public Builder SetIp(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasIp = true;
        result.ip_ = value;
        return this;
      }
      public Builder ClearIp() {
        PrepareBuilder();
        result.hasIp = false;
        result.ip_ = "";
        return this;
      }
    }
    static mxt1xx_u_ip_gprs_connect() {
      object.ReferenceEquals(global::maxtrack.pb.mxt1xx.Mxt1Xx.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mxt1xx_u_keep_alive : pb::GeneratedMessage<mxt1xx_u_keep_alive, mxt1xx_u_keep_alive.Builder> {
    private mxt1xx_u_keep_alive() { }
    private static readonly mxt1xx_u_keep_alive defaultInstance = new mxt1xx_u_keep_alive().MakeReadOnly();
    private static readonly string[] _mxt1XxUKeepAliveFieldNames = new string[] { "protocol", "serial", "timestamp" };
    private static readonly uint[] _mxt1XxUKeepAliveFieldTags = new uint[] { 16, 8, 26 };
    public static mxt1xx_u_keep_alive DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mxt1xx_u_keep_alive DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mxt1xx_u_keep_alive ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_keep_alive__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mxt1xx_u_keep_alive, mxt1xx_u_keep_alive.Builder> InternalFieldAccessors {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_keep_alive__FieldAccessorTable; }
    }
    
    public const int SerialFieldNumber = 1;
    private bool hasSerial;
    private uint serial_;
    public bool HasSerial {
      get { return hasSerial; }
    }
    [global::System.CLSCompliant(false)]
    public uint Serial {
      get { return serial_; }
    }
    
    public const int ProtocolFieldNumber = 2;
    private bool hasProtocol;
    private uint protocol_;
    public bool HasProtocol {
      get { return hasProtocol; }
    }
    [global::System.CLSCompliant(false)]
    public uint Protocol {
      get { return protocol_; }
    }
    
    public const int TimestampFieldNumber = 3;
    private bool hasTimestamp;
    private string timestamp_ = "";
    public bool HasTimestamp {
      get { return hasTimestamp; }
    }
    public string Timestamp {
      get { return timestamp_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSerial) return false;
        if (!hasProtocol) return false;
        if (!hasTimestamp) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mxt1XxUKeepAliveFieldNames;
      if (hasSerial) {
        output.WriteUInt32(1, field_names[1], Serial);
      }
      if (hasProtocol) {
        output.WriteUInt32(2, field_names[0], Protocol);
      }
      if (hasTimestamp) {
        output.WriteString(3, field_names[2], Timestamp);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasSerial) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, Serial);
      }
      if (hasProtocol) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, Protocol);
      }
      if (hasTimestamp) {
        size += pb::CodedOutputStream.ComputeStringSize(3, Timestamp);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mxt1xx_u_keep_alive ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_keep_alive ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_keep_alive ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_keep_alive ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_keep_alive ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_keep_alive ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_keep_alive ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mxt1xx_u_keep_alive ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mxt1xx_u_keep_alive ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_keep_alive ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mxt1xx_u_keep_alive MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mxt1xx_u_keep_alive prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mxt1xx_u_keep_alive, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mxt1xx_u_keep_alive cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mxt1xx_u_keep_alive result;
      
      private mxt1xx_u_keep_alive PrepareBuilder() {
        if (resultIsReadOnly) {
          mxt1xx_u_keep_alive original = result;
          result = new mxt1xx_u_keep_alive();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mxt1xx_u_keep_alive MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_keep_alive.Descriptor; }
      }
      
      public override mxt1xx_u_keep_alive DefaultInstanceForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_keep_alive.DefaultInstance; }
      }
      
      public override mxt1xx_u_keep_alive BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mxt1xx_u_keep_alive) {
          return MergeFrom((mxt1xx_u_keep_alive) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mxt1xx_u_keep_alive other) {
        if (other == global::maxtrack.pb.mxt1xx.mxt1xx_u_keep_alive.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSerial) {
          Serial = other.Serial;
        }
        if (other.HasProtocol) {
          Protocol = other.Protocol;
        }
        if (other.HasTimestamp) {
          Timestamp = other.Timestamp;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mxt1XxUKeepAliveFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mxt1XxUKeepAliveFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasSerial = input.ReadUInt32(ref result.serial_);
              break;
            }
            case 16: {
              result.hasProtocol = input.ReadUInt32(ref result.protocol_);
              break;
            }
            case 26: {
              result.hasTimestamp = input.ReadString(ref result.timestamp_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSerial {
        get { return result.hasSerial; }
      }
      [global::System.CLSCompliant(false)]
      public uint Serial {
        get { return result.Serial; }
        set { SetSerial(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSerial(uint value) {
        PrepareBuilder();
        result.hasSerial = true;
        result.serial_ = value;
        return this;
      }
      public Builder ClearSerial() {
        PrepareBuilder();
        result.hasSerial = false;
        result.serial_ = 0;
        return this;
      }
      
      public bool HasProtocol {
        get { return result.hasProtocol; }
      }
      [global::System.CLSCompliant(false)]
      public uint Protocol {
        get { return result.Protocol; }
        set { SetProtocol(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetProtocol(uint value) {
        PrepareBuilder();
        result.hasProtocol = true;
        result.protocol_ = value;
        return this;
      }
      public Builder ClearProtocol() {
        PrepareBuilder();
        result.hasProtocol = false;
        result.protocol_ = 0;
        return this;
      }
      
      public bool HasTimestamp {
        get { return result.hasTimestamp; }
      }
      public string Timestamp {
        get { return result.Timestamp; }
        set { SetTimestamp(value); }
      }
      public Builder SetTimestamp(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTimestamp = true;
        result.timestamp_ = value;
        return this;
      }
      public Builder ClearTimestamp() {
        PrepareBuilder();
        result.hasTimestamp = false;
        result.timestamp_ = "";
        return this;
      }
    }
    static mxt1xx_u_keep_alive() {
      object.ReferenceEquals(global::maxtrack.pb.mxt1xx.Mxt1Xx.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mxt1xx_u_request_old_pos_status : pb::GeneratedMessage<mxt1xx_u_request_old_pos_status, mxt1xx_u_request_old_pos_status.Builder> {
    private mxt1xx_u_request_old_pos_status() { }
    private static readonly mxt1xx_u_request_old_pos_status defaultInstance = new mxt1xx_u_request_old_pos_status().MakeReadOnly();
    private static readonly string[] _mxt1XxURequestOldPosStatusFieldNames = new string[] { "finished", "packets", "protocol", "serial", "timestamp" };
    private static readonly uint[] _mxt1XxURequestOldPosStatusFieldTags = new uint[] { 32, 40, 16, 8, 26 };
    public static mxt1xx_u_request_old_pos_status DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mxt1xx_u_request_old_pos_status DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mxt1xx_u_request_old_pos_status ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_request_old_pos_status__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mxt1xx_u_request_old_pos_status, mxt1xx_u_request_old_pos_status.Builder> InternalFieldAccessors {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_request_old_pos_status__FieldAccessorTable; }
    }
    
    public const int SerialFieldNumber = 1;
    private bool hasSerial;
    private uint serial_;
    public bool HasSerial {
      get { return hasSerial; }
    }
    [global::System.CLSCompliant(false)]
    public uint Serial {
      get { return serial_; }
    }
    
    public const int ProtocolFieldNumber = 2;
    private bool hasProtocol;
    private uint protocol_;
    public bool HasProtocol {
      get { return hasProtocol; }
    }
    [global::System.CLSCompliant(false)]
    public uint Protocol {
      get { return protocol_; }
    }
    
    public const int TimestampFieldNumber = 3;
    private bool hasTimestamp;
    private string timestamp_ = "";
    public bool HasTimestamp {
      get { return hasTimestamp; }
    }
    public string Timestamp {
      get { return timestamp_; }
    }
    
    public const int FinishedFieldNumber = 4;
    private bool hasFinished;
    private bool finished_;
    public bool HasFinished {
      get { return hasFinished; }
    }
    public bool Finished {
      get { return finished_; }
    }
    
    public const int PacketsFieldNumber = 5;
    private bool hasPackets;
    private uint packets_;
    public bool HasPackets {
      get { return hasPackets; }
    }
    [global::System.CLSCompliant(false)]
    public uint Packets {
      get { return packets_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSerial) return false;
        if (!hasProtocol) return false;
        if (!hasTimestamp) return false;
        if (!hasFinished) return false;
        if (!hasPackets) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mxt1XxURequestOldPosStatusFieldNames;
      if (hasSerial) {
        output.WriteUInt32(1, field_names[3], Serial);
      }
      if (hasProtocol) {
        output.WriteUInt32(2, field_names[2], Protocol);
      }
      if (hasTimestamp) {
        output.WriteString(3, field_names[4], Timestamp);
      }
      if (hasFinished) {
        output.WriteBool(4, field_names[0], Finished);
      }
      if (hasPackets) {
        output.WriteUInt32(5, field_names[1], Packets);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasSerial) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, Serial);
      }
      if (hasProtocol) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, Protocol);
      }
      if (hasTimestamp) {
        size += pb::CodedOutputStream.ComputeStringSize(3, Timestamp);
      }
      if (hasFinished) {
        size += pb::CodedOutputStream.ComputeBoolSize(4, Finished);
      }
      if (hasPackets) {
        size += pb::CodedOutputStream.ComputeUInt32Size(5, Packets);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mxt1xx_u_request_old_pos_status ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_request_old_pos_status ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_request_old_pos_status ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_request_old_pos_status ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_request_old_pos_status ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_request_old_pos_status ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_request_old_pos_status ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mxt1xx_u_request_old_pos_status ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mxt1xx_u_request_old_pos_status ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_request_old_pos_status ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mxt1xx_u_request_old_pos_status MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mxt1xx_u_request_old_pos_status prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mxt1xx_u_request_old_pos_status, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mxt1xx_u_request_old_pos_status cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mxt1xx_u_request_old_pos_status result;
      
      private mxt1xx_u_request_old_pos_status PrepareBuilder() {
        if (resultIsReadOnly) {
          mxt1xx_u_request_old_pos_status original = result;
          result = new mxt1xx_u_request_old_pos_status();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mxt1xx_u_request_old_pos_status MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_request_old_pos_status.Descriptor; }
      }
      
      public override mxt1xx_u_request_old_pos_status DefaultInstanceForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_request_old_pos_status.DefaultInstance; }
      }
      
      public override mxt1xx_u_request_old_pos_status BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mxt1xx_u_request_old_pos_status) {
          return MergeFrom((mxt1xx_u_request_old_pos_status) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mxt1xx_u_request_old_pos_status other) {
        if (other == global::maxtrack.pb.mxt1xx.mxt1xx_u_request_old_pos_status.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSerial) {
          Serial = other.Serial;
        }
        if (other.HasProtocol) {
          Protocol = other.Protocol;
        }
        if (other.HasTimestamp) {
          Timestamp = other.Timestamp;
        }
        if (other.HasFinished) {
          Finished = other.Finished;
        }
        if (other.HasPackets) {
          Packets = other.Packets;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mxt1XxURequestOldPosStatusFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mxt1XxURequestOldPosStatusFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasSerial = input.ReadUInt32(ref result.serial_);
              break;
            }
            case 16: {
              result.hasProtocol = input.ReadUInt32(ref result.protocol_);
              break;
            }
            case 26: {
              result.hasTimestamp = input.ReadString(ref result.timestamp_);
              break;
            }
            case 32: {
              result.hasFinished = input.ReadBool(ref result.finished_);
              break;
            }
            case 40: {
              result.hasPackets = input.ReadUInt32(ref result.packets_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSerial {
        get { return result.hasSerial; }
      }
      [global::System.CLSCompliant(false)]
      public uint Serial {
        get { return result.Serial; }
        set { SetSerial(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSerial(uint value) {
        PrepareBuilder();
        result.hasSerial = true;
        result.serial_ = value;
        return this;
      }
      public Builder ClearSerial() {
        PrepareBuilder();
        result.hasSerial = false;
        result.serial_ = 0;
        return this;
      }
      
      public bool HasProtocol {
        get { return result.hasProtocol; }
      }
      [global::System.CLSCompliant(false)]
      public uint Protocol {
        get { return result.Protocol; }
        set { SetProtocol(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetProtocol(uint value) {
        PrepareBuilder();
        result.hasProtocol = true;
        result.protocol_ = value;
        return this;
      }
      public Builder ClearProtocol() {
        PrepareBuilder();
        result.hasProtocol = false;
        result.protocol_ = 0;
        return this;
      }
      
      public bool HasTimestamp {
        get { return result.hasTimestamp; }
      }
      public string Timestamp {
        get { return result.Timestamp; }
        set { SetTimestamp(value); }
      }
      public Builder SetTimestamp(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTimestamp = true;
        result.timestamp_ = value;
        return this;
      }
      public Builder ClearTimestamp() {
        PrepareBuilder();
        result.hasTimestamp = false;
        result.timestamp_ = "";
        return this;
      }
      
      public bool HasFinished {
        get { return result.hasFinished; }
      }
      public bool Finished {
        get { return result.Finished; }
        set { SetFinished(value); }
      }
      public Builder SetFinished(bool value) {
        PrepareBuilder();
        result.hasFinished = true;
        result.finished_ = value;
        return this;
      }
      public Builder ClearFinished() {
        PrepareBuilder();
        result.hasFinished = false;
        result.finished_ = false;
        return this;
      }
      
      public bool HasPackets {
        get { return result.hasPackets; }
      }
      [global::System.CLSCompliant(false)]
      public uint Packets {
        get { return result.Packets; }
        set { SetPackets(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetPackets(uint value) {
        PrepareBuilder();
        result.hasPackets = true;
        result.packets_ = value;
        return this;
      }
      public Builder ClearPackets() {
        PrepareBuilder();
        result.hasPackets = false;
        result.packets_ = 0;
        return this;
      }
    }
    static mxt1xx_u_request_old_pos_status() {
      object.ReferenceEquals(global::maxtrack.pb.mxt1xx.Mxt1Xx.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mxt1xx_u_device_information : pb::GeneratedMessage<mxt1xx_u_device_information, mxt1xx_u_device_information.Builder> {
    private mxt1xx_u_device_information() { }
    private static readonly mxt1xx_u_device_information defaultInstance = new mxt1xx_u_device_information().MakeReadOnly();
    private static readonly string[] _mxt1XxUDeviceInformationFieldNames = new string[] { "aplication_flag", "application_name", "application_version", "bluetooth_address", "encryption_key", "hardware_model", "hardware_version", "has_password", "header", "iccid", "imei", "imsi", "modem_name", "modem_version", "sim_card_status", "system_time" };
    private static readonly uint[] _mxt1XxUDeviceInformationFieldTags = new uint[] { 50, 42, 26, 90, 96, 64, 56, 72, 10, 130, 82, 122, 34, 18, 114, 106 };
    public static mxt1xx_u_device_information DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mxt1xx_u_device_information DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mxt1xx_u_device_information ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_device_information__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mxt1xx_u_device_information, mxt1xx_u_device_information.Builder> InternalFieldAccessors {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_device_information__FieldAccessorTable; }
    }
    
    public const int HeaderFieldNumber = 1;
    private bool hasHeader;
    private global::maxtrack.pb.mxt1xx.mxt1xx_u_setup_header header_;
    public bool HasHeader {
      get { return hasHeader; }
    }
    public global::maxtrack.pb.mxt1xx.mxt1xx_u_setup_header Header {
      get { return header_ ?? global::maxtrack.pb.mxt1xx.mxt1xx_u_setup_header.DefaultInstance; }
    }
    
    public const int ModemVersionFieldNumber = 2;
    private bool hasModemVersion;
    private string modemVersion_ = "";
    public bool HasModemVersion {
      get { return hasModemVersion; }
    }
    public string ModemVersion {
      get { return modemVersion_; }
    }
    
    public const int ApplicationVersionFieldNumber = 3;
    private bool hasApplicationVersion;
    private string applicationVersion_ = "";
    public bool HasApplicationVersion {
      get { return hasApplicationVersion; }
    }
    public string ApplicationVersion {
      get { return applicationVersion_; }
    }
    
    public const int ModemNameFieldNumber = 4;
    private bool hasModemName;
    private string modemName_ = "";
    public bool HasModemName {
      get { return hasModemName; }
    }
    public string ModemName {
      get { return modemName_; }
    }
    
    public const int ApplicationNameFieldNumber = 5;
    private bool hasApplicationName;
    private string applicationName_ = "";
    public bool HasApplicationName {
      get { return hasApplicationName; }
    }
    public string ApplicationName {
      get { return applicationName_; }
    }
    
    public const int AplicationFlagFieldNumber = 6;
    private bool hasAplicationFlag;
    private string aplicationFlag_ = "";
    public bool HasAplicationFlag {
      get { return hasAplicationFlag; }
    }
    public string AplicationFlag {
      get { return aplicationFlag_; }
    }
    
    public const int HardwareVersionFieldNumber = 7;
    private bool hasHardwareVersion;
    private uint hardwareVersion_;
    public bool HasHardwareVersion {
      get { return hasHardwareVersion; }
    }
    [global::System.CLSCompliant(false)]
    public uint HardwareVersion {
      get { return hardwareVersion_; }
    }
    
    public const int HardwareModelFieldNumber = 8;
    private bool hasHardwareModel;
    private uint hardwareModel_;
    public bool HasHardwareModel {
      get { return hasHardwareModel; }
    }
    [global::System.CLSCompliant(false)]
    public uint HardwareModel {
      get { return hardwareModel_; }
    }
    
    public const int HasPasswordFieldNumber = 9;
    private bool hasHasPassword;
    private uint hasPassword_;
    public bool HasHasPassword {
      get { return hasHasPassword; }
    }
    [global::System.CLSCompliant(false)]
    public uint HasPassword {
      get { return hasPassword_; }
    }
    
    public const int ImeiFieldNumber = 10;
    private bool hasImei;
    private string imei_ = "";
    public bool HasImei {
      get { return hasImei; }
    }
    public string Imei {
      get { return imei_; }
    }
    
    public const int BluetoothAddressFieldNumber = 11;
    private bool hasBluetoothAddress;
    private string bluetoothAddress_ = "";
    public bool HasBluetoothAddress {
      get { return hasBluetoothAddress; }
    }
    public string BluetoothAddress {
      get { return bluetoothAddress_; }
    }
    
    public const int EncryptionKeyFieldNumber = 12;
    private bool hasEncryptionKey;
    private uint encryptionKey_;
    public bool HasEncryptionKey {
      get { return hasEncryptionKey; }
    }
    [global::System.CLSCompliant(false)]
    public uint EncryptionKey {
      get { return encryptionKey_; }
    }
    
    public const int SystemTimeFieldNumber = 13;
    private bool hasSystemTime;
    private string systemTime_ = "";
    public bool HasSystemTime {
      get { return hasSystemTime; }
    }
    public string SystemTime {
      get { return systemTime_; }
    }
    
    public const int SimCardStatusFieldNumber = 14;
    private bool hasSimCardStatus;
    private string simCardStatus_ = "";
    public bool HasSimCardStatus {
      get { return hasSimCardStatus; }
    }
    public string SimCardStatus {
      get { return simCardStatus_; }
    }
    
    public const int ImsiFieldNumber = 15;
    private bool hasImsi;
    private string imsi_ = "";
    public bool HasImsi {
      get { return hasImsi; }
    }
    public string Imsi {
      get { return imsi_; }
    }
    
    public const int IccidFieldNumber = 16;
    private bool hasIccid;
    private string iccid_ = "";
    public bool HasIccid {
      get { return hasIccid; }
    }
    public string Iccid {
      get { return iccid_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasHeader) return false;
        if (!Header.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mxt1XxUDeviceInformationFieldNames;
      if (hasHeader) {
        output.WriteMessage(1, field_names[8], Header);
      }
      if (hasModemVersion) {
        output.WriteString(2, field_names[13], ModemVersion);
      }
      if (hasApplicationVersion) {
        output.WriteString(3, field_names[2], ApplicationVersion);
      }
      if (hasModemName) {
        output.WriteString(4, field_names[12], ModemName);
      }
      if (hasApplicationName) {
        output.WriteString(5, field_names[1], ApplicationName);
      }
      if (hasAplicationFlag) {
        output.WriteString(6, field_names[0], AplicationFlag);
      }
      if (hasHardwareVersion) {
        output.WriteUInt32(7, field_names[6], HardwareVersion);
      }
      if (hasHardwareModel) {
        output.WriteUInt32(8, field_names[5], HardwareModel);
      }
      if (hasHasPassword) {
        output.WriteUInt32(9, field_names[7], HasPassword);
      }
      if (hasImei) {
        output.WriteString(10, field_names[10], Imei);
      }
      if (hasBluetoothAddress) {
        output.WriteString(11, field_names[3], BluetoothAddress);
      }
      if (hasEncryptionKey) {
        output.WriteUInt32(12, field_names[4], EncryptionKey);
      }
      if (hasSystemTime) {
        output.WriteString(13, field_names[15], SystemTime);
      }
      if (hasSimCardStatus) {
        output.WriteString(14, field_names[14], SimCardStatus);
      }
      if (hasImsi) {
        output.WriteString(15, field_names[11], Imsi);
      }
      if (hasIccid) {
        output.WriteString(16, field_names[9], Iccid);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasHeader) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, Header);
      }
      if (hasModemVersion) {
        size += pb::CodedOutputStream.ComputeStringSize(2, ModemVersion);
      }
      if (hasApplicationVersion) {
        size += pb::CodedOutputStream.ComputeStringSize(3, ApplicationVersion);
      }
      if (hasModemName) {
        size += pb::CodedOutputStream.ComputeStringSize(4, ModemName);
      }
      if (hasApplicationName) {
        size += pb::CodedOutputStream.ComputeStringSize(5, ApplicationName);
      }
      if (hasAplicationFlag) {
        size += pb::CodedOutputStream.ComputeStringSize(6, AplicationFlag);
      }
      if (hasHardwareVersion) {
        size += pb::CodedOutputStream.ComputeUInt32Size(7, HardwareVersion);
      }
      if (hasHardwareModel) {
        size += pb::CodedOutputStream.ComputeUInt32Size(8, HardwareModel);
      }
      if (hasHasPassword) {
        size += pb::CodedOutputStream.ComputeUInt32Size(9, HasPassword);
      }
      if (hasImei) {
        size += pb::CodedOutputStream.ComputeStringSize(10, Imei);
      }
      if (hasBluetoothAddress) {
        size += pb::CodedOutputStream.ComputeStringSize(11, BluetoothAddress);
      }
      if (hasEncryptionKey) {
        size += pb::CodedOutputStream.ComputeUInt32Size(12, EncryptionKey);
      }
      if (hasSystemTime) {
        size += pb::CodedOutputStream.ComputeStringSize(13, SystemTime);
      }
      if (hasSimCardStatus) {
        size += pb::CodedOutputStream.ComputeStringSize(14, SimCardStatus);
      }
      if (hasImsi) {
        size += pb::CodedOutputStream.ComputeStringSize(15, Imsi);
      }
      if (hasIccid) {
        size += pb::CodedOutputStream.ComputeStringSize(16, Iccid);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mxt1xx_u_device_information ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_device_information ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_device_information ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_device_information ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_device_information ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_device_information ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_device_information ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mxt1xx_u_device_information ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mxt1xx_u_device_information ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_device_information ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mxt1xx_u_device_information MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mxt1xx_u_device_information prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mxt1xx_u_device_information, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mxt1xx_u_device_information cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mxt1xx_u_device_information result;
      
      private mxt1xx_u_device_information PrepareBuilder() {
        if (resultIsReadOnly) {
          mxt1xx_u_device_information original = result;
          result = new mxt1xx_u_device_information();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mxt1xx_u_device_information MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_device_information.Descriptor; }
      }
      
      public override mxt1xx_u_device_information DefaultInstanceForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_device_information.DefaultInstance; }
      }
      
      public override mxt1xx_u_device_information BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mxt1xx_u_device_information) {
          return MergeFrom((mxt1xx_u_device_information) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mxt1xx_u_device_information other) {
        if (other == global::maxtrack.pb.mxt1xx.mxt1xx_u_device_information.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasHeader) {
          MergeHeader(other.Header);
        }
        if (other.HasModemVersion) {
          ModemVersion = other.ModemVersion;
        }
        if (other.HasApplicationVersion) {
          ApplicationVersion = other.ApplicationVersion;
        }
        if (other.HasModemName) {
          ModemName = other.ModemName;
        }
        if (other.HasApplicationName) {
          ApplicationName = other.ApplicationName;
        }
        if (other.HasAplicationFlag) {
          AplicationFlag = other.AplicationFlag;
        }
        if (other.HasHardwareVersion) {
          HardwareVersion = other.HardwareVersion;
        }
        if (other.HasHardwareModel) {
          HardwareModel = other.HardwareModel;
        }
        if (other.HasHasPassword) {
          HasPassword = other.HasPassword;
        }
        if (other.HasImei) {
          Imei = other.Imei;
        }
        if (other.HasBluetoothAddress) {
          BluetoothAddress = other.BluetoothAddress;
        }
        if (other.HasEncryptionKey) {
          EncryptionKey = other.EncryptionKey;
        }
        if (other.HasSystemTime) {
          SystemTime = other.SystemTime;
        }
        if (other.HasSimCardStatus) {
          SimCardStatus = other.SimCardStatus;
        }
        if (other.HasImsi) {
          Imsi = other.Imsi;
        }
        if (other.HasIccid) {
          Iccid = other.Iccid;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mxt1XxUDeviceInformationFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mxt1XxUDeviceInformationFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::maxtrack.pb.mxt1xx.mxt1xx_u_setup_header.Builder subBuilder = global::maxtrack.pb.mxt1xx.mxt1xx_u_setup_header.CreateBuilder();
              if (result.hasHeader) {
                subBuilder.MergeFrom(Header);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Header = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              result.hasModemVersion = input.ReadString(ref result.modemVersion_);
              break;
            }
            case 26: {
              result.hasApplicationVersion = input.ReadString(ref result.applicationVersion_);
              break;
            }
            case 34: {
              result.hasModemName = input.ReadString(ref result.modemName_);
              break;
            }
            case 42: {
              result.hasApplicationName = input.ReadString(ref result.applicationName_);
              break;
            }
            case 50: {
              result.hasAplicationFlag = input.ReadString(ref result.aplicationFlag_);
              break;
            }
            case 56: {
              result.hasHardwareVersion = input.ReadUInt32(ref result.hardwareVersion_);
              break;
            }
            case 64: {
              result.hasHardwareModel = input.ReadUInt32(ref result.hardwareModel_);
              break;
            }
            case 72: {
              result.hasHasPassword = input.ReadUInt32(ref result.hasPassword_);
              break;
            }
            case 82: {
              result.hasImei = input.ReadString(ref result.imei_);
              break;
            }
            case 90: {
              result.hasBluetoothAddress = input.ReadString(ref result.bluetoothAddress_);
              break;
            }
            case 96: {
              result.hasEncryptionKey = input.ReadUInt32(ref result.encryptionKey_);
              break;
            }
            case 106: {
              result.hasSystemTime = input.ReadString(ref result.systemTime_);
              break;
            }
            case 114: {
              result.hasSimCardStatus = input.ReadString(ref result.simCardStatus_);
              break;
            }
            case 122: {
              result.hasImsi = input.ReadString(ref result.imsi_);
              break;
            }
            case 130: {
              result.hasIccid = input.ReadString(ref result.iccid_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasHeader {
       get { return result.hasHeader; }
      }
      public global::maxtrack.pb.mxt1xx.mxt1xx_u_setup_header Header {
        get { return result.Header; }
        set { SetHeader(value); }
      }
      public Builder SetHeader(global::maxtrack.pb.mxt1xx.mxt1xx_u_setup_header value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHeader = true;
        result.header_ = value;
        return this;
      }
      public Builder SetHeader(global::maxtrack.pb.mxt1xx.mxt1xx_u_setup_header.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasHeader = true;
        result.header_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHeader(global::maxtrack.pb.mxt1xx.mxt1xx_u_setup_header value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasHeader &&
            result.header_ != global::maxtrack.pb.mxt1xx.mxt1xx_u_setup_header.DefaultInstance) {
            result.header_ = global::maxtrack.pb.mxt1xx.mxt1xx_u_setup_header.CreateBuilder(result.header_).MergeFrom(value).BuildPartial();
        } else {
          result.header_ = value;
        }
        result.hasHeader = true;
        return this;
      }
      public Builder ClearHeader() {
        PrepareBuilder();
        result.hasHeader = false;
        result.header_ = null;
        return this;
      }
      
      public bool HasModemVersion {
        get { return result.hasModemVersion; }
      }
      public string ModemVersion {
        get { return result.ModemVersion; }
        set { SetModemVersion(value); }
      }
      public Builder SetModemVersion(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasModemVersion = true;
        result.modemVersion_ = value;
        return this;
      }
      public Builder ClearModemVersion() {
        PrepareBuilder();
        result.hasModemVersion = false;
        result.modemVersion_ = "";
        return this;
      }
      
      public bool HasApplicationVersion {
        get { return result.hasApplicationVersion; }
      }
      public string ApplicationVersion {
        get { return result.ApplicationVersion; }
        set { SetApplicationVersion(value); }
      }
      public Builder SetApplicationVersion(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasApplicationVersion = true;
        result.applicationVersion_ = value;
        return this;
      }
      public Builder ClearApplicationVersion() {
        PrepareBuilder();
        result.hasApplicationVersion = false;
        result.applicationVersion_ = "";
        return this;
      }
      
      public bool HasModemName {
        get { return result.hasModemName; }
      }
      public string ModemName {
        get { return result.ModemName; }
        set { SetModemName(value); }
      }
      public Builder SetModemName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasModemName = true;
        result.modemName_ = value;
        return this;
      }
      public Builder ClearModemName() {
        PrepareBuilder();
        result.hasModemName = false;
        result.modemName_ = "";
        return this;
      }
      
      public bool HasApplicationName {
        get { return result.hasApplicationName; }
      }
      public string ApplicationName {
        get { return result.ApplicationName; }
        set { SetApplicationName(value); }
      }
      public Builder SetApplicationName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasApplicationName = true;
        result.applicationName_ = value;
        return this;
      }
      public Builder ClearApplicationName() {
        PrepareBuilder();
        result.hasApplicationName = false;
        result.applicationName_ = "";
        return this;
      }
      
      public bool HasAplicationFlag {
        get { return result.hasAplicationFlag; }
      }
      public string AplicationFlag {
        get { return result.AplicationFlag; }
        set { SetAplicationFlag(value); }
      }
      public Builder SetAplicationFlag(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAplicationFlag = true;
        result.aplicationFlag_ = value;
        return this;
      }
      public Builder ClearAplicationFlag() {
        PrepareBuilder();
        result.hasAplicationFlag = false;
        result.aplicationFlag_ = "";
        return this;
      }
      
      public bool HasHardwareVersion {
        get { return result.hasHardwareVersion; }
      }
      [global::System.CLSCompliant(false)]
      public uint HardwareVersion {
        get { return result.HardwareVersion; }
        set { SetHardwareVersion(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetHardwareVersion(uint value) {
        PrepareBuilder();
        result.hasHardwareVersion = true;
        result.hardwareVersion_ = value;
        return this;
      }
      public Builder ClearHardwareVersion() {
        PrepareBuilder();
        result.hasHardwareVersion = false;
        result.hardwareVersion_ = 0;
        return this;
      }
      
      public bool HasHardwareModel {
        get { return result.hasHardwareModel; }
      }
      [global::System.CLSCompliant(false)]
      public uint HardwareModel {
        get { return result.HardwareModel; }
        set { SetHardwareModel(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetHardwareModel(uint value) {
        PrepareBuilder();
        result.hasHardwareModel = true;
        result.hardwareModel_ = value;
        return this;
      }
      public Builder ClearHardwareModel() {
        PrepareBuilder();
        result.hasHardwareModel = false;
        result.hardwareModel_ = 0;
        return this;
      }
      
      public bool HasHasPassword {
        get { return result.hasHasPassword; }
      }
      [global::System.CLSCompliant(false)]
      public uint HasPassword {
        get { return result.HasPassword; }
        set { SetHasPassword(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetHasPassword(uint value) {
        PrepareBuilder();
        result.hasHasPassword = true;
        result.hasPassword_ = value;
        return this;
      }
      public Builder ClearHasPassword() {
        PrepareBuilder();
        result.hasHasPassword = false;
        result.hasPassword_ = 0;
        return this;
      }
      
      public bool HasImei {
        get { return result.hasImei; }
      }
      public string Imei {
        get { return result.Imei; }
        set { SetImei(value); }
      }
      public Builder SetImei(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasImei = true;
        result.imei_ = value;
        return this;
      }
      public Builder ClearImei() {
        PrepareBuilder();
        result.hasImei = false;
        result.imei_ = "";
        return this;
      }
      
      public bool HasBluetoothAddress {
        get { return result.hasBluetoothAddress; }
      }
      public string BluetoothAddress {
        get { return result.BluetoothAddress; }
        set { SetBluetoothAddress(value); }
      }
      public Builder SetBluetoothAddress(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBluetoothAddress = true;
        result.bluetoothAddress_ = value;
        return this;
      }
      public Builder ClearBluetoothAddress() {
        PrepareBuilder();
        result.hasBluetoothAddress = false;
        result.bluetoothAddress_ = "";
        return this;
      }
      
      public bool HasEncryptionKey {
        get { return result.hasEncryptionKey; }
      }
      [global::System.CLSCompliant(false)]
      public uint EncryptionKey {
        get { return result.EncryptionKey; }
        set { SetEncryptionKey(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetEncryptionKey(uint value) {
        PrepareBuilder();
        result.hasEncryptionKey = true;
        result.encryptionKey_ = value;
        return this;
      }
      public Builder ClearEncryptionKey() {
        PrepareBuilder();
        result.hasEncryptionKey = false;
        result.encryptionKey_ = 0;
        return this;
      }
      
      public bool HasSystemTime {
        get { return result.hasSystemTime; }
      }
      public string SystemTime {
        get { return result.SystemTime; }
        set { SetSystemTime(value); }
      }
      public Builder SetSystemTime(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSystemTime = true;
        result.systemTime_ = value;
        return this;
      }
      public Builder ClearSystemTime() {
        PrepareBuilder();
        result.hasSystemTime = false;
        result.systemTime_ = "";
        return this;
      }
      
      public bool HasSimCardStatus {
        get { return result.hasSimCardStatus; }
      }
      public string SimCardStatus {
        get { return result.SimCardStatus; }
        set { SetSimCardStatus(value); }
      }
      public Builder SetSimCardStatus(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSimCardStatus = true;
        result.simCardStatus_ = value;
        return this;
      }
      public Builder ClearSimCardStatus() {
        PrepareBuilder();
        result.hasSimCardStatus = false;
        result.simCardStatus_ = "";
        return this;
      }
      
      public bool HasImsi {
        get { return result.hasImsi; }
      }
      public string Imsi {
        get { return result.Imsi; }
        set { SetImsi(value); }
      }
      public Builder SetImsi(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasImsi = true;
        result.imsi_ = value;
        return this;
      }
      public Builder ClearImsi() {
        PrepareBuilder();
        result.hasImsi = false;
        result.imsi_ = "";
        return this;
      }
      
      public bool HasIccid {
        get { return result.hasIccid; }
      }
      public string Iccid {
        get { return result.Iccid; }
        set { SetIccid(value); }
      }
      public Builder SetIccid(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasIccid = true;
        result.iccid_ = value;
        return this;
      }
      public Builder ClearIccid() {
        PrepareBuilder();
        result.hasIccid = false;
        result.iccid_ = "";
        return this;
      }
    }
    static mxt1xx_u_device_information() {
      object.ReferenceEquals(global::maxtrack.pb.mxt1xx.Mxt1Xx.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mxt1xx_u_dynamic_setup_connection : pb::GeneratedMessage<mxt1xx_u_dynamic_setup_connection, mxt1xx_u_dynamic_setup_connection.Builder> {
    private mxt1xx_u_dynamic_setup_connection() { }
    private static readonly mxt1xx_u_dynamic_setup_connection defaultInstance = new mxt1xx_u_dynamic_setup_connection().MakeReadOnly();
    private static readonly string[] _mxt1XxUDynamicSetupConnectionFieldNames = new string[] { "ip_priority", "keep_alive_cloud", "keep_alive_timer", "keep_udp_port", "primary_apn", "primary_ip_address", "primary_ip_port", "primary_password", "primary_user", "protocol", "secondary_apn", "secondary_ip_address", "secondary_ip_port", "secondary_password", "secondary_user" };
    private static readonly uint[] _mxt1XxUDynamicSetupConnectionFieldTags = new uint[] { 64, 120, 104, 112, 18, 74, 80, 34, 26, 8, 42, 90, 96, 58, 50 };
    public static mxt1xx_u_dynamic_setup_connection DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mxt1xx_u_dynamic_setup_connection DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mxt1xx_u_dynamic_setup_connection ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_dynamic_setup_connection__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mxt1xx_u_dynamic_setup_connection, mxt1xx_u_dynamic_setup_connection.Builder> InternalFieldAccessors {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_dynamic_setup_connection__FieldAccessorTable; }
    }
    
    public const int ProtocolFieldNumber = 1;
    private bool hasProtocol;
    private uint protocol_;
    public bool HasProtocol {
      get { return hasProtocol; }
    }
    [global::System.CLSCompliant(false)]
    public uint Protocol {
      get { return protocol_; }
    }
    
    public const int PrimaryApnFieldNumber = 2;
    private bool hasPrimaryApn;
    private string primaryApn_ = "";
    public bool HasPrimaryApn {
      get { return hasPrimaryApn; }
    }
    public string PrimaryApn {
      get { return primaryApn_; }
    }
    
    public const int PrimaryUserFieldNumber = 3;
    private bool hasPrimaryUser;
    private string primaryUser_ = "";
    public bool HasPrimaryUser {
      get { return hasPrimaryUser; }
    }
    public string PrimaryUser {
      get { return primaryUser_; }
    }
    
    public const int PrimaryPasswordFieldNumber = 4;
    private bool hasPrimaryPassword;
    private string primaryPassword_ = "";
    public bool HasPrimaryPassword {
      get { return hasPrimaryPassword; }
    }
    public string PrimaryPassword {
      get { return primaryPassword_; }
    }
    
    public const int SecondaryApnFieldNumber = 5;
    private bool hasSecondaryApn;
    private string secondaryApn_ = "";
    public bool HasSecondaryApn {
      get { return hasSecondaryApn; }
    }
    public string SecondaryApn {
      get { return secondaryApn_; }
    }
    
    public const int SecondaryUserFieldNumber = 6;
    private bool hasSecondaryUser;
    private string secondaryUser_ = "";
    public bool HasSecondaryUser {
      get { return hasSecondaryUser; }
    }
    public string SecondaryUser {
      get { return secondaryUser_; }
    }
    
    public const int SecondaryPasswordFieldNumber = 7;
    private bool hasSecondaryPassword;
    private string secondaryPassword_ = "";
    public bool HasSecondaryPassword {
      get { return hasSecondaryPassword; }
    }
    public string SecondaryPassword {
      get { return secondaryPassword_; }
    }
    
    public const int IpPriorityFieldNumber = 8;
    private bool hasIpPriority;
    private uint ipPriority_;
    public bool HasIpPriority {
      get { return hasIpPriority; }
    }
    [global::System.CLSCompliant(false)]
    public uint IpPriority {
      get { return ipPriority_; }
    }
    
    public const int PrimaryIpAddressFieldNumber = 9;
    private bool hasPrimaryIpAddress;
    private string primaryIpAddress_ = "";
    public bool HasPrimaryIpAddress {
      get { return hasPrimaryIpAddress; }
    }
    public string PrimaryIpAddress {
      get { return primaryIpAddress_; }
    }
    
    public const int PrimaryIpPortFieldNumber = 10;
    private bool hasPrimaryIpPort;
    private uint primaryIpPort_;
    public bool HasPrimaryIpPort {
      get { return hasPrimaryIpPort; }
    }
    [global::System.CLSCompliant(false)]
    public uint PrimaryIpPort {
      get { return primaryIpPort_; }
    }
    
    public const int SecondaryIpAddressFieldNumber = 11;
    private bool hasSecondaryIpAddress;
    private string secondaryIpAddress_ = "";
    public bool HasSecondaryIpAddress {
      get { return hasSecondaryIpAddress; }
    }
    public string SecondaryIpAddress {
      get { return secondaryIpAddress_; }
    }
    
    public const int SecondaryIpPortFieldNumber = 12;
    private bool hasSecondaryIpPort;
    private uint secondaryIpPort_;
    public bool HasSecondaryIpPort {
      get { return hasSecondaryIpPort; }
    }
    [global::System.CLSCompliant(false)]
    public uint SecondaryIpPort {
      get { return secondaryIpPort_; }
    }
    
    public const int KeepAliveTimerFieldNumber = 13;
    private bool hasKeepAliveTimer;
    private uint keepAliveTimer_;
    public bool HasKeepAliveTimer {
      get { return hasKeepAliveTimer; }
    }
    [global::System.CLSCompliant(false)]
    public uint KeepAliveTimer {
      get { return keepAliveTimer_; }
    }
    
    public const int KeepUdpPortFieldNumber = 14;
    private bool hasKeepUdpPort;
    private bool keepUdpPort_;
    public bool HasKeepUdpPort {
      get { return hasKeepUdpPort; }
    }
    public bool KeepUdpPort {
      get { return keepUdpPort_; }
    }
    
    public const int KeepAliveCloudFieldNumber = 15;
    private bool hasKeepAliveCloud;
    private uint keepAliveCloud_;
    public bool HasKeepAliveCloud {
      get { return hasKeepAliveCloud; }
    }
    [global::System.CLSCompliant(false)]
    public uint KeepAliveCloud {
      get { return keepAliveCloud_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mxt1XxUDynamicSetupConnectionFieldNames;
      if (hasProtocol) {
        output.WriteUInt32(1, field_names[9], Protocol);
      }
      if (hasPrimaryApn) {
        output.WriteString(2, field_names[4], PrimaryApn);
      }
      if (hasPrimaryUser) {
        output.WriteString(3, field_names[8], PrimaryUser);
      }
      if (hasPrimaryPassword) {
        output.WriteString(4, field_names[7], PrimaryPassword);
      }
      if (hasSecondaryApn) {
        output.WriteString(5, field_names[10], SecondaryApn);
      }
      if (hasSecondaryUser) {
        output.WriteString(6, field_names[14], SecondaryUser);
      }
      if (hasSecondaryPassword) {
        output.WriteString(7, field_names[13], SecondaryPassword);
      }
      if (hasIpPriority) {
        output.WriteUInt32(8, field_names[0], IpPriority);
      }
      if (hasPrimaryIpAddress) {
        output.WriteString(9, field_names[5], PrimaryIpAddress);
      }
      if (hasPrimaryIpPort) {
        output.WriteUInt32(10, field_names[6], PrimaryIpPort);
      }
      if (hasSecondaryIpAddress) {
        output.WriteString(11, field_names[11], SecondaryIpAddress);
      }
      if (hasSecondaryIpPort) {
        output.WriteUInt32(12, field_names[12], SecondaryIpPort);
      }
      if (hasKeepAliveTimer) {
        output.WriteUInt32(13, field_names[2], KeepAliveTimer);
      }
      if (hasKeepUdpPort) {
        output.WriteBool(14, field_names[3], KeepUdpPort);
      }
      if (hasKeepAliveCloud) {
        output.WriteUInt32(15, field_names[1], KeepAliveCloud);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasProtocol) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, Protocol);
      }
      if (hasPrimaryApn) {
        size += pb::CodedOutputStream.ComputeStringSize(2, PrimaryApn);
      }
      if (hasPrimaryUser) {
        size += pb::CodedOutputStream.ComputeStringSize(3, PrimaryUser);
      }
      if (hasPrimaryPassword) {
        size += pb::CodedOutputStream.ComputeStringSize(4, PrimaryPassword);
      }
      if (hasSecondaryApn) {
        size += pb::CodedOutputStream.ComputeStringSize(5, SecondaryApn);
      }
      if (hasSecondaryUser) {
        size += pb::CodedOutputStream.ComputeStringSize(6, SecondaryUser);
      }
      if (hasSecondaryPassword) {
        size += pb::CodedOutputStream.ComputeStringSize(7, SecondaryPassword);
      }
      if (hasIpPriority) {
        size += pb::CodedOutputStream.ComputeUInt32Size(8, IpPriority);
      }
      if (hasPrimaryIpAddress) {
        size += pb::CodedOutputStream.ComputeStringSize(9, PrimaryIpAddress);
      }
      if (hasPrimaryIpPort) {
        size += pb::CodedOutputStream.ComputeUInt32Size(10, PrimaryIpPort);
      }
      if (hasSecondaryIpAddress) {
        size += pb::CodedOutputStream.ComputeStringSize(11, SecondaryIpAddress);
      }
      if (hasSecondaryIpPort) {
        size += pb::CodedOutputStream.ComputeUInt32Size(12, SecondaryIpPort);
      }
      if (hasKeepAliveTimer) {
        size += pb::CodedOutputStream.ComputeUInt32Size(13, KeepAliveTimer);
      }
      if (hasKeepUdpPort) {
        size += pb::CodedOutputStream.ComputeBoolSize(14, KeepUdpPort);
      }
      if (hasKeepAliveCloud) {
        size += pb::CodedOutputStream.ComputeUInt32Size(15, KeepAliveCloud);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mxt1xx_u_dynamic_setup_connection ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_connection ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_connection ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_connection ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_connection ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_connection ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_connection ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_connection ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_connection ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_connection ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mxt1xx_u_dynamic_setup_connection MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mxt1xx_u_dynamic_setup_connection prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mxt1xx_u_dynamic_setup_connection, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mxt1xx_u_dynamic_setup_connection cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mxt1xx_u_dynamic_setup_connection result;
      
      private mxt1xx_u_dynamic_setup_connection PrepareBuilder() {
        if (resultIsReadOnly) {
          mxt1xx_u_dynamic_setup_connection original = result;
          result = new mxt1xx_u_dynamic_setup_connection();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mxt1xx_u_dynamic_setup_connection MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_connection.Descriptor; }
      }
      
      public override mxt1xx_u_dynamic_setup_connection DefaultInstanceForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_connection.DefaultInstance; }
      }
      
      public override mxt1xx_u_dynamic_setup_connection BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mxt1xx_u_dynamic_setup_connection) {
          return MergeFrom((mxt1xx_u_dynamic_setup_connection) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mxt1xx_u_dynamic_setup_connection other) {
        if (other == global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_connection.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasProtocol) {
          Protocol = other.Protocol;
        }
        if (other.HasPrimaryApn) {
          PrimaryApn = other.PrimaryApn;
        }
        if (other.HasPrimaryUser) {
          PrimaryUser = other.PrimaryUser;
        }
        if (other.HasPrimaryPassword) {
          PrimaryPassword = other.PrimaryPassword;
        }
        if (other.HasSecondaryApn) {
          SecondaryApn = other.SecondaryApn;
        }
        if (other.HasSecondaryUser) {
          SecondaryUser = other.SecondaryUser;
        }
        if (other.HasSecondaryPassword) {
          SecondaryPassword = other.SecondaryPassword;
        }
        if (other.HasIpPriority) {
          IpPriority = other.IpPriority;
        }
        if (other.HasPrimaryIpAddress) {
          PrimaryIpAddress = other.PrimaryIpAddress;
        }
        if (other.HasPrimaryIpPort) {
          PrimaryIpPort = other.PrimaryIpPort;
        }
        if (other.HasSecondaryIpAddress) {
          SecondaryIpAddress = other.SecondaryIpAddress;
        }
        if (other.HasSecondaryIpPort) {
          SecondaryIpPort = other.SecondaryIpPort;
        }
        if (other.HasKeepAliveTimer) {
          KeepAliveTimer = other.KeepAliveTimer;
        }
        if (other.HasKeepUdpPort) {
          KeepUdpPort = other.KeepUdpPort;
        }
        if (other.HasKeepAliveCloud) {
          KeepAliveCloud = other.KeepAliveCloud;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mxt1XxUDynamicSetupConnectionFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mxt1XxUDynamicSetupConnectionFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasProtocol = input.ReadUInt32(ref result.protocol_);
              break;
            }
            case 18: {
              result.hasPrimaryApn = input.ReadString(ref result.primaryApn_);
              break;
            }
            case 26: {
              result.hasPrimaryUser = input.ReadString(ref result.primaryUser_);
              break;
            }
            case 34: {
              result.hasPrimaryPassword = input.ReadString(ref result.primaryPassword_);
              break;
            }
            case 42: {
              result.hasSecondaryApn = input.ReadString(ref result.secondaryApn_);
              break;
            }
            case 50: {
              result.hasSecondaryUser = input.ReadString(ref result.secondaryUser_);
              break;
            }
            case 58: {
              result.hasSecondaryPassword = input.ReadString(ref result.secondaryPassword_);
              break;
            }
            case 64: {
              result.hasIpPriority = input.ReadUInt32(ref result.ipPriority_);
              break;
            }
            case 74: {
              result.hasPrimaryIpAddress = input.ReadString(ref result.primaryIpAddress_);
              break;
            }
            case 80: {
              result.hasPrimaryIpPort = input.ReadUInt32(ref result.primaryIpPort_);
              break;
            }
            case 90: {
              result.hasSecondaryIpAddress = input.ReadString(ref result.secondaryIpAddress_);
              break;
            }
            case 96: {
              result.hasSecondaryIpPort = input.ReadUInt32(ref result.secondaryIpPort_);
              break;
            }
            case 104: {
              result.hasKeepAliveTimer = input.ReadUInt32(ref result.keepAliveTimer_);
              break;
            }
            case 112: {
              result.hasKeepUdpPort = input.ReadBool(ref result.keepUdpPort_);
              break;
            }
            case 120: {
              result.hasKeepAliveCloud = input.ReadUInt32(ref result.keepAliveCloud_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasProtocol {
        get { return result.hasProtocol; }
      }
      [global::System.CLSCompliant(false)]
      public uint Protocol {
        get { return result.Protocol; }
        set { SetProtocol(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetProtocol(uint value) {
        PrepareBuilder();
        result.hasProtocol = true;
        result.protocol_ = value;
        return this;
      }
      public Builder ClearProtocol() {
        PrepareBuilder();
        result.hasProtocol = false;
        result.protocol_ = 0;
        return this;
      }
      
      public bool HasPrimaryApn {
        get { return result.hasPrimaryApn; }
      }
      public string PrimaryApn {
        get { return result.PrimaryApn; }
        set { SetPrimaryApn(value); }
      }
      public Builder SetPrimaryApn(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPrimaryApn = true;
        result.primaryApn_ = value;
        return this;
      }
      public Builder ClearPrimaryApn() {
        PrepareBuilder();
        result.hasPrimaryApn = false;
        result.primaryApn_ = "";
        return this;
      }
      
      public bool HasPrimaryUser {
        get { return result.hasPrimaryUser; }
      }
      public string PrimaryUser {
        get { return result.PrimaryUser; }
        set { SetPrimaryUser(value); }
      }
      public Builder SetPrimaryUser(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPrimaryUser = true;
        result.primaryUser_ = value;
        return this;
      }
      public Builder ClearPrimaryUser() {
        PrepareBuilder();
        result.hasPrimaryUser = false;
        result.primaryUser_ = "";
        return this;
      }
      
      public bool HasPrimaryPassword {
        get { return result.hasPrimaryPassword; }
      }
      public string PrimaryPassword {
        get { return result.PrimaryPassword; }
        set { SetPrimaryPassword(value); }
      }
      public Builder SetPrimaryPassword(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPrimaryPassword = true;
        result.primaryPassword_ = value;
        return this;
      }
      public Builder ClearPrimaryPassword() {
        PrepareBuilder();
        result.hasPrimaryPassword = false;
        result.primaryPassword_ = "";
        return this;
      }
      
      public bool HasSecondaryApn {
        get { return result.hasSecondaryApn; }
      }
      public string SecondaryApn {
        get { return result.SecondaryApn; }
        set { SetSecondaryApn(value); }
      }
      public Builder SetSecondaryApn(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSecondaryApn = true;
        result.secondaryApn_ = value;
        return this;
      }
      public Builder ClearSecondaryApn() {
        PrepareBuilder();
        result.hasSecondaryApn = false;
        result.secondaryApn_ = "";
        return this;
      }
      
      public bool HasSecondaryUser {
        get { return result.hasSecondaryUser; }
      }
      public string SecondaryUser {
        get { return result.SecondaryUser; }
        set { SetSecondaryUser(value); }
      }
      public Builder SetSecondaryUser(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSecondaryUser = true;
        result.secondaryUser_ = value;
        return this;
      }
      public Builder ClearSecondaryUser() {
        PrepareBuilder();
        result.hasSecondaryUser = false;
        result.secondaryUser_ = "";
        return this;
      }
      
      public bool HasSecondaryPassword {
        get { return result.hasSecondaryPassword; }
      }
      public string SecondaryPassword {
        get { return result.SecondaryPassword; }
        set { SetSecondaryPassword(value); }
      }
      public Builder SetSecondaryPassword(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSecondaryPassword = true;
        result.secondaryPassword_ = value;
        return this;
      }
      public Builder ClearSecondaryPassword() {
        PrepareBuilder();
        result.hasSecondaryPassword = false;
        result.secondaryPassword_ = "";
        return this;
      }
      
      public bool HasIpPriority {
        get { return result.hasIpPriority; }
      }
      [global::System.CLSCompliant(false)]
      public uint IpPriority {
        get { return result.IpPriority; }
        set { SetIpPriority(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetIpPriority(uint value) {
        PrepareBuilder();
        result.hasIpPriority = true;
        result.ipPriority_ = value;
        return this;
      }
      public Builder ClearIpPriority() {
        PrepareBuilder();
        result.hasIpPriority = false;
        result.ipPriority_ = 0;
        return this;
      }
      
      public bool HasPrimaryIpAddress {
        get { return result.hasPrimaryIpAddress; }
      }
      public string PrimaryIpAddress {
        get { return result.PrimaryIpAddress; }
        set { SetPrimaryIpAddress(value); }
      }
      public Builder SetPrimaryIpAddress(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPrimaryIpAddress = true;
        result.primaryIpAddress_ = value;
        return this;
      }
      public Builder ClearPrimaryIpAddress() {
        PrepareBuilder();
        result.hasPrimaryIpAddress = false;
        result.primaryIpAddress_ = "";
        return this;
      }
      
      public bool HasPrimaryIpPort {
        get { return result.hasPrimaryIpPort; }
      }
      [global::System.CLSCompliant(false)]
      public uint PrimaryIpPort {
        get { return result.PrimaryIpPort; }
        set { SetPrimaryIpPort(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetPrimaryIpPort(uint value) {
        PrepareBuilder();
        result.hasPrimaryIpPort = true;
        result.primaryIpPort_ = value;
        return this;
      }
      public Builder ClearPrimaryIpPort() {
        PrepareBuilder();
        result.hasPrimaryIpPort = false;
        result.primaryIpPort_ = 0;
        return this;
      }
      
      public bool HasSecondaryIpAddress {
        get { return result.hasSecondaryIpAddress; }
      }
      public string SecondaryIpAddress {
        get { return result.SecondaryIpAddress; }
        set { SetSecondaryIpAddress(value); }
      }
      public Builder SetSecondaryIpAddress(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSecondaryIpAddress = true;
        result.secondaryIpAddress_ = value;
        return this;
      }
      public Builder ClearSecondaryIpAddress() {
        PrepareBuilder();
        result.hasSecondaryIpAddress = false;
        result.secondaryIpAddress_ = "";
        return this;
      }
      
      public bool HasSecondaryIpPort {
        get { return result.hasSecondaryIpPort; }
      }
      [global::System.CLSCompliant(false)]
      public uint SecondaryIpPort {
        get { return result.SecondaryIpPort; }
        set { SetSecondaryIpPort(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSecondaryIpPort(uint value) {
        PrepareBuilder();
        result.hasSecondaryIpPort = true;
        result.secondaryIpPort_ = value;
        return this;
      }
      public Builder ClearSecondaryIpPort() {
        PrepareBuilder();
        result.hasSecondaryIpPort = false;
        result.secondaryIpPort_ = 0;
        return this;
      }
      
      public bool HasKeepAliveTimer {
        get { return result.hasKeepAliveTimer; }
      }
      [global::System.CLSCompliant(false)]
      public uint KeepAliveTimer {
        get { return result.KeepAliveTimer; }
        set { SetKeepAliveTimer(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetKeepAliveTimer(uint value) {
        PrepareBuilder();
        result.hasKeepAliveTimer = true;
        result.keepAliveTimer_ = value;
        return this;
      }
      public Builder ClearKeepAliveTimer() {
        PrepareBuilder();
        result.hasKeepAliveTimer = false;
        result.keepAliveTimer_ = 0;
        return this;
      }
      
      public bool HasKeepUdpPort {
        get { return result.hasKeepUdpPort; }
      }
      public bool KeepUdpPort {
        get { return result.KeepUdpPort; }
        set { SetKeepUdpPort(value); }
      }
      public Builder SetKeepUdpPort(bool value) {
        PrepareBuilder();
        result.hasKeepUdpPort = true;
        result.keepUdpPort_ = value;
        return this;
      }
      public Builder ClearKeepUdpPort() {
        PrepareBuilder();
        result.hasKeepUdpPort = false;
        result.keepUdpPort_ = false;
        return this;
      }
      
      public bool HasKeepAliveCloud {
        get { return result.hasKeepAliveCloud; }
      }
      [global::System.CLSCompliant(false)]
      public uint KeepAliveCloud {
        get { return result.KeepAliveCloud; }
        set { SetKeepAliveCloud(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetKeepAliveCloud(uint value) {
        PrepareBuilder();
        result.hasKeepAliveCloud = true;
        result.keepAliveCloud_ = value;
        return this;
      }
      public Builder ClearKeepAliveCloud() {
        PrepareBuilder();
        result.hasKeepAliveCloud = false;
        result.keepAliveCloud_ = 0;
        return this;
      }
    }
    static mxt1xx_u_dynamic_setup_connection() {
      object.ReferenceEquals(global::maxtrack.pb.mxt1xx.Mxt1Xx.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mxt1xx_u_dynamic_setup_position : pb::GeneratedMessage<mxt1xx_u_dynamic_setup_position, mxt1xx_u_dynamic_setup_position.Builder> {
    private mxt1xx_u_dynamic_setup_position() { }
    private static readonly mxt1xx_u_dynamic_setup_position defaultInstance = new mxt1xx_u_dynamic_setup_position().MakeReadOnly();
    private static readonly string[] _mxt1XxUDynamicSetupPositionFieldNames = new string[] { "direction_threshold", "discharge_mode", "distance_threshold", "moving_interval", "panic_interval", "resend_attempts", "stop_timer_factor", "stopped_interval", "timeout_for_resend", "timeout_moving" };
    private static readonly uint[] _mxt1XxUDynamicSetupPositionFieldTags = new uint[] { 72, 80, 64, 24, 40, 48, 16, 8, 56, 32 };
    public static mxt1xx_u_dynamic_setup_position DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mxt1xx_u_dynamic_setup_position DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mxt1xx_u_dynamic_setup_position ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_dynamic_setup_position__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mxt1xx_u_dynamic_setup_position, mxt1xx_u_dynamic_setup_position.Builder> InternalFieldAccessors {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_dynamic_setup_position__FieldAccessorTable; }
    }
    
    public const int StoppedIntervalFieldNumber = 1;
    private bool hasStoppedInterval;
    private uint stoppedInterval_;
    public bool HasStoppedInterval {
      get { return hasStoppedInterval; }
    }
    [global::System.CLSCompliant(false)]
    public uint StoppedInterval {
      get { return stoppedInterval_; }
    }
    
    public const int StopTimerFactorFieldNumber = 2;
    private bool hasStopTimerFactor;
    private uint stopTimerFactor_;
    public bool HasStopTimerFactor {
      get { return hasStopTimerFactor; }
    }
    [global::System.CLSCompliant(false)]
    public uint StopTimerFactor {
      get { return stopTimerFactor_; }
    }
    
    public const int MovingIntervalFieldNumber = 3;
    private bool hasMovingInterval;
    private uint movingInterval_;
    public bool HasMovingInterval {
      get { return hasMovingInterval; }
    }
    [global::System.CLSCompliant(false)]
    public uint MovingInterval {
      get { return movingInterval_; }
    }
    
    public const int TimeoutMovingFieldNumber = 4;
    private bool hasTimeoutMoving;
    private uint timeoutMoving_;
    public bool HasTimeoutMoving {
      get { return hasTimeoutMoving; }
    }
    [global::System.CLSCompliant(false)]
    public uint TimeoutMoving {
      get { return timeoutMoving_; }
    }
    
    public const int PanicIntervalFieldNumber = 5;
    private bool hasPanicInterval;
    private uint panicInterval_;
    public bool HasPanicInterval {
      get { return hasPanicInterval; }
    }
    [global::System.CLSCompliant(false)]
    public uint PanicInterval {
      get { return panicInterval_; }
    }
    
    public const int ResendAttemptsFieldNumber = 6;
    private bool hasResendAttempts;
    private uint resendAttempts_;
    public bool HasResendAttempts {
      get { return hasResendAttempts; }
    }
    [global::System.CLSCompliant(false)]
    public uint ResendAttempts {
      get { return resendAttempts_; }
    }
    
    public const int TimeoutForResendFieldNumber = 7;
    private bool hasTimeoutForResend;
    private uint timeoutForResend_;
    public bool HasTimeoutForResend {
      get { return hasTimeoutForResend; }
    }
    [global::System.CLSCompliant(false)]
    public uint TimeoutForResend {
      get { return timeoutForResend_; }
    }
    
    public const int DistanceThresholdFieldNumber = 8;
    private bool hasDistanceThreshold;
    private uint distanceThreshold_;
    public bool HasDistanceThreshold {
      get { return hasDistanceThreshold; }
    }
    [global::System.CLSCompliant(false)]
    public uint DistanceThreshold {
      get { return distanceThreshold_; }
    }
    
    public const int DirectionThresholdFieldNumber = 9;
    private bool hasDirectionThreshold;
    private uint directionThreshold_;
    public bool HasDirectionThreshold {
      get { return hasDirectionThreshold; }
    }
    [global::System.CLSCompliant(false)]
    public uint DirectionThreshold {
      get { return directionThreshold_; }
    }
    
    public const int DischargeModeFieldNumber = 10;
    private bool hasDischargeMode;
    private uint dischargeMode_;
    public bool HasDischargeMode {
      get { return hasDischargeMode; }
    }
    [global::System.CLSCompliant(false)]
    public uint DischargeMode {
      get { return dischargeMode_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mxt1XxUDynamicSetupPositionFieldNames;
      if (hasStoppedInterval) {
        output.WriteUInt32(1, field_names[7], StoppedInterval);
      }
      if (hasStopTimerFactor) {
        output.WriteUInt32(2, field_names[6], StopTimerFactor);
      }
      if (hasMovingInterval) {
        output.WriteUInt32(3, field_names[3], MovingInterval);
      }
      if (hasTimeoutMoving) {
        output.WriteUInt32(4, field_names[9], TimeoutMoving);
      }
      if (hasPanicInterval) {
        output.WriteUInt32(5, field_names[4], PanicInterval);
      }
      if (hasResendAttempts) {
        output.WriteUInt32(6, field_names[5], ResendAttempts);
      }
      if (hasTimeoutForResend) {
        output.WriteUInt32(7, field_names[8], TimeoutForResend);
      }
      if (hasDistanceThreshold) {
        output.WriteUInt32(8, field_names[2], DistanceThreshold);
      }
      if (hasDirectionThreshold) {
        output.WriteUInt32(9, field_names[0], DirectionThreshold);
      }
      if (hasDischargeMode) {
        output.WriteUInt32(10, field_names[1], DischargeMode);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasStoppedInterval) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, StoppedInterval);
      }
      if (hasStopTimerFactor) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, StopTimerFactor);
      }
      if (hasMovingInterval) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, MovingInterval);
      }
      if (hasTimeoutMoving) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, TimeoutMoving);
      }
      if (hasPanicInterval) {
        size += pb::CodedOutputStream.ComputeUInt32Size(5, PanicInterval);
      }
      if (hasResendAttempts) {
        size += pb::CodedOutputStream.ComputeUInt32Size(6, ResendAttempts);
      }
      if (hasTimeoutForResend) {
        size += pb::CodedOutputStream.ComputeUInt32Size(7, TimeoutForResend);
      }
      if (hasDistanceThreshold) {
        size += pb::CodedOutputStream.ComputeUInt32Size(8, DistanceThreshold);
      }
      if (hasDirectionThreshold) {
        size += pb::CodedOutputStream.ComputeUInt32Size(9, DirectionThreshold);
      }
      if (hasDischargeMode) {
        size += pb::CodedOutputStream.ComputeUInt32Size(10, DischargeMode);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mxt1xx_u_dynamic_setup_position ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_position ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_position ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_position ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_position ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_position ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_position ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_position ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_position ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_position ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mxt1xx_u_dynamic_setup_position MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mxt1xx_u_dynamic_setup_position prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mxt1xx_u_dynamic_setup_position, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mxt1xx_u_dynamic_setup_position cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mxt1xx_u_dynamic_setup_position result;
      
      private mxt1xx_u_dynamic_setup_position PrepareBuilder() {
        if (resultIsReadOnly) {
          mxt1xx_u_dynamic_setup_position original = result;
          result = new mxt1xx_u_dynamic_setup_position();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mxt1xx_u_dynamic_setup_position MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_position.Descriptor; }
      }
      
      public override mxt1xx_u_dynamic_setup_position DefaultInstanceForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_position.DefaultInstance; }
      }
      
      public override mxt1xx_u_dynamic_setup_position BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mxt1xx_u_dynamic_setup_position) {
          return MergeFrom((mxt1xx_u_dynamic_setup_position) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mxt1xx_u_dynamic_setup_position other) {
        if (other == global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_position.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasStoppedInterval) {
          StoppedInterval = other.StoppedInterval;
        }
        if (other.HasStopTimerFactor) {
          StopTimerFactor = other.StopTimerFactor;
        }
        if (other.HasMovingInterval) {
          MovingInterval = other.MovingInterval;
        }
        if (other.HasTimeoutMoving) {
          TimeoutMoving = other.TimeoutMoving;
        }
        if (other.HasPanicInterval) {
          PanicInterval = other.PanicInterval;
        }
        if (other.HasResendAttempts) {
          ResendAttempts = other.ResendAttempts;
        }
        if (other.HasTimeoutForResend) {
          TimeoutForResend = other.TimeoutForResend;
        }
        if (other.HasDistanceThreshold) {
          DistanceThreshold = other.DistanceThreshold;
        }
        if (other.HasDirectionThreshold) {
          DirectionThreshold = other.DirectionThreshold;
        }
        if (other.HasDischargeMode) {
          DischargeMode = other.DischargeMode;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mxt1XxUDynamicSetupPositionFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mxt1XxUDynamicSetupPositionFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasStoppedInterval = input.ReadUInt32(ref result.stoppedInterval_);
              break;
            }
            case 16: {
              result.hasStopTimerFactor = input.ReadUInt32(ref result.stopTimerFactor_);
              break;
            }
            case 24: {
              result.hasMovingInterval = input.ReadUInt32(ref result.movingInterval_);
              break;
            }
            case 32: {
              result.hasTimeoutMoving = input.ReadUInt32(ref result.timeoutMoving_);
              break;
            }
            case 40: {
              result.hasPanicInterval = input.ReadUInt32(ref result.panicInterval_);
              break;
            }
            case 48: {
              result.hasResendAttempts = input.ReadUInt32(ref result.resendAttempts_);
              break;
            }
            case 56: {
              result.hasTimeoutForResend = input.ReadUInt32(ref result.timeoutForResend_);
              break;
            }
            case 64: {
              result.hasDistanceThreshold = input.ReadUInt32(ref result.distanceThreshold_);
              break;
            }
            case 72: {
              result.hasDirectionThreshold = input.ReadUInt32(ref result.directionThreshold_);
              break;
            }
            case 80: {
              result.hasDischargeMode = input.ReadUInt32(ref result.dischargeMode_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasStoppedInterval {
        get { return result.hasStoppedInterval; }
      }
      [global::System.CLSCompliant(false)]
      public uint StoppedInterval {
        get { return result.StoppedInterval; }
        set { SetStoppedInterval(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetStoppedInterval(uint value) {
        PrepareBuilder();
        result.hasStoppedInterval = true;
        result.stoppedInterval_ = value;
        return this;
      }
      public Builder ClearStoppedInterval() {
        PrepareBuilder();
        result.hasStoppedInterval = false;
        result.stoppedInterval_ = 0;
        return this;
      }
      
      public bool HasStopTimerFactor {
        get { return result.hasStopTimerFactor; }
      }
      [global::System.CLSCompliant(false)]
      public uint StopTimerFactor {
        get { return result.StopTimerFactor; }
        set { SetStopTimerFactor(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetStopTimerFactor(uint value) {
        PrepareBuilder();
        result.hasStopTimerFactor = true;
        result.stopTimerFactor_ = value;
        return this;
      }
      public Builder ClearStopTimerFactor() {
        PrepareBuilder();
        result.hasStopTimerFactor = false;
        result.stopTimerFactor_ = 0;
        return this;
      }
      
      public bool HasMovingInterval {
        get { return result.hasMovingInterval; }
      }
      [global::System.CLSCompliant(false)]
      public uint MovingInterval {
        get { return result.MovingInterval; }
        set { SetMovingInterval(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetMovingInterval(uint value) {
        PrepareBuilder();
        result.hasMovingInterval = true;
        result.movingInterval_ = value;
        return this;
      }
      public Builder ClearMovingInterval() {
        PrepareBuilder();
        result.hasMovingInterval = false;
        result.movingInterval_ = 0;
        return this;
      }
      
      public bool HasTimeoutMoving {
        get { return result.hasTimeoutMoving; }
      }
      [global::System.CLSCompliant(false)]
      public uint TimeoutMoving {
        get { return result.TimeoutMoving; }
        set { SetTimeoutMoving(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetTimeoutMoving(uint value) {
        PrepareBuilder();
        result.hasTimeoutMoving = true;
        result.timeoutMoving_ = value;
        return this;
      }
      public Builder ClearTimeoutMoving() {
        PrepareBuilder();
        result.hasTimeoutMoving = false;
        result.timeoutMoving_ = 0;
        return this;
      }
      
      public bool HasPanicInterval {
        get { return result.hasPanicInterval; }
      }
      [global::System.CLSCompliant(false)]
      public uint PanicInterval {
        get { return result.PanicInterval; }
        set { SetPanicInterval(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetPanicInterval(uint value) {
        PrepareBuilder();
        result.hasPanicInterval = true;
        result.panicInterval_ = value;
        return this;
      }
      public Builder ClearPanicInterval() {
        PrepareBuilder();
        result.hasPanicInterval = false;
        result.panicInterval_ = 0;
        return this;
      }
      
      public bool HasResendAttempts {
        get { return result.hasResendAttempts; }
      }
      [global::System.CLSCompliant(false)]
      public uint ResendAttempts {
        get { return result.ResendAttempts; }
        set { SetResendAttempts(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetResendAttempts(uint value) {
        PrepareBuilder();
        result.hasResendAttempts = true;
        result.resendAttempts_ = value;
        return this;
      }
      public Builder ClearResendAttempts() {
        PrepareBuilder();
        result.hasResendAttempts = false;
        result.resendAttempts_ = 0;
        return this;
      }
      
      public bool HasTimeoutForResend {
        get { return result.hasTimeoutForResend; }
      }
      [global::System.CLSCompliant(false)]
      public uint TimeoutForResend {
        get { return result.TimeoutForResend; }
        set { SetTimeoutForResend(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetTimeoutForResend(uint value) {
        PrepareBuilder();
        result.hasTimeoutForResend = true;
        result.timeoutForResend_ = value;
        return this;
      }
      public Builder ClearTimeoutForResend() {
        PrepareBuilder();
        result.hasTimeoutForResend = false;
        result.timeoutForResend_ = 0;
        return this;
      }
      
      public bool HasDistanceThreshold {
        get { return result.hasDistanceThreshold; }
      }
      [global::System.CLSCompliant(false)]
      public uint DistanceThreshold {
        get { return result.DistanceThreshold; }
        set { SetDistanceThreshold(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetDistanceThreshold(uint value) {
        PrepareBuilder();
        result.hasDistanceThreshold = true;
        result.distanceThreshold_ = value;
        return this;
      }
      public Builder ClearDistanceThreshold() {
        PrepareBuilder();
        result.hasDistanceThreshold = false;
        result.distanceThreshold_ = 0;
        return this;
      }
      
      public bool HasDirectionThreshold {
        get { return result.hasDirectionThreshold; }
      }
      [global::System.CLSCompliant(false)]
      public uint DirectionThreshold {
        get { return result.DirectionThreshold; }
        set { SetDirectionThreshold(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetDirectionThreshold(uint value) {
        PrepareBuilder();
        result.hasDirectionThreshold = true;
        result.directionThreshold_ = value;
        return this;
      }
      public Builder ClearDirectionThreshold() {
        PrepareBuilder();
        result.hasDirectionThreshold = false;
        result.directionThreshold_ = 0;
        return this;
      }
      
      public bool HasDischargeMode {
        get { return result.hasDischargeMode; }
      }
      [global::System.CLSCompliant(false)]
      public uint DischargeMode {
        get { return result.DischargeMode; }
        set { SetDischargeMode(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetDischargeMode(uint value) {
        PrepareBuilder();
        result.hasDischargeMode = true;
        result.dischargeMode_ = value;
        return this;
      }
      public Builder ClearDischargeMode() {
        PrepareBuilder();
        result.hasDischargeMode = false;
        result.dischargeMode_ = 0;
        return this;
      }
    }
    static mxt1xx_u_dynamic_setup_position() {
      object.ReferenceEquals(global::maxtrack.pb.mxt1xx.Mxt1Xx.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mxt1xx_u_dynamic_setup_gps : pb::GeneratedMessage<mxt1xx_u_dynamic_setup_gps, mxt1xx_u_dynamic_setup_gps.Builder> {
    private mxt1xx_u_dynamic_setup_gps() { }
    private static readonly mxt1xx_u_dynamic_setup_gps defaultInstance = new mxt1xx_u_dynamic_setup_gps().MakeReadOnly();
    private static readonly string[] _mxt1XxUDynamicSetupGpsFieldNames = new string[] { "accelerate_filter", "gps_failure_time", "gps_filter", "keep_working_timer", "unfix_timeout", "unfix_timeout_coldstart" };
    private static readonly uint[] _mxt1XxUDynamicSetupGpsFieldTags = new uint[] { 32, 48, 40, 8, 16, 24 };
    public static mxt1xx_u_dynamic_setup_gps DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mxt1xx_u_dynamic_setup_gps DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mxt1xx_u_dynamic_setup_gps ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_dynamic_setup_gps__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mxt1xx_u_dynamic_setup_gps, mxt1xx_u_dynamic_setup_gps.Builder> InternalFieldAccessors {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_dynamic_setup_gps__FieldAccessorTable; }
    }
    
    public const int KeepWorkingTimerFieldNumber = 1;
    private bool hasKeepWorkingTimer;
    private uint keepWorkingTimer_;
    public bool HasKeepWorkingTimer {
      get { return hasKeepWorkingTimer; }
    }
    [global::System.CLSCompliant(false)]
    public uint KeepWorkingTimer {
      get { return keepWorkingTimer_; }
    }
    
    public const int UnfixTimeoutFieldNumber = 2;
    private bool hasUnfixTimeout;
    private uint unfixTimeout_;
    public bool HasUnfixTimeout {
      get { return hasUnfixTimeout; }
    }
    [global::System.CLSCompliant(false)]
    public uint UnfixTimeout {
      get { return unfixTimeout_; }
    }
    
    public const int UnfixTimeoutColdstartFieldNumber = 3;
    private bool hasUnfixTimeoutColdstart;
    private uint unfixTimeoutColdstart_;
    public bool HasUnfixTimeoutColdstart {
      get { return hasUnfixTimeoutColdstart; }
    }
    [global::System.CLSCompliant(false)]
    public uint UnfixTimeoutColdstart {
      get { return unfixTimeoutColdstart_; }
    }
    
    public const int AccelerateFilterFieldNumber = 4;
    private bool hasAccelerateFilter;
    private uint accelerateFilter_;
    public bool HasAccelerateFilter {
      get { return hasAccelerateFilter; }
    }
    [global::System.CLSCompliant(false)]
    public uint AccelerateFilter {
      get { return accelerateFilter_; }
    }
    
    public const int GpsFilterFieldNumber = 5;
    private bool hasGpsFilter;
    private uint gpsFilter_;
    public bool HasGpsFilter {
      get { return hasGpsFilter; }
    }
    [global::System.CLSCompliant(false)]
    public uint GpsFilter {
      get { return gpsFilter_; }
    }
    
    public const int GpsFailureTimeFieldNumber = 6;
    private bool hasGpsFailureTime;
    private uint gpsFailureTime_;
    public bool HasGpsFailureTime {
      get { return hasGpsFailureTime; }
    }
    [global::System.CLSCompliant(false)]
    public uint GpsFailureTime {
      get { return gpsFailureTime_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mxt1XxUDynamicSetupGpsFieldNames;
      if (hasKeepWorkingTimer) {
        output.WriteUInt32(1, field_names[3], KeepWorkingTimer);
      }
      if (hasUnfixTimeout) {
        output.WriteUInt32(2, field_names[4], UnfixTimeout);
      }
      if (hasUnfixTimeoutColdstart) {
        output.WriteUInt32(3, field_names[5], UnfixTimeoutColdstart);
      }
      if (hasAccelerateFilter) {
        output.WriteUInt32(4, field_names[0], AccelerateFilter);
      }
      if (hasGpsFilter) {
        output.WriteUInt32(5, field_names[2], GpsFilter);
      }
      if (hasGpsFailureTime) {
        output.WriteUInt32(6, field_names[1], GpsFailureTime);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasKeepWorkingTimer) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, KeepWorkingTimer);
      }
      if (hasUnfixTimeout) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, UnfixTimeout);
      }
      if (hasUnfixTimeoutColdstart) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, UnfixTimeoutColdstart);
      }
      if (hasAccelerateFilter) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, AccelerateFilter);
      }
      if (hasGpsFilter) {
        size += pb::CodedOutputStream.ComputeUInt32Size(5, GpsFilter);
      }
      if (hasGpsFailureTime) {
        size += pb::CodedOutputStream.ComputeUInt32Size(6, GpsFailureTime);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mxt1xx_u_dynamic_setup_gps ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_gps ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_gps ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_gps ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_gps ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_gps ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_gps ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_gps ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_gps ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_gps ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mxt1xx_u_dynamic_setup_gps MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mxt1xx_u_dynamic_setup_gps prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mxt1xx_u_dynamic_setup_gps, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mxt1xx_u_dynamic_setup_gps cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mxt1xx_u_dynamic_setup_gps result;
      
      private mxt1xx_u_dynamic_setup_gps PrepareBuilder() {
        if (resultIsReadOnly) {
          mxt1xx_u_dynamic_setup_gps original = result;
          result = new mxt1xx_u_dynamic_setup_gps();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mxt1xx_u_dynamic_setup_gps MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_gps.Descriptor; }
      }
      
      public override mxt1xx_u_dynamic_setup_gps DefaultInstanceForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_gps.DefaultInstance; }
      }
      
      public override mxt1xx_u_dynamic_setup_gps BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mxt1xx_u_dynamic_setup_gps) {
          return MergeFrom((mxt1xx_u_dynamic_setup_gps) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mxt1xx_u_dynamic_setup_gps other) {
        if (other == global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_gps.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasKeepWorkingTimer) {
          KeepWorkingTimer = other.KeepWorkingTimer;
        }
        if (other.HasUnfixTimeout) {
          UnfixTimeout = other.UnfixTimeout;
        }
        if (other.HasUnfixTimeoutColdstart) {
          UnfixTimeoutColdstart = other.UnfixTimeoutColdstart;
        }
        if (other.HasAccelerateFilter) {
          AccelerateFilter = other.AccelerateFilter;
        }
        if (other.HasGpsFilter) {
          GpsFilter = other.GpsFilter;
        }
        if (other.HasGpsFailureTime) {
          GpsFailureTime = other.GpsFailureTime;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mxt1XxUDynamicSetupGpsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mxt1XxUDynamicSetupGpsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasKeepWorkingTimer = input.ReadUInt32(ref result.keepWorkingTimer_);
              break;
            }
            case 16: {
              result.hasUnfixTimeout = input.ReadUInt32(ref result.unfixTimeout_);
              break;
            }
            case 24: {
              result.hasUnfixTimeoutColdstart = input.ReadUInt32(ref result.unfixTimeoutColdstart_);
              break;
            }
            case 32: {
              result.hasAccelerateFilter = input.ReadUInt32(ref result.accelerateFilter_);
              break;
            }
            case 40: {
              result.hasGpsFilter = input.ReadUInt32(ref result.gpsFilter_);
              break;
            }
            case 48: {
              result.hasGpsFailureTime = input.ReadUInt32(ref result.gpsFailureTime_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasKeepWorkingTimer {
        get { return result.hasKeepWorkingTimer; }
      }
      [global::System.CLSCompliant(false)]
      public uint KeepWorkingTimer {
        get { return result.KeepWorkingTimer; }
        set { SetKeepWorkingTimer(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetKeepWorkingTimer(uint value) {
        PrepareBuilder();
        result.hasKeepWorkingTimer = true;
        result.keepWorkingTimer_ = value;
        return this;
      }
      public Builder ClearKeepWorkingTimer() {
        PrepareBuilder();
        result.hasKeepWorkingTimer = false;
        result.keepWorkingTimer_ = 0;
        return this;
      }
      
      public bool HasUnfixTimeout {
        get { return result.hasUnfixTimeout; }
      }
      [global::System.CLSCompliant(false)]
      public uint UnfixTimeout {
        get { return result.UnfixTimeout; }
        set { SetUnfixTimeout(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetUnfixTimeout(uint value) {
        PrepareBuilder();
        result.hasUnfixTimeout = true;
        result.unfixTimeout_ = value;
        return this;
      }
      public Builder ClearUnfixTimeout() {
        PrepareBuilder();
        result.hasUnfixTimeout = false;
        result.unfixTimeout_ = 0;
        return this;
      }
      
      public bool HasUnfixTimeoutColdstart {
        get { return result.hasUnfixTimeoutColdstart; }
      }
      [global::System.CLSCompliant(false)]
      public uint UnfixTimeoutColdstart {
        get { return result.UnfixTimeoutColdstart; }
        set { SetUnfixTimeoutColdstart(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetUnfixTimeoutColdstart(uint value) {
        PrepareBuilder();
        result.hasUnfixTimeoutColdstart = true;
        result.unfixTimeoutColdstart_ = value;
        return this;
      }
      public Builder ClearUnfixTimeoutColdstart() {
        PrepareBuilder();
        result.hasUnfixTimeoutColdstart = false;
        result.unfixTimeoutColdstart_ = 0;
        return this;
      }
      
      public bool HasAccelerateFilter {
        get { return result.hasAccelerateFilter; }
      }
      [global::System.CLSCompliant(false)]
      public uint AccelerateFilter {
        get { return result.AccelerateFilter; }
        set { SetAccelerateFilter(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetAccelerateFilter(uint value) {
        PrepareBuilder();
        result.hasAccelerateFilter = true;
        result.accelerateFilter_ = value;
        return this;
      }
      public Builder ClearAccelerateFilter() {
        PrepareBuilder();
        result.hasAccelerateFilter = false;
        result.accelerateFilter_ = 0;
        return this;
      }
      
      public bool HasGpsFilter {
        get { return result.hasGpsFilter; }
      }
      [global::System.CLSCompliant(false)]
      public uint GpsFilter {
        get { return result.GpsFilter; }
        set { SetGpsFilter(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetGpsFilter(uint value) {
        PrepareBuilder();
        result.hasGpsFilter = true;
        result.gpsFilter_ = value;
        return this;
      }
      public Builder ClearGpsFilter() {
        PrepareBuilder();
        result.hasGpsFilter = false;
        result.gpsFilter_ = 0;
        return this;
      }
      
      public bool HasGpsFailureTime {
        get { return result.hasGpsFailureTime; }
      }
      [global::System.CLSCompliant(false)]
      public uint GpsFailureTime {
        get { return result.GpsFailureTime; }
        set { SetGpsFailureTime(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetGpsFailureTime(uint value) {
        PrepareBuilder();
        result.hasGpsFailureTime = true;
        result.gpsFailureTime_ = value;
        return this;
      }
      public Builder ClearGpsFailureTime() {
        PrepareBuilder();
        result.hasGpsFailureTime = false;
        result.gpsFailureTime_ = 0;
        return this;
      }
    }
    static mxt1xx_u_dynamic_setup_gps() {
      object.ReferenceEquals(global::maxtrack.pb.mxt1xx.Mxt1Xx.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mxt1xx_u_dynamic_setup_gsensor : pb::GeneratedMessage<mxt1xx_u_dynamic_setup_gsensor, mxt1xx_u_dynamic_setup_gsensor.Builder> {
    private mxt1xx_u_dynamic_setup_gsensor() { }
    private static readonly mxt1xx_u_dynamic_setup_gsensor defaultInstance = new mxt1xx_u_dynamic_setup_gsensor().MakeReadOnly();
    private static readonly string[] _mxt1XxUDynamicSetupGsensorFieldNames = new string[] { "calibration_reset_cycles", "calibration_reset_output", "calibration_reset_time_off", "calibration_reset_time_on", "crash_cycles", "crash_min_g", "crash_output", "crash_threshold", "crash_time_off", "crash_time_on", "detect_interval", "final_calibration_cycles", "final_calibration_output", "final_calibration_time_off", "final_calibration_time_on", "hard_acceleration_cycles", "hard_acceleration_min_g", "hard_acceleration_output", "hard_acceleration_threshold", "hard_acceleration_time_off", "hard_acceleration_time_on", "hard_breaking_cycles", "hard_breaking_min_g", "hard_breaking_output", "hard_breaking_threshold", "hard_breaking_time_off", "hard_breaking_time_on", "hard_curve_min_g", "hard_curve_threshold", "initial_calibration_cycles", "initial_calibration_output", "initial_calibration_time_off", "initial_calibration_time_on", "left_turn_acceleration_cycles", "left_turn_acceleration_output", "left_turn_acceleration_time_off", "left_turn_acceleration_time_on", "move_to_stop", "right_turn_acceleration_cycles", "right_turn_acceleration_output", "right_turn_acceleration_time_off", "right_turn_acceleration_time_on", "send_event", "stop_to_move" };
    private static readonly uint[] _mxt1XxUDynamicSetupGsensorFieldTags = new uint[] { 304, 296, 320, 312, 336, 88, 328, 96, 352, 344, 24, 272, 264, 288, 280, 112, 40, 104, 48, 128, 120, 144, 56, 136, 64, 160, 152, 72, 80, 240, 232, 256, 248, 208, 200, 224, 216, 16, 176, 168, 192, 184, 32, 8 };
    public static mxt1xx_u_dynamic_setup_gsensor DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mxt1xx_u_dynamic_setup_gsensor DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mxt1xx_u_dynamic_setup_gsensor ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_dynamic_setup_gsensor__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mxt1xx_u_dynamic_setup_gsensor, mxt1xx_u_dynamic_setup_gsensor.Builder> InternalFieldAccessors {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_dynamic_setup_gsensor__FieldAccessorTable; }
    }
    
    public const int StopToMoveFieldNumber = 1;
    private bool hasStopToMove;
    private uint stopToMove_;
    public bool HasStopToMove {
      get { return hasStopToMove; }
    }
    [global::System.CLSCompliant(false)]
    public uint StopToMove {
      get { return stopToMove_; }
    }
    
    public const int MoveToStopFieldNumber = 2;
    private bool hasMoveToStop;
    private uint moveToStop_;
    public bool HasMoveToStop {
      get { return hasMoveToStop; }
    }
    [global::System.CLSCompliant(false)]
    public uint MoveToStop {
      get { return moveToStop_; }
    }
    
    public const int DetectIntervalFieldNumber = 3;
    private bool hasDetectInterval;
    private uint detectInterval_;
    public bool HasDetectInterval {
      get { return hasDetectInterval; }
    }
    [global::System.CLSCompliant(false)]
    public uint DetectInterval {
      get { return detectInterval_; }
    }
    
    public const int SendEventFieldNumber = 4;
    private bool hasSendEvent;
    private bool sendEvent_;
    public bool HasSendEvent {
      get { return hasSendEvent; }
    }
    public bool SendEvent {
      get { return sendEvent_; }
    }
    
    public const int HardAccelerationMinGFieldNumber = 5;
    private bool hasHardAccelerationMinG;
    private uint hardAccelerationMinG_;
    public bool HasHardAccelerationMinG {
      get { return hasHardAccelerationMinG; }
    }
    [global::System.CLSCompliant(false)]
    public uint HardAccelerationMinG {
      get { return hardAccelerationMinG_; }
    }
    
    public const int HardAccelerationThresholdFieldNumber = 6;
    private bool hasHardAccelerationThreshold;
    private uint hardAccelerationThreshold_;
    public bool HasHardAccelerationThreshold {
      get { return hasHardAccelerationThreshold; }
    }
    [global::System.CLSCompliant(false)]
    public uint HardAccelerationThreshold {
      get { return hardAccelerationThreshold_; }
    }
    
    public const int HardBreakingMinGFieldNumber = 7;
    private bool hasHardBreakingMinG;
    private uint hardBreakingMinG_;
    public bool HasHardBreakingMinG {
      get { return hasHardBreakingMinG; }
    }
    [global::System.CLSCompliant(false)]
    public uint HardBreakingMinG {
      get { return hardBreakingMinG_; }
    }
    
    public const int HardBreakingThresholdFieldNumber = 8;
    private bool hasHardBreakingThreshold;
    private uint hardBreakingThreshold_;
    public bool HasHardBreakingThreshold {
      get { return hasHardBreakingThreshold; }
    }
    [global::System.CLSCompliant(false)]
    public uint HardBreakingThreshold {
      get { return hardBreakingThreshold_; }
    }
    
    public const int HardCurveMinGFieldNumber = 9;
    private bool hasHardCurveMinG;
    private uint hardCurveMinG_;
    public bool HasHardCurveMinG {
      get { return hasHardCurveMinG; }
    }
    [global::System.CLSCompliant(false)]
    public uint HardCurveMinG {
      get { return hardCurveMinG_; }
    }
    
    public const int HardCurveThresholdFieldNumber = 10;
    private bool hasHardCurveThreshold;
    private uint hardCurveThreshold_;
    public bool HasHardCurveThreshold {
      get { return hasHardCurveThreshold; }
    }
    [global::System.CLSCompliant(false)]
    public uint HardCurveThreshold {
      get { return hardCurveThreshold_; }
    }
    
    public const int CrashMinGFieldNumber = 11;
    private bool hasCrashMinG;
    private uint crashMinG_;
    public bool HasCrashMinG {
      get { return hasCrashMinG; }
    }
    [global::System.CLSCompliant(false)]
    public uint CrashMinG {
      get { return crashMinG_; }
    }
    
    public const int CrashThresholdFieldNumber = 12;
    private bool hasCrashThreshold;
    private uint crashThreshold_;
    public bool HasCrashThreshold {
      get { return hasCrashThreshold; }
    }
    [global::System.CLSCompliant(false)]
    public uint CrashThreshold {
      get { return crashThreshold_; }
    }
    
    public const int HardAccelerationOutputFieldNumber = 13;
    private bool hasHardAccelerationOutput;
    private uint hardAccelerationOutput_;
    public bool HasHardAccelerationOutput {
      get { return hasHardAccelerationOutput; }
    }
    [global::System.CLSCompliant(false)]
    public uint HardAccelerationOutput {
      get { return hardAccelerationOutput_; }
    }
    
    public const int HardAccelerationCyclesFieldNumber = 14;
    private bool hasHardAccelerationCycles;
    private uint hardAccelerationCycles_;
    public bool HasHardAccelerationCycles {
      get { return hasHardAccelerationCycles; }
    }
    [global::System.CLSCompliant(false)]
    public uint HardAccelerationCycles {
      get { return hardAccelerationCycles_; }
    }
    
    public const int HardAccelerationTimeOnFieldNumber = 15;
    private bool hasHardAccelerationTimeOn;
    private uint hardAccelerationTimeOn_;
    public bool HasHardAccelerationTimeOn {
      get { return hasHardAccelerationTimeOn; }
    }
    [global::System.CLSCompliant(false)]
    public uint HardAccelerationTimeOn {
      get { return hardAccelerationTimeOn_; }
    }
    
    public const int HardAccelerationTimeOffFieldNumber = 16;
    private bool hasHardAccelerationTimeOff;
    private uint hardAccelerationTimeOff_;
    public bool HasHardAccelerationTimeOff {
      get { return hasHardAccelerationTimeOff; }
    }
    [global::System.CLSCompliant(false)]
    public uint HardAccelerationTimeOff {
      get { return hardAccelerationTimeOff_; }
    }
    
    public const int HardBreakingOutputFieldNumber = 17;
    private bool hasHardBreakingOutput;
    private uint hardBreakingOutput_;
    public bool HasHardBreakingOutput {
      get { return hasHardBreakingOutput; }
    }
    [global::System.CLSCompliant(false)]
    public uint HardBreakingOutput {
      get { return hardBreakingOutput_; }
    }
    
    public const int HardBreakingCyclesFieldNumber = 18;
    private bool hasHardBreakingCycles;
    private uint hardBreakingCycles_;
    public bool HasHardBreakingCycles {
      get { return hasHardBreakingCycles; }
    }
    [global::System.CLSCompliant(false)]
    public uint HardBreakingCycles {
      get { return hardBreakingCycles_; }
    }
    
    public const int HardBreakingTimeOnFieldNumber = 19;
    private bool hasHardBreakingTimeOn;
    private uint hardBreakingTimeOn_;
    public bool HasHardBreakingTimeOn {
      get { return hasHardBreakingTimeOn; }
    }
    [global::System.CLSCompliant(false)]
    public uint HardBreakingTimeOn {
      get { return hardBreakingTimeOn_; }
    }
    
    public const int HardBreakingTimeOffFieldNumber = 20;
    private bool hasHardBreakingTimeOff;
    private uint hardBreakingTimeOff_;
    public bool HasHardBreakingTimeOff {
      get { return hasHardBreakingTimeOff; }
    }
    [global::System.CLSCompliant(false)]
    public uint HardBreakingTimeOff {
      get { return hardBreakingTimeOff_; }
    }
    
    public const int RightTurnAccelerationOutputFieldNumber = 21;
    private bool hasRightTurnAccelerationOutput;
    private uint rightTurnAccelerationOutput_;
    public bool HasRightTurnAccelerationOutput {
      get { return hasRightTurnAccelerationOutput; }
    }
    [global::System.CLSCompliant(false)]
    public uint RightTurnAccelerationOutput {
      get { return rightTurnAccelerationOutput_; }
    }
    
    public const int RightTurnAccelerationCyclesFieldNumber = 22;
    private bool hasRightTurnAccelerationCycles;
    private uint rightTurnAccelerationCycles_;
    public bool HasRightTurnAccelerationCycles {
      get { return hasRightTurnAccelerationCycles; }
    }
    [global::System.CLSCompliant(false)]
    public uint RightTurnAccelerationCycles {
      get { return rightTurnAccelerationCycles_; }
    }
    
    public const int RightTurnAccelerationTimeOnFieldNumber = 23;
    private bool hasRightTurnAccelerationTimeOn;
    private uint rightTurnAccelerationTimeOn_;
    public bool HasRightTurnAccelerationTimeOn {
      get { return hasRightTurnAccelerationTimeOn; }
    }
    [global::System.CLSCompliant(false)]
    public uint RightTurnAccelerationTimeOn {
      get { return rightTurnAccelerationTimeOn_; }
    }
    
    public const int RightTurnAccelerationTimeOffFieldNumber = 24;
    private bool hasRightTurnAccelerationTimeOff;
    private uint rightTurnAccelerationTimeOff_;
    public bool HasRightTurnAccelerationTimeOff {
      get { return hasRightTurnAccelerationTimeOff; }
    }
    [global::System.CLSCompliant(false)]
    public uint RightTurnAccelerationTimeOff {
      get { return rightTurnAccelerationTimeOff_; }
    }
    
    public const int LeftTurnAccelerationOutputFieldNumber = 25;
    private bool hasLeftTurnAccelerationOutput;
    private uint leftTurnAccelerationOutput_;
    public bool HasLeftTurnAccelerationOutput {
      get { return hasLeftTurnAccelerationOutput; }
    }
    [global::System.CLSCompliant(false)]
    public uint LeftTurnAccelerationOutput {
      get { return leftTurnAccelerationOutput_; }
    }
    
    public const int LeftTurnAccelerationCyclesFieldNumber = 26;
    private bool hasLeftTurnAccelerationCycles;
    private uint leftTurnAccelerationCycles_;
    public bool HasLeftTurnAccelerationCycles {
      get { return hasLeftTurnAccelerationCycles; }
    }
    [global::System.CLSCompliant(false)]
    public uint LeftTurnAccelerationCycles {
      get { return leftTurnAccelerationCycles_; }
    }
    
    public const int LeftTurnAccelerationTimeOnFieldNumber = 27;
    private bool hasLeftTurnAccelerationTimeOn;
    private uint leftTurnAccelerationTimeOn_;
    public bool HasLeftTurnAccelerationTimeOn {
      get { return hasLeftTurnAccelerationTimeOn; }
    }
    [global::System.CLSCompliant(false)]
    public uint LeftTurnAccelerationTimeOn {
      get { return leftTurnAccelerationTimeOn_; }
    }
    
    public const int LeftTurnAccelerationTimeOffFieldNumber = 28;
    private bool hasLeftTurnAccelerationTimeOff;
    private uint leftTurnAccelerationTimeOff_;
    public bool HasLeftTurnAccelerationTimeOff {
      get { return hasLeftTurnAccelerationTimeOff; }
    }
    [global::System.CLSCompliant(false)]
    public uint LeftTurnAccelerationTimeOff {
      get { return leftTurnAccelerationTimeOff_; }
    }
    
    public const int InitialCalibrationOutputFieldNumber = 29;
    private bool hasInitialCalibrationOutput;
    private uint initialCalibrationOutput_;
    public bool HasInitialCalibrationOutput {
      get { return hasInitialCalibrationOutput; }
    }
    [global::System.CLSCompliant(false)]
    public uint InitialCalibrationOutput {
      get { return initialCalibrationOutput_; }
    }
    
    public const int InitialCalibrationCyclesFieldNumber = 30;
    private bool hasInitialCalibrationCycles;
    private uint initialCalibrationCycles_;
    public bool HasInitialCalibrationCycles {
      get { return hasInitialCalibrationCycles; }
    }
    [global::System.CLSCompliant(false)]
    public uint InitialCalibrationCycles {
      get { return initialCalibrationCycles_; }
    }
    
    public const int InitialCalibrationTimeOnFieldNumber = 31;
    private bool hasInitialCalibrationTimeOn;
    private uint initialCalibrationTimeOn_;
    public bool HasInitialCalibrationTimeOn {
      get { return hasInitialCalibrationTimeOn; }
    }
    [global::System.CLSCompliant(false)]
    public uint InitialCalibrationTimeOn {
      get { return initialCalibrationTimeOn_; }
    }
    
    public const int InitialCalibrationTimeOffFieldNumber = 32;
    private bool hasInitialCalibrationTimeOff;
    private uint initialCalibrationTimeOff_;
    public bool HasInitialCalibrationTimeOff {
      get { return hasInitialCalibrationTimeOff; }
    }
    [global::System.CLSCompliant(false)]
    public uint InitialCalibrationTimeOff {
      get { return initialCalibrationTimeOff_; }
    }
    
    public const int FinalCalibrationOutputFieldNumber = 33;
    private bool hasFinalCalibrationOutput;
    private uint finalCalibrationOutput_;
    public bool HasFinalCalibrationOutput {
      get { return hasFinalCalibrationOutput; }
    }
    [global::System.CLSCompliant(false)]
    public uint FinalCalibrationOutput {
      get { return finalCalibrationOutput_; }
    }
    
    public const int FinalCalibrationCyclesFieldNumber = 34;
    private bool hasFinalCalibrationCycles;
    private uint finalCalibrationCycles_;
    public bool HasFinalCalibrationCycles {
      get { return hasFinalCalibrationCycles; }
    }
    [global::System.CLSCompliant(false)]
    public uint FinalCalibrationCycles {
      get { return finalCalibrationCycles_; }
    }
    
    public const int FinalCalibrationTimeOnFieldNumber = 35;
    private bool hasFinalCalibrationTimeOn;
    private uint finalCalibrationTimeOn_;
    public bool HasFinalCalibrationTimeOn {
      get { return hasFinalCalibrationTimeOn; }
    }
    [global::System.CLSCompliant(false)]
    public uint FinalCalibrationTimeOn {
      get { return finalCalibrationTimeOn_; }
    }
    
    public const int FinalCalibrationTimeOffFieldNumber = 36;
    private bool hasFinalCalibrationTimeOff;
    private uint finalCalibrationTimeOff_;
    public bool HasFinalCalibrationTimeOff {
      get { return hasFinalCalibrationTimeOff; }
    }
    [global::System.CLSCompliant(false)]
    public uint FinalCalibrationTimeOff {
      get { return finalCalibrationTimeOff_; }
    }
    
    public const int CalibrationResetOutputFieldNumber = 37;
    private bool hasCalibrationResetOutput;
    private uint calibrationResetOutput_;
    public bool HasCalibrationResetOutput {
      get { return hasCalibrationResetOutput; }
    }
    [global::System.CLSCompliant(false)]
    public uint CalibrationResetOutput {
      get { return calibrationResetOutput_; }
    }
    
    public const int CalibrationResetCyclesFieldNumber = 38;
    private bool hasCalibrationResetCycles;
    private uint calibrationResetCycles_;
    public bool HasCalibrationResetCycles {
      get { return hasCalibrationResetCycles; }
    }
    [global::System.CLSCompliant(false)]
    public uint CalibrationResetCycles {
      get { return calibrationResetCycles_; }
    }
    
    public const int CalibrationResetTimeOnFieldNumber = 39;
    private bool hasCalibrationResetTimeOn;
    private uint calibrationResetTimeOn_;
    public bool HasCalibrationResetTimeOn {
      get { return hasCalibrationResetTimeOn; }
    }
    [global::System.CLSCompliant(false)]
    public uint CalibrationResetTimeOn {
      get { return calibrationResetTimeOn_; }
    }
    
    public const int CalibrationResetTimeOffFieldNumber = 40;
    private bool hasCalibrationResetTimeOff;
    private uint calibrationResetTimeOff_;
    public bool HasCalibrationResetTimeOff {
      get { return hasCalibrationResetTimeOff; }
    }
    [global::System.CLSCompliant(false)]
    public uint CalibrationResetTimeOff {
      get { return calibrationResetTimeOff_; }
    }
    
    public const int CrashOutputFieldNumber = 41;
    private bool hasCrashOutput;
    private uint crashOutput_;
    public bool HasCrashOutput {
      get { return hasCrashOutput; }
    }
    [global::System.CLSCompliant(false)]
    public uint CrashOutput {
      get { return crashOutput_; }
    }
    
    public const int CrashCyclesFieldNumber = 42;
    private bool hasCrashCycles;
    private uint crashCycles_;
    public bool HasCrashCycles {
      get { return hasCrashCycles; }
    }
    [global::System.CLSCompliant(false)]
    public uint CrashCycles {
      get { return crashCycles_; }
    }
    
    public const int CrashTimeOnFieldNumber = 43;
    private bool hasCrashTimeOn;
    private uint crashTimeOn_;
    public bool HasCrashTimeOn {
      get { return hasCrashTimeOn; }
    }
    [global::System.CLSCompliant(false)]
    public uint CrashTimeOn {
      get { return crashTimeOn_; }
    }
    
    public const int CrashTimeOffFieldNumber = 44;
    private bool hasCrashTimeOff;
    private uint crashTimeOff_;
    public bool HasCrashTimeOff {
      get { return hasCrashTimeOff; }
    }
    [global::System.CLSCompliant(false)]
    public uint CrashTimeOff {
      get { return crashTimeOff_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mxt1XxUDynamicSetupGsensorFieldNames;
      if (hasStopToMove) {
        output.WriteUInt32(1, field_names[43], StopToMove);
      }
      if (hasMoveToStop) {
        output.WriteUInt32(2, field_names[37], MoveToStop);
      }
      if (hasDetectInterval) {
        output.WriteUInt32(3, field_names[10], DetectInterval);
      }
      if (hasSendEvent) {
        output.WriteBool(4, field_names[42], SendEvent);
      }
      if (hasHardAccelerationMinG) {
        output.WriteUInt32(5, field_names[16], HardAccelerationMinG);
      }
      if (hasHardAccelerationThreshold) {
        output.WriteUInt32(6, field_names[18], HardAccelerationThreshold);
      }
      if (hasHardBreakingMinG) {
        output.WriteUInt32(7, field_names[22], HardBreakingMinG);
      }
      if (hasHardBreakingThreshold) {
        output.WriteUInt32(8, field_names[24], HardBreakingThreshold);
      }
      if (hasHardCurveMinG) {
        output.WriteUInt32(9, field_names[27], HardCurveMinG);
      }
      if (hasHardCurveThreshold) {
        output.WriteUInt32(10, field_names[28], HardCurveThreshold);
      }
      if (hasCrashMinG) {
        output.WriteUInt32(11, field_names[5], CrashMinG);
      }
      if (hasCrashThreshold) {
        output.WriteUInt32(12, field_names[7], CrashThreshold);
      }
      if (hasHardAccelerationOutput) {
        output.WriteUInt32(13, field_names[17], HardAccelerationOutput);
      }
      if (hasHardAccelerationCycles) {
        output.WriteUInt32(14, field_names[15], HardAccelerationCycles);
      }
      if (hasHardAccelerationTimeOn) {
        output.WriteUInt32(15, field_names[20], HardAccelerationTimeOn);
      }
      if (hasHardAccelerationTimeOff) {
        output.WriteUInt32(16, field_names[19], HardAccelerationTimeOff);
      }
      if (hasHardBreakingOutput) {
        output.WriteUInt32(17, field_names[23], HardBreakingOutput);
      }
      if (hasHardBreakingCycles) {
        output.WriteUInt32(18, field_names[21], HardBreakingCycles);
      }
      if (hasHardBreakingTimeOn) {
        output.WriteUInt32(19, field_names[26], HardBreakingTimeOn);
      }
      if (hasHardBreakingTimeOff) {
        output.WriteUInt32(20, field_names[25], HardBreakingTimeOff);
      }
      if (hasRightTurnAccelerationOutput) {
        output.WriteUInt32(21, field_names[39], RightTurnAccelerationOutput);
      }
      if (hasRightTurnAccelerationCycles) {
        output.WriteUInt32(22, field_names[38], RightTurnAccelerationCycles);
      }
      if (hasRightTurnAccelerationTimeOn) {
        output.WriteUInt32(23, field_names[41], RightTurnAccelerationTimeOn);
      }
      if (hasRightTurnAccelerationTimeOff) {
        output.WriteUInt32(24, field_names[40], RightTurnAccelerationTimeOff);
      }
      if (hasLeftTurnAccelerationOutput) {
        output.WriteUInt32(25, field_names[34], LeftTurnAccelerationOutput);
      }
      if (hasLeftTurnAccelerationCycles) {
        output.WriteUInt32(26, field_names[33], LeftTurnAccelerationCycles);
      }
      if (hasLeftTurnAccelerationTimeOn) {
        output.WriteUInt32(27, field_names[36], LeftTurnAccelerationTimeOn);
      }
      if (hasLeftTurnAccelerationTimeOff) {
        output.WriteUInt32(28, field_names[35], LeftTurnAccelerationTimeOff);
      }
      if (hasInitialCalibrationOutput) {
        output.WriteUInt32(29, field_names[30], InitialCalibrationOutput);
      }
      if (hasInitialCalibrationCycles) {
        output.WriteUInt32(30, field_names[29], InitialCalibrationCycles);
      }
      if (hasInitialCalibrationTimeOn) {
        output.WriteUInt32(31, field_names[32], InitialCalibrationTimeOn);
      }
      if (hasInitialCalibrationTimeOff) {
        output.WriteUInt32(32, field_names[31], InitialCalibrationTimeOff);
      }
      if (hasFinalCalibrationOutput) {
        output.WriteUInt32(33, field_names[12], FinalCalibrationOutput);
      }
      if (hasFinalCalibrationCycles) {
        output.WriteUInt32(34, field_names[11], FinalCalibrationCycles);
      }
      if (hasFinalCalibrationTimeOn) {
        output.WriteUInt32(35, field_names[14], FinalCalibrationTimeOn);
      }
      if (hasFinalCalibrationTimeOff) {
        output.WriteUInt32(36, field_names[13], FinalCalibrationTimeOff);
      }
      if (hasCalibrationResetOutput) {
        output.WriteUInt32(37, field_names[1], CalibrationResetOutput);
      }
      if (hasCalibrationResetCycles) {
        output.WriteUInt32(38, field_names[0], CalibrationResetCycles);
      }
      if (hasCalibrationResetTimeOn) {
        output.WriteUInt32(39, field_names[3], CalibrationResetTimeOn);
      }
      if (hasCalibrationResetTimeOff) {
        output.WriteUInt32(40, field_names[2], CalibrationResetTimeOff);
      }
      if (hasCrashOutput) {
        output.WriteUInt32(41, field_names[6], CrashOutput);
      }
      if (hasCrashCycles) {
        output.WriteUInt32(42, field_names[4], CrashCycles);
      }
      if (hasCrashTimeOn) {
        output.WriteUInt32(43, field_names[9], CrashTimeOn);
      }
      if (hasCrashTimeOff) {
        output.WriteUInt32(44, field_names[8], CrashTimeOff);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasStopToMove) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, StopToMove);
      }
      if (hasMoveToStop) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, MoveToStop);
      }
      if (hasDetectInterval) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, DetectInterval);
      }
      if (hasSendEvent) {
        size += pb::CodedOutputStream.ComputeBoolSize(4, SendEvent);
      }
      if (hasHardAccelerationMinG) {
        size += pb::CodedOutputStream.ComputeUInt32Size(5, HardAccelerationMinG);
      }
      if (hasHardAccelerationThreshold) {
        size += pb::CodedOutputStream.ComputeUInt32Size(6, HardAccelerationThreshold);
      }
      if (hasHardBreakingMinG) {
        size += pb::CodedOutputStream.ComputeUInt32Size(7, HardBreakingMinG);
      }
      if (hasHardBreakingThreshold) {
        size += pb::CodedOutputStream.ComputeUInt32Size(8, HardBreakingThreshold);
      }
      if (hasHardCurveMinG) {
        size += pb::CodedOutputStream.ComputeUInt32Size(9, HardCurveMinG);
      }
      if (hasHardCurveThreshold) {
        size += pb::CodedOutputStream.ComputeUInt32Size(10, HardCurveThreshold);
      }
      if (hasCrashMinG) {
        size += pb::CodedOutputStream.ComputeUInt32Size(11, CrashMinG);
      }
      if (hasCrashThreshold) {
        size += pb::CodedOutputStream.ComputeUInt32Size(12, CrashThreshold);
      }
      if (hasHardAccelerationOutput) {
        size += pb::CodedOutputStream.ComputeUInt32Size(13, HardAccelerationOutput);
      }
      if (hasHardAccelerationCycles) {
        size += pb::CodedOutputStream.ComputeUInt32Size(14, HardAccelerationCycles);
      }
      if (hasHardAccelerationTimeOn) {
        size += pb::CodedOutputStream.ComputeUInt32Size(15, HardAccelerationTimeOn);
      }
      if (hasHardAccelerationTimeOff) {
        size += pb::CodedOutputStream.ComputeUInt32Size(16, HardAccelerationTimeOff);
      }
      if (hasHardBreakingOutput) {
        size += pb::CodedOutputStream.ComputeUInt32Size(17, HardBreakingOutput);
      }
      if (hasHardBreakingCycles) {
        size += pb::CodedOutputStream.ComputeUInt32Size(18, HardBreakingCycles);
      }
      if (hasHardBreakingTimeOn) {
        size += pb::CodedOutputStream.ComputeUInt32Size(19, HardBreakingTimeOn);
      }
      if (hasHardBreakingTimeOff) {
        size += pb::CodedOutputStream.ComputeUInt32Size(20, HardBreakingTimeOff);
      }
      if (hasRightTurnAccelerationOutput) {
        size += pb::CodedOutputStream.ComputeUInt32Size(21, RightTurnAccelerationOutput);
      }
      if (hasRightTurnAccelerationCycles) {
        size += pb::CodedOutputStream.ComputeUInt32Size(22, RightTurnAccelerationCycles);
      }
      if (hasRightTurnAccelerationTimeOn) {
        size += pb::CodedOutputStream.ComputeUInt32Size(23, RightTurnAccelerationTimeOn);
      }
      if (hasRightTurnAccelerationTimeOff) {
        size += pb::CodedOutputStream.ComputeUInt32Size(24, RightTurnAccelerationTimeOff);
      }
      if (hasLeftTurnAccelerationOutput) {
        size += pb::CodedOutputStream.ComputeUInt32Size(25, LeftTurnAccelerationOutput);
      }
      if (hasLeftTurnAccelerationCycles) {
        size += pb::CodedOutputStream.ComputeUInt32Size(26, LeftTurnAccelerationCycles);
      }
      if (hasLeftTurnAccelerationTimeOn) {
        size += pb::CodedOutputStream.ComputeUInt32Size(27, LeftTurnAccelerationTimeOn);
      }
      if (hasLeftTurnAccelerationTimeOff) {
        size += pb::CodedOutputStream.ComputeUInt32Size(28, LeftTurnAccelerationTimeOff);
      }
      if (hasInitialCalibrationOutput) {
        size += pb::CodedOutputStream.ComputeUInt32Size(29, InitialCalibrationOutput);
      }
      if (hasInitialCalibrationCycles) {
        size += pb::CodedOutputStream.ComputeUInt32Size(30, InitialCalibrationCycles);
      }
      if (hasInitialCalibrationTimeOn) {
        size += pb::CodedOutputStream.ComputeUInt32Size(31, InitialCalibrationTimeOn);
      }
      if (hasInitialCalibrationTimeOff) {
        size += pb::CodedOutputStream.ComputeUInt32Size(32, InitialCalibrationTimeOff);
      }
      if (hasFinalCalibrationOutput) {
        size += pb::CodedOutputStream.ComputeUInt32Size(33, FinalCalibrationOutput);
      }
      if (hasFinalCalibrationCycles) {
        size += pb::CodedOutputStream.ComputeUInt32Size(34, FinalCalibrationCycles);
      }
      if (hasFinalCalibrationTimeOn) {
        size += pb::CodedOutputStream.ComputeUInt32Size(35, FinalCalibrationTimeOn);
      }
      if (hasFinalCalibrationTimeOff) {
        size += pb::CodedOutputStream.ComputeUInt32Size(36, FinalCalibrationTimeOff);
      }
      if (hasCalibrationResetOutput) {
        size += pb::CodedOutputStream.ComputeUInt32Size(37, CalibrationResetOutput);
      }
      if (hasCalibrationResetCycles) {
        size += pb::CodedOutputStream.ComputeUInt32Size(38, CalibrationResetCycles);
      }
      if (hasCalibrationResetTimeOn) {
        size += pb::CodedOutputStream.ComputeUInt32Size(39, CalibrationResetTimeOn);
      }
      if (hasCalibrationResetTimeOff) {
        size += pb::CodedOutputStream.ComputeUInt32Size(40, CalibrationResetTimeOff);
      }
      if (hasCrashOutput) {
        size += pb::CodedOutputStream.ComputeUInt32Size(41, CrashOutput);
      }
      if (hasCrashCycles) {
        size += pb::CodedOutputStream.ComputeUInt32Size(42, CrashCycles);
      }
      if (hasCrashTimeOn) {
        size += pb::CodedOutputStream.ComputeUInt32Size(43, CrashTimeOn);
      }
      if (hasCrashTimeOff) {
        size += pb::CodedOutputStream.ComputeUInt32Size(44, CrashTimeOff);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mxt1xx_u_dynamic_setup_gsensor ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_gsensor ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_gsensor ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_gsensor ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_gsensor ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_gsensor ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_gsensor ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_gsensor ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_gsensor ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_gsensor ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mxt1xx_u_dynamic_setup_gsensor MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mxt1xx_u_dynamic_setup_gsensor prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mxt1xx_u_dynamic_setup_gsensor, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mxt1xx_u_dynamic_setup_gsensor cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mxt1xx_u_dynamic_setup_gsensor result;
      
      private mxt1xx_u_dynamic_setup_gsensor PrepareBuilder() {
        if (resultIsReadOnly) {
          mxt1xx_u_dynamic_setup_gsensor original = result;
          result = new mxt1xx_u_dynamic_setup_gsensor();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mxt1xx_u_dynamic_setup_gsensor MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_gsensor.Descriptor; }
      }
      
      public override mxt1xx_u_dynamic_setup_gsensor DefaultInstanceForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_gsensor.DefaultInstance; }
      }
      
      public override mxt1xx_u_dynamic_setup_gsensor BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mxt1xx_u_dynamic_setup_gsensor) {
          return MergeFrom((mxt1xx_u_dynamic_setup_gsensor) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mxt1xx_u_dynamic_setup_gsensor other) {
        if (other == global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_gsensor.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasStopToMove) {
          StopToMove = other.StopToMove;
        }
        if (other.HasMoveToStop) {
          MoveToStop = other.MoveToStop;
        }
        if (other.HasDetectInterval) {
          DetectInterval = other.DetectInterval;
        }
        if (other.HasSendEvent) {
          SendEvent = other.SendEvent;
        }
        if (other.HasHardAccelerationMinG) {
          HardAccelerationMinG = other.HardAccelerationMinG;
        }
        if (other.HasHardAccelerationThreshold) {
          HardAccelerationThreshold = other.HardAccelerationThreshold;
        }
        if (other.HasHardBreakingMinG) {
          HardBreakingMinG = other.HardBreakingMinG;
        }
        if (other.HasHardBreakingThreshold) {
          HardBreakingThreshold = other.HardBreakingThreshold;
        }
        if (other.HasHardCurveMinG) {
          HardCurveMinG = other.HardCurveMinG;
        }
        if (other.HasHardCurveThreshold) {
          HardCurveThreshold = other.HardCurveThreshold;
        }
        if (other.HasCrashMinG) {
          CrashMinG = other.CrashMinG;
        }
        if (other.HasCrashThreshold) {
          CrashThreshold = other.CrashThreshold;
        }
        if (other.HasHardAccelerationOutput) {
          HardAccelerationOutput = other.HardAccelerationOutput;
        }
        if (other.HasHardAccelerationCycles) {
          HardAccelerationCycles = other.HardAccelerationCycles;
        }
        if (other.HasHardAccelerationTimeOn) {
          HardAccelerationTimeOn = other.HardAccelerationTimeOn;
        }
        if (other.HasHardAccelerationTimeOff) {
          HardAccelerationTimeOff = other.HardAccelerationTimeOff;
        }
        if (other.HasHardBreakingOutput) {
          HardBreakingOutput = other.HardBreakingOutput;
        }
        if (other.HasHardBreakingCycles) {
          HardBreakingCycles = other.HardBreakingCycles;
        }
        if (other.HasHardBreakingTimeOn) {
          HardBreakingTimeOn = other.HardBreakingTimeOn;
        }
        if (other.HasHardBreakingTimeOff) {
          HardBreakingTimeOff = other.HardBreakingTimeOff;
        }
        if (other.HasRightTurnAccelerationOutput) {
          RightTurnAccelerationOutput = other.RightTurnAccelerationOutput;
        }
        if (other.HasRightTurnAccelerationCycles) {
          RightTurnAccelerationCycles = other.RightTurnAccelerationCycles;
        }
        if (other.HasRightTurnAccelerationTimeOn) {
          RightTurnAccelerationTimeOn = other.RightTurnAccelerationTimeOn;
        }
        if (other.HasRightTurnAccelerationTimeOff) {
          RightTurnAccelerationTimeOff = other.RightTurnAccelerationTimeOff;
        }
        if (other.HasLeftTurnAccelerationOutput) {
          LeftTurnAccelerationOutput = other.LeftTurnAccelerationOutput;
        }
        if (other.HasLeftTurnAccelerationCycles) {
          LeftTurnAccelerationCycles = other.LeftTurnAccelerationCycles;
        }
        if (other.HasLeftTurnAccelerationTimeOn) {
          LeftTurnAccelerationTimeOn = other.LeftTurnAccelerationTimeOn;
        }
        if (other.HasLeftTurnAccelerationTimeOff) {
          LeftTurnAccelerationTimeOff = other.LeftTurnAccelerationTimeOff;
        }
        if (other.HasInitialCalibrationOutput) {
          InitialCalibrationOutput = other.InitialCalibrationOutput;
        }
        if (other.HasInitialCalibrationCycles) {
          InitialCalibrationCycles = other.InitialCalibrationCycles;
        }
        if (other.HasInitialCalibrationTimeOn) {
          InitialCalibrationTimeOn = other.InitialCalibrationTimeOn;
        }
        if (other.HasInitialCalibrationTimeOff) {
          InitialCalibrationTimeOff = other.InitialCalibrationTimeOff;
        }
        if (other.HasFinalCalibrationOutput) {
          FinalCalibrationOutput = other.FinalCalibrationOutput;
        }
        if (other.HasFinalCalibrationCycles) {
          FinalCalibrationCycles = other.FinalCalibrationCycles;
        }
        if (other.HasFinalCalibrationTimeOn) {
          FinalCalibrationTimeOn = other.FinalCalibrationTimeOn;
        }
        if (other.HasFinalCalibrationTimeOff) {
          FinalCalibrationTimeOff = other.FinalCalibrationTimeOff;
        }
        if (other.HasCalibrationResetOutput) {
          CalibrationResetOutput = other.CalibrationResetOutput;
        }
        if (other.HasCalibrationResetCycles) {
          CalibrationResetCycles = other.CalibrationResetCycles;
        }
        if (other.HasCalibrationResetTimeOn) {
          CalibrationResetTimeOn = other.CalibrationResetTimeOn;
        }
        if (other.HasCalibrationResetTimeOff) {
          CalibrationResetTimeOff = other.CalibrationResetTimeOff;
        }
        if (other.HasCrashOutput) {
          CrashOutput = other.CrashOutput;
        }
        if (other.HasCrashCycles) {
          CrashCycles = other.CrashCycles;
        }
        if (other.HasCrashTimeOn) {
          CrashTimeOn = other.CrashTimeOn;
        }
        if (other.HasCrashTimeOff) {
          CrashTimeOff = other.CrashTimeOff;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mxt1XxUDynamicSetupGsensorFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mxt1XxUDynamicSetupGsensorFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasStopToMove = input.ReadUInt32(ref result.stopToMove_);
              break;
            }
            case 16: {
              result.hasMoveToStop = input.ReadUInt32(ref result.moveToStop_);
              break;
            }
            case 24: {
              result.hasDetectInterval = input.ReadUInt32(ref result.detectInterval_);
              break;
            }
            case 32: {
              result.hasSendEvent = input.ReadBool(ref result.sendEvent_);
              break;
            }
            case 40: {
              result.hasHardAccelerationMinG = input.ReadUInt32(ref result.hardAccelerationMinG_);
              break;
            }
            case 48: {
              result.hasHardAccelerationThreshold = input.ReadUInt32(ref result.hardAccelerationThreshold_);
              break;
            }
            case 56: {
              result.hasHardBreakingMinG = input.ReadUInt32(ref result.hardBreakingMinG_);
              break;
            }
            case 64: {
              result.hasHardBreakingThreshold = input.ReadUInt32(ref result.hardBreakingThreshold_);
              break;
            }
            case 72: {
              result.hasHardCurveMinG = input.ReadUInt32(ref result.hardCurveMinG_);
              break;
            }
            case 80: {
              result.hasHardCurveThreshold = input.ReadUInt32(ref result.hardCurveThreshold_);
              break;
            }
            case 88: {
              result.hasCrashMinG = input.ReadUInt32(ref result.crashMinG_);
              break;
            }
            case 96: {
              result.hasCrashThreshold = input.ReadUInt32(ref result.crashThreshold_);
              break;
            }
            case 104: {
              result.hasHardAccelerationOutput = input.ReadUInt32(ref result.hardAccelerationOutput_);
              break;
            }
            case 112: {
              result.hasHardAccelerationCycles = input.ReadUInt32(ref result.hardAccelerationCycles_);
              break;
            }
            case 120: {
              result.hasHardAccelerationTimeOn = input.ReadUInt32(ref result.hardAccelerationTimeOn_);
              break;
            }
            case 128: {
              result.hasHardAccelerationTimeOff = input.ReadUInt32(ref result.hardAccelerationTimeOff_);
              break;
            }
            case 136: {
              result.hasHardBreakingOutput = input.ReadUInt32(ref result.hardBreakingOutput_);
              break;
            }
            case 144: {
              result.hasHardBreakingCycles = input.ReadUInt32(ref result.hardBreakingCycles_);
              break;
            }
            case 152: {
              result.hasHardBreakingTimeOn = input.ReadUInt32(ref result.hardBreakingTimeOn_);
              break;
            }
            case 160: {
              result.hasHardBreakingTimeOff = input.ReadUInt32(ref result.hardBreakingTimeOff_);
              break;
            }
            case 168: {
              result.hasRightTurnAccelerationOutput = input.ReadUInt32(ref result.rightTurnAccelerationOutput_);
              break;
            }
            case 176: {
              result.hasRightTurnAccelerationCycles = input.ReadUInt32(ref result.rightTurnAccelerationCycles_);
              break;
            }
            case 184: {
              result.hasRightTurnAccelerationTimeOn = input.ReadUInt32(ref result.rightTurnAccelerationTimeOn_);
              break;
            }
            case 192: {
              result.hasRightTurnAccelerationTimeOff = input.ReadUInt32(ref result.rightTurnAccelerationTimeOff_);
              break;
            }
            case 200: {
              result.hasLeftTurnAccelerationOutput = input.ReadUInt32(ref result.leftTurnAccelerationOutput_);
              break;
            }
            case 208: {
              result.hasLeftTurnAccelerationCycles = input.ReadUInt32(ref result.leftTurnAccelerationCycles_);
              break;
            }
            case 216: {
              result.hasLeftTurnAccelerationTimeOn = input.ReadUInt32(ref result.leftTurnAccelerationTimeOn_);
              break;
            }
            case 224: {
              result.hasLeftTurnAccelerationTimeOff = input.ReadUInt32(ref result.leftTurnAccelerationTimeOff_);
              break;
            }
            case 232: {
              result.hasInitialCalibrationOutput = input.ReadUInt32(ref result.initialCalibrationOutput_);
              break;
            }
            case 240: {
              result.hasInitialCalibrationCycles = input.ReadUInt32(ref result.initialCalibrationCycles_);
              break;
            }
            case 248: {
              result.hasInitialCalibrationTimeOn = input.ReadUInt32(ref result.initialCalibrationTimeOn_);
              break;
            }
            case 256: {
              result.hasInitialCalibrationTimeOff = input.ReadUInt32(ref result.initialCalibrationTimeOff_);
              break;
            }
            case 264: {
              result.hasFinalCalibrationOutput = input.ReadUInt32(ref result.finalCalibrationOutput_);
              break;
            }
            case 272: {
              result.hasFinalCalibrationCycles = input.ReadUInt32(ref result.finalCalibrationCycles_);
              break;
            }
            case 280: {
              result.hasFinalCalibrationTimeOn = input.ReadUInt32(ref result.finalCalibrationTimeOn_);
              break;
            }
            case 288: {
              result.hasFinalCalibrationTimeOff = input.ReadUInt32(ref result.finalCalibrationTimeOff_);
              break;
            }
            case 296: {
              result.hasCalibrationResetOutput = input.ReadUInt32(ref result.calibrationResetOutput_);
              break;
            }
            case 304: {
              result.hasCalibrationResetCycles = input.ReadUInt32(ref result.calibrationResetCycles_);
              break;
            }
            case 312: {
              result.hasCalibrationResetTimeOn = input.ReadUInt32(ref result.calibrationResetTimeOn_);
              break;
            }
            case 320: {
              result.hasCalibrationResetTimeOff = input.ReadUInt32(ref result.calibrationResetTimeOff_);
              break;
            }
            case 328: {
              result.hasCrashOutput = input.ReadUInt32(ref result.crashOutput_);
              break;
            }
            case 336: {
              result.hasCrashCycles = input.ReadUInt32(ref result.crashCycles_);
              break;
            }
            case 344: {
              result.hasCrashTimeOn = input.ReadUInt32(ref result.crashTimeOn_);
              break;
            }
            case 352: {
              result.hasCrashTimeOff = input.ReadUInt32(ref result.crashTimeOff_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasStopToMove {
        get { return result.hasStopToMove; }
      }
      [global::System.CLSCompliant(false)]
      public uint StopToMove {
        get { return result.StopToMove; }
        set { SetStopToMove(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetStopToMove(uint value) {
        PrepareBuilder();
        result.hasStopToMove = true;
        result.stopToMove_ = value;
        return this;
      }
      public Builder ClearStopToMove() {
        PrepareBuilder();
        result.hasStopToMove = false;
        result.stopToMove_ = 0;
        return this;
      }
      
      public bool HasMoveToStop {
        get { return result.hasMoveToStop; }
      }
      [global::System.CLSCompliant(false)]
      public uint MoveToStop {
        get { return result.MoveToStop; }
        set { SetMoveToStop(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetMoveToStop(uint value) {
        PrepareBuilder();
        result.hasMoveToStop = true;
        result.moveToStop_ = value;
        return this;
      }
      public Builder ClearMoveToStop() {
        PrepareBuilder();
        result.hasMoveToStop = false;
        result.moveToStop_ = 0;
        return this;
      }
      
      public bool HasDetectInterval {
        get { return result.hasDetectInterval; }
      }
      [global::System.CLSCompliant(false)]
      public uint DetectInterval {
        get { return result.DetectInterval; }
        set { SetDetectInterval(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetDetectInterval(uint value) {
        PrepareBuilder();
        result.hasDetectInterval = true;
        result.detectInterval_ = value;
        return this;
      }
      public Builder ClearDetectInterval() {
        PrepareBuilder();
        result.hasDetectInterval = false;
        result.detectInterval_ = 0;
        return this;
      }
      
      public bool HasSendEvent {
        get { return result.hasSendEvent; }
      }
      public bool SendEvent {
        get { return result.SendEvent; }
        set { SetSendEvent(value); }
      }
      public Builder SetSendEvent(bool value) {
        PrepareBuilder();
        result.hasSendEvent = true;
        result.sendEvent_ = value;
        return this;
      }
      public Builder ClearSendEvent() {
        PrepareBuilder();
        result.hasSendEvent = false;
        result.sendEvent_ = false;
        return this;
      }
      
      public bool HasHardAccelerationMinG {
        get { return result.hasHardAccelerationMinG; }
      }
      [global::System.CLSCompliant(false)]
      public uint HardAccelerationMinG {
        get { return result.HardAccelerationMinG; }
        set { SetHardAccelerationMinG(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetHardAccelerationMinG(uint value) {
        PrepareBuilder();
        result.hasHardAccelerationMinG = true;
        result.hardAccelerationMinG_ = value;
        return this;
      }
      public Builder ClearHardAccelerationMinG() {
        PrepareBuilder();
        result.hasHardAccelerationMinG = false;
        result.hardAccelerationMinG_ = 0;
        return this;
      }
      
      public bool HasHardAccelerationThreshold {
        get { return result.hasHardAccelerationThreshold; }
      }
      [global::System.CLSCompliant(false)]
      public uint HardAccelerationThreshold {
        get { return result.HardAccelerationThreshold; }
        set { SetHardAccelerationThreshold(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetHardAccelerationThreshold(uint value) {
        PrepareBuilder();
        result.hasHardAccelerationThreshold = true;
        result.hardAccelerationThreshold_ = value;
        return this;
      }
      public Builder ClearHardAccelerationThreshold() {
        PrepareBuilder();
        result.hasHardAccelerationThreshold = false;
        result.hardAccelerationThreshold_ = 0;
        return this;
      }
      
      public bool HasHardBreakingMinG {
        get { return result.hasHardBreakingMinG; }
      }
      [global::System.CLSCompliant(false)]
      public uint HardBreakingMinG {
        get { return result.HardBreakingMinG; }
        set { SetHardBreakingMinG(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetHardBreakingMinG(uint value) {
        PrepareBuilder();
        result.hasHardBreakingMinG = true;
        result.hardBreakingMinG_ = value;
        return this;
      }
      public Builder ClearHardBreakingMinG() {
        PrepareBuilder();
        result.hasHardBreakingMinG = false;
        result.hardBreakingMinG_ = 0;
        return this;
      }
      
      public bool HasHardBreakingThreshold {
        get { return result.hasHardBreakingThreshold; }
      }
      [global::System.CLSCompliant(false)]
      public uint HardBreakingThreshold {
        get { return result.HardBreakingThreshold; }
        set { SetHardBreakingThreshold(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetHardBreakingThreshold(uint value) {
        PrepareBuilder();
        result.hasHardBreakingThreshold = true;
        result.hardBreakingThreshold_ = value;
        return this;
      }
      public Builder ClearHardBreakingThreshold() {
        PrepareBuilder();
        result.hasHardBreakingThreshold = false;
        result.hardBreakingThreshold_ = 0;
        return this;
      }
      
      public bool HasHardCurveMinG {
        get { return result.hasHardCurveMinG; }
      }
      [global::System.CLSCompliant(false)]
      public uint HardCurveMinG {
        get { return result.HardCurveMinG; }
        set { SetHardCurveMinG(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetHardCurveMinG(uint value) {
        PrepareBuilder();
        result.hasHardCurveMinG = true;
        result.hardCurveMinG_ = value;
        return this;
      }
      public Builder ClearHardCurveMinG() {
        PrepareBuilder();
        result.hasHardCurveMinG = false;
        result.hardCurveMinG_ = 0;
        return this;
      }
      
      public bool HasHardCurveThreshold {
        get { return result.hasHardCurveThreshold; }
      }
      [global::System.CLSCompliant(false)]
      public uint HardCurveThreshold {
        get { return result.HardCurveThreshold; }
        set { SetHardCurveThreshold(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetHardCurveThreshold(uint value) {
        PrepareBuilder();
        result.hasHardCurveThreshold = true;
        result.hardCurveThreshold_ = value;
        return this;
      }
      public Builder ClearHardCurveThreshold() {
        PrepareBuilder();
        result.hasHardCurveThreshold = false;
        result.hardCurveThreshold_ = 0;
        return this;
      }
      
      public bool HasCrashMinG {
        get { return result.hasCrashMinG; }
      }
      [global::System.CLSCompliant(false)]
      public uint CrashMinG {
        get { return result.CrashMinG; }
        set { SetCrashMinG(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetCrashMinG(uint value) {
        PrepareBuilder();
        result.hasCrashMinG = true;
        result.crashMinG_ = value;
        return this;
      }
      public Builder ClearCrashMinG() {
        PrepareBuilder();
        result.hasCrashMinG = false;
        result.crashMinG_ = 0;
        return this;
      }
      
      public bool HasCrashThreshold {
        get { return result.hasCrashThreshold; }
      }
      [global::System.CLSCompliant(false)]
      public uint CrashThreshold {
        get { return result.CrashThreshold; }
        set { SetCrashThreshold(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetCrashThreshold(uint value) {
        PrepareBuilder();
        result.hasCrashThreshold = true;
        result.crashThreshold_ = value;
        return this;
      }
      public Builder ClearCrashThreshold() {
        PrepareBuilder();
        result.hasCrashThreshold = false;
        result.crashThreshold_ = 0;
        return this;
      }
      
      public bool HasHardAccelerationOutput {
        get { return result.hasHardAccelerationOutput; }
      }
      [global::System.CLSCompliant(false)]
      public uint HardAccelerationOutput {
        get { return result.HardAccelerationOutput; }
        set { SetHardAccelerationOutput(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetHardAccelerationOutput(uint value) {
        PrepareBuilder();
        result.hasHardAccelerationOutput = true;
        result.hardAccelerationOutput_ = value;
        return this;
      }
      public Builder ClearHardAccelerationOutput() {
        PrepareBuilder();
        result.hasHardAccelerationOutput = false;
        result.hardAccelerationOutput_ = 0;
        return this;
      }
      
      public bool HasHardAccelerationCycles {
        get { return result.hasHardAccelerationCycles; }
      }
      [global::System.CLSCompliant(false)]
      public uint HardAccelerationCycles {
        get { return result.HardAccelerationCycles; }
        set { SetHardAccelerationCycles(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetHardAccelerationCycles(uint value) {
        PrepareBuilder();
        result.hasHardAccelerationCycles = true;
        result.hardAccelerationCycles_ = value;
        return this;
      }
      public Builder ClearHardAccelerationCycles() {
        PrepareBuilder();
        result.hasHardAccelerationCycles = false;
        result.hardAccelerationCycles_ = 0;
        return this;
      }
      
      public bool HasHardAccelerationTimeOn {
        get { return result.hasHardAccelerationTimeOn; }
      }
      [global::System.CLSCompliant(false)]
      public uint HardAccelerationTimeOn {
        get { return result.HardAccelerationTimeOn; }
        set { SetHardAccelerationTimeOn(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetHardAccelerationTimeOn(uint value) {
        PrepareBuilder();
        result.hasHardAccelerationTimeOn = true;
        result.hardAccelerationTimeOn_ = value;
        return this;
      }
      public Builder ClearHardAccelerationTimeOn() {
        PrepareBuilder();
        result.hasHardAccelerationTimeOn = false;
        result.hardAccelerationTimeOn_ = 0;
        return this;
      }
      
      public bool HasHardAccelerationTimeOff {
        get { return result.hasHardAccelerationTimeOff; }
      }
      [global::System.CLSCompliant(false)]
      public uint HardAccelerationTimeOff {
        get { return result.HardAccelerationTimeOff; }
        set { SetHardAccelerationTimeOff(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetHardAccelerationTimeOff(uint value) {
        PrepareBuilder();
        result.hasHardAccelerationTimeOff = true;
        result.hardAccelerationTimeOff_ = value;
        return this;
      }
      public Builder ClearHardAccelerationTimeOff() {
        PrepareBuilder();
        result.hasHardAccelerationTimeOff = false;
        result.hardAccelerationTimeOff_ = 0;
        return this;
      }
      
      public bool HasHardBreakingOutput {
        get { return result.hasHardBreakingOutput; }
      }
      [global::System.CLSCompliant(false)]
      public uint HardBreakingOutput {
        get { return result.HardBreakingOutput; }
        set { SetHardBreakingOutput(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetHardBreakingOutput(uint value) {
        PrepareBuilder();
        result.hasHardBreakingOutput = true;
        result.hardBreakingOutput_ = value;
        return this;
      }
      public Builder ClearHardBreakingOutput() {
        PrepareBuilder();
        result.hasHardBreakingOutput = false;
        result.hardBreakingOutput_ = 0;
        return this;
      }
      
      public bool HasHardBreakingCycles {
        get { return result.hasHardBreakingCycles; }
      }
      [global::System.CLSCompliant(false)]
      public uint HardBreakingCycles {
        get { return result.HardBreakingCycles; }
        set { SetHardBreakingCycles(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetHardBreakingCycles(uint value) {
        PrepareBuilder();
        result.hasHardBreakingCycles = true;
        result.hardBreakingCycles_ = value;
        return this;
      }
      public Builder ClearHardBreakingCycles() {
        PrepareBuilder();
        result.hasHardBreakingCycles = false;
        result.hardBreakingCycles_ = 0;
        return this;
      }
      
      public bool HasHardBreakingTimeOn {
        get { return result.hasHardBreakingTimeOn; }
      }
      [global::System.CLSCompliant(false)]
      public uint HardBreakingTimeOn {
        get { return result.HardBreakingTimeOn; }
        set { SetHardBreakingTimeOn(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetHardBreakingTimeOn(uint value) {
        PrepareBuilder();
        result.hasHardBreakingTimeOn = true;
        result.hardBreakingTimeOn_ = value;
        return this;
      }
      public Builder ClearHardBreakingTimeOn() {
        PrepareBuilder();
        result.hasHardBreakingTimeOn = false;
        result.hardBreakingTimeOn_ = 0;
        return this;
      }
      
      public bool HasHardBreakingTimeOff {
        get { return result.hasHardBreakingTimeOff; }
      }
      [global::System.CLSCompliant(false)]
      public uint HardBreakingTimeOff {
        get { return result.HardBreakingTimeOff; }
        set { SetHardBreakingTimeOff(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetHardBreakingTimeOff(uint value) {
        PrepareBuilder();
        result.hasHardBreakingTimeOff = true;
        result.hardBreakingTimeOff_ = value;
        return this;
      }
      public Builder ClearHardBreakingTimeOff() {
        PrepareBuilder();
        result.hasHardBreakingTimeOff = false;
        result.hardBreakingTimeOff_ = 0;
        return this;
      }
      
      public bool HasRightTurnAccelerationOutput {
        get { return result.hasRightTurnAccelerationOutput; }
      }
      [global::System.CLSCompliant(false)]
      public uint RightTurnAccelerationOutput {
        get { return result.RightTurnAccelerationOutput; }
        set { SetRightTurnAccelerationOutput(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetRightTurnAccelerationOutput(uint value) {
        PrepareBuilder();
        result.hasRightTurnAccelerationOutput = true;
        result.rightTurnAccelerationOutput_ = value;
        return this;
      }
      public Builder ClearRightTurnAccelerationOutput() {
        PrepareBuilder();
        result.hasRightTurnAccelerationOutput = false;
        result.rightTurnAccelerationOutput_ = 0;
        return this;
      }
      
      public bool HasRightTurnAccelerationCycles {
        get { return result.hasRightTurnAccelerationCycles; }
      }
      [global::System.CLSCompliant(false)]
      public uint RightTurnAccelerationCycles {
        get { return result.RightTurnAccelerationCycles; }
        set { SetRightTurnAccelerationCycles(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetRightTurnAccelerationCycles(uint value) {
        PrepareBuilder();
        result.hasRightTurnAccelerationCycles = true;
        result.rightTurnAccelerationCycles_ = value;
        return this;
      }
      public Builder ClearRightTurnAccelerationCycles() {
        PrepareBuilder();
        result.hasRightTurnAccelerationCycles = false;
        result.rightTurnAccelerationCycles_ = 0;
        return this;
      }
      
      public bool HasRightTurnAccelerationTimeOn {
        get { return result.hasRightTurnAccelerationTimeOn; }
      }
      [global::System.CLSCompliant(false)]
      public uint RightTurnAccelerationTimeOn {
        get { return result.RightTurnAccelerationTimeOn; }
        set { SetRightTurnAccelerationTimeOn(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetRightTurnAccelerationTimeOn(uint value) {
        PrepareBuilder();
        result.hasRightTurnAccelerationTimeOn = true;
        result.rightTurnAccelerationTimeOn_ = value;
        return this;
      }
      public Builder ClearRightTurnAccelerationTimeOn() {
        PrepareBuilder();
        result.hasRightTurnAccelerationTimeOn = false;
        result.rightTurnAccelerationTimeOn_ = 0;
        return this;
      }
      
      public bool HasRightTurnAccelerationTimeOff {
        get { return result.hasRightTurnAccelerationTimeOff; }
      }
      [global::System.CLSCompliant(false)]
      public uint RightTurnAccelerationTimeOff {
        get { return result.RightTurnAccelerationTimeOff; }
        set { SetRightTurnAccelerationTimeOff(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetRightTurnAccelerationTimeOff(uint value) {
        PrepareBuilder();
        result.hasRightTurnAccelerationTimeOff = true;
        result.rightTurnAccelerationTimeOff_ = value;
        return this;
      }
      public Builder ClearRightTurnAccelerationTimeOff() {
        PrepareBuilder();
        result.hasRightTurnAccelerationTimeOff = false;
        result.rightTurnAccelerationTimeOff_ = 0;
        return this;
      }
      
      public bool HasLeftTurnAccelerationOutput {
        get { return result.hasLeftTurnAccelerationOutput; }
      }
      [global::System.CLSCompliant(false)]
      public uint LeftTurnAccelerationOutput {
        get { return result.LeftTurnAccelerationOutput; }
        set { SetLeftTurnAccelerationOutput(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetLeftTurnAccelerationOutput(uint value) {
        PrepareBuilder();
        result.hasLeftTurnAccelerationOutput = true;
        result.leftTurnAccelerationOutput_ = value;
        return this;
      }
      public Builder ClearLeftTurnAccelerationOutput() {
        PrepareBuilder();
        result.hasLeftTurnAccelerationOutput = false;
        result.leftTurnAccelerationOutput_ = 0;
        return this;
      }
      
      public bool HasLeftTurnAccelerationCycles {
        get { return result.hasLeftTurnAccelerationCycles; }
      }
      [global::System.CLSCompliant(false)]
      public uint LeftTurnAccelerationCycles {
        get { return result.LeftTurnAccelerationCycles; }
        set { SetLeftTurnAccelerationCycles(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetLeftTurnAccelerationCycles(uint value) {
        PrepareBuilder();
        result.hasLeftTurnAccelerationCycles = true;
        result.leftTurnAccelerationCycles_ = value;
        return this;
      }
      public Builder ClearLeftTurnAccelerationCycles() {
        PrepareBuilder();
        result.hasLeftTurnAccelerationCycles = false;
        result.leftTurnAccelerationCycles_ = 0;
        return this;
      }
      
      public bool HasLeftTurnAccelerationTimeOn {
        get { return result.hasLeftTurnAccelerationTimeOn; }
      }
      [global::System.CLSCompliant(false)]
      public uint LeftTurnAccelerationTimeOn {
        get { return result.LeftTurnAccelerationTimeOn; }
        set { SetLeftTurnAccelerationTimeOn(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetLeftTurnAccelerationTimeOn(uint value) {
        PrepareBuilder();
        result.hasLeftTurnAccelerationTimeOn = true;
        result.leftTurnAccelerationTimeOn_ = value;
        return this;
      }
      public Builder ClearLeftTurnAccelerationTimeOn() {
        PrepareBuilder();
        result.hasLeftTurnAccelerationTimeOn = false;
        result.leftTurnAccelerationTimeOn_ = 0;
        return this;
      }
      
      public bool HasLeftTurnAccelerationTimeOff {
        get { return result.hasLeftTurnAccelerationTimeOff; }
      }
      [global::System.CLSCompliant(false)]
      public uint LeftTurnAccelerationTimeOff {
        get { return result.LeftTurnAccelerationTimeOff; }
        set { SetLeftTurnAccelerationTimeOff(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetLeftTurnAccelerationTimeOff(uint value) {
        PrepareBuilder();
        result.hasLeftTurnAccelerationTimeOff = true;
        result.leftTurnAccelerationTimeOff_ = value;
        return this;
      }
      public Builder ClearLeftTurnAccelerationTimeOff() {
        PrepareBuilder();
        result.hasLeftTurnAccelerationTimeOff = false;
        result.leftTurnAccelerationTimeOff_ = 0;
        return this;
      }
      
      public bool HasInitialCalibrationOutput {
        get { return result.hasInitialCalibrationOutput; }
      }
      [global::System.CLSCompliant(false)]
      public uint InitialCalibrationOutput {
        get { return result.InitialCalibrationOutput; }
        set { SetInitialCalibrationOutput(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetInitialCalibrationOutput(uint value) {
        PrepareBuilder();
        result.hasInitialCalibrationOutput = true;
        result.initialCalibrationOutput_ = value;
        return this;
      }
      public Builder ClearInitialCalibrationOutput() {
        PrepareBuilder();
        result.hasInitialCalibrationOutput = false;
        result.initialCalibrationOutput_ = 0;
        return this;
      }
      
      public bool HasInitialCalibrationCycles {
        get { return result.hasInitialCalibrationCycles; }
      }
      [global::System.CLSCompliant(false)]
      public uint InitialCalibrationCycles {
        get { return result.InitialCalibrationCycles; }
        set { SetInitialCalibrationCycles(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetInitialCalibrationCycles(uint value) {
        PrepareBuilder();
        result.hasInitialCalibrationCycles = true;
        result.initialCalibrationCycles_ = value;
        return this;
      }
      public Builder ClearInitialCalibrationCycles() {
        PrepareBuilder();
        result.hasInitialCalibrationCycles = false;
        result.initialCalibrationCycles_ = 0;
        return this;
      }
      
      public bool HasInitialCalibrationTimeOn {
        get { return result.hasInitialCalibrationTimeOn; }
      }
      [global::System.CLSCompliant(false)]
      public uint InitialCalibrationTimeOn {
        get { return result.InitialCalibrationTimeOn; }
        set { SetInitialCalibrationTimeOn(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetInitialCalibrationTimeOn(uint value) {
        PrepareBuilder();
        result.hasInitialCalibrationTimeOn = true;
        result.initialCalibrationTimeOn_ = value;
        return this;
      }
      public Builder ClearInitialCalibrationTimeOn() {
        PrepareBuilder();
        result.hasInitialCalibrationTimeOn = false;
        result.initialCalibrationTimeOn_ = 0;
        return this;
      }
      
      public bool HasInitialCalibrationTimeOff {
        get { return result.hasInitialCalibrationTimeOff; }
      }
      [global::System.CLSCompliant(false)]
      public uint InitialCalibrationTimeOff {
        get { return result.InitialCalibrationTimeOff; }
        set { SetInitialCalibrationTimeOff(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetInitialCalibrationTimeOff(uint value) {
        PrepareBuilder();
        result.hasInitialCalibrationTimeOff = true;
        result.initialCalibrationTimeOff_ = value;
        return this;
      }
      public Builder ClearInitialCalibrationTimeOff() {
        PrepareBuilder();
        result.hasInitialCalibrationTimeOff = false;
        result.initialCalibrationTimeOff_ = 0;
        return this;
      }
      
      public bool HasFinalCalibrationOutput {
        get { return result.hasFinalCalibrationOutput; }
      }
      [global::System.CLSCompliant(false)]
      public uint FinalCalibrationOutput {
        get { return result.FinalCalibrationOutput; }
        set { SetFinalCalibrationOutput(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetFinalCalibrationOutput(uint value) {
        PrepareBuilder();
        result.hasFinalCalibrationOutput = true;
        result.finalCalibrationOutput_ = value;
        return this;
      }
      public Builder ClearFinalCalibrationOutput() {
        PrepareBuilder();
        result.hasFinalCalibrationOutput = false;
        result.finalCalibrationOutput_ = 0;
        return this;
      }
      
      public bool HasFinalCalibrationCycles {
        get { return result.hasFinalCalibrationCycles; }
      }
      [global::System.CLSCompliant(false)]
      public uint FinalCalibrationCycles {
        get { return result.FinalCalibrationCycles; }
        set { SetFinalCalibrationCycles(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetFinalCalibrationCycles(uint value) {
        PrepareBuilder();
        result.hasFinalCalibrationCycles = true;
        result.finalCalibrationCycles_ = value;
        return this;
      }
      public Builder ClearFinalCalibrationCycles() {
        PrepareBuilder();
        result.hasFinalCalibrationCycles = false;
        result.finalCalibrationCycles_ = 0;
        return this;
      }
      
      public bool HasFinalCalibrationTimeOn {
        get { return result.hasFinalCalibrationTimeOn; }
      }
      [global::System.CLSCompliant(false)]
      public uint FinalCalibrationTimeOn {
        get { return result.FinalCalibrationTimeOn; }
        set { SetFinalCalibrationTimeOn(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetFinalCalibrationTimeOn(uint value) {
        PrepareBuilder();
        result.hasFinalCalibrationTimeOn = true;
        result.finalCalibrationTimeOn_ = value;
        return this;
      }
      public Builder ClearFinalCalibrationTimeOn() {
        PrepareBuilder();
        result.hasFinalCalibrationTimeOn = false;
        result.finalCalibrationTimeOn_ = 0;
        return this;
      }
      
      public bool HasFinalCalibrationTimeOff {
        get { return result.hasFinalCalibrationTimeOff; }
      }
      [global::System.CLSCompliant(false)]
      public uint FinalCalibrationTimeOff {
        get { return result.FinalCalibrationTimeOff; }
        set { SetFinalCalibrationTimeOff(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetFinalCalibrationTimeOff(uint value) {
        PrepareBuilder();
        result.hasFinalCalibrationTimeOff = true;
        result.finalCalibrationTimeOff_ = value;
        return this;
      }
      public Builder ClearFinalCalibrationTimeOff() {
        PrepareBuilder();
        result.hasFinalCalibrationTimeOff = false;
        result.finalCalibrationTimeOff_ = 0;
        return this;
      }
      
      public bool HasCalibrationResetOutput {
        get { return result.hasCalibrationResetOutput; }
      }
      [global::System.CLSCompliant(false)]
      public uint CalibrationResetOutput {
        get { return result.CalibrationResetOutput; }
        set { SetCalibrationResetOutput(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetCalibrationResetOutput(uint value) {
        PrepareBuilder();
        result.hasCalibrationResetOutput = true;
        result.calibrationResetOutput_ = value;
        return this;
      }
      public Builder ClearCalibrationResetOutput() {
        PrepareBuilder();
        result.hasCalibrationResetOutput = false;
        result.calibrationResetOutput_ = 0;
        return this;
      }
      
      public bool HasCalibrationResetCycles {
        get { return result.hasCalibrationResetCycles; }
      }
      [global::System.CLSCompliant(false)]
      public uint CalibrationResetCycles {
        get { return result.CalibrationResetCycles; }
        set { SetCalibrationResetCycles(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetCalibrationResetCycles(uint value) {
        PrepareBuilder();
        result.hasCalibrationResetCycles = true;
        result.calibrationResetCycles_ = value;
        return this;
      }
      public Builder ClearCalibrationResetCycles() {
        PrepareBuilder();
        result.hasCalibrationResetCycles = false;
        result.calibrationResetCycles_ = 0;
        return this;
      }
      
      public bool HasCalibrationResetTimeOn {
        get { return result.hasCalibrationResetTimeOn; }
      }
      [global::System.CLSCompliant(false)]
      public uint CalibrationResetTimeOn {
        get { return result.CalibrationResetTimeOn; }
        set { SetCalibrationResetTimeOn(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetCalibrationResetTimeOn(uint value) {
        PrepareBuilder();
        result.hasCalibrationResetTimeOn = true;
        result.calibrationResetTimeOn_ = value;
        return this;
      }
      public Builder ClearCalibrationResetTimeOn() {
        PrepareBuilder();
        result.hasCalibrationResetTimeOn = false;
        result.calibrationResetTimeOn_ = 0;
        return this;
      }
      
      public bool HasCalibrationResetTimeOff {
        get { return result.hasCalibrationResetTimeOff; }
      }
      [global::System.CLSCompliant(false)]
      public uint CalibrationResetTimeOff {
        get { return result.CalibrationResetTimeOff; }
        set { SetCalibrationResetTimeOff(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetCalibrationResetTimeOff(uint value) {
        PrepareBuilder();
        result.hasCalibrationResetTimeOff = true;
        result.calibrationResetTimeOff_ = value;
        return this;
      }
      public Builder ClearCalibrationResetTimeOff() {
        PrepareBuilder();
        result.hasCalibrationResetTimeOff = false;
        result.calibrationResetTimeOff_ = 0;
        return this;
      }
      
      public bool HasCrashOutput {
        get { return result.hasCrashOutput; }
      }
      [global::System.CLSCompliant(false)]
      public uint CrashOutput {
        get { return result.CrashOutput; }
        set { SetCrashOutput(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetCrashOutput(uint value) {
        PrepareBuilder();
        result.hasCrashOutput = true;
        result.crashOutput_ = value;
        return this;
      }
      public Builder ClearCrashOutput() {
        PrepareBuilder();
        result.hasCrashOutput = false;
        result.crashOutput_ = 0;
        return this;
      }
      
      public bool HasCrashCycles {
        get { return result.hasCrashCycles; }
      }
      [global::System.CLSCompliant(false)]
      public uint CrashCycles {
        get { return result.CrashCycles; }
        set { SetCrashCycles(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetCrashCycles(uint value) {
        PrepareBuilder();
        result.hasCrashCycles = true;
        result.crashCycles_ = value;
        return this;
      }
      public Builder ClearCrashCycles() {
        PrepareBuilder();
        result.hasCrashCycles = false;
        result.crashCycles_ = 0;
        return this;
      }
      
      public bool HasCrashTimeOn {
        get { return result.hasCrashTimeOn; }
      }
      [global::System.CLSCompliant(false)]
      public uint CrashTimeOn {
        get { return result.CrashTimeOn; }
        set { SetCrashTimeOn(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetCrashTimeOn(uint value) {
        PrepareBuilder();
        result.hasCrashTimeOn = true;
        result.crashTimeOn_ = value;
        return this;
      }
      public Builder ClearCrashTimeOn() {
        PrepareBuilder();
        result.hasCrashTimeOn = false;
        result.crashTimeOn_ = 0;
        return this;
      }
      
      public bool HasCrashTimeOff {
        get { return result.hasCrashTimeOff; }
      }
      [global::System.CLSCompliant(false)]
      public uint CrashTimeOff {
        get { return result.CrashTimeOff; }
        set { SetCrashTimeOff(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetCrashTimeOff(uint value) {
        PrepareBuilder();
        result.hasCrashTimeOff = true;
        result.crashTimeOff_ = value;
        return this;
      }
      public Builder ClearCrashTimeOff() {
        PrepareBuilder();
        result.hasCrashTimeOff = false;
        result.crashTimeOff_ = 0;
        return this;
      }
    }
    static mxt1xx_u_dynamic_setup_gsensor() {
      object.ReferenceEquals(global::maxtrack.pb.mxt1xx.Mxt1Xx.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mxt1xx_u_dynamic_setup_sms : pb::GeneratedMessage<mxt1xx_u_dynamic_setup_sms, mxt1xx_u_dynamic_setup_sms.Builder> {
    private mxt1xx_u_dynamic_setup_sms() { }
    private static readonly mxt1xx_u_dynamic_setup_sms defaultInstance = new mxt1xx_u_dynamic_setup_sms().MakeReadOnly();
    private static readonly string[] _mxt1XxUDynamicSetupSmsFieldNames = new string[] { "alias_name", "allow_any_number", "destination", "feedback", "max_send_count", "panic_alert_number_1", "panic_alert_number_2", "panic_alert_number_3", "password", "send_packet_mode", "sms_interval", "speed_alert_phone_number" };
    private static readonly uint[] _mxt1XxUDynamicSetupSmsFieldTags = new uint[] { 10, 40, 26, 48, 64, 74, 82, 90, 16, 32, 56, 98 };
    public static mxt1xx_u_dynamic_setup_sms DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mxt1xx_u_dynamic_setup_sms DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mxt1xx_u_dynamic_setup_sms ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_dynamic_setup_sms__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mxt1xx_u_dynamic_setup_sms, mxt1xx_u_dynamic_setup_sms.Builder> InternalFieldAccessors {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_dynamic_setup_sms__FieldAccessorTable; }
    }
    
    public const int AliasNameFieldNumber = 1;
    private bool hasAliasName;
    private string aliasName_ = "";
    public bool HasAliasName {
      get { return hasAliasName; }
    }
    public string AliasName {
      get { return aliasName_; }
    }
    
    public const int PasswordFieldNumber = 2;
    private bool hasPassword;
    private bool password_;
    public bool HasPassword {
      get { return hasPassword; }
    }
    public bool Password {
      get { return password_; }
    }
    
    public const int DestinationFieldNumber = 3;
    private bool hasDestination;
    private string destination_ = "";
    public bool HasDestination {
      get { return hasDestination; }
    }
    public string Destination {
      get { return destination_; }
    }
    
    public const int SendPacketModeFieldNumber = 4;
    private bool hasSendPacketMode;
    private uint sendPacketMode_;
    public bool HasSendPacketMode {
      get { return hasSendPacketMode; }
    }
    [global::System.CLSCompliant(false)]
    public uint SendPacketMode {
      get { return sendPacketMode_; }
    }
    
    public const int AllowAnyNumberFieldNumber = 5;
    private bool hasAllowAnyNumber;
    private uint allowAnyNumber_;
    public bool HasAllowAnyNumber {
      get { return hasAllowAnyNumber; }
    }
    [global::System.CLSCompliant(false)]
    public uint AllowAnyNumber {
      get { return allowAnyNumber_; }
    }
    
    public const int FeedbackFieldNumber = 6;
    private bool hasFeedback;
    private bool feedback_;
    public bool HasFeedback {
      get { return hasFeedback; }
    }
    public bool Feedback {
      get { return feedback_; }
    }
    
    public const int SmsIntervalFieldNumber = 7;
    private bool hasSmsInterval;
    private uint smsInterval_;
    public bool HasSmsInterval {
      get { return hasSmsInterval; }
    }
    [global::System.CLSCompliant(false)]
    public uint SmsInterval {
      get { return smsInterval_; }
    }
    
    public const int MaxSendCountFieldNumber = 8;
    private bool hasMaxSendCount;
    private uint maxSendCount_;
    public bool HasMaxSendCount {
      get { return hasMaxSendCount; }
    }
    [global::System.CLSCompliant(false)]
    public uint MaxSendCount {
      get { return maxSendCount_; }
    }
    
    public const int PanicAlertNumber1FieldNumber = 9;
    private bool hasPanicAlertNumber1;
    private string panicAlertNumber1_ = "";
    public bool HasPanicAlertNumber1 {
      get { return hasPanicAlertNumber1; }
    }
    public string PanicAlertNumber1 {
      get { return panicAlertNumber1_; }
    }
    
    public const int PanicAlertNumber2FieldNumber = 10;
    private bool hasPanicAlertNumber2;
    private string panicAlertNumber2_ = "";
    public bool HasPanicAlertNumber2 {
      get { return hasPanicAlertNumber2; }
    }
    public string PanicAlertNumber2 {
      get { return panicAlertNumber2_; }
    }
    
    public const int PanicAlertNumber3FieldNumber = 11;
    private bool hasPanicAlertNumber3;
    private string panicAlertNumber3_ = "";
    public bool HasPanicAlertNumber3 {
      get { return hasPanicAlertNumber3; }
    }
    public string PanicAlertNumber3 {
      get { return panicAlertNumber3_; }
    }
    
    public const int SpeedAlertPhoneNumberFieldNumber = 12;
    private bool hasSpeedAlertPhoneNumber;
    private string speedAlertPhoneNumber_ = "";
    public bool HasSpeedAlertPhoneNumber {
      get { return hasSpeedAlertPhoneNumber; }
    }
    public string SpeedAlertPhoneNumber {
      get { return speedAlertPhoneNumber_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mxt1XxUDynamicSetupSmsFieldNames;
      if (hasAliasName) {
        output.WriteString(1, field_names[0], AliasName);
      }
      if (hasPassword) {
        output.WriteBool(2, field_names[8], Password);
      }
      if (hasDestination) {
        output.WriteString(3, field_names[2], Destination);
      }
      if (hasSendPacketMode) {
        output.WriteUInt32(4, field_names[9], SendPacketMode);
      }
      if (hasAllowAnyNumber) {
        output.WriteUInt32(5, field_names[1], AllowAnyNumber);
      }
      if (hasFeedback) {
        output.WriteBool(6, field_names[3], Feedback);
      }
      if (hasSmsInterval) {
        output.WriteUInt32(7, field_names[10], SmsInterval);
      }
      if (hasMaxSendCount) {
        output.WriteUInt32(8, field_names[4], MaxSendCount);
      }
      if (hasPanicAlertNumber1) {
        output.WriteString(9, field_names[5], PanicAlertNumber1);
      }
      if (hasPanicAlertNumber2) {
        output.WriteString(10, field_names[6], PanicAlertNumber2);
      }
      if (hasPanicAlertNumber3) {
        output.WriteString(11, field_names[7], PanicAlertNumber3);
      }
      if (hasSpeedAlertPhoneNumber) {
        output.WriteString(12, field_names[11], SpeedAlertPhoneNumber);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAliasName) {
        size += pb::CodedOutputStream.ComputeStringSize(1, AliasName);
      }
      if (hasPassword) {
        size += pb::CodedOutputStream.ComputeBoolSize(2, Password);
      }
      if (hasDestination) {
        size += pb::CodedOutputStream.ComputeStringSize(3, Destination);
      }
      if (hasSendPacketMode) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, SendPacketMode);
      }
      if (hasAllowAnyNumber) {
        size += pb::CodedOutputStream.ComputeUInt32Size(5, AllowAnyNumber);
      }
      if (hasFeedback) {
        size += pb::CodedOutputStream.ComputeBoolSize(6, Feedback);
      }
      if (hasSmsInterval) {
        size += pb::CodedOutputStream.ComputeUInt32Size(7, SmsInterval);
      }
      if (hasMaxSendCount) {
        size += pb::CodedOutputStream.ComputeUInt32Size(8, MaxSendCount);
      }
      if (hasPanicAlertNumber1) {
        size += pb::CodedOutputStream.ComputeStringSize(9, PanicAlertNumber1);
      }
      if (hasPanicAlertNumber2) {
        size += pb::CodedOutputStream.ComputeStringSize(10, PanicAlertNumber2);
      }
      if (hasPanicAlertNumber3) {
        size += pb::CodedOutputStream.ComputeStringSize(11, PanicAlertNumber3);
      }
      if (hasSpeedAlertPhoneNumber) {
        size += pb::CodedOutputStream.ComputeStringSize(12, SpeedAlertPhoneNumber);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mxt1xx_u_dynamic_setup_sms ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_sms ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_sms ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_sms ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_sms ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_sms ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_sms ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_sms ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_sms ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_sms ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mxt1xx_u_dynamic_setup_sms MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mxt1xx_u_dynamic_setup_sms prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mxt1xx_u_dynamic_setup_sms, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mxt1xx_u_dynamic_setup_sms cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mxt1xx_u_dynamic_setup_sms result;
      
      private mxt1xx_u_dynamic_setup_sms PrepareBuilder() {
        if (resultIsReadOnly) {
          mxt1xx_u_dynamic_setup_sms original = result;
          result = new mxt1xx_u_dynamic_setup_sms();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mxt1xx_u_dynamic_setup_sms MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_sms.Descriptor; }
      }
      
      public override mxt1xx_u_dynamic_setup_sms DefaultInstanceForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_sms.DefaultInstance; }
      }
      
      public override mxt1xx_u_dynamic_setup_sms BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mxt1xx_u_dynamic_setup_sms) {
          return MergeFrom((mxt1xx_u_dynamic_setup_sms) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mxt1xx_u_dynamic_setup_sms other) {
        if (other == global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_sms.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAliasName) {
          AliasName = other.AliasName;
        }
        if (other.HasPassword) {
          Password = other.Password;
        }
        if (other.HasDestination) {
          Destination = other.Destination;
        }
        if (other.HasSendPacketMode) {
          SendPacketMode = other.SendPacketMode;
        }
        if (other.HasAllowAnyNumber) {
          AllowAnyNumber = other.AllowAnyNumber;
        }
        if (other.HasFeedback) {
          Feedback = other.Feedback;
        }
        if (other.HasSmsInterval) {
          SmsInterval = other.SmsInterval;
        }
        if (other.HasMaxSendCount) {
          MaxSendCount = other.MaxSendCount;
        }
        if (other.HasPanicAlertNumber1) {
          PanicAlertNumber1 = other.PanicAlertNumber1;
        }
        if (other.HasPanicAlertNumber2) {
          PanicAlertNumber2 = other.PanicAlertNumber2;
        }
        if (other.HasPanicAlertNumber3) {
          PanicAlertNumber3 = other.PanicAlertNumber3;
        }
        if (other.HasSpeedAlertPhoneNumber) {
          SpeedAlertPhoneNumber = other.SpeedAlertPhoneNumber;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mxt1XxUDynamicSetupSmsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mxt1XxUDynamicSetupSmsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasAliasName = input.ReadString(ref result.aliasName_);
              break;
            }
            case 16: {
              result.hasPassword = input.ReadBool(ref result.password_);
              break;
            }
            case 26: {
              result.hasDestination = input.ReadString(ref result.destination_);
              break;
            }
            case 32: {
              result.hasSendPacketMode = input.ReadUInt32(ref result.sendPacketMode_);
              break;
            }
            case 40: {
              result.hasAllowAnyNumber = input.ReadUInt32(ref result.allowAnyNumber_);
              break;
            }
            case 48: {
              result.hasFeedback = input.ReadBool(ref result.feedback_);
              break;
            }
            case 56: {
              result.hasSmsInterval = input.ReadUInt32(ref result.smsInterval_);
              break;
            }
            case 64: {
              result.hasMaxSendCount = input.ReadUInt32(ref result.maxSendCount_);
              break;
            }
            case 74: {
              result.hasPanicAlertNumber1 = input.ReadString(ref result.panicAlertNumber1_);
              break;
            }
            case 82: {
              result.hasPanicAlertNumber2 = input.ReadString(ref result.panicAlertNumber2_);
              break;
            }
            case 90: {
              result.hasPanicAlertNumber3 = input.ReadString(ref result.panicAlertNumber3_);
              break;
            }
            case 98: {
              result.hasSpeedAlertPhoneNumber = input.ReadString(ref result.speedAlertPhoneNumber_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAliasName {
        get { return result.hasAliasName; }
      }
      public string AliasName {
        get { return result.AliasName; }
        set { SetAliasName(value); }
      }
      public Builder SetAliasName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAliasName = true;
        result.aliasName_ = value;
        return this;
      }
      public Builder ClearAliasName() {
        PrepareBuilder();
        result.hasAliasName = false;
        result.aliasName_ = "";
        return this;
      }
      
      public bool HasPassword {
        get { return result.hasPassword; }
      }
      public bool Password {
        get { return result.Password; }
        set { SetPassword(value); }
      }
      public Builder SetPassword(bool value) {
        PrepareBuilder();
        result.hasPassword = true;
        result.password_ = value;
        return this;
      }
      public Builder ClearPassword() {
        PrepareBuilder();
        result.hasPassword = false;
        result.password_ = false;
        return this;
      }
      
      public bool HasDestination {
        get { return result.hasDestination; }
      }
      public string Destination {
        get { return result.Destination; }
        set { SetDestination(value); }
      }
      public Builder SetDestination(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDestination = true;
        result.destination_ = value;
        return this;
      }
      public Builder ClearDestination() {
        PrepareBuilder();
        result.hasDestination = false;
        result.destination_ = "";
        return this;
      }
      
      public bool HasSendPacketMode {
        get { return result.hasSendPacketMode; }
      }
      [global::System.CLSCompliant(false)]
      public uint SendPacketMode {
        get { return result.SendPacketMode; }
        set { SetSendPacketMode(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSendPacketMode(uint value) {
        PrepareBuilder();
        result.hasSendPacketMode = true;
        result.sendPacketMode_ = value;
        return this;
      }
      public Builder ClearSendPacketMode() {
        PrepareBuilder();
        result.hasSendPacketMode = false;
        result.sendPacketMode_ = 0;
        return this;
      }
      
      public bool HasAllowAnyNumber {
        get { return result.hasAllowAnyNumber; }
      }
      [global::System.CLSCompliant(false)]
      public uint AllowAnyNumber {
        get { return result.AllowAnyNumber; }
        set { SetAllowAnyNumber(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetAllowAnyNumber(uint value) {
        PrepareBuilder();
        result.hasAllowAnyNumber = true;
        result.allowAnyNumber_ = value;
        return this;
      }
      public Builder ClearAllowAnyNumber() {
        PrepareBuilder();
        result.hasAllowAnyNumber = false;
        result.allowAnyNumber_ = 0;
        return this;
      }
      
      public bool HasFeedback {
        get { return result.hasFeedback; }
      }
      public bool Feedback {
        get { return result.Feedback; }
        set { SetFeedback(value); }
      }
      public Builder SetFeedback(bool value) {
        PrepareBuilder();
        result.hasFeedback = true;
        result.feedback_ = value;
        return this;
      }
      public Builder ClearFeedback() {
        PrepareBuilder();
        result.hasFeedback = false;
        result.feedback_ = false;
        return this;
      }
      
      public bool HasSmsInterval {
        get { return result.hasSmsInterval; }
      }
      [global::System.CLSCompliant(false)]
      public uint SmsInterval {
        get { return result.SmsInterval; }
        set { SetSmsInterval(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSmsInterval(uint value) {
        PrepareBuilder();
        result.hasSmsInterval = true;
        result.smsInterval_ = value;
        return this;
      }
      public Builder ClearSmsInterval() {
        PrepareBuilder();
        result.hasSmsInterval = false;
        result.smsInterval_ = 0;
        return this;
      }
      
      public bool HasMaxSendCount {
        get { return result.hasMaxSendCount; }
      }
      [global::System.CLSCompliant(false)]
      public uint MaxSendCount {
        get { return result.MaxSendCount; }
        set { SetMaxSendCount(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetMaxSendCount(uint value) {
        PrepareBuilder();
        result.hasMaxSendCount = true;
        result.maxSendCount_ = value;
        return this;
      }
      public Builder ClearMaxSendCount() {
        PrepareBuilder();
        result.hasMaxSendCount = false;
        result.maxSendCount_ = 0;
        return this;
      }
      
      public bool HasPanicAlertNumber1 {
        get { return result.hasPanicAlertNumber1; }
      }
      public string PanicAlertNumber1 {
        get { return result.PanicAlertNumber1; }
        set { SetPanicAlertNumber1(value); }
      }
      public Builder SetPanicAlertNumber1(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPanicAlertNumber1 = true;
        result.panicAlertNumber1_ = value;
        return this;
      }
      public Builder ClearPanicAlertNumber1() {
        PrepareBuilder();
        result.hasPanicAlertNumber1 = false;
        result.panicAlertNumber1_ = "";
        return this;
      }
      
      public bool HasPanicAlertNumber2 {
        get { return result.hasPanicAlertNumber2; }
      }
      public string PanicAlertNumber2 {
        get { return result.PanicAlertNumber2; }
        set { SetPanicAlertNumber2(value); }
      }
      public Builder SetPanicAlertNumber2(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPanicAlertNumber2 = true;
        result.panicAlertNumber2_ = value;
        return this;
      }
      public Builder ClearPanicAlertNumber2() {
        PrepareBuilder();
        result.hasPanicAlertNumber2 = false;
        result.panicAlertNumber2_ = "";
        return this;
      }
      
      public bool HasPanicAlertNumber3 {
        get { return result.hasPanicAlertNumber3; }
      }
      public string PanicAlertNumber3 {
        get { return result.PanicAlertNumber3; }
        set { SetPanicAlertNumber3(value); }
      }
      public Builder SetPanicAlertNumber3(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPanicAlertNumber3 = true;
        result.panicAlertNumber3_ = value;
        return this;
      }
      public Builder ClearPanicAlertNumber3() {
        PrepareBuilder();
        result.hasPanicAlertNumber3 = false;
        result.panicAlertNumber3_ = "";
        return this;
      }
      
      public bool HasSpeedAlertPhoneNumber {
        get { return result.hasSpeedAlertPhoneNumber; }
      }
      public string SpeedAlertPhoneNumber {
        get { return result.SpeedAlertPhoneNumber; }
        set { SetSpeedAlertPhoneNumber(value); }
      }
      public Builder SetSpeedAlertPhoneNumber(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSpeedAlertPhoneNumber = true;
        result.speedAlertPhoneNumber_ = value;
        return this;
      }
      public Builder ClearSpeedAlertPhoneNumber() {
        PrepareBuilder();
        result.hasSpeedAlertPhoneNumber = false;
        result.speedAlertPhoneNumber_ = "";
        return this;
      }
    }
    static mxt1xx_u_dynamic_setup_sms() {
      object.ReferenceEquals(global::maxtrack.pb.mxt1xx.Mxt1Xx.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mxt1xx_u_dynamic_setup_input_and_output : pb::GeneratedMessage<mxt1xx_u_dynamic_setup_input_and_output, mxt1xx_u_dynamic_setup_input_and_output.Builder> {
    private mxt1xx_u_dynamic_setup_input_and_output() { }
    private static readonly mxt1xx_u_dynamic_setup_input_and_output defaultInstance = new mxt1xx_u_dynamic_setup_input_and_output().MakeReadOnly();
    private static readonly string[] _mxt1XxUDynamicSetupInputAndOutputFieldNames = new string[] { "input1_action", "input1_enable", "jamming_output", "max_speed_output", "output1_invert", "panic_and_door_as_input", "panic_mode", "smart_output1" };
    private static readonly uint[] _mxt1XxUDynamicSetupInputAndOutputFieldTags = new uint[] { 24, 8, 64, 56, 40, 32, 16, 48 };
    public static mxt1xx_u_dynamic_setup_input_and_output DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mxt1xx_u_dynamic_setup_input_and_output DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mxt1xx_u_dynamic_setup_input_and_output ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_dynamic_setup_input_and_output__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mxt1xx_u_dynamic_setup_input_and_output, mxt1xx_u_dynamic_setup_input_and_output.Builder> InternalFieldAccessors {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_dynamic_setup_input_and_output__FieldAccessorTable; }
    }
    
    public const int Input1EnableFieldNumber = 1;
    private bool hasInput1Enable;
    private bool input1Enable_;
    public bool HasInput1Enable {
      get { return hasInput1Enable; }
    }
    public bool Input1Enable {
      get { return input1Enable_; }
    }
    
    public const int PanicModeFieldNumber = 2;
    private bool hasPanicMode;
    private uint panicMode_;
    public bool HasPanicMode {
      get { return hasPanicMode; }
    }
    [global::System.CLSCompliant(false)]
    public uint PanicMode {
      get { return panicMode_; }
    }
    
    public const int Input1ActionFieldNumber = 3;
    private bool hasInput1Action;
    private bool input1Action_;
    public bool HasInput1Action {
      get { return hasInput1Action; }
    }
    public bool Input1Action {
      get { return input1Action_; }
    }
    
    public const int PanicAndDoorAsInputFieldNumber = 4;
    private bool hasPanicAndDoorAsInput;
    private bool panicAndDoorAsInput_;
    public bool HasPanicAndDoorAsInput {
      get { return hasPanicAndDoorAsInput; }
    }
    public bool PanicAndDoorAsInput {
      get { return panicAndDoorAsInput_; }
    }
    
    public const int Output1InvertFieldNumber = 5;
    private bool hasOutput1Invert;
    private bool output1Invert_;
    public bool HasOutput1Invert {
      get { return hasOutput1Invert; }
    }
    public bool Output1Invert {
      get { return output1Invert_; }
    }
    
    public const int SmartOutput1FieldNumber = 6;
    private bool hasSmartOutput1;
    private bool smartOutput1_;
    public bool HasSmartOutput1 {
      get { return hasSmartOutput1; }
    }
    public bool SmartOutput1 {
      get { return smartOutput1_; }
    }
    
    public const int MaxSpeedOutputFieldNumber = 7;
    private bool hasMaxSpeedOutput;
    private uint maxSpeedOutput_;
    public bool HasMaxSpeedOutput {
      get { return hasMaxSpeedOutput; }
    }
    [global::System.CLSCompliant(false)]
    public uint MaxSpeedOutput {
      get { return maxSpeedOutput_; }
    }
    
    public const int JammingOutputFieldNumber = 8;
    private bool hasJammingOutput;
    private uint jammingOutput_;
    public bool HasJammingOutput {
      get { return hasJammingOutput; }
    }
    [global::System.CLSCompliant(false)]
    public uint JammingOutput {
      get { return jammingOutput_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mxt1XxUDynamicSetupInputAndOutputFieldNames;
      if (hasInput1Enable) {
        output.WriteBool(1, field_names[1], Input1Enable);
      }
      if (hasPanicMode) {
        output.WriteUInt32(2, field_names[6], PanicMode);
      }
      if (hasInput1Action) {
        output.WriteBool(3, field_names[0], Input1Action);
      }
      if (hasPanicAndDoorAsInput) {
        output.WriteBool(4, field_names[5], PanicAndDoorAsInput);
      }
      if (hasOutput1Invert) {
        output.WriteBool(5, field_names[4], Output1Invert);
      }
      if (hasSmartOutput1) {
        output.WriteBool(6, field_names[7], SmartOutput1);
      }
      if (hasMaxSpeedOutput) {
        output.WriteUInt32(7, field_names[3], MaxSpeedOutput);
      }
      if (hasJammingOutput) {
        output.WriteUInt32(8, field_names[2], JammingOutput);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasInput1Enable) {
        size += pb::CodedOutputStream.ComputeBoolSize(1, Input1Enable);
      }
      if (hasPanicMode) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, PanicMode);
      }
      if (hasInput1Action) {
        size += pb::CodedOutputStream.ComputeBoolSize(3, Input1Action);
      }
      if (hasPanicAndDoorAsInput) {
        size += pb::CodedOutputStream.ComputeBoolSize(4, PanicAndDoorAsInput);
      }
      if (hasOutput1Invert) {
        size += pb::CodedOutputStream.ComputeBoolSize(5, Output1Invert);
      }
      if (hasSmartOutput1) {
        size += pb::CodedOutputStream.ComputeBoolSize(6, SmartOutput1);
      }
      if (hasMaxSpeedOutput) {
        size += pb::CodedOutputStream.ComputeUInt32Size(7, MaxSpeedOutput);
      }
      if (hasJammingOutput) {
        size += pb::CodedOutputStream.ComputeUInt32Size(8, JammingOutput);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mxt1xx_u_dynamic_setup_input_and_output ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_input_and_output ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_input_and_output ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_input_and_output ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_input_and_output ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_input_and_output ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_input_and_output ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_input_and_output ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_input_and_output ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_input_and_output ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mxt1xx_u_dynamic_setup_input_and_output MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mxt1xx_u_dynamic_setup_input_and_output prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mxt1xx_u_dynamic_setup_input_and_output, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mxt1xx_u_dynamic_setup_input_and_output cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mxt1xx_u_dynamic_setup_input_and_output result;
      
      private mxt1xx_u_dynamic_setup_input_and_output PrepareBuilder() {
        if (resultIsReadOnly) {
          mxt1xx_u_dynamic_setup_input_and_output original = result;
          result = new mxt1xx_u_dynamic_setup_input_and_output();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mxt1xx_u_dynamic_setup_input_and_output MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_input_and_output.Descriptor; }
      }
      
      public override mxt1xx_u_dynamic_setup_input_and_output DefaultInstanceForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_input_and_output.DefaultInstance; }
      }
      
      public override mxt1xx_u_dynamic_setup_input_and_output BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mxt1xx_u_dynamic_setup_input_and_output) {
          return MergeFrom((mxt1xx_u_dynamic_setup_input_and_output) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mxt1xx_u_dynamic_setup_input_and_output other) {
        if (other == global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_input_and_output.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasInput1Enable) {
          Input1Enable = other.Input1Enable;
        }
        if (other.HasPanicMode) {
          PanicMode = other.PanicMode;
        }
        if (other.HasInput1Action) {
          Input1Action = other.Input1Action;
        }
        if (other.HasPanicAndDoorAsInput) {
          PanicAndDoorAsInput = other.PanicAndDoorAsInput;
        }
        if (other.HasOutput1Invert) {
          Output1Invert = other.Output1Invert;
        }
        if (other.HasSmartOutput1) {
          SmartOutput1 = other.SmartOutput1;
        }
        if (other.HasMaxSpeedOutput) {
          MaxSpeedOutput = other.MaxSpeedOutput;
        }
        if (other.HasJammingOutput) {
          JammingOutput = other.JammingOutput;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mxt1XxUDynamicSetupInputAndOutputFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mxt1XxUDynamicSetupInputAndOutputFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasInput1Enable = input.ReadBool(ref result.input1Enable_);
              break;
            }
            case 16: {
              result.hasPanicMode = input.ReadUInt32(ref result.panicMode_);
              break;
            }
            case 24: {
              result.hasInput1Action = input.ReadBool(ref result.input1Action_);
              break;
            }
            case 32: {
              result.hasPanicAndDoorAsInput = input.ReadBool(ref result.panicAndDoorAsInput_);
              break;
            }
            case 40: {
              result.hasOutput1Invert = input.ReadBool(ref result.output1Invert_);
              break;
            }
            case 48: {
              result.hasSmartOutput1 = input.ReadBool(ref result.smartOutput1_);
              break;
            }
            case 56: {
              result.hasMaxSpeedOutput = input.ReadUInt32(ref result.maxSpeedOutput_);
              break;
            }
            case 64: {
              result.hasJammingOutput = input.ReadUInt32(ref result.jammingOutput_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasInput1Enable {
        get { return result.hasInput1Enable; }
      }
      public bool Input1Enable {
        get { return result.Input1Enable; }
        set { SetInput1Enable(value); }
      }
      public Builder SetInput1Enable(bool value) {
        PrepareBuilder();
        result.hasInput1Enable = true;
        result.input1Enable_ = value;
        return this;
      }
      public Builder ClearInput1Enable() {
        PrepareBuilder();
        result.hasInput1Enable = false;
        result.input1Enable_ = false;
        return this;
      }
      
      public bool HasPanicMode {
        get { return result.hasPanicMode; }
      }
      [global::System.CLSCompliant(false)]
      public uint PanicMode {
        get { return result.PanicMode; }
        set { SetPanicMode(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetPanicMode(uint value) {
        PrepareBuilder();
        result.hasPanicMode = true;
        result.panicMode_ = value;
        return this;
      }
      public Builder ClearPanicMode() {
        PrepareBuilder();
        result.hasPanicMode = false;
        result.panicMode_ = 0;
        return this;
      }
      
      public bool HasInput1Action {
        get { return result.hasInput1Action; }
      }
      public bool Input1Action {
        get { return result.Input1Action; }
        set { SetInput1Action(value); }
      }
      public Builder SetInput1Action(bool value) {
        PrepareBuilder();
        result.hasInput1Action = true;
        result.input1Action_ = value;
        return this;
      }
      public Builder ClearInput1Action() {
        PrepareBuilder();
        result.hasInput1Action = false;
        result.input1Action_ = false;
        return this;
      }
      
      public bool HasPanicAndDoorAsInput {
        get { return result.hasPanicAndDoorAsInput; }
      }
      public bool PanicAndDoorAsInput {
        get { return result.PanicAndDoorAsInput; }
        set { SetPanicAndDoorAsInput(value); }
      }
      public Builder SetPanicAndDoorAsInput(bool value) {
        PrepareBuilder();
        result.hasPanicAndDoorAsInput = true;
        result.panicAndDoorAsInput_ = value;
        return this;
      }
      public Builder ClearPanicAndDoorAsInput() {
        PrepareBuilder();
        result.hasPanicAndDoorAsInput = false;
        result.panicAndDoorAsInput_ = false;
        return this;
      }
      
      public bool HasOutput1Invert {
        get { return result.hasOutput1Invert; }
      }
      public bool Output1Invert {
        get { return result.Output1Invert; }
        set { SetOutput1Invert(value); }
      }
      public Builder SetOutput1Invert(bool value) {
        PrepareBuilder();
        result.hasOutput1Invert = true;
        result.output1Invert_ = value;
        return this;
      }
      public Builder ClearOutput1Invert() {
        PrepareBuilder();
        result.hasOutput1Invert = false;
        result.output1Invert_ = false;
        return this;
      }
      
      public bool HasSmartOutput1 {
        get { return result.hasSmartOutput1; }
      }
      public bool SmartOutput1 {
        get { return result.SmartOutput1; }
        set { SetSmartOutput1(value); }
      }
      public Builder SetSmartOutput1(bool value) {
        PrepareBuilder();
        result.hasSmartOutput1 = true;
        result.smartOutput1_ = value;
        return this;
      }
      public Builder ClearSmartOutput1() {
        PrepareBuilder();
        result.hasSmartOutput1 = false;
        result.smartOutput1_ = false;
        return this;
      }
      
      public bool HasMaxSpeedOutput {
        get { return result.hasMaxSpeedOutput; }
      }
      [global::System.CLSCompliant(false)]
      public uint MaxSpeedOutput {
        get { return result.MaxSpeedOutput; }
        set { SetMaxSpeedOutput(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetMaxSpeedOutput(uint value) {
        PrepareBuilder();
        result.hasMaxSpeedOutput = true;
        result.maxSpeedOutput_ = value;
        return this;
      }
      public Builder ClearMaxSpeedOutput() {
        PrepareBuilder();
        result.hasMaxSpeedOutput = false;
        result.maxSpeedOutput_ = 0;
        return this;
      }
      
      public bool HasJammingOutput {
        get { return result.hasJammingOutput; }
      }
      [global::System.CLSCompliant(false)]
      public uint JammingOutput {
        get { return result.JammingOutput; }
        set { SetJammingOutput(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetJammingOutput(uint value) {
        PrepareBuilder();
        result.hasJammingOutput = true;
        result.jammingOutput_ = value;
        return this;
      }
      public Builder ClearJammingOutput() {
        PrepareBuilder();
        result.hasJammingOutput = false;
        result.jammingOutput_ = 0;
        return this;
      }
    }
    static mxt1xx_u_dynamic_setup_input_and_output() {
      object.ReferenceEquals(global::maxtrack.pb.mxt1xx.Mxt1Xx.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mxt1xx_u_dynamic_setup_debounce_timer : pb::GeneratedMessage<mxt1xx_u_dynamic_setup_debounce_timer, mxt1xx_u_dynamic_setup_debounce_timer.Builder> {
    private mxt1xx_u_dynamic_setup_debounce_timer() { }
    private static readonly mxt1xx_u_dynamic_setup_debounce_timer defaultInstance = new mxt1xx_u_dynamic_setup_debounce_timer().MakeReadOnly();
    private static readonly string[] _mxt1XxUDynamicSetupDebounceTimerFieldNames = new string[] { "ex_power_debounce", "ignition_debounce", "input1_debounce", "jamming_debounce", "max_speed_debounce", "waypoint_debounce" };
    private static readonly uint[] _mxt1XxUDynamicSetupDebounceTimerFieldTags = new uint[] { 16, 8, 48, 24, 32, 40 };
    public static mxt1xx_u_dynamic_setup_debounce_timer DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mxt1xx_u_dynamic_setup_debounce_timer DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mxt1xx_u_dynamic_setup_debounce_timer ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_dynamic_setup_debounce_timer__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mxt1xx_u_dynamic_setup_debounce_timer, mxt1xx_u_dynamic_setup_debounce_timer.Builder> InternalFieldAccessors {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_dynamic_setup_debounce_timer__FieldAccessorTable; }
    }
    
    public const int IgnitionDebounceFieldNumber = 1;
    private bool hasIgnitionDebounce;
    private uint ignitionDebounce_;
    public bool HasIgnitionDebounce {
      get { return hasIgnitionDebounce; }
    }
    [global::System.CLSCompliant(false)]
    public uint IgnitionDebounce {
      get { return ignitionDebounce_; }
    }
    
    public const int ExPowerDebounceFieldNumber = 2;
    private bool hasExPowerDebounce;
    private uint exPowerDebounce_;
    public bool HasExPowerDebounce {
      get { return hasExPowerDebounce; }
    }
    [global::System.CLSCompliant(false)]
    public uint ExPowerDebounce {
      get { return exPowerDebounce_; }
    }
    
    public const int JammingDebounceFieldNumber = 3;
    private bool hasJammingDebounce;
    private uint jammingDebounce_;
    public bool HasJammingDebounce {
      get { return hasJammingDebounce; }
    }
    [global::System.CLSCompliant(false)]
    public uint JammingDebounce {
      get { return jammingDebounce_; }
    }
    
    public const int MaxSpeedDebounceFieldNumber = 4;
    private bool hasMaxSpeedDebounce;
    private uint maxSpeedDebounce_;
    public bool HasMaxSpeedDebounce {
      get { return hasMaxSpeedDebounce; }
    }
    [global::System.CLSCompliant(false)]
    public uint MaxSpeedDebounce {
      get { return maxSpeedDebounce_; }
    }
    
    public const int WaypointDebounceFieldNumber = 5;
    private bool hasWaypointDebounce;
    private uint waypointDebounce_;
    public bool HasWaypointDebounce {
      get { return hasWaypointDebounce; }
    }
    [global::System.CLSCompliant(false)]
    public uint WaypointDebounce {
      get { return waypointDebounce_; }
    }
    
    public const int Input1DebounceFieldNumber = 6;
    private bool hasInput1Debounce;
    private uint input1Debounce_;
    public bool HasInput1Debounce {
      get { return hasInput1Debounce; }
    }
    [global::System.CLSCompliant(false)]
    public uint Input1Debounce {
      get { return input1Debounce_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mxt1XxUDynamicSetupDebounceTimerFieldNames;
      if (hasIgnitionDebounce) {
        output.WriteUInt32(1, field_names[1], IgnitionDebounce);
      }
      if (hasExPowerDebounce) {
        output.WriteUInt32(2, field_names[0], ExPowerDebounce);
      }
      if (hasJammingDebounce) {
        output.WriteUInt32(3, field_names[3], JammingDebounce);
      }
      if (hasMaxSpeedDebounce) {
        output.WriteUInt32(4, field_names[4], MaxSpeedDebounce);
      }
      if (hasWaypointDebounce) {
        output.WriteUInt32(5, field_names[5], WaypointDebounce);
      }
      if (hasInput1Debounce) {
        output.WriteUInt32(6, field_names[2], Input1Debounce);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIgnitionDebounce) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, IgnitionDebounce);
      }
      if (hasExPowerDebounce) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, ExPowerDebounce);
      }
      if (hasJammingDebounce) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, JammingDebounce);
      }
      if (hasMaxSpeedDebounce) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, MaxSpeedDebounce);
      }
      if (hasWaypointDebounce) {
        size += pb::CodedOutputStream.ComputeUInt32Size(5, WaypointDebounce);
      }
      if (hasInput1Debounce) {
        size += pb::CodedOutputStream.ComputeUInt32Size(6, Input1Debounce);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mxt1xx_u_dynamic_setup_debounce_timer ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_debounce_timer ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_debounce_timer ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_debounce_timer ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_debounce_timer ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_debounce_timer ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_debounce_timer ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_debounce_timer ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_debounce_timer ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_debounce_timer ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mxt1xx_u_dynamic_setup_debounce_timer MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mxt1xx_u_dynamic_setup_debounce_timer prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mxt1xx_u_dynamic_setup_debounce_timer, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mxt1xx_u_dynamic_setup_debounce_timer cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mxt1xx_u_dynamic_setup_debounce_timer result;
      
      private mxt1xx_u_dynamic_setup_debounce_timer PrepareBuilder() {
        if (resultIsReadOnly) {
          mxt1xx_u_dynamic_setup_debounce_timer original = result;
          result = new mxt1xx_u_dynamic_setup_debounce_timer();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mxt1xx_u_dynamic_setup_debounce_timer MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_debounce_timer.Descriptor; }
      }
      
      public override mxt1xx_u_dynamic_setup_debounce_timer DefaultInstanceForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_debounce_timer.DefaultInstance; }
      }
      
      public override mxt1xx_u_dynamic_setup_debounce_timer BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mxt1xx_u_dynamic_setup_debounce_timer) {
          return MergeFrom((mxt1xx_u_dynamic_setup_debounce_timer) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mxt1xx_u_dynamic_setup_debounce_timer other) {
        if (other == global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_debounce_timer.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIgnitionDebounce) {
          IgnitionDebounce = other.IgnitionDebounce;
        }
        if (other.HasExPowerDebounce) {
          ExPowerDebounce = other.ExPowerDebounce;
        }
        if (other.HasJammingDebounce) {
          JammingDebounce = other.JammingDebounce;
        }
        if (other.HasMaxSpeedDebounce) {
          MaxSpeedDebounce = other.MaxSpeedDebounce;
        }
        if (other.HasWaypointDebounce) {
          WaypointDebounce = other.WaypointDebounce;
        }
        if (other.HasInput1Debounce) {
          Input1Debounce = other.Input1Debounce;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mxt1XxUDynamicSetupDebounceTimerFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mxt1XxUDynamicSetupDebounceTimerFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIgnitionDebounce = input.ReadUInt32(ref result.ignitionDebounce_);
              break;
            }
            case 16: {
              result.hasExPowerDebounce = input.ReadUInt32(ref result.exPowerDebounce_);
              break;
            }
            case 24: {
              result.hasJammingDebounce = input.ReadUInt32(ref result.jammingDebounce_);
              break;
            }
            case 32: {
              result.hasMaxSpeedDebounce = input.ReadUInt32(ref result.maxSpeedDebounce_);
              break;
            }
            case 40: {
              result.hasWaypointDebounce = input.ReadUInt32(ref result.waypointDebounce_);
              break;
            }
            case 48: {
              result.hasInput1Debounce = input.ReadUInt32(ref result.input1Debounce_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIgnitionDebounce {
        get { return result.hasIgnitionDebounce; }
      }
      [global::System.CLSCompliant(false)]
      public uint IgnitionDebounce {
        get { return result.IgnitionDebounce; }
        set { SetIgnitionDebounce(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetIgnitionDebounce(uint value) {
        PrepareBuilder();
        result.hasIgnitionDebounce = true;
        result.ignitionDebounce_ = value;
        return this;
      }
      public Builder ClearIgnitionDebounce() {
        PrepareBuilder();
        result.hasIgnitionDebounce = false;
        result.ignitionDebounce_ = 0;
        return this;
      }
      
      public bool HasExPowerDebounce {
        get { return result.hasExPowerDebounce; }
      }
      [global::System.CLSCompliant(false)]
      public uint ExPowerDebounce {
        get { return result.ExPowerDebounce; }
        set { SetExPowerDebounce(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetExPowerDebounce(uint value) {
        PrepareBuilder();
        result.hasExPowerDebounce = true;
        result.exPowerDebounce_ = value;
        return this;
      }
      public Builder ClearExPowerDebounce() {
        PrepareBuilder();
        result.hasExPowerDebounce = false;
        result.exPowerDebounce_ = 0;
        return this;
      }
      
      public bool HasJammingDebounce {
        get { return result.hasJammingDebounce; }
      }
      [global::System.CLSCompliant(false)]
      public uint JammingDebounce {
        get { return result.JammingDebounce; }
        set { SetJammingDebounce(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetJammingDebounce(uint value) {
        PrepareBuilder();
        result.hasJammingDebounce = true;
        result.jammingDebounce_ = value;
        return this;
      }
      public Builder ClearJammingDebounce() {
        PrepareBuilder();
        result.hasJammingDebounce = false;
        result.jammingDebounce_ = 0;
        return this;
      }
      
      public bool HasMaxSpeedDebounce {
        get { return result.hasMaxSpeedDebounce; }
      }
      [global::System.CLSCompliant(false)]
      public uint MaxSpeedDebounce {
        get { return result.MaxSpeedDebounce; }
        set { SetMaxSpeedDebounce(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetMaxSpeedDebounce(uint value) {
        PrepareBuilder();
        result.hasMaxSpeedDebounce = true;
        result.maxSpeedDebounce_ = value;
        return this;
      }
      public Builder ClearMaxSpeedDebounce() {
        PrepareBuilder();
        result.hasMaxSpeedDebounce = false;
        result.maxSpeedDebounce_ = 0;
        return this;
      }
      
      public bool HasWaypointDebounce {
        get { return result.hasWaypointDebounce; }
      }
      [global::System.CLSCompliant(false)]
      public uint WaypointDebounce {
        get { return result.WaypointDebounce; }
        set { SetWaypointDebounce(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetWaypointDebounce(uint value) {
        PrepareBuilder();
        result.hasWaypointDebounce = true;
        result.waypointDebounce_ = value;
        return this;
      }
      public Builder ClearWaypointDebounce() {
        PrepareBuilder();
        result.hasWaypointDebounce = false;
        result.waypointDebounce_ = 0;
        return this;
      }
      
      public bool HasInput1Debounce {
        get { return result.hasInput1Debounce; }
      }
      [global::System.CLSCompliant(false)]
      public uint Input1Debounce {
        get { return result.Input1Debounce; }
        set { SetInput1Debounce(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetInput1Debounce(uint value) {
        PrepareBuilder();
        result.hasInput1Debounce = true;
        result.input1Debounce_ = value;
        return this;
      }
      public Builder ClearInput1Debounce() {
        PrepareBuilder();
        result.hasInput1Debounce = false;
        result.input1Debounce_ = 0;
        return this;
      }
    }
    static mxt1xx_u_dynamic_setup_debounce_timer() {
      object.ReferenceEquals(global::maxtrack.pb.mxt1xx.Mxt1Xx.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mxt1xx_u_dynamic_setup_event : pb::GeneratedMessage<mxt1xx_u_dynamic_setup_event, mxt1xx_u_dynamic_setup_event.Builder> {
    private mxt1xx_u_dynamic_setup_event() { }
    private static readonly mxt1xx_u_dynamic_setup_event defaultInstance = new mxt1xx_u_dynamic_setup_event().MakeReadOnly();
    private static readonly string[] _mxt1XxUDynamicSetupEventFieldNames = new string[] { "evt_100_telemetry_events", "evt_101_gsensor_historic_event", "evt_102_route_reconstruction_event", "evt_10_ignition_off", "evt_11_panic_activated", "evt_12_panic_deactivated", "evt_13_input_1_activated", "evt_14_input_1_deactivated", "evt_15_input_2_activated", "evt_16_input_2_deactivated", "evt_17_input_3_activated", "evt_18_input_3_deactivated", "evt_19_input_4_activated", "evt_20_input_4_deactivated", "evt_21_moving_detect", "evt_22_stopped_detect", "evt_23_anti_theft_violated", "evt_25_external_power_fail", "evt_26_external_power_ok", "evt_27_gps_antenna_fail", "evt_28_gps_antenna_ok", "evt_2_gprs_attached", "evt_30_sleep", "evt_31_output_1_activated", "evt_32_output_1_deactivated", "evt_33_output_2_activated", "evt_34_output_2_deactivated", "evt_35_output_3_activated", "evt_36_output_3_deactivated", "evt_37_max_speed_exceeded", "evt_38_max_speed_ok", "evt_39_entering_waypoint", "evt_40_leaving_waypoint", "evt_41_battery_is_failed", "evt_42_battery_is_ok", "evt_43_delivery_fail", "evt_46_gsensor_rolling_threshold", "evt_47_gsensor_side_threshold", "evt_48_gsensor_shock_threshold", "evt_49_direction_changed", "evt_50_sms_interval_reached", "evt_52_anti_theft_back_to_normal", "evt_53_gsm_jamming_start", "evt_54_gsm_jamming_stop", "evt_55_excessive_rpm", "evt_56_excessive_rpm_on_neutral", "evt_57_speeding_on_neutral", "evt_58_gps_failure", "evt_59_distance_attached", "evt_60_power_fail_gps_fail", "evt_61_agps_request", "evt_62_tag_accessories_status_changed", "evt_63_tag_accessories_battery_status_changed", "evt_64_link_broken", "evt_65_expand_input_changed", "evt_66_tag_accessories_status_changed_back", "evt_67_only_have_30_power_in_battery", "evt_68_only_have_20_power_in_battery", "evt_69_keep_stopped_with_ignition_on_status", "evt_70_improper_moving", "evt_71_camera_blind", "evt_72_blind_recover", "evt_73_video_lost", "evt_74_video_ok", "evt_75_rs232_data_incoming", "evt_76_calibrate_ignition_voltage_finished", "evt_77_before_deep_sleep", "evt_78_exceed_max_speed_in_raining", "evt_79_resume_speed_after_exceed_in_raining", "evt_80_acceleration_exceed", "evt_81_acceleration_resume_after_exceed", "evt_82_deceleration_exceed", "evt_83_deceleration_resume_after_exceed", "evt_84_rfid_driver_login", "evt_85_rfid_driver_logout", "evt_86_rfid_passenger_login", "evt_87_generic_exceed_max_speed", "evt_88_generic_resume_speed_after_exceed", "evt_89_fail_try_device_password_more_than_3_times", "evt_8_gps_valid_after_tx_interval", "evt_90_receive_engine_seal_activate_command", "evt_91_engine_seal_activated", "evt_92_engine_seal_deactivated", "evt_93_engine_seal_activated_by_relay", "evt_94_engine_seal_deactivated_relay", "evt_95_engine_seal_activated_by_input1", "evt_96_engine_seal_deactivated_by_input1", "evt_97_network_scan_response", "evt_98_speed_histogram", "evt_99_trip_summarization_event", "evt_9_ignition_on" };
    private static readonly uint[] _mxt1XxUDynamicSetupEventFieldTags = new uint[] { 800, 808, 816, 80, 88, 96, 104, 112, 120, 128, 136, 144, 152, 160, 168, 176, 184, 200, 208, 216, 224, 16, 240, 248, 256, 264, 272, 280, 288, 296, 304, 312, 320, 328, 336, 344, 368, 376, 384, 392, 400, 416, 424, 432, 440, 448, 456, 464, 472, 480, 488, 496, 504, 512, 520, 528, 536, 544, 552, 560, 568, 576, 584, 592, 600, 608, 616, 624, 632, 640, 648, 656, 664, 672, 680, 688, 696, 704, 712, 64, 720, 728, 736, 744, 752, 760, 768, 776, 784, 792, 72 };
    public static mxt1xx_u_dynamic_setup_event DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mxt1xx_u_dynamic_setup_event DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mxt1xx_u_dynamic_setup_event ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_dynamic_setup_event__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mxt1xx_u_dynamic_setup_event, mxt1xx_u_dynamic_setup_event.Builder> InternalFieldAccessors {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_dynamic_setup_event__FieldAccessorTable; }
    }
    
    public const int Evt2GprsAttachedFieldNumber = 2;
    private bool hasEvt2GprsAttached;
    private bool evt2GprsAttached_;
    public bool HasEvt2GprsAttached {
      get { return hasEvt2GprsAttached; }
    }
    public bool Evt2GprsAttached {
      get { return evt2GprsAttached_; }
    }
    
    public const int Evt8GpsValidAfterTxIntervalFieldNumber = 8;
    private bool hasEvt8GpsValidAfterTxInterval;
    private bool evt8GpsValidAfterTxInterval_;
    public bool HasEvt8GpsValidAfterTxInterval {
      get { return hasEvt8GpsValidAfterTxInterval; }
    }
    public bool Evt8GpsValidAfterTxInterval {
      get { return evt8GpsValidAfterTxInterval_; }
    }
    
    public const int Evt9IgnitionOnFieldNumber = 9;
    private bool hasEvt9IgnitionOn;
    private bool evt9IgnitionOn_;
    public bool HasEvt9IgnitionOn {
      get { return hasEvt9IgnitionOn; }
    }
    public bool Evt9IgnitionOn {
      get { return evt9IgnitionOn_; }
    }
    
    public const int Evt10IgnitionOffFieldNumber = 10;
    private bool hasEvt10IgnitionOff;
    private bool evt10IgnitionOff_;
    public bool HasEvt10IgnitionOff {
      get { return hasEvt10IgnitionOff; }
    }
    public bool Evt10IgnitionOff {
      get { return evt10IgnitionOff_; }
    }
    
    public const int Evt11PanicActivatedFieldNumber = 11;
    private bool hasEvt11PanicActivated;
    private bool evt11PanicActivated_;
    public bool HasEvt11PanicActivated {
      get { return hasEvt11PanicActivated; }
    }
    public bool Evt11PanicActivated {
      get { return evt11PanicActivated_; }
    }
    
    public const int Evt12PanicDeactivatedFieldNumber = 12;
    private bool hasEvt12PanicDeactivated;
    private bool evt12PanicDeactivated_;
    public bool HasEvt12PanicDeactivated {
      get { return hasEvt12PanicDeactivated; }
    }
    public bool Evt12PanicDeactivated {
      get { return evt12PanicDeactivated_; }
    }
    
    public const int Evt13Input1ActivatedFieldNumber = 13;
    private bool hasEvt13Input1Activated;
    private bool evt13Input1Activated_;
    public bool HasEvt13Input1Activated {
      get { return hasEvt13Input1Activated; }
    }
    public bool Evt13Input1Activated {
      get { return evt13Input1Activated_; }
    }
    
    public const int Evt14Input1DeactivatedFieldNumber = 14;
    private bool hasEvt14Input1Deactivated;
    private bool evt14Input1Deactivated_;
    public bool HasEvt14Input1Deactivated {
      get { return hasEvt14Input1Deactivated; }
    }
    public bool Evt14Input1Deactivated {
      get { return evt14Input1Deactivated_; }
    }
    
    public const int Evt15Input2ActivatedFieldNumber = 15;
    private bool hasEvt15Input2Activated;
    private bool evt15Input2Activated_;
    public bool HasEvt15Input2Activated {
      get { return hasEvt15Input2Activated; }
    }
    public bool Evt15Input2Activated {
      get { return evt15Input2Activated_; }
    }
    
    public const int Evt16Input2DeactivatedFieldNumber = 16;
    private bool hasEvt16Input2Deactivated;
    private bool evt16Input2Deactivated_;
    public bool HasEvt16Input2Deactivated {
      get { return hasEvt16Input2Deactivated; }
    }
    public bool Evt16Input2Deactivated {
      get { return evt16Input2Deactivated_; }
    }
    
    public const int Evt17Input3ActivatedFieldNumber = 17;
    private bool hasEvt17Input3Activated;
    private bool evt17Input3Activated_;
    public bool HasEvt17Input3Activated {
      get { return hasEvt17Input3Activated; }
    }
    public bool Evt17Input3Activated {
      get { return evt17Input3Activated_; }
    }
    
    public const int Evt18Input3DeactivatedFieldNumber = 18;
    private bool hasEvt18Input3Deactivated;
    private bool evt18Input3Deactivated_;
    public bool HasEvt18Input3Deactivated {
      get { return hasEvt18Input3Deactivated; }
    }
    public bool Evt18Input3Deactivated {
      get { return evt18Input3Deactivated_; }
    }
    
    public const int Evt19Input4ActivatedFieldNumber = 19;
    private bool hasEvt19Input4Activated;
    private bool evt19Input4Activated_;
    public bool HasEvt19Input4Activated {
      get { return hasEvt19Input4Activated; }
    }
    public bool Evt19Input4Activated {
      get { return evt19Input4Activated_; }
    }
    
    public const int Evt20Input4DeactivatedFieldNumber = 20;
    private bool hasEvt20Input4Deactivated;
    private bool evt20Input4Deactivated_;
    public bool HasEvt20Input4Deactivated {
      get { return hasEvt20Input4Deactivated; }
    }
    public bool Evt20Input4Deactivated {
      get { return evt20Input4Deactivated_; }
    }
    
    public const int Evt21MovingDetectFieldNumber = 21;
    private bool hasEvt21MovingDetect;
    private bool evt21MovingDetect_;
    public bool HasEvt21MovingDetect {
      get { return hasEvt21MovingDetect; }
    }
    public bool Evt21MovingDetect {
      get { return evt21MovingDetect_; }
    }
    
    public const int Evt22StoppedDetectFieldNumber = 22;
    private bool hasEvt22StoppedDetect;
    private bool evt22StoppedDetect_;
    public bool HasEvt22StoppedDetect {
      get { return hasEvt22StoppedDetect; }
    }
    public bool Evt22StoppedDetect {
      get { return evt22StoppedDetect_; }
    }
    
    public const int Evt23AntiTheftViolatedFieldNumber = 23;
    private bool hasEvt23AntiTheftViolated;
    private bool evt23AntiTheftViolated_;
    public bool HasEvt23AntiTheftViolated {
      get { return hasEvt23AntiTheftViolated; }
    }
    public bool Evt23AntiTheftViolated {
      get { return evt23AntiTheftViolated_; }
    }
    
    public const int Evt25ExternalPowerFailFieldNumber = 25;
    private bool hasEvt25ExternalPowerFail;
    private bool evt25ExternalPowerFail_;
    public bool HasEvt25ExternalPowerFail {
      get { return hasEvt25ExternalPowerFail; }
    }
    public bool Evt25ExternalPowerFail {
      get { return evt25ExternalPowerFail_; }
    }
    
    public const int Evt26ExternalPowerOkFieldNumber = 26;
    private bool hasEvt26ExternalPowerOk;
    private bool evt26ExternalPowerOk_;
    public bool HasEvt26ExternalPowerOk {
      get { return hasEvt26ExternalPowerOk; }
    }
    public bool Evt26ExternalPowerOk {
      get { return evt26ExternalPowerOk_; }
    }
    
    public const int Evt27GpsAntennaFailFieldNumber = 27;
    private bool hasEvt27GpsAntennaFail;
    private bool evt27GpsAntennaFail_;
    public bool HasEvt27GpsAntennaFail {
      get { return hasEvt27GpsAntennaFail; }
    }
    public bool Evt27GpsAntennaFail {
      get { return evt27GpsAntennaFail_; }
    }
    
    public const int Evt28GpsAntennaOkFieldNumber = 28;
    private bool hasEvt28GpsAntennaOk;
    private bool evt28GpsAntennaOk_;
    public bool HasEvt28GpsAntennaOk {
      get { return hasEvt28GpsAntennaOk; }
    }
    public bool Evt28GpsAntennaOk {
      get { return evt28GpsAntennaOk_; }
    }
    
    public const int Evt30SleepFieldNumber = 30;
    private bool hasEvt30Sleep;
    private bool evt30Sleep_;
    public bool HasEvt30Sleep {
      get { return hasEvt30Sleep; }
    }
    public bool Evt30Sleep {
      get { return evt30Sleep_; }
    }
    
    public const int Evt31Output1ActivatedFieldNumber = 31;
    private bool hasEvt31Output1Activated;
    private bool evt31Output1Activated_;
    public bool HasEvt31Output1Activated {
      get { return hasEvt31Output1Activated; }
    }
    public bool Evt31Output1Activated {
      get { return evt31Output1Activated_; }
    }
    
    public const int Evt32Output1DeactivatedFieldNumber = 32;
    private bool hasEvt32Output1Deactivated;
    private bool evt32Output1Deactivated_;
    public bool HasEvt32Output1Deactivated {
      get { return hasEvt32Output1Deactivated; }
    }
    public bool Evt32Output1Deactivated {
      get { return evt32Output1Deactivated_; }
    }
    
    public const int Evt33Output2ActivatedFieldNumber = 33;
    private bool hasEvt33Output2Activated;
    private bool evt33Output2Activated_;
    public bool HasEvt33Output2Activated {
      get { return hasEvt33Output2Activated; }
    }
    public bool Evt33Output2Activated {
      get { return evt33Output2Activated_; }
    }
    
    public const int Evt34Output2DeactivatedFieldNumber = 34;
    private bool hasEvt34Output2Deactivated;
    private bool evt34Output2Deactivated_;
    public bool HasEvt34Output2Deactivated {
      get { return hasEvt34Output2Deactivated; }
    }
    public bool Evt34Output2Deactivated {
      get { return evt34Output2Deactivated_; }
    }
    
    public const int Evt35Output3ActivatedFieldNumber = 35;
    private bool hasEvt35Output3Activated;
    private bool evt35Output3Activated_;
    public bool HasEvt35Output3Activated {
      get { return hasEvt35Output3Activated; }
    }
    public bool Evt35Output3Activated {
      get { return evt35Output3Activated_; }
    }
    
    public const int Evt36Output3DeactivatedFieldNumber = 36;
    private bool hasEvt36Output3Deactivated;
    private bool evt36Output3Deactivated_;
    public bool HasEvt36Output3Deactivated {
      get { return hasEvt36Output3Deactivated; }
    }
    public bool Evt36Output3Deactivated {
      get { return evt36Output3Deactivated_; }
    }
    
    public const int Evt37MaxSpeedExceededFieldNumber = 37;
    private bool hasEvt37MaxSpeedExceeded;
    private bool evt37MaxSpeedExceeded_;
    public bool HasEvt37MaxSpeedExceeded {
      get { return hasEvt37MaxSpeedExceeded; }
    }
    public bool Evt37MaxSpeedExceeded {
      get { return evt37MaxSpeedExceeded_; }
    }
    
    public const int Evt38MaxSpeedOkFieldNumber = 38;
    private bool hasEvt38MaxSpeedOk;
    private bool evt38MaxSpeedOk_;
    public bool HasEvt38MaxSpeedOk {
      get { return hasEvt38MaxSpeedOk; }
    }
    public bool Evt38MaxSpeedOk {
      get { return evt38MaxSpeedOk_; }
    }
    
    public const int Evt39EnteringWaypointFieldNumber = 39;
    private bool hasEvt39EnteringWaypoint;
    private bool evt39EnteringWaypoint_;
    public bool HasEvt39EnteringWaypoint {
      get { return hasEvt39EnteringWaypoint; }
    }
    public bool Evt39EnteringWaypoint {
      get { return evt39EnteringWaypoint_; }
    }
    
    public const int Evt40LeavingWaypointFieldNumber = 40;
    private bool hasEvt40LeavingWaypoint;
    private bool evt40LeavingWaypoint_;
    public bool HasEvt40LeavingWaypoint {
      get { return hasEvt40LeavingWaypoint; }
    }
    public bool Evt40LeavingWaypoint {
      get { return evt40LeavingWaypoint_; }
    }
    
    public const int Evt41BatteryIsFailedFieldNumber = 41;
    private bool hasEvt41BatteryIsFailed;
    private bool evt41BatteryIsFailed_;
    public bool HasEvt41BatteryIsFailed {
      get { return hasEvt41BatteryIsFailed; }
    }
    public bool Evt41BatteryIsFailed {
      get { return evt41BatteryIsFailed_; }
    }
    
    public const int Evt42BatteryIsOkFieldNumber = 42;
    private bool hasEvt42BatteryIsOk;
    private bool evt42BatteryIsOk_;
    public bool HasEvt42BatteryIsOk {
      get { return hasEvt42BatteryIsOk; }
    }
    public bool Evt42BatteryIsOk {
      get { return evt42BatteryIsOk_; }
    }
    
    public const int Evt43DeliveryFailFieldNumber = 43;
    private bool hasEvt43DeliveryFail;
    private bool evt43DeliveryFail_;
    public bool HasEvt43DeliveryFail {
      get { return hasEvt43DeliveryFail; }
    }
    public bool Evt43DeliveryFail {
      get { return evt43DeliveryFail_; }
    }
    
    public const int Evt46GsensorRollingThresholdFieldNumber = 46;
    private bool hasEvt46GsensorRollingThreshold;
    private bool evt46GsensorRollingThreshold_;
    public bool HasEvt46GsensorRollingThreshold {
      get { return hasEvt46GsensorRollingThreshold; }
    }
    public bool Evt46GsensorRollingThreshold {
      get { return evt46GsensorRollingThreshold_; }
    }
    
    public const int Evt47GsensorSideThresholdFieldNumber = 47;
    private bool hasEvt47GsensorSideThreshold;
    private bool evt47GsensorSideThreshold_;
    public bool HasEvt47GsensorSideThreshold {
      get { return hasEvt47GsensorSideThreshold; }
    }
    public bool Evt47GsensorSideThreshold {
      get { return evt47GsensorSideThreshold_; }
    }
    
    public const int Evt48GsensorShockThresholdFieldNumber = 48;
    private bool hasEvt48GsensorShockThreshold;
    private bool evt48GsensorShockThreshold_;
    public bool HasEvt48GsensorShockThreshold {
      get { return hasEvt48GsensorShockThreshold; }
    }
    public bool Evt48GsensorShockThreshold {
      get { return evt48GsensorShockThreshold_; }
    }
    
    public const int Evt49DirectionChangedFieldNumber = 49;
    private bool hasEvt49DirectionChanged;
    private bool evt49DirectionChanged_;
    public bool HasEvt49DirectionChanged {
      get { return hasEvt49DirectionChanged; }
    }
    public bool Evt49DirectionChanged {
      get { return evt49DirectionChanged_; }
    }
    
    public const int Evt50SmsIntervalReachedFieldNumber = 50;
    private bool hasEvt50SmsIntervalReached;
    private bool evt50SmsIntervalReached_;
    public bool HasEvt50SmsIntervalReached {
      get { return hasEvt50SmsIntervalReached; }
    }
    public bool Evt50SmsIntervalReached {
      get { return evt50SmsIntervalReached_; }
    }
    
    public const int Evt52AntiTheftBackToNormalFieldNumber = 52;
    private bool hasEvt52AntiTheftBackToNormal;
    private bool evt52AntiTheftBackToNormal_;
    public bool HasEvt52AntiTheftBackToNormal {
      get { return hasEvt52AntiTheftBackToNormal; }
    }
    public bool Evt52AntiTheftBackToNormal {
      get { return evt52AntiTheftBackToNormal_; }
    }
    
    public const int Evt53GsmJammingStartFieldNumber = 53;
    private bool hasEvt53GsmJammingStart;
    private bool evt53GsmJammingStart_;
    public bool HasEvt53GsmJammingStart {
      get { return hasEvt53GsmJammingStart; }
    }
    public bool Evt53GsmJammingStart {
      get { return evt53GsmJammingStart_; }
    }
    
    public const int Evt54GsmJammingStopFieldNumber = 54;
    private bool hasEvt54GsmJammingStop;
    private bool evt54GsmJammingStop_;
    public bool HasEvt54GsmJammingStop {
      get { return hasEvt54GsmJammingStop; }
    }
    public bool Evt54GsmJammingStop {
      get { return evt54GsmJammingStop_; }
    }
    
    public const int Evt55ExcessiveRpmFieldNumber = 55;
    private bool hasEvt55ExcessiveRpm;
    private bool evt55ExcessiveRpm_;
    public bool HasEvt55ExcessiveRpm {
      get { return hasEvt55ExcessiveRpm; }
    }
    public bool Evt55ExcessiveRpm {
      get { return evt55ExcessiveRpm_; }
    }
    
    public const int Evt56ExcessiveRpmOnNeutralFieldNumber = 56;
    private bool hasEvt56ExcessiveRpmOnNeutral;
    private bool evt56ExcessiveRpmOnNeutral_;
    public bool HasEvt56ExcessiveRpmOnNeutral {
      get { return hasEvt56ExcessiveRpmOnNeutral; }
    }
    public bool Evt56ExcessiveRpmOnNeutral {
      get { return evt56ExcessiveRpmOnNeutral_; }
    }
    
    public const int Evt57SpeedingOnNeutralFieldNumber = 57;
    private bool hasEvt57SpeedingOnNeutral;
    private bool evt57SpeedingOnNeutral_;
    public bool HasEvt57SpeedingOnNeutral {
      get { return hasEvt57SpeedingOnNeutral; }
    }
    public bool Evt57SpeedingOnNeutral {
      get { return evt57SpeedingOnNeutral_; }
    }
    
    public const int Evt58GpsFailureFieldNumber = 58;
    private bool hasEvt58GpsFailure;
    private bool evt58GpsFailure_;
    public bool HasEvt58GpsFailure {
      get { return hasEvt58GpsFailure; }
    }
    public bool Evt58GpsFailure {
      get { return evt58GpsFailure_; }
    }
    
    public const int Evt59DistanceAttachedFieldNumber = 59;
    private bool hasEvt59DistanceAttached;
    private bool evt59DistanceAttached_;
    public bool HasEvt59DistanceAttached {
      get { return hasEvt59DistanceAttached; }
    }
    public bool Evt59DistanceAttached {
      get { return evt59DistanceAttached_; }
    }
    
    public const int Evt60PowerFailGpsFailFieldNumber = 60;
    private bool hasEvt60PowerFailGpsFail;
    private bool evt60PowerFailGpsFail_;
    public bool HasEvt60PowerFailGpsFail {
      get { return hasEvt60PowerFailGpsFail; }
    }
    public bool Evt60PowerFailGpsFail {
      get { return evt60PowerFailGpsFail_; }
    }
    
    public const int Evt61AgpsRequestFieldNumber = 61;
    private bool hasEvt61AgpsRequest;
    private bool evt61AgpsRequest_;
    public bool HasEvt61AgpsRequest {
      get { return hasEvt61AgpsRequest; }
    }
    public bool Evt61AgpsRequest {
      get { return evt61AgpsRequest_; }
    }
    
    public const int Evt62TagAccessoriesStatusChangedFieldNumber = 62;
    private bool hasEvt62TagAccessoriesStatusChanged;
    private bool evt62TagAccessoriesStatusChanged_;
    public bool HasEvt62TagAccessoriesStatusChanged {
      get { return hasEvt62TagAccessoriesStatusChanged; }
    }
    public bool Evt62TagAccessoriesStatusChanged {
      get { return evt62TagAccessoriesStatusChanged_; }
    }
    
    public const int Evt63TagAccessoriesBatteryStatusChangedFieldNumber = 63;
    private bool hasEvt63TagAccessoriesBatteryStatusChanged;
    private bool evt63TagAccessoriesBatteryStatusChanged_;
    public bool HasEvt63TagAccessoriesBatteryStatusChanged {
      get { return hasEvt63TagAccessoriesBatteryStatusChanged; }
    }
    public bool Evt63TagAccessoriesBatteryStatusChanged {
      get { return evt63TagAccessoriesBatteryStatusChanged_; }
    }
    
    public const int Evt64LinkBrokenFieldNumber = 64;
    private bool hasEvt64LinkBroken;
    private bool evt64LinkBroken_;
    public bool HasEvt64LinkBroken {
      get { return hasEvt64LinkBroken; }
    }
    public bool Evt64LinkBroken {
      get { return evt64LinkBroken_; }
    }
    
    public const int Evt65ExpandInputChangedFieldNumber = 65;
    private bool hasEvt65ExpandInputChanged;
    private bool evt65ExpandInputChanged_;
    public bool HasEvt65ExpandInputChanged {
      get { return hasEvt65ExpandInputChanged; }
    }
    public bool Evt65ExpandInputChanged {
      get { return evt65ExpandInputChanged_; }
    }
    
    public const int Evt66TagAccessoriesStatusChangedBackFieldNumber = 66;
    private bool hasEvt66TagAccessoriesStatusChangedBack;
    private bool evt66TagAccessoriesStatusChangedBack_;
    public bool HasEvt66TagAccessoriesStatusChangedBack {
      get { return hasEvt66TagAccessoriesStatusChangedBack; }
    }
    public bool Evt66TagAccessoriesStatusChangedBack {
      get { return evt66TagAccessoriesStatusChangedBack_; }
    }
    
    public const int Evt67OnlyHave30PowerInBatteryFieldNumber = 67;
    private bool hasEvt67OnlyHave30PowerInBattery;
    private bool evt67OnlyHave30PowerInBattery_;
    public bool HasEvt67OnlyHave30PowerInBattery {
      get { return hasEvt67OnlyHave30PowerInBattery; }
    }
    public bool Evt67OnlyHave30PowerInBattery {
      get { return evt67OnlyHave30PowerInBattery_; }
    }
    
    public const int Evt68OnlyHave20PowerInBatteryFieldNumber = 68;
    private bool hasEvt68OnlyHave20PowerInBattery;
    private bool evt68OnlyHave20PowerInBattery_;
    public bool HasEvt68OnlyHave20PowerInBattery {
      get { return hasEvt68OnlyHave20PowerInBattery; }
    }
    public bool Evt68OnlyHave20PowerInBattery {
      get { return evt68OnlyHave20PowerInBattery_; }
    }
    
    public const int Evt69KeepStoppedWithIgnitionOnStatusFieldNumber = 69;
    private bool hasEvt69KeepStoppedWithIgnitionOnStatus;
    private bool evt69KeepStoppedWithIgnitionOnStatus_;
    public bool HasEvt69KeepStoppedWithIgnitionOnStatus {
      get { return hasEvt69KeepStoppedWithIgnitionOnStatus; }
    }
    public bool Evt69KeepStoppedWithIgnitionOnStatus {
      get { return evt69KeepStoppedWithIgnitionOnStatus_; }
    }
    
    public const int Evt70ImproperMovingFieldNumber = 70;
    private bool hasEvt70ImproperMoving;
    private bool evt70ImproperMoving_;
    public bool HasEvt70ImproperMoving {
      get { return hasEvt70ImproperMoving; }
    }
    public bool Evt70ImproperMoving {
      get { return evt70ImproperMoving_; }
    }
    
    public const int Evt71CameraBlindFieldNumber = 71;
    private bool hasEvt71CameraBlind;
    private bool evt71CameraBlind_;
    public bool HasEvt71CameraBlind {
      get { return hasEvt71CameraBlind; }
    }
    public bool Evt71CameraBlind {
      get { return evt71CameraBlind_; }
    }
    
    public const int Evt72BlindRecoverFieldNumber = 72;
    private bool hasEvt72BlindRecover;
    private bool evt72BlindRecover_;
    public bool HasEvt72BlindRecover {
      get { return hasEvt72BlindRecover; }
    }
    public bool Evt72BlindRecover {
      get { return evt72BlindRecover_; }
    }
    
    public const int Evt73VideoLostFieldNumber = 73;
    private bool hasEvt73VideoLost;
    private bool evt73VideoLost_;
    public bool HasEvt73VideoLost {
      get { return hasEvt73VideoLost; }
    }
    public bool Evt73VideoLost {
      get { return evt73VideoLost_; }
    }
    
    public const int Evt74VideoOkFieldNumber = 74;
    private bool hasEvt74VideoOk;
    private bool evt74VideoOk_;
    public bool HasEvt74VideoOk {
      get { return hasEvt74VideoOk; }
    }
    public bool Evt74VideoOk {
      get { return evt74VideoOk_; }
    }
    
    public const int Evt75Rs232DataIncomingFieldNumber = 75;
    private bool hasEvt75Rs232DataIncoming;
    private bool evt75Rs232DataIncoming_;
    public bool HasEvt75Rs232DataIncoming {
      get { return hasEvt75Rs232DataIncoming; }
    }
    public bool Evt75Rs232DataIncoming {
      get { return evt75Rs232DataIncoming_; }
    }
    
    public const int Evt76CalibrateIgnitionVoltageFinishedFieldNumber = 76;
    private bool hasEvt76CalibrateIgnitionVoltageFinished;
    private bool evt76CalibrateIgnitionVoltageFinished_;
    public bool HasEvt76CalibrateIgnitionVoltageFinished {
      get { return hasEvt76CalibrateIgnitionVoltageFinished; }
    }
    public bool Evt76CalibrateIgnitionVoltageFinished {
      get { return evt76CalibrateIgnitionVoltageFinished_; }
    }
    
    public const int Evt77BeforeDeepSleepFieldNumber = 77;
    private bool hasEvt77BeforeDeepSleep;
    private bool evt77BeforeDeepSleep_;
    public bool HasEvt77BeforeDeepSleep {
      get { return hasEvt77BeforeDeepSleep; }
    }
    public bool Evt77BeforeDeepSleep {
      get { return evt77BeforeDeepSleep_; }
    }
    
    public const int Evt78ExceedMaxSpeedInRainingFieldNumber = 78;
    private bool hasEvt78ExceedMaxSpeedInRaining;
    private bool evt78ExceedMaxSpeedInRaining_;
    public bool HasEvt78ExceedMaxSpeedInRaining {
      get { return hasEvt78ExceedMaxSpeedInRaining; }
    }
    public bool Evt78ExceedMaxSpeedInRaining {
      get { return evt78ExceedMaxSpeedInRaining_; }
    }
    
    public const int Evt79ResumeSpeedAfterExceedInRainingFieldNumber = 79;
    private bool hasEvt79ResumeSpeedAfterExceedInRaining;
    private bool evt79ResumeSpeedAfterExceedInRaining_;
    public bool HasEvt79ResumeSpeedAfterExceedInRaining {
      get { return hasEvt79ResumeSpeedAfterExceedInRaining; }
    }
    public bool Evt79ResumeSpeedAfterExceedInRaining {
      get { return evt79ResumeSpeedAfterExceedInRaining_; }
    }
    
    public const int Evt80AccelerationExceedFieldNumber = 80;
    private bool hasEvt80AccelerationExceed;
    private bool evt80AccelerationExceed_;
    public bool HasEvt80AccelerationExceed {
      get { return hasEvt80AccelerationExceed; }
    }
    public bool Evt80AccelerationExceed {
      get { return evt80AccelerationExceed_; }
    }
    
    public const int Evt81AccelerationResumeAfterExceedFieldNumber = 81;
    private bool hasEvt81AccelerationResumeAfterExceed;
    private bool evt81AccelerationResumeAfterExceed_;
    public bool HasEvt81AccelerationResumeAfterExceed {
      get { return hasEvt81AccelerationResumeAfterExceed; }
    }
    public bool Evt81AccelerationResumeAfterExceed {
      get { return evt81AccelerationResumeAfterExceed_; }
    }
    
    public const int Evt82DecelerationExceedFieldNumber = 82;
    private bool hasEvt82DecelerationExceed;
    private bool evt82DecelerationExceed_;
    public bool HasEvt82DecelerationExceed {
      get { return hasEvt82DecelerationExceed; }
    }
    public bool Evt82DecelerationExceed {
      get { return evt82DecelerationExceed_; }
    }
    
    public const int Evt83DecelerationResumeAfterExceedFieldNumber = 83;
    private bool hasEvt83DecelerationResumeAfterExceed;
    private bool evt83DecelerationResumeAfterExceed_;
    public bool HasEvt83DecelerationResumeAfterExceed {
      get { return hasEvt83DecelerationResumeAfterExceed; }
    }
    public bool Evt83DecelerationResumeAfterExceed {
      get { return evt83DecelerationResumeAfterExceed_; }
    }
    
    public const int Evt84RfidDriverLoginFieldNumber = 84;
    private bool hasEvt84RfidDriverLogin;
    private bool evt84RfidDriverLogin_;
    public bool HasEvt84RfidDriverLogin {
      get { return hasEvt84RfidDriverLogin; }
    }
    public bool Evt84RfidDriverLogin {
      get { return evt84RfidDriverLogin_; }
    }
    
    public const int Evt85RfidDriverLogoutFieldNumber = 85;
    private bool hasEvt85RfidDriverLogout;
    private bool evt85RfidDriverLogout_;
    public bool HasEvt85RfidDriverLogout {
      get { return hasEvt85RfidDriverLogout; }
    }
    public bool Evt85RfidDriverLogout {
      get { return evt85RfidDriverLogout_; }
    }
    
    public const int Evt86RfidPassengerLoginFieldNumber = 86;
    private bool hasEvt86RfidPassengerLogin;
    private bool evt86RfidPassengerLogin_;
    public bool HasEvt86RfidPassengerLogin {
      get { return hasEvt86RfidPassengerLogin; }
    }
    public bool Evt86RfidPassengerLogin {
      get { return evt86RfidPassengerLogin_; }
    }
    
    public const int Evt87GenericExceedMaxSpeedFieldNumber = 87;
    private bool hasEvt87GenericExceedMaxSpeed;
    private bool evt87GenericExceedMaxSpeed_;
    public bool HasEvt87GenericExceedMaxSpeed {
      get { return hasEvt87GenericExceedMaxSpeed; }
    }
    public bool Evt87GenericExceedMaxSpeed {
      get { return evt87GenericExceedMaxSpeed_; }
    }
    
    public const int Evt88GenericResumeSpeedAfterExceedFieldNumber = 88;
    private bool hasEvt88GenericResumeSpeedAfterExceed;
    private bool evt88GenericResumeSpeedAfterExceed_;
    public bool HasEvt88GenericResumeSpeedAfterExceed {
      get { return hasEvt88GenericResumeSpeedAfterExceed; }
    }
    public bool Evt88GenericResumeSpeedAfterExceed {
      get { return evt88GenericResumeSpeedAfterExceed_; }
    }
    
    public const int Evt89FailTryDevicePasswordMoreThan3TimesFieldNumber = 89;
    private bool hasEvt89FailTryDevicePasswordMoreThan3Times;
    private bool evt89FailTryDevicePasswordMoreThan3Times_;
    public bool HasEvt89FailTryDevicePasswordMoreThan3Times {
      get { return hasEvt89FailTryDevicePasswordMoreThan3Times; }
    }
    public bool Evt89FailTryDevicePasswordMoreThan3Times {
      get { return evt89FailTryDevicePasswordMoreThan3Times_; }
    }
    
    public const int Evt90ReceiveEngineSealActivateCommandFieldNumber = 90;
    private bool hasEvt90ReceiveEngineSealActivateCommand;
    private bool evt90ReceiveEngineSealActivateCommand_;
    public bool HasEvt90ReceiveEngineSealActivateCommand {
      get { return hasEvt90ReceiveEngineSealActivateCommand; }
    }
    public bool Evt90ReceiveEngineSealActivateCommand {
      get { return evt90ReceiveEngineSealActivateCommand_; }
    }
    
    public const int Evt91EngineSealActivatedFieldNumber = 91;
    private bool hasEvt91EngineSealActivated;
    private bool evt91EngineSealActivated_;
    public bool HasEvt91EngineSealActivated {
      get { return hasEvt91EngineSealActivated; }
    }
    public bool Evt91EngineSealActivated {
      get { return evt91EngineSealActivated_; }
    }
    
    public const int Evt92EngineSealDeactivatedFieldNumber = 92;
    private bool hasEvt92EngineSealDeactivated;
    private bool evt92EngineSealDeactivated_;
    public bool HasEvt92EngineSealDeactivated {
      get { return hasEvt92EngineSealDeactivated; }
    }
    public bool Evt92EngineSealDeactivated {
      get { return evt92EngineSealDeactivated_; }
    }
    
    public const int Evt93EngineSealActivatedByRelayFieldNumber = 93;
    private bool hasEvt93EngineSealActivatedByRelay;
    private bool evt93EngineSealActivatedByRelay_;
    public bool HasEvt93EngineSealActivatedByRelay {
      get { return hasEvt93EngineSealActivatedByRelay; }
    }
    public bool Evt93EngineSealActivatedByRelay {
      get { return evt93EngineSealActivatedByRelay_; }
    }
    
    public const int Evt94EngineSealDeactivatedRelayFieldNumber = 94;
    private bool hasEvt94EngineSealDeactivatedRelay;
    private bool evt94EngineSealDeactivatedRelay_;
    public bool HasEvt94EngineSealDeactivatedRelay {
      get { return hasEvt94EngineSealDeactivatedRelay; }
    }
    public bool Evt94EngineSealDeactivatedRelay {
      get { return evt94EngineSealDeactivatedRelay_; }
    }
    
    public const int Evt95EngineSealActivatedByInput1FieldNumber = 95;
    private bool hasEvt95EngineSealActivatedByInput1;
    private bool evt95EngineSealActivatedByInput1_;
    public bool HasEvt95EngineSealActivatedByInput1 {
      get { return hasEvt95EngineSealActivatedByInput1; }
    }
    public bool Evt95EngineSealActivatedByInput1 {
      get { return evt95EngineSealActivatedByInput1_; }
    }
    
    public const int Evt96EngineSealDeactivatedByInput1FieldNumber = 96;
    private bool hasEvt96EngineSealDeactivatedByInput1;
    private bool evt96EngineSealDeactivatedByInput1_;
    public bool HasEvt96EngineSealDeactivatedByInput1 {
      get { return hasEvt96EngineSealDeactivatedByInput1; }
    }
    public bool Evt96EngineSealDeactivatedByInput1 {
      get { return evt96EngineSealDeactivatedByInput1_; }
    }
    
    public const int Evt97NetworkScanResponseFieldNumber = 97;
    private bool hasEvt97NetworkScanResponse;
    private bool evt97NetworkScanResponse_;
    public bool HasEvt97NetworkScanResponse {
      get { return hasEvt97NetworkScanResponse; }
    }
    public bool Evt97NetworkScanResponse {
      get { return evt97NetworkScanResponse_; }
    }
    
    public const int Evt98SpeedHistogramFieldNumber = 98;
    private bool hasEvt98SpeedHistogram;
    private bool evt98SpeedHistogram_;
    public bool HasEvt98SpeedHistogram {
      get { return hasEvt98SpeedHistogram; }
    }
    public bool Evt98SpeedHistogram {
      get { return evt98SpeedHistogram_; }
    }
    
    public const int Evt99TripSummarizationEventFieldNumber = 99;
    private bool hasEvt99TripSummarizationEvent;
    private bool evt99TripSummarizationEvent_;
    public bool HasEvt99TripSummarizationEvent {
      get { return hasEvt99TripSummarizationEvent; }
    }
    public bool Evt99TripSummarizationEvent {
      get { return evt99TripSummarizationEvent_; }
    }
    
    public const int Evt100TelemetryEventsFieldNumber = 100;
    private bool hasEvt100TelemetryEvents;
    private bool evt100TelemetryEvents_;
    public bool HasEvt100TelemetryEvents {
      get { return hasEvt100TelemetryEvents; }
    }
    public bool Evt100TelemetryEvents {
      get { return evt100TelemetryEvents_; }
    }
    
    public const int Evt101GsensorHistoricEventFieldNumber = 101;
    private bool hasEvt101GsensorHistoricEvent;
    private bool evt101GsensorHistoricEvent_;
    public bool HasEvt101GsensorHistoricEvent {
      get { return hasEvt101GsensorHistoricEvent; }
    }
    public bool Evt101GsensorHistoricEvent {
      get { return evt101GsensorHistoricEvent_; }
    }
    
    public const int Evt102RouteReconstructionEventFieldNumber = 102;
    private bool hasEvt102RouteReconstructionEvent;
    private bool evt102RouteReconstructionEvent_;
    public bool HasEvt102RouteReconstructionEvent {
      get { return hasEvt102RouteReconstructionEvent; }
    }
    public bool Evt102RouteReconstructionEvent {
      get { return evt102RouteReconstructionEvent_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mxt1XxUDynamicSetupEventFieldNames;
      if (hasEvt2GprsAttached) {
        output.WriteBool(2, field_names[21], Evt2GprsAttached);
      }
      if (hasEvt8GpsValidAfterTxInterval) {
        output.WriteBool(8, field_names[79], Evt8GpsValidAfterTxInterval);
      }
      if (hasEvt9IgnitionOn) {
        output.WriteBool(9, field_names[90], Evt9IgnitionOn);
      }
      if (hasEvt10IgnitionOff) {
        output.WriteBool(10, field_names[3], Evt10IgnitionOff);
      }
      if (hasEvt11PanicActivated) {
        output.WriteBool(11, field_names[4], Evt11PanicActivated);
      }
      if (hasEvt12PanicDeactivated) {
        output.WriteBool(12, field_names[5], Evt12PanicDeactivated);
      }
      if (hasEvt13Input1Activated) {
        output.WriteBool(13, field_names[6], Evt13Input1Activated);
      }
      if (hasEvt14Input1Deactivated) {
        output.WriteBool(14, field_names[7], Evt14Input1Deactivated);
      }
      if (hasEvt15Input2Activated) {
        output.WriteBool(15, field_names[8], Evt15Input2Activated);
      }
      if (hasEvt16Input2Deactivated) {
        output.WriteBool(16, field_names[9], Evt16Input2Deactivated);
      }
      if (hasEvt17Input3Activated) {
        output.WriteBool(17, field_names[10], Evt17Input3Activated);
      }
      if (hasEvt18Input3Deactivated) {
        output.WriteBool(18, field_names[11], Evt18Input3Deactivated);
      }
      if (hasEvt19Input4Activated) {
        output.WriteBool(19, field_names[12], Evt19Input4Activated);
      }
      if (hasEvt20Input4Deactivated) {
        output.WriteBool(20, field_names[13], Evt20Input4Deactivated);
      }
      if (hasEvt21MovingDetect) {
        output.WriteBool(21, field_names[14], Evt21MovingDetect);
      }
      if (hasEvt22StoppedDetect) {
        output.WriteBool(22, field_names[15], Evt22StoppedDetect);
      }
      if (hasEvt23AntiTheftViolated) {
        output.WriteBool(23, field_names[16], Evt23AntiTheftViolated);
      }
      if (hasEvt25ExternalPowerFail) {
        output.WriteBool(25, field_names[17], Evt25ExternalPowerFail);
      }
      if (hasEvt26ExternalPowerOk) {
        output.WriteBool(26, field_names[18], Evt26ExternalPowerOk);
      }
      if (hasEvt27GpsAntennaFail) {
        output.WriteBool(27, field_names[19], Evt27GpsAntennaFail);
      }
      if (hasEvt28GpsAntennaOk) {
        output.WriteBool(28, field_names[20], Evt28GpsAntennaOk);
      }
      if (hasEvt30Sleep) {
        output.WriteBool(30, field_names[22], Evt30Sleep);
      }
      if (hasEvt31Output1Activated) {
        output.WriteBool(31, field_names[23], Evt31Output1Activated);
      }
      if (hasEvt32Output1Deactivated) {
        output.WriteBool(32, field_names[24], Evt32Output1Deactivated);
      }
      if (hasEvt33Output2Activated) {
        output.WriteBool(33, field_names[25], Evt33Output2Activated);
      }
      if (hasEvt34Output2Deactivated) {
        output.WriteBool(34, field_names[26], Evt34Output2Deactivated);
      }
      if (hasEvt35Output3Activated) {
        output.WriteBool(35, field_names[27], Evt35Output3Activated);
      }
      if (hasEvt36Output3Deactivated) {
        output.WriteBool(36, field_names[28], Evt36Output3Deactivated);
      }
      if (hasEvt37MaxSpeedExceeded) {
        output.WriteBool(37, field_names[29], Evt37MaxSpeedExceeded);
      }
      if (hasEvt38MaxSpeedOk) {
        output.WriteBool(38, field_names[30], Evt38MaxSpeedOk);
      }
      if (hasEvt39EnteringWaypoint) {
        output.WriteBool(39, field_names[31], Evt39EnteringWaypoint);
      }
      if (hasEvt40LeavingWaypoint) {
        output.WriteBool(40, field_names[32], Evt40LeavingWaypoint);
      }
      if (hasEvt41BatteryIsFailed) {
        output.WriteBool(41, field_names[33], Evt41BatteryIsFailed);
      }
      if (hasEvt42BatteryIsOk) {
        output.WriteBool(42, field_names[34], Evt42BatteryIsOk);
      }
      if (hasEvt43DeliveryFail) {
        output.WriteBool(43, field_names[35], Evt43DeliveryFail);
      }
      if (hasEvt46GsensorRollingThreshold) {
        output.WriteBool(46, field_names[36], Evt46GsensorRollingThreshold);
      }
      if (hasEvt47GsensorSideThreshold) {
        output.WriteBool(47, field_names[37], Evt47GsensorSideThreshold);
      }
      if (hasEvt48GsensorShockThreshold) {
        output.WriteBool(48, field_names[38], Evt48GsensorShockThreshold);
      }
      if (hasEvt49DirectionChanged) {
        output.WriteBool(49, field_names[39], Evt49DirectionChanged);
      }
      if (hasEvt50SmsIntervalReached) {
        output.WriteBool(50, field_names[40], Evt50SmsIntervalReached);
      }
      if (hasEvt52AntiTheftBackToNormal) {
        output.WriteBool(52, field_names[41], Evt52AntiTheftBackToNormal);
      }
      if (hasEvt53GsmJammingStart) {
        output.WriteBool(53, field_names[42], Evt53GsmJammingStart);
      }
      if (hasEvt54GsmJammingStop) {
        output.WriteBool(54, field_names[43], Evt54GsmJammingStop);
      }
      if (hasEvt55ExcessiveRpm) {
        output.WriteBool(55, field_names[44], Evt55ExcessiveRpm);
      }
      if (hasEvt56ExcessiveRpmOnNeutral) {
        output.WriteBool(56, field_names[45], Evt56ExcessiveRpmOnNeutral);
      }
      if (hasEvt57SpeedingOnNeutral) {
        output.WriteBool(57, field_names[46], Evt57SpeedingOnNeutral);
      }
      if (hasEvt58GpsFailure) {
        output.WriteBool(58, field_names[47], Evt58GpsFailure);
      }
      if (hasEvt59DistanceAttached) {
        output.WriteBool(59, field_names[48], Evt59DistanceAttached);
      }
      if (hasEvt60PowerFailGpsFail) {
        output.WriteBool(60, field_names[49], Evt60PowerFailGpsFail);
      }
      if (hasEvt61AgpsRequest) {
        output.WriteBool(61, field_names[50], Evt61AgpsRequest);
      }
      if (hasEvt62TagAccessoriesStatusChanged) {
        output.WriteBool(62, field_names[51], Evt62TagAccessoriesStatusChanged);
      }
      if (hasEvt63TagAccessoriesBatteryStatusChanged) {
        output.WriteBool(63, field_names[52], Evt63TagAccessoriesBatteryStatusChanged);
      }
      if (hasEvt64LinkBroken) {
        output.WriteBool(64, field_names[53], Evt64LinkBroken);
      }
      if (hasEvt65ExpandInputChanged) {
        output.WriteBool(65, field_names[54], Evt65ExpandInputChanged);
      }
      if (hasEvt66TagAccessoriesStatusChangedBack) {
        output.WriteBool(66, field_names[55], Evt66TagAccessoriesStatusChangedBack);
      }
      if (hasEvt67OnlyHave30PowerInBattery) {
        output.WriteBool(67, field_names[56], Evt67OnlyHave30PowerInBattery);
      }
      if (hasEvt68OnlyHave20PowerInBattery) {
        output.WriteBool(68, field_names[57], Evt68OnlyHave20PowerInBattery);
      }
      if (hasEvt69KeepStoppedWithIgnitionOnStatus) {
        output.WriteBool(69, field_names[58], Evt69KeepStoppedWithIgnitionOnStatus);
      }
      if (hasEvt70ImproperMoving) {
        output.WriteBool(70, field_names[59], Evt70ImproperMoving);
      }
      if (hasEvt71CameraBlind) {
        output.WriteBool(71, field_names[60], Evt71CameraBlind);
      }
      if (hasEvt72BlindRecover) {
        output.WriteBool(72, field_names[61], Evt72BlindRecover);
      }
      if (hasEvt73VideoLost) {
        output.WriteBool(73, field_names[62], Evt73VideoLost);
      }
      if (hasEvt74VideoOk) {
        output.WriteBool(74, field_names[63], Evt74VideoOk);
      }
      if (hasEvt75Rs232DataIncoming) {
        output.WriteBool(75, field_names[64], Evt75Rs232DataIncoming);
      }
      if (hasEvt76CalibrateIgnitionVoltageFinished) {
        output.WriteBool(76, field_names[65], Evt76CalibrateIgnitionVoltageFinished);
      }
      if (hasEvt77BeforeDeepSleep) {
        output.WriteBool(77, field_names[66], Evt77BeforeDeepSleep);
      }
      if (hasEvt78ExceedMaxSpeedInRaining) {
        output.WriteBool(78, field_names[67], Evt78ExceedMaxSpeedInRaining);
      }
      if (hasEvt79ResumeSpeedAfterExceedInRaining) {
        output.WriteBool(79, field_names[68], Evt79ResumeSpeedAfterExceedInRaining);
      }
      if (hasEvt80AccelerationExceed) {
        output.WriteBool(80, field_names[69], Evt80AccelerationExceed);
      }
      if (hasEvt81AccelerationResumeAfterExceed) {
        output.WriteBool(81, field_names[70], Evt81AccelerationResumeAfterExceed);
      }
      if (hasEvt82DecelerationExceed) {
        output.WriteBool(82, field_names[71], Evt82DecelerationExceed);
      }
      if (hasEvt83DecelerationResumeAfterExceed) {
        output.WriteBool(83, field_names[72], Evt83DecelerationResumeAfterExceed);
      }
      if (hasEvt84RfidDriverLogin) {
        output.WriteBool(84, field_names[73], Evt84RfidDriverLogin);
      }
      if (hasEvt85RfidDriverLogout) {
        output.WriteBool(85, field_names[74], Evt85RfidDriverLogout);
      }
      if (hasEvt86RfidPassengerLogin) {
        output.WriteBool(86, field_names[75], Evt86RfidPassengerLogin);
      }
      if (hasEvt87GenericExceedMaxSpeed) {
        output.WriteBool(87, field_names[76], Evt87GenericExceedMaxSpeed);
      }
      if (hasEvt88GenericResumeSpeedAfterExceed) {
        output.WriteBool(88, field_names[77], Evt88GenericResumeSpeedAfterExceed);
      }
      if (hasEvt89FailTryDevicePasswordMoreThan3Times) {
        output.WriteBool(89, field_names[78], Evt89FailTryDevicePasswordMoreThan3Times);
      }
      if (hasEvt90ReceiveEngineSealActivateCommand) {
        output.WriteBool(90, field_names[80], Evt90ReceiveEngineSealActivateCommand);
      }
      if (hasEvt91EngineSealActivated) {
        output.WriteBool(91, field_names[81], Evt91EngineSealActivated);
      }
      if (hasEvt92EngineSealDeactivated) {
        output.WriteBool(92, field_names[82], Evt92EngineSealDeactivated);
      }
      if (hasEvt93EngineSealActivatedByRelay) {
        output.WriteBool(93, field_names[83], Evt93EngineSealActivatedByRelay);
      }
      if (hasEvt94EngineSealDeactivatedRelay) {
        output.WriteBool(94, field_names[84], Evt94EngineSealDeactivatedRelay);
      }
      if (hasEvt95EngineSealActivatedByInput1) {
        output.WriteBool(95, field_names[85], Evt95EngineSealActivatedByInput1);
      }
      if (hasEvt96EngineSealDeactivatedByInput1) {
        output.WriteBool(96, field_names[86], Evt96EngineSealDeactivatedByInput1);
      }
      if (hasEvt97NetworkScanResponse) {
        output.WriteBool(97, field_names[87], Evt97NetworkScanResponse);
      }
      if (hasEvt98SpeedHistogram) {
        output.WriteBool(98, field_names[88], Evt98SpeedHistogram);
      }
      if (hasEvt99TripSummarizationEvent) {
        output.WriteBool(99, field_names[89], Evt99TripSummarizationEvent);
      }
      if (hasEvt100TelemetryEvents) {
        output.WriteBool(100, field_names[0], Evt100TelemetryEvents);
      }
      if (hasEvt101GsensorHistoricEvent) {
        output.WriteBool(101, field_names[1], Evt101GsensorHistoricEvent);
      }
      if (hasEvt102RouteReconstructionEvent) {
        output.WriteBool(102, field_names[2], Evt102RouteReconstructionEvent);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasEvt2GprsAttached) {
        size += pb::CodedOutputStream.ComputeBoolSize(2, Evt2GprsAttached);
      }
      if (hasEvt8GpsValidAfterTxInterval) {
        size += pb::CodedOutputStream.ComputeBoolSize(8, Evt8GpsValidAfterTxInterval);
      }
      if (hasEvt9IgnitionOn) {
        size += pb::CodedOutputStream.ComputeBoolSize(9, Evt9IgnitionOn);
      }
      if (hasEvt10IgnitionOff) {
        size += pb::CodedOutputStream.ComputeBoolSize(10, Evt10IgnitionOff);
      }
      if (hasEvt11PanicActivated) {
        size += pb::CodedOutputStream.ComputeBoolSize(11, Evt11PanicActivated);
      }
      if (hasEvt12PanicDeactivated) {
        size += pb::CodedOutputStream.ComputeBoolSize(12, Evt12PanicDeactivated);
      }
      if (hasEvt13Input1Activated) {
        size += pb::CodedOutputStream.ComputeBoolSize(13, Evt13Input1Activated);
      }
      if (hasEvt14Input1Deactivated) {
        size += pb::CodedOutputStream.ComputeBoolSize(14, Evt14Input1Deactivated);
      }
      if (hasEvt15Input2Activated) {
        size += pb::CodedOutputStream.ComputeBoolSize(15, Evt15Input2Activated);
      }
      if (hasEvt16Input2Deactivated) {
        size += pb::CodedOutputStream.ComputeBoolSize(16, Evt16Input2Deactivated);
      }
      if (hasEvt17Input3Activated) {
        size += pb::CodedOutputStream.ComputeBoolSize(17, Evt17Input3Activated);
      }
      if (hasEvt18Input3Deactivated) {
        size += pb::CodedOutputStream.ComputeBoolSize(18, Evt18Input3Deactivated);
      }
      if (hasEvt19Input4Activated) {
        size += pb::CodedOutputStream.ComputeBoolSize(19, Evt19Input4Activated);
      }
      if (hasEvt20Input4Deactivated) {
        size += pb::CodedOutputStream.ComputeBoolSize(20, Evt20Input4Deactivated);
      }
      if (hasEvt21MovingDetect) {
        size += pb::CodedOutputStream.ComputeBoolSize(21, Evt21MovingDetect);
      }
      if (hasEvt22StoppedDetect) {
        size += pb::CodedOutputStream.ComputeBoolSize(22, Evt22StoppedDetect);
      }
      if (hasEvt23AntiTheftViolated) {
        size += pb::CodedOutputStream.ComputeBoolSize(23, Evt23AntiTheftViolated);
      }
      if (hasEvt25ExternalPowerFail) {
        size += pb::CodedOutputStream.ComputeBoolSize(25, Evt25ExternalPowerFail);
      }
      if (hasEvt26ExternalPowerOk) {
        size += pb::CodedOutputStream.ComputeBoolSize(26, Evt26ExternalPowerOk);
      }
      if (hasEvt27GpsAntennaFail) {
        size += pb::CodedOutputStream.ComputeBoolSize(27, Evt27GpsAntennaFail);
      }
      if (hasEvt28GpsAntennaOk) {
        size += pb::CodedOutputStream.ComputeBoolSize(28, Evt28GpsAntennaOk);
      }
      if (hasEvt30Sleep) {
        size += pb::CodedOutputStream.ComputeBoolSize(30, Evt30Sleep);
      }
      if (hasEvt31Output1Activated) {
        size += pb::CodedOutputStream.ComputeBoolSize(31, Evt31Output1Activated);
      }
      if (hasEvt32Output1Deactivated) {
        size += pb::CodedOutputStream.ComputeBoolSize(32, Evt32Output1Deactivated);
      }
      if (hasEvt33Output2Activated) {
        size += pb::CodedOutputStream.ComputeBoolSize(33, Evt33Output2Activated);
      }
      if (hasEvt34Output2Deactivated) {
        size += pb::CodedOutputStream.ComputeBoolSize(34, Evt34Output2Deactivated);
      }
      if (hasEvt35Output3Activated) {
        size += pb::CodedOutputStream.ComputeBoolSize(35, Evt35Output3Activated);
      }
      if (hasEvt36Output3Deactivated) {
        size += pb::CodedOutputStream.ComputeBoolSize(36, Evt36Output3Deactivated);
      }
      if (hasEvt37MaxSpeedExceeded) {
        size += pb::CodedOutputStream.ComputeBoolSize(37, Evt37MaxSpeedExceeded);
      }
      if (hasEvt38MaxSpeedOk) {
        size += pb::CodedOutputStream.ComputeBoolSize(38, Evt38MaxSpeedOk);
      }
      if (hasEvt39EnteringWaypoint) {
        size += pb::CodedOutputStream.ComputeBoolSize(39, Evt39EnteringWaypoint);
      }
      if (hasEvt40LeavingWaypoint) {
        size += pb::CodedOutputStream.ComputeBoolSize(40, Evt40LeavingWaypoint);
      }
      if (hasEvt41BatteryIsFailed) {
        size += pb::CodedOutputStream.ComputeBoolSize(41, Evt41BatteryIsFailed);
      }
      if (hasEvt42BatteryIsOk) {
        size += pb::CodedOutputStream.ComputeBoolSize(42, Evt42BatteryIsOk);
      }
      if (hasEvt43DeliveryFail) {
        size += pb::CodedOutputStream.ComputeBoolSize(43, Evt43DeliveryFail);
      }
      if (hasEvt46GsensorRollingThreshold) {
        size += pb::CodedOutputStream.ComputeBoolSize(46, Evt46GsensorRollingThreshold);
      }
      if (hasEvt47GsensorSideThreshold) {
        size += pb::CodedOutputStream.ComputeBoolSize(47, Evt47GsensorSideThreshold);
      }
      if (hasEvt48GsensorShockThreshold) {
        size += pb::CodedOutputStream.ComputeBoolSize(48, Evt48GsensorShockThreshold);
      }
      if (hasEvt49DirectionChanged) {
        size += pb::CodedOutputStream.ComputeBoolSize(49, Evt49DirectionChanged);
      }
      if (hasEvt50SmsIntervalReached) {
        size += pb::CodedOutputStream.ComputeBoolSize(50, Evt50SmsIntervalReached);
      }
      if (hasEvt52AntiTheftBackToNormal) {
        size += pb::CodedOutputStream.ComputeBoolSize(52, Evt52AntiTheftBackToNormal);
      }
      if (hasEvt53GsmJammingStart) {
        size += pb::CodedOutputStream.ComputeBoolSize(53, Evt53GsmJammingStart);
      }
      if (hasEvt54GsmJammingStop) {
        size += pb::CodedOutputStream.ComputeBoolSize(54, Evt54GsmJammingStop);
      }
      if (hasEvt55ExcessiveRpm) {
        size += pb::CodedOutputStream.ComputeBoolSize(55, Evt55ExcessiveRpm);
      }
      if (hasEvt56ExcessiveRpmOnNeutral) {
        size += pb::CodedOutputStream.ComputeBoolSize(56, Evt56ExcessiveRpmOnNeutral);
      }
      if (hasEvt57SpeedingOnNeutral) {
        size += pb::CodedOutputStream.ComputeBoolSize(57, Evt57SpeedingOnNeutral);
      }
      if (hasEvt58GpsFailure) {
        size += pb::CodedOutputStream.ComputeBoolSize(58, Evt58GpsFailure);
      }
      if (hasEvt59DistanceAttached) {
        size += pb::CodedOutputStream.ComputeBoolSize(59, Evt59DistanceAttached);
      }
      if (hasEvt60PowerFailGpsFail) {
        size += pb::CodedOutputStream.ComputeBoolSize(60, Evt60PowerFailGpsFail);
      }
      if (hasEvt61AgpsRequest) {
        size += pb::CodedOutputStream.ComputeBoolSize(61, Evt61AgpsRequest);
      }
      if (hasEvt62TagAccessoriesStatusChanged) {
        size += pb::CodedOutputStream.ComputeBoolSize(62, Evt62TagAccessoriesStatusChanged);
      }
      if (hasEvt63TagAccessoriesBatteryStatusChanged) {
        size += pb::CodedOutputStream.ComputeBoolSize(63, Evt63TagAccessoriesBatteryStatusChanged);
      }
      if (hasEvt64LinkBroken) {
        size += pb::CodedOutputStream.ComputeBoolSize(64, Evt64LinkBroken);
      }
      if (hasEvt65ExpandInputChanged) {
        size += pb::CodedOutputStream.ComputeBoolSize(65, Evt65ExpandInputChanged);
      }
      if (hasEvt66TagAccessoriesStatusChangedBack) {
        size += pb::CodedOutputStream.ComputeBoolSize(66, Evt66TagAccessoriesStatusChangedBack);
      }
      if (hasEvt67OnlyHave30PowerInBattery) {
        size += pb::CodedOutputStream.ComputeBoolSize(67, Evt67OnlyHave30PowerInBattery);
      }
      if (hasEvt68OnlyHave20PowerInBattery) {
        size += pb::CodedOutputStream.ComputeBoolSize(68, Evt68OnlyHave20PowerInBattery);
      }
      if (hasEvt69KeepStoppedWithIgnitionOnStatus) {
        size += pb::CodedOutputStream.ComputeBoolSize(69, Evt69KeepStoppedWithIgnitionOnStatus);
      }
      if (hasEvt70ImproperMoving) {
        size += pb::CodedOutputStream.ComputeBoolSize(70, Evt70ImproperMoving);
      }
      if (hasEvt71CameraBlind) {
        size += pb::CodedOutputStream.ComputeBoolSize(71, Evt71CameraBlind);
      }
      if (hasEvt72BlindRecover) {
        size += pb::CodedOutputStream.ComputeBoolSize(72, Evt72BlindRecover);
      }
      if (hasEvt73VideoLost) {
        size += pb::CodedOutputStream.ComputeBoolSize(73, Evt73VideoLost);
      }
      if (hasEvt74VideoOk) {
        size += pb::CodedOutputStream.ComputeBoolSize(74, Evt74VideoOk);
      }
      if (hasEvt75Rs232DataIncoming) {
        size += pb::CodedOutputStream.ComputeBoolSize(75, Evt75Rs232DataIncoming);
      }
      if (hasEvt76CalibrateIgnitionVoltageFinished) {
        size += pb::CodedOutputStream.ComputeBoolSize(76, Evt76CalibrateIgnitionVoltageFinished);
      }
      if (hasEvt77BeforeDeepSleep) {
        size += pb::CodedOutputStream.ComputeBoolSize(77, Evt77BeforeDeepSleep);
      }
      if (hasEvt78ExceedMaxSpeedInRaining) {
        size += pb::CodedOutputStream.ComputeBoolSize(78, Evt78ExceedMaxSpeedInRaining);
      }
      if (hasEvt79ResumeSpeedAfterExceedInRaining) {
        size += pb::CodedOutputStream.ComputeBoolSize(79, Evt79ResumeSpeedAfterExceedInRaining);
      }
      if (hasEvt80AccelerationExceed) {
        size += pb::CodedOutputStream.ComputeBoolSize(80, Evt80AccelerationExceed);
      }
      if (hasEvt81AccelerationResumeAfterExceed) {
        size += pb::CodedOutputStream.ComputeBoolSize(81, Evt81AccelerationResumeAfterExceed);
      }
      if (hasEvt82DecelerationExceed) {
        size += pb::CodedOutputStream.ComputeBoolSize(82, Evt82DecelerationExceed);
      }
      if (hasEvt83DecelerationResumeAfterExceed) {
        size += pb::CodedOutputStream.ComputeBoolSize(83, Evt83DecelerationResumeAfterExceed);
      }
      if (hasEvt84RfidDriverLogin) {
        size += pb::CodedOutputStream.ComputeBoolSize(84, Evt84RfidDriverLogin);
      }
      if (hasEvt85RfidDriverLogout) {
        size += pb::CodedOutputStream.ComputeBoolSize(85, Evt85RfidDriverLogout);
      }
      if (hasEvt86RfidPassengerLogin) {
        size += pb::CodedOutputStream.ComputeBoolSize(86, Evt86RfidPassengerLogin);
      }
      if (hasEvt87GenericExceedMaxSpeed) {
        size += pb::CodedOutputStream.ComputeBoolSize(87, Evt87GenericExceedMaxSpeed);
      }
      if (hasEvt88GenericResumeSpeedAfterExceed) {
        size += pb::CodedOutputStream.ComputeBoolSize(88, Evt88GenericResumeSpeedAfterExceed);
      }
      if (hasEvt89FailTryDevicePasswordMoreThan3Times) {
        size += pb::CodedOutputStream.ComputeBoolSize(89, Evt89FailTryDevicePasswordMoreThan3Times);
      }
      if (hasEvt90ReceiveEngineSealActivateCommand) {
        size += pb::CodedOutputStream.ComputeBoolSize(90, Evt90ReceiveEngineSealActivateCommand);
      }
      if (hasEvt91EngineSealActivated) {
        size += pb::CodedOutputStream.ComputeBoolSize(91, Evt91EngineSealActivated);
      }
      if (hasEvt92EngineSealDeactivated) {
        size += pb::CodedOutputStream.ComputeBoolSize(92, Evt92EngineSealDeactivated);
      }
      if (hasEvt93EngineSealActivatedByRelay) {
        size += pb::CodedOutputStream.ComputeBoolSize(93, Evt93EngineSealActivatedByRelay);
      }
      if (hasEvt94EngineSealDeactivatedRelay) {
        size += pb::CodedOutputStream.ComputeBoolSize(94, Evt94EngineSealDeactivatedRelay);
      }
      if (hasEvt95EngineSealActivatedByInput1) {
        size += pb::CodedOutputStream.ComputeBoolSize(95, Evt95EngineSealActivatedByInput1);
      }
      if (hasEvt96EngineSealDeactivatedByInput1) {
        size += pb::CodedOutputStream.ComputeBoolSize(96, Evt96EngineSealDeactivatedByInput1);
      }
      if (hasEvt97NetworkScanResponse) {
        size += pb::CodedOutputStream.ComputeBoolSize(97, Evt97NetworkScanResponse);
      }
      if (hasEvt98SpeedHistogram) {
        size += pb::CodedOutputStream.ComputeBoolSize(98, Evt98SpeedHistogram);
      }
      if (hasEvt99TripSummarizationEvent) {
        size += pb::CodedOutputStream.ComputeBoolSize(99, Evt99TripSummarizationEvent);
      }
      if (hasEvt100TelemetryEvents) {
        size += pb::CodedOutputStream.ComputeBoolSize(100, Evt100TelemetryEvents);
      }
      if (hasEvt101GsensorHistoricEvent) {
        size += pb::CodedOutputStream.ComputeBoolSize(101, Evt101GsensorHistoricEvent);
      }
      if (hasEvt102RouteReconstructionEvent) {
        size += pb::CodedOutputStream.ComputeBoolSize(102, Evt102RouteReconstructionEvent);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mxt1xx_u_dynamic_setup_event ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_event ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_event ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_event ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_event ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_event ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_event ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_event ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_event ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_event ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mxt1xx_u_dynamic_setup_event MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mxt1xx_u_dynamic_setup_event prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mxt1xx_u_dynamic_setup_event, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mxt1xx_u_dynamic_setup_event cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mxt1xx_u_dynamic_setup_event result;
      
      private mxt1xx_u_dynamic_setup_event PrepareBuilder() {
        if (resultIsReadOnly) {
          mxt1xx_u_dynamic_setup_event original = result;
          result = new mxt1xx_u_dynamic_setup_event();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mxt1xx_u_dynamic_setup_event MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_event.Descriptor; }
      }
      
      public override mxt1xx_u_dynamic_setup_event DefaultInstanceForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_event.DefaultInstance; }
      }
      
      public override mxt1xx_u_dynamic_setup_event BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mxt1xx_u_dynamic_setup_event) {
          return MergeFrom((mxt1xx_u_dynamic_setup_event) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mxt1xx_u_dynamic_setup_event other) {
        if (other == global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_event.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasEvt2GprsAttached) {
          Evt2GprsAttached = other.Evt2GprsAttached;
        }
        if (other.HasEvt8GpsValidAfterTxInterval) {
          Evt8GpsValidAfterTxInterval = other.Evt8GpsValidAfterTxInterval;
        }
        if (other.HasEvt9IgnitionOn) {
          Evt9IgnitionOn = other.Evt9IgnitionOn;
        }
        if (other.HasEvt10IgnitionOff) {
          Evt10IgnitionOff = other.Evt10IgnitionOff;
        }
        if (other.HasEvt11PanicActivated) {
          Evt11PanicActivated = other.Evt11PanicActivated;
        }
        if (other.HasEvt12PanicDeactivated) {
          Evt12PanicDeactivated = other.Evt12PanicDeactivated;
        }
        if (other.HasEvt13Input1Activated) {
          Evt13Input1Activated = other.Evt13Input1Activated;
        }
        if (other.HasEvt14Input1Deactivated) {
          Evt14Input1Deactivated = other.Evt14Input1Deactivated;
        }
        if (other.HasEvt15Input2Activated) {
          Evt15Input2Activated = other.Evt15Input2Activated;
        }
        if (other.HasEvt16Input2Deactivated) {
          Evt16Input2Deactivated = other.Evt16Input2Deactivated;
        }
        if (other.HasEvt17Input3Activated) {
          Evt17Input3Activated = other.Evt17Input3Activated;
        }
        if (other.HasEvt18Input3Deactivated) {
          Evt18Input3Deactivated = other.Evt18Input3Deactivated;
        }
        if (other.HasEvt19Input4Activated) {
          Evt19Input4Activated = other.Evt19Input4Activated;
        }
        if (other.HasEvt20Input4Deactivated) {
          Evt20Input4Deactivated = other.Evt20Input4Deactivated;
        }
        if (other.HasEvt21MovingDetect) {
          Evt21MovingDetect = other.Evt21MovingDetect;
        }
        if (other.HasEvt22StoppedDetect) {
          Evt22StoppedDetect = other.Evt22StoppedDetect;
        }
        if (other.HasEvt23AntiTheftViolated) {
          Evt23AntiTheftViolated = other.Evt23AntiTheftViolated;
        }
        if (other.HasEvt25ExternalPowerFail) {
          Evt25ExternalPowerFail = other.Evt25ExternalPowerFail;
        }
        if (other.HasEvt26ExternalPowerOk) {
          Evt26ExternalPowerOk = other.Evt26ExternalPowerOk;
        }
        if (other.HasEvt27GpsAntennaFail) {
          Evt27GpsAntennaFail = other.Evt27GpsAntennaFail;
        }
        if (other.HasEvt28GpsAntennaOk) {
          Evt28GpsAntennaOk = other.Evt28GpsAntennaOk;
        }
        if (other.HasEvt30Sleep) {
          Evt30Sleep = other.Evt30Sleep;
        }
        if (other.HasEvt31Output1Activated) {
          Evt31Output1Activated = other.Evt31Output1Activated;
        }
        if (other.HasEvt32Output1Deactivated) {
          Evt32Output1Deactivated = other.Evt32Output1Deactivated;
        }
        if (other.HasEvt33Output2Activated) {
          Evt33Output2Activated = other.Evt33Output2Activated;
        }
        if (other.HasEvt34Output2Deactivated) {
          Evt34Output2Deactivated = other.Evt34Output2Deactivated;
        }
        if (other.HasEvt35Output3Activated) {
          Evt35Output3Activated = other.Evt35Output3Activated;
        }
        if (other.HasEvt36Output3Deactivated) {
          Evt36Output3Deactivated = other.Evt36Output3Deactivated;
        }
        if (other.HasEvt37MaxSpeedExceeded) {
          Evt37MaxSpeedExceeded = other.Evt37MaxSpeedExceeded;
        }
        if (other.HasEvt38MaxSpeedOk) {
          Evt38MaxSpeedOk = other.Evt38MaxSpeedOk;
        }
        if (other.HasEvt39EnteringWaypoint) {
          Evt39EnteringWaypoint = other.Evt39EnteringWaypoint;
        }
        if (other.HasEvt40LeavingWaypoint) {
          Evt40LeavingWaypoint = other.Evt40LeavingWaypoint;
        }
        if (other.HasEvt41BatteryIsFailed) {
          Evt41BatteryIsFailed = other.Evt41BatteryIsFailed;
        }
        if (other.HasEvt42BatteryIsOk) {
          Evt42BatteryIsOk = other.Evt42BatteryIsOk;
        }
        if (other.HasEvt43DeliveryFail) {
          Evt43DeliveryFail = other.Evt43DeliveryFail;
        }
        if (other.HasEvt46GsensorRollingThreshold) {
          Evt46GsensorRollingThreshold = other.Evt46GsensorRollingThreshold;
        }
        if (other.HasEvt47GsensorSideThreshold) {
          Evt47GsensorSideThreshold = other.Evt47GsensorSideThreshold;
        }
        if (other.HasEvt48GsensorShockThreshold) {
          Evt48GsensorShockThreshold = other.Evt48GsensorShockThreshold;
        }
        if (other.HasEvt49DirectionChanged) {
          Evt49DirectionChanged = other.Evt49DirectionChanged;
        }
        if (other.HasEvt50SmsIntervalReached) {
          Evt50SmsIntervalReached = other.Evt50SmsIntervalReached;
        }
        if (other.HasEvt52AntiTheftBackToNormal) {
          Evt52AntiTheftBackToNormal = other.Evt52AntiTheftBackToNormal;
        }
        if (other.HasEvt53GsmJammingStart) {
          Evt53GsmJammingStart = other.Evt53GsmJammingStart;
        }
        if (other.HasEvt54GsmJammingStop) {
          Evt54GsmJammingStop = other.Evt54GsmJammingStop;
        }
        if (other.HasEvt55ExcessiveRpm) {
          Evt55ExcessiveRpm = other.Evt55ExcessiveRpm;
        }
        if (other.HasEvt56ExcessiveRpmOnNeutral) {
          Evt56ExcessiveRpmOnNeutral = other.Evt56ExcessiveRpmOnNeutral;
        }
        if (other.HasEvt57SpeedingOnNeutral) {
          Evt57SpeedingOnNeutral = other.Evt57SpeedingOnNeutral;
        }
        if (other.HasEvt58GpsFailure) {
          Evt58GpsFailure = other.Evt58GpsFailure;
        }
        if (other.HasEvt59DistanceAttached) {
          Evt59DistanceAttached = other.Evt59DistanceAttached;
        }
        if (other.HasEvt60PowerFailGpsFail) {
          Evt60PowerFailGpsFail = other.Evt60PowerFailGpsFail;
        }
        if (other.HasEvt61AgpsRequest) {
          Evt61AgpsRequest = other.Evt61AgpsRequest;
        }
        if (other.HasEvt62TagAccessoriesStatusChanged) {
          Evt62TagAccessoriesStatusChanged = other.Evt62TagAccessoriesStatusChanged;
        }
        if (other.HasEvt63TagAccessoriesBatteryStatusChanged) {
          Evt63TagAccessoriesBatteryStatusChanged = other.Evt63TagAccessoriesBatteryStatusChanged;
        }
        if (other.HasEvt64LinkBroken) {
          Evt64LinkBroken = other.Evt64LinkBroken;
        }
        if (other.HasEvt65ExpandInputChanged) {
          Evt65ExpandInputChanged = other.Evt65ExpandInputChanged;
        }
        if (other.HasEvt66TagAccessoriesStatusChangedBack) {
          Evt66TagAccessoriesStatusChangedBack = other.Evt66TagAccessoriesStatusChangedBack;
        }
        if (other.HasEvt67OnlyHave30PowerInBattery) {
          Evt67OnlyHave30PowerInBattery = other.Evt67OnlyHave30PowerInBattery;
        }
        if (other.HasEvt68OnlyHave20PowerInBattery) {
          Evt68OnlyHave20PowerInBattery = other.Evt68OnlyHave20PowerInBattery;
        }
        if (other.HasEvt69KeepStoppedWithIgnitionOnStatus) {
          Evt69KeepStoppedWithIgnitionOnStatus = other.Evt69KeepStoppedWithIgnitionOnStatus;
        }
        if (other.HasEvt70ImproperMoving) {
          Evt70ImproperMoving = other.Evt70ImproperMoving;
        }
        if (other.HasEvt71CameraBlind) {
          Evt71CameraBlind = other.Evt71CameraBlind;
        }
        if (other.HasEvt72BlindRecover) {
          Evt72BlindRecover = other.Evt72BlindRecover;
        }
        if (other.HasEvt73VideoLost) {
          Evt73VideoLost = other.Evt73VideoLost;
        }
        if (other.HasEvt74VideoOk) {
          Evt74VideoOk = other.Evt74VideoOk;
        }
        if (other.HasEvt75Rs232DataIncoming) {
          Evt75Rs232DataIncoming = other.Evt75Rs232DataIncoming;
        }
        if (other.HasEvt76CalibrateIgnitionVoltageFinished) {
          Evt76CalibrateIgnitionVoltageFinished = other.Evt76CalibrateIgnitionVoltageFinished;
        }
        if (other.HasEvt77BeforeDeepSleep) {
          Evt77BeforeDeepSleep = other.Evt77BeforeDeepSleep;
        }
        if (other.HasEvt78ExceedMaxSpeedInRaining) {
          Evt78ExceedMaxSpeedInRaining = other.Evt78ExceedMaxSpeedInRaining;
        }
        if (other.HasEvt79ResumeSpeedAfterExceedInRaining) {
          Evt79ResumeSpeedAfterExceedInRaining = other.Evt79ResumeSpeedAfterExceedInRaining;
        }
        if (other.HasEvt80AccelerationExceed) {
          Evt80AccelerationExceed = other.Evt80AccelerationExceed;
        }
        if (other.HasEvt81AccelerationResumeAfterExceed) {
          Evt81AccelerationResumeAfterExceed = other.Evt81AccelerationResumeAfterExceed;
        }
        if (other.HasEvt82DecelerationExceed) {
          Evt82DecelerationExceed = other.Evt82DecelerationExceed;
        }
        if (other.HasEvt83DecelerationResumeAfterExceed) {
          Evt83DecelerationResumeAfterExceed = other.Evt83DecelerationResumeAfterExceed;
        }
        if (other.HasEvt84RfidDriverLogin) {
          Evt84RfidDriverLogin = other.Evt84RfidDriverLogin;
        }
        if (other.HasEvt85RfidDriverLogout) {
          Evt85RfidDriverLogout = other.Evt85RfidDriverLogout;
        }
        if (other.HasEvt86RfidPassengerLogin) {
          Evt86RfidPassengerLogin = other.Evt86RfidPassengerLogin;
        }
        if (other.HasEvt87GenericExceedMaxSpeed) {
          Evt87GenericExceedMaxSpeed = other.Evt87GenericExceedMaxSpeed;
        }
        if (other.HasEvt88GenericResumeSpeedAfterExceed) {
          Evt88GenericResumeSpeedAfterExceed = other.Evt88GenericResumeSpeedAfterExceed;
        }
        if (other.HasEvt89FailTryDevicePasswordMoreThan3Times) {
          Evt89FailTryDevicePasswordMoreThan3Times = other.Evt89FailTryDevicePasswordMoreThan3Times;
        }
        if (other.HasEvt90ReceiveEngineSealActivateCommand) {
          Evt90ReceiveEngineSealActivateCommand = other.Evt90ReceiveEngineSealActivateCommand;
        }
        if (other.HasEvt91EngineSealActivated) {
          Evt91EngineSealActivated = other.Evt91EngineSealActivated;
        }
        if (other.HasEvt92EngineSealDeactivated) {
          Evt92EngineSealDeactivated = other.Evt92EngineSealDeactivated;
        }
        if (other.HasEvt93EngineSealActivatedByRelay) {
          Evt93EngineSealActivatedByRelay = other.Evt93EngineSealActivatedByRelay;
        }
        if (other.HasEvt94EngineSealDeactivatedRelay) {
          Evt94EngineSealDeactivatedRelay = other.Evt94EngineSealDeactivatedRelay;
        }
        if (other.HasEvt95EngineSealActivatedByInput1) {
          Evt95EngineSealActivatedByInput1 = other.Evt95EngineSealActivatedByInput1;
        }
        if (other.HasEvt96EngineSealDeactivatedByInput1) {
          Evt96EngineSealDeactivatedByInput1 = other.Evt96EngineSealDeactivatedByInput1;
        }
        if (other.HasEvt97NetworkScanResponse) {
          Evt97NetworkScanResponse = other.Evt97NetworkScanResponse;
        }
        if (other.HasEvt98SpeedHistogram) {
          Evt98SpeedHistogram = other.Evt98SpeedHistogram;
        }
        if (other.HasEvt99TripSummarizationEvent) {
          Evt99TripSummarizationEvent = other.Evt99TripSummarizationEvent;
        }
        if (other.HasEvt100TelemetryEvents) {
          Evt100TelemetryEvents = other.Evt100TelemetryEvents;
        }
        if (other.HasEvt101GsensorHistoricEvent) {
          Evt101GsensorHistoricEvent = other.Evt101GsensorHistoricEvent;
        }
        if (other.HasEvt102RouteReconstructionEvent) {
          Evt102RouteReconstructionEvent = other.Evt102RouteReconstructionEvent;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mxt1XxUDynamicSetupEventFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mxt1XxUDynamicSetupEventFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 16: {
              result.hasEvt2GprsAttached = input.ReadBool(ref result.evt2GprsAttached_);
              break;
            }
            case 64: {
              result.hasEvt8GpsValidAfterTxInterval = input.ReadBool(ref result.evt8GpsValidAfterTxInterval_);
              break;
            }
            case 72: {
              result.hasEvt9IgnitionOn = input.ReadBool(ref result.evt9IgnitionOn_);
              break;
            }
            case 80: {
              result.hasEvt10IgnitionOff = input.ReadBool(ref result.evt10IgnitionOff_);
              break;
            }
            case 88: {
              result.hasEvt11PanicActivated = input.ReadBool(ref result.evt11PanicActivated_);
              break;
            }
            case 96: {
              result.hasEvt12PanicDeactivated = input.ReadBool(ref result.evt12PanicDeactivated_);
              break;
            }
            case 104: {
              result.hasEvt13Input1Activated = input.ReadBool(ref result.evt13Input1Activated_);
              break;
            }
            case 112: {
              result.hasEvt14Input1Deactivated = input.ReadBool(ref result.evt14Input1Deactivated_);
              break;
            }
            case 120: {
              result.hasEvt15Input2Activated = input.ReadBool(ref result.evt15Input2Activated_);
              break;
            }
            case 128: {
              result.hasEvt16Input2Deactivated = input.ReadBool(ref result.evt16Input2Deactivated_);
              break;
            }
            case 136: {
              result.hasEvt17Input3Activated = input.ReadBool(ref result.evt17Input3Activated_);
              break;
            }
            case 144: {
              result.hasEvt18Input3Deactivated = input.ReadBool(ref result.evt18Input3Deactivated_);
              break;
            }
            case 152: {
              result.hasEvt19Input4Activated = input.ReadBool(ref result.evt19Input4Activated_);
              break;
            }
            case 160: {
              result.hasEvt20Input4Deactivated = input.ReadBool(ref result.evt20Input4Deactivated_);
              break;
            }
            case 168: {
              result.hasEvt21MovingDetect = input.ReadBool(ref result.evt21MovingDetect_);
              break;
            }
            case 176: {
              result.hasEvt22StoppedDetect = input.ReadBool(ref result.evt22StoppedDetect_);
              break;
            }
            case 184: {
              result.hasEvt23AntiTheftViolated = input.ReadBool(ref result.evt23AntiTheftViolated_);
              break;
            }
            case 200: {
              result.hasEvt25ExternalPowerFail = input.ReadBool(ref result.evt25ExternalPowerFail_);
              break;
            }
            case 208: {
              result.hasEvt26ExternalPowerOk = input.ReadBool(ref result.evt26ExternalPowerOk_);
              break;
            }
            case 216: {
              result.hasEvt27GpsAntennaFail = input.ReadBool(ref result.evt27GpsAntennaFail_);
              break;
            }
            case 224: {
              result.hasEvt28GpsAntennaOk = input.ReadBool(ref result.evt28GpsAntennaOk_);
              break;
            }
            case 240: {
              result.hasEvt30Sleep = input.ReadBool(ref result.evt30Sleep_);
              break;
            }
            case 248: {
              result.hasEvt31Output1Activated = input.ReadBool(ref result.evt31Output1Activated_);
              break;
            }
            case 256: {
              result.hasEvt32Output1Deactivated = input.ReadBool(ref result.evt32Output1Deactivated_);
              break;
            }
            case 264: {
              result.hasEvt33Output2Activated = input.ReadBool(ref result.evt33Output2Activated_);
              break;
            }
            case 272: {
              result.hasEvt34Output2Deactivated = input.ReadBool(ref result.evt34Output2Deactivated_);
              break;
            }
            case 280: {
              result.hasEvt35Output3Activated = input.ReadBool(ref result.evt35Output3Activated_);
              break;
            }
            case 288: {
              result.hasEvt36Output3Deactivated = input.ReadBool(ref result.evt36Output3Deactivated_);
              break;
            }
            case 296: {
              result.hasEvt37MaxSpeedExceeded = input.ReadBool(ref result.evt37MaxSpeedExceeded_);
              break;
            }
            case 304: {
              result.hasEvt38MaxSpeedOk = input.ReadBool(ref result.evt38MaxSpeedOk_);
              break;
            }
            case 312: {
              result.hasEvt39EnteringWaypoint = input.ReadBool(ref result.evt39EnteringWaypoint_);
              break;
            }
            case 320: {
              result.hasEvt40LeavingWaypoint = input.ReadBool(ref result.evt40LeavingWaypoint_);
              break;
            }
            case 328: {
              result.hasEvt41BatteryIsFailed = input.ReadBool(ref result.evt41BatteryIsFailed_);
              break;
            }
            case 336: {
              result.hasEvt42BatteryIsOk = input.ReadBool(ref result.evt42BatteryIsOk_);
              break;
            }
            case 344: {
              result.hasEvt43DeliveryFail = input.ReadBool(ref result.evt43DeliveryFail_);
              break;
            }
            case 368: {
              result.hasEvt46GsensorRollingThreshold = input.ReadBool(ref result.evt46GsensorRollingThreshold_);
              break;
            }
            case 376: {
              result.hasEvt47GsensorSideThreshold = input.ReadBool(ref result.evt47GsensorSideThreshold_);
              break;
            }
            case 384: {
              result.hasEvt48GsensorShockThreshold = input.ReadBool(ref result.evt48GsensorShockThreshold_);
              break;
            }
            case 392: {
              result.hasEvt49DirectionChanged = input.ReadBool(ref result.evt49DirectionChanged_);
              break;
            }
            case 400: {
              result.hasEvt50SmsIntervalReached = input.ReadBool(ref result.evt50SmsIntervalReached_);
              break;
            }
            case 416: {
              result.hasEvt52AntiTheftBackToNormal = input.ReadBool(ref result.evt52AntiTheftBackToNormal_);
              break;
            }
            case 424: {
              result.hasEvt53GsmJammingStart = input.ReadBool(ref result.evt53GsmJammingStart_);
              break;
            }
            case 432: {
              result.hasEvt54GsmJammingStop = input.ReadBool(ref result.evt54GsmJammingStop_);
              break;
            }
            case 440: {
              result.hasEvt55ExcessiveRpm = input.ReadBool(ref result.evt55ExcessiveRpm_);
              break;
            }
            case 448: {
              result.hasEvt56ExcessiveRpmOnNeutral = input.ReadBool(ref result.evt56ExcessiveRpmOnNeutral_);
              break;
            }
            case 456: {
              result.hasEvt57SpeedingOnNeutral = input.ReadBool(ref result.evt57SpeedingOnNeutral_);
              break;
            }
            case 464: {
              result.hasEvt58GpsFailure = input.ReadBool(ref result.evt58GpsFailure_);
              break;
            }
            case 472: {
              result.hasEvt59DistanceAttached = input.ReadBool(ref result.evt59DistanceAttached_);
              break;
            }
            case 480: {
              result.hasEvt60PowerFailGpsFail = input.ReadBool(ref result.evt60PowerFailGpsFail_);
              break;
            }
            case 488: {
              result.hasEvt61AgpsRequest = input.ReadBool(ref result.evt61AgpsRequest_);
              break;
            }
            case 496: {
              result.hasEvt62TagAccessoriesStatusChanged = input.ReadBool(ref result.evt62TagAccessoriesStatusChanged_);
              break;
            }
            case 504: {
              result.hasEvt63TagAccessoriesBatteryStatusChanged = input.ReadBool(ref result.evt63TagAccessoriesBatteryStatusChanged_);
              break;
            }
            case 512: {
              result.hasEvt64LinkBroken = input.ReadBool(ref result.evt64LinkBroken_);
              break;
            }
            case 520: {
              result.hasEvt65ExpandInputChanged = input.ReadBool(ref result.evt65ExpandInputChanged_);
              break;
            }
            case 528: {
              result.hasEvt66TagAccessoriesStatusChangedBack = input.ReadBool(ref result.evt66TagAccessoriesStatusChangedBack_);
              break;
            }
            case 536: {
              result.hasEvt67OnlyHave30PowerInBattery = input.ReadBool(ref result.evt67OnlyHave30PowerInBattery_);
              break;
            }
            case 544: {
              result.hasEvt68OnlyHave20PowerInBattery = input.ReadBool(ref result.evt68OnlyHave20PowerInBattery_);
              break;
            }
            case 552: {
              result.hasEvt69KeepStoppedWithIgnitionOnStatus = input.ReadBool(ref result.evt69KeepStoppedWithIgnitionOnStatus_);
              break;
            }
            case 560: {
              result.hasEvt70ImproperMoving = input.ReadBool(ref result.evt70ImproperMoving_);
              break;
            }
            case 568: {
              result.hasEvt71CameraBlind = input.ReadBool(ref result.evt71CameraBlind_);
              break;
            }
            case 576: {
              result.hasEvt72BlindRecover = input.ReadBool(ref result.evt72BlindRecover_);
              break;
            }
            case 584: {
              result.hasEvt73VideoLost = input.ReadBool(ref result.evt73VideoLost_);
              break;
            }
            case 592: {
              result.hasEvt74VideoOk = input.ReadBool(ref result.evt74VideoOk_);
              break;
            }
            case 600: {
              result.hasEvt75Rs232DataIncoming = input.ReadBool(ref result.evt75Rs232DataIncoming_);
              break;
            }
            case 608: {
              result.hasEvt76CalibrateIgnitionVoltageFinished = input.ReadBool(ref result.evt76CalibrateIgnitionVoltageFinished_);
              break;
            }
            case 616: {
              result.hasEvt77BeforeDeepSleep = input.ReadBool(ref result.evt77BeforeDeepSleep_);
              break;
            }
            case 624: {
              result.hasEvt78ExceedMaxSpeedInRaining = input.ReadBool(ref result.evt78ExceedMaxSpeedInRaining_);
              break;
            }
            case 632: {
              result.hasEvt79ResumeSpeedAfterExceedInRaining = input.ReadBool(ref result.evt79ResumeSpeedAfterExceedInRaining_);
              break;
            }
            case 640: {
              result.hasEvt80AccelerationExceed = input.ReadBool(ref result.evt80AccelerationExceed_);
              break;
            }
            case 648: {
              result.hasEvt81AccelerationResumeAfterExceed = input.ReadBool(ref result.evt81AccelerationResumeAfterExceed_);
              break;
            }
            case 656: {
              result.hasEvt82DecelerationExceed = input.ReadBool(ref result.evt82DecelerationExceed_);
              break;
            }
            case 664: {
              result.hasEvt83DecelerationResumeAfterExceed = input.ReadBool(ref result.evt83DecelerationResumeAfterExceed_);
              break;
            }
            case 672: {
              result.hasEvt84RfidDriverLogin = input.ReadBool(ref result.evt84RfidDriverLogin_);
              break;
            }
            case 680: {
              result.hasEvt85RfidDriverLogout = input.ReadBool(ref result.evt85RfidDriverLogout_);
              break;
            }
            case 688: {
              result.hasEvt86RfidPassengerLogin = input.ReadBool(ref result.evt86RfidPassengerLogin_);
              break;
            }
            case 696: {
              result.hasEvt87GenericExceedMaxSpeed = input.ReadBool(ref result.evt87GenericExceedMaxSpeed_);
              break;
            }
            case 704: {
              result.hasEvt88GenericResumeSpeedAfterExceed = input.ReadBool(ref result.evt88GenericResumeSpeedAfterExceed_);
              break;
            }
            case 712: {
              result.hasEvt89FailTryDevicePasswordMoreThan3Times = input.ReadBool(ref result.evt89FailTryDevicePasswordMoreThan3Times_);
              break;
            }
            case 720: {
              result.hasEvt90ReceiveEngineSealActivateCommand = input.ReadBool(ref result.evt90ReceiveEngineSealActivateCommand_);
              break;
            }
            case 728: {
              result.hasEvt91EngineSealActivated = input.ReadBool(ref result.evt91EngineSealActivated_);
              break;
            }
            case 736: {
              result.hasEvt92EngineSealDeactivated = input.ReadBool(ref result.evt92EngineSealDeactivated_);
              break;
            }
            case 744: {
              result.hasEvt93EngineSealActivatedByRelay = input.ReadBool(ref result.evt93EngineSealActivatedByRelay_);
              break;
            }
            case 752: {
              result.hasEvt94EngineSealDeactivatedRelay = input.ReadBool(ref result.evt94EngineSealDeactivatedRelay_);
              break;
            }
            case 760: {
              result.hasEvt95EngineSealActivatedByInput1 = input.ReadBool(ref result.evt95EngineSealActivatedByInput1_);
              break;
            }
            case 768: {
              result.hasEvt96EngineSealDeactivatedByInput1 = input.ReadBool(ref result.evt96EngineSealDeactivatedByInput1_);
              break;
            }
            case 776: {
              result.hasEvt97NetworkScanResponse = input.ReadBool(ref result.evt97NetworkScanResponse_);
              break;
            }
            case 784: {
              result.hasEvt98SpeedHistogram = input.ReadBool(ref result.evt98SpeedHistogram_);
              break;
            }
            case 792: {
              result.hasEvt99TripSummarizationEvent = input.ReadBool(ref result.evt99TripSummarizationEvent_);
              break;
            }
            case 800: {
              result.hasEvt100TelemetryEvents = input.ReadBool(ref result.evt100TelemetryEvents_);
              break;
            }
            case 808: {
              result.hasEvt101GsensorHistoricEvent = input.ReadBool(ref result.evt101GsensorHistoricEvent_);
              break;
            }
            case 816: {
              result.hasEvt102RouteReconstructionEvent = input.ReadBool(ref result.evt102RouteReconstructionEvent_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasEvt2GprsAttached {
        get { return result.hasEvt2GprsAttached; }
      }
      public bool Evt2GprsAttached {
        get { return result.Evt2GprsAttached; }
        set { SetEvt2GprsAttached(value); }
      }
      public Builder SetEvt2GprsAttached(bool value) {
        PrepareBuilder();
        result.hasEvt2GprsAttached = true;
        result.evt2GprsAttached_ = value;
        return this;
      }
      public Builder ClearEvt2GprsAttached() {
        PrepareBuilder();
        result.hasEvt2GprsAttached = false;
        result.evt2GprsAttached_ = false;
        return this;
      }
      
      public bool HasEvt8GpsValidAfterTxInterval {
        get { return result.hasEvt8GpsValidAfterTxInterval; }
      }
      public bool Evt8GpsValidAfterTxInterval {
        get { return result.Evt8GpsValidAfterTxInterval; }
        set { SetEvt8GpsValidAfterTxInterval(value); }
      }
      public Builder SetEvt8GpsValidAfterTxInterval(bool value) {
        PrepareBuilder();
        result.hasEvt8GpsValidAfterTxInterval = true;
        result.evt8GpsValidAfterTxInterval_ = value;
        return this;
      }
      public Builder ClearEvt8GpsValidAfterTxInterval() {
        PrepareBuilder();
        result.hasEvt8GpsValidAfterTxInterval = false;
        result.evt8GpsValidAfterTxInterval_ = false;
        return this;
      }
      
      public bool HasEvt9IgnitionOn {
        get { return result.hasEvt9IgnitionOn; }
      }
      public bool Evt9IgnitionOn {
        get { return result.Evt9IgnitionOn; }
        set { SetEvt9IgnitionOn(value); }
      }
      public Builder SetEvt9IgnitionOn(bool value) {
        PrepareBuilder();
        result.hasEvt9IgnitionOn = true;
        result.evt9IgnitionOn_ = value;
        return this;
      }
      public Builder ClearEvt9IgnitionOn() {
        PrepareBuilder();
        result.hasEvt9IgnitionOn = false;
        result.evt9IgnitionOn_ = false;
        return this;
      }
      
      public bool HasEvt10IgnitionOff {
        get { return result.hasEvt10IgnitionOff; }
      }
      public bool Evt10IgnitionOff {
        get { return result.Evt10IgnitionOff; }
        set { SetEvt10IgnitionOff(value); }
      }
      public Builder SetEvt10IgnitionOff(bool value) {
        PrepareBuilder();
        result.hasEvt10IgnitionOff = true;
        result.evt10IgnitionOff_ = value;
        return this;
      }
      public Builder ClearEvt10IgnitionOff() {
        PrepareBuilder();
        result.hasEvt10IgnitionOff = false;
        result.evt10IgnitionOff_ = false;
        return this;
      }
      
      public bool HasEvt11PanicActivated {
        get { return result.hasEvt11PanicActivated; }
      }
      public bool Evt11PanicActivated {
        get { return result.Evt11PanicActivated; }
        set { SetEvt11PanicActivated(value); }
      }
      public Builder SetEvt11PanicActivated(bool value) {
        PrepareBuilder();
        result.hasEvt11PanicActivated = true;
        result.evt11PanicActivated_ = value;
        return this;
      }
      public Builder ClearEvt11PanicActivated() {
        PrepareBuilder();
        result.hasEvt11PanicActivated = false;
        result.evt11PanicActivated_ = false;
        return this;
      }
      
      public bool HasEvt12PanicDeactivated {
        get { return result.hasEvt12PanicDeactivated; }
      }
      public bool Evt12PanicDeactivated {
        get { return result.Evt12PanicDeactivated; }
        set { SetEvt12PanicDeactivated(value); }
      }
      public Builder SetEvt12PanicDeactivated(bool value) {
        PrepareBuilder();
        result.hasEvt12PanicDeactivated = true;
        result.evt12PanicDeactivated_ = value;
        return this;
      }
      public Builder ClearEvt12PanicDeactivated() {
        PrepareBuilder();
        result.hasEvt12PanicDeactivated = false;
        result.evt12PanicDeactivated_ = false;
        return this;
      }
      
      public bool HasEvt13Input1Activated {
        get { return result.hasEvt13Input1Activated; }
      }
      public bool Evt13Input1Activated {
        get { return result.Evt13Input1Activated; }
        set { SetEvt13Input1Activated(value); }
      }
      public Builder SetEvt13Input1Activated(bool value) {
        PrepareBuilder();
        result.hasEvt13Input1Activated = true;
        result.evt13Input1Activated_ = value;
        return this;
      }
      public Builder ClearEvt13Input1Activated() {
        PrepareBuilder();
        result.hasEvt13Input1Activated = false;
        result.evt13Input1Activated_ = false;
        return this;
      }
      
      public bool HasEvt14Input1Deactivated {
        get { return result.hasEvt14Input1Deactivated; }
      }
      public bool Evt14Input1Deactivated {
        get { return result.Evt14Input1Deactivated; }
        set { SetEvt14Input1Deactivated(value); }
      }
      public Builder SetEvt14Input1Deactivated(bool value) {
        PrepareBuilder();
        result.hasEvt14Input1Deactivated = true;
        result.evt14Input1Deactivated_ = value;
        return this;
      }
      public Builder ClearEvt14Input1Deactivated() {
        PrepareBuilder();
        result.hasEvt14Input1Deactivated = false;
        result.evt14Input1Deactivated_ = false;
        return this;
      }
      
      public bool HasEvt15Input2Activated {
        get { return result.hasEvt15Input2Activated; }
      }
      public bool Evt15Input2Activated {
        get { return result.Evt15Input2Activated; }
        set { SetEvt15Input2Activated(value); }
      }
      public Builder SetEvt15Input2Activated(bool value) {
        PrepareBuilder();
        result.hasEvt15Input2Activated = true;
        result.evt15Input2Activated_ = value;
        return this;
      }
      public Builder ClearEvt15Input2Activated() {
        PrepareBuilder();
        result.hasEvt15Input2Activated = false;
        result.evt15Input2Activated_ = false;
        return this;
      }
      
      public bool HasEvt16Input2Deactivated {
        get { return result.hasEvt16Input2Deactivated; }
      }
      public bool Evt16Input2Deactivated {
        get { return result.Evt16Input2Deactivated; }
        set { SetEvt16Input2Deactivated(value); }
      }
      public Builder SetEvt16Input2Deactivated(bool value) {
        PrepareBuilder();
        result.hasEvt16Input2Deactivated = true;
        result.evt16Input2Deactivated_ = value;
        return this;
      }
      public Builder ClearEvt16Input2Deactivated() {
        PrepareBuilder();
        result.hasEvt16Input2Deactivated = false;
        result.evt16Input2Deactivated_ = false;
        return this;
      }
      
      public bool HasEvt17Input3Activated {
        get { return result.hasEvt17Input3Activated; }
      }
      public bool Evt17Input3Activated {
        get { return result.Evt17Input3Activated; }
        set { SetEvt17Input3Activated(value); }
      }
      public Builder SetEvt17Input3Activated(bool value) {
        PrepareBuilder();
        result.hasEvt17Input3Activated = true;
        result.evt17Input3Activated_ = value;
        return this;
      }
      public Builder ClearEvt17Input3Activated() {
        PrepareBuilder();
        result.hasEvt17Input3Activated = false;
        result.evt17Input3Activated_ = false;
        return this;
      }
      
      public bool HasEvt18Input3Deactivated {
        get { return result.hasEvt18Input3Deactivated; }
      }
      public bool Evt18Input3Deactivated {
        get { return result.Evt18Input3Deactivated; }
        set { SetEvt18Input3Deactivated(value); }
      }
      public Builder SetEvt18Input3Deactivated(bool value) {
        PrepareBuilder();
        result.hasEvt18Input3Deactivated = true;
        result.evt18Input3Deactivated_ = value;
        return this;
      }
      public Builder ClearEvt18Input3Deactivated() {
        PrepareBuilder();
        result.hasEvt18Input3Deactivated = false;
        result.evt18Input3Deactivated_ = false;
        return this;
      }
      
      public bool HasEvt19Input4Activated {
        get { return result.hasEvt19Input4Activated; }
      }
      public bool Evt19Input4Activated {
        get { return result.Evt19Input4Activated; }
        set { SetEvt19Input4Activated(value); }
      }
      public Builder SetEvt19Input4Activated(bool value) {
        PrepareBuilder();
        result.hasEvt19Input4Activated = true;
        result.evt19Input4Activated_ = value;
        return this;
      }
      public Builder ClearEvt19Input4Activated() {
        PrepareBuilder();
        result.hasEvt19Input4Activated = false;
        result.evt19Input4Activated_ = false;
        return this;
      }
      
      public bool HasEvt20Input4Deactivated {
        get { return result.hasEvt20Input4Deactivated; }
      }
      public bool Evt20Input4Deactivated {
        get { return result.Evt20Input4Deactivated; }
        set { SetEvt20Input4Deactivated(value); }
      }
      public Builder SetEvt20Input4Deactivated(bool value) {
        PrepareBuilder();
        result.hasEvt20Input4Deactivated = true;
        result.evt20Input4Deactivated_ = value;
        return this;
      }
      public Builder ClearEvt20Input4Deactivated() {
        PrepareBuilder();
        result.hasEvt20Input4Deactivated = false;
        result.evt20Input4Deactivated_ = false;
        return this;
      }
      
      public bool HasEvt21MovingDetect {
        get { return result.hasEvt21MovingDetect; }
      }
      public bool Evt21MovingDetect {
        get { return result.Evt21MovingDetect; }
        set { SetEvt21MovingDetect(value); }
      }
      public Builder SetEvt21MovingDetect(bool value) {
        PrepareBuilder();
        result.hasEvt21MovingDetect = true;
        result.evt21MovingDetect_ = value;
        return this;
      }
      public Builder ClearEvt21MovingDetect() {
        PrepareBuilder();
        result.hasEvt21MovingDetect = false;
        result.evt21MovingDetect_ = false;
        return this;
      }
      
      public bool HasEvt22StoppedDetect {
        get { return result.hasEvt22StoppedDetect; }
      }
      public bool Evt22StoppedDetect {
        get { return result.Evt22StoppedDetect; }
        set { SetEvt22StoppedDetect(value); }
      }
      public Builder SetEvt22StoppedDetect(bool value) {
        PrepareBuilder();
        result.hasEvt22StoppedDetect = true;
        result.evt22StoppedDetect_ = value;
        return this;
      }
      public Builder ClearEvt22StoppedDetect() {
        PrepareBuilder();
        result.hasEvt22StoppedDetect = false;
        result.evt22StoppedDetect_ = false;
        return this;
      }
      
      public bool HasEvt23AntiTheftViolated {
        get { return result.hasEvt23AntiTheftViolated; }
      }
      public bool Evt23AntiTheftViolated {
        get { return result.Evt23AntiTheftViolated; }
        set { SetEvt23AntiTheftViolated(value); }
      }
      public Builder SetEvt23AntiTheftViolated(bool value) {
        PrepareBuilder();
        result.hasEvt23AntiTheftViolated = true;
        result.evt23AntiTheftViolated_ = value;
        return this;
      }
      public Builder ClearEvt23AntiTheftViolated() {
        PrepareBuilder();
        result.hasEvt23AntiTheftViolated = false;
        result.evt23AntiTheftViolated_ = false;
        return this;
      }
      
      public bool HasEvt25ExternalPowerFail {
        get { return result.hasEvt25ExternalPowerFail; }
      }
      public bool Evt25ExternalPowerFail {
        get { return result.Evt25ExternalPowerFail; }
        set { SetEvt25ExternalPowerFail(value); }
      }
      public Builder SetEvt25ExternalPowerFail(bool value) {
        PrepareBuilder();
        result.hasEvt25ExternalPowerFail = true;
        result.evt25ExternalPowerFail_ = value;
        return this;
      }
      public Builder ClearEvt25ExternalPowerFail() {
        PrepareBuilder();
        result.hasEvt25ExternalPowerFail = false;
        result.evt25ExternalPowerFail_ = false;
        return this;
      }
      
      public bool HasEvt26ExternalPowerOk {
        get { return result.hasEvt26ExternalPowerOk; }
      }
      public bool Evt26ExternalPowerOk {
        get { return result.Evt26ExternalPowerOk; }
        set { SetEvt26ExternalPowerOk(value); }
      }
      public Builder SetEvt26ExternalPowerOk(bool value) {
        PrepareBuilder();
        result.hasEvt26ExternalPowerOk = true;
        result.evt26ExternalPowerOk_ = value;
        return this;
      }
      public Builder ClearEvt26ExternalPowerOk() {
        PrepareBuilder();
        result.hasEvt26ExternalPowerOk = false;
        result.evt26ExternalPowerOk_ = false;
        return this;
      }
      
      public bool HasEvt27GpsAntennaFail {
        get { return result.hasEvt27GpsAntennaFail; }
      }
      public bool Evt27GpsAntennaFail {
        get { return result.Evt27GpsAntennaFail; }
        set { SetEvt27GpsAntennaFail(value); }
      }
      public Builder SetEvt27GpsAntennaFail(bool value) {
        PrepareBuilder();
        result.hasEvt27GpsAntennaFail = true;
        result.evt27GpsAntennaFail_ = value;
        return this;
      }
      public Builder ClearEvt27GpsAntennaFail() {
        PrepareBuilder();
        result.hasEvt27GpsAntennaFail = false;
        result.evt27GpsAntennaFail_ = false;
        return this;
      }
      
      public bool HasEvt28GpsAntennaOk {
        get { return result.hasEvt28GpsAntennaOk; }
      }
      public bool Evt28GpsAntennaOk {
        get { return result.Evt28GpsAntennaOk; }
        set { SetEvt28GpsAntennaOk(value); }
      }
      public Builder SetEvt28GpsAntennaOk(bool value) {
        PrepareBuilder();
        result.hasEvt28GpsAntennaOk = true;
        result.evt28GpsAntennaOk_ = value;
        return this;
      }
      public Builder ClearEvt28GpsAntennaOk() {
        PrepareBuilder();
        result.hasEvt28GpsAntennaOk = false;
        result.evt28GpsAntennaOk_ = false;
        return this;
      }
      
      public bool HasEvt30Sleep {
        get { return result.hasEvt30Sleep; }
      }
      public bool Evt30Sleep {
        get { return result.Evt30Sleep; }
        set { SetEvt30Sleep(value); }
      }
      public Builder SetEvt30Sleep(bool value) {
        PrepareBuilder();
        result.hasEvt30Sleep = true;
        result.evt30Sleep_ = value;
        return this;
      }
      public Builder ClearEvt30Sleep() {
        PrepareBuilder();
        result.hasEvt30Sleep = false;
        result.evt30Sleep_ = false;
        return this;
      }
      
      public bool HasEvt31Output1Activated {
        get { return result.hasEvt31Output1Activated; }
      }
      public bool Evt31Output1Activated {
        get { return result.Evt31Output1Activated; }
        set { SetEvt31Output1Activated(value); }
      }
      public Builder SetEvt31Output1Activated(bool value) {
        PrepareBuilder();
        result.hasEvt31Output1Activated = true;
        result.evt31Output1Activated_ = value;
        return this;
      }
      public Builder ClearEvt31Output1Activated() {
        PrepareBuilder();
        result.hasEvt31Output1Activated = false;
        result.evt31Output1Activated_ = false;
        return this;
      }
      
      public bool HasEvt32Output1Deactivated {
        get { return result.hasEvt32Output1Deactivated; }
      }
      public bool Evt32Output1Deactivated {
        get { return result.Evt32Output1Deactivated; }
        set { SetEvt32Output1Deactivated(value); }
      }
      public Builder SetEvt32Output1Deactivated(bool value) {
        PrepareBuilder();
        result.hasEvt32Output1Deactivated = true;
        result.evt32Output1Deactivated_ = value;
        return this;
      }
      public Builder ClearEvt32Output1Deactivated() {
        PrepareBuilder();
        result.hasEvt32Output1Deactivated = false;
        result.evt32Output1Deactivated_ = false;
        return this;
      }
      
      public bool HasEvt33Output2Activated {
        get { return result.hasEvt33Output2Activated; }
      }
      public bool Evt33Output2Activated {
        get { return result.Evt33Output2Activated; }
        set { SetEvt33Output2Activated(value); }
      }
      public Builder SetEvt33Output2Activated(bool value) {
        PrepareBuilder();
        result.hasEvt33Output2Activated = true;
        result.evt33Output2Activated_ = value;
        return this;
      }
      public Builder ClearEvt33Output2Activated() {
        PrepareBuilder();
        result.hasEvt33Output2Activated = false;
        result.evt33Output2Activated_ = false;
        return this;
      }
      
      public bool HasEvt34Output2Deactivated {
        get { return result.hasEvt34Output2Deactivated; }
      }
      public bool Evt34Output2Deactivated {
        get { return result.Evt34Output2Deactivated; }
        set { SetEvt34Output2Deactivated(value); }
      }
      public Builder SetEvt34Output2Deactivated(bool value) {
        PrepareBuilder();
        result.hasEvt34Output2Deactivated = true;
        result.evt34Output2Deactivated_ = value;
        return this;
      }
      public Builder ClearEvt34Output2Deactivated() {
        PrepareBuilder();
        result.hasEvt34Output2Deactivated = false;
        result.evt34Output2Deactivated_ = false;
        return this;
      }
      
      public bool HasEvt35Output3Activated {
        get { return result.hasEvt35Output3Activated; }
      }
      public bool Evt35Output3Activated {
        get { return result.Evt35Output3Activated; }
        set { SetEvt35Output3Activated(value); }
      }
      public Builder SetEvt35Output3Activated(bool value) {
        PrepareBuilder();
        result.hasEvt35Output3Activated = true;
        result.evt35Output3Activated_ = value;
        return this;
      }
      public Builder ClearEvt35Output3Activated() {
        PrepareBuilder();
        result.hasEvt35Output3Activated = false;
        result.evt35Output3Activated_ = false;
        return this;
      }
      
      public bool HasEvt36Output3Deactivated {
        get { return result.hasEvt36Output3Deactivated; }
      }
      public bool Evt36Output3Deactivated {
        get { return result.Evt36Output3Deactivated; }
        set { SetEvt36Output3Deactivated(value); }
      }
      public Builder SetEvt36Output3Deactivated(bool value) {
        PrepareBuilder();
        result.hasEvt36Output3Deactivated = true;
        result.evt36Output3Deactivated_ = value;
        return this;
      }
      public Builder ClearEvt36Output3Deactivated() {
        PrepareBuilder();
        result.hasEvt36Output3Deactivated = false;
        result.evt36Output3Deactivated_ = false;
        return this;
      }
      
      public bool HasEvt37MaxSpeedExceeded {
        get { return result.hasEvt37MaxSpeedExceeded; }
      }
      public bool Evt37MaxSpeedExceeded {
        get { return result.Evt37MaxSpeedExceeded; }
        set { SetEvt37MaxSpeedExceeded(value); }
      }
      public Builder SetEvt37MaxSpeedExceeded(bool value) {
        PrepareBuilder();
        result.hasEvt37MaxSpeedExceeded = true;
        result.evt37MaxSpeedExceeded_ = value;
        return this;
      }
      public Builder ClearEvt37MaxSpeedExceeded() {
        PrepareBuilder();
        result.hasEvt37MaxSpeedExceeded = false;
        result.evt37MaxSpeedExceeded_ = false;
        return this;
      }
      
      public bool HasEvt38MaxSpeedOk {
        get { return result.hasEvt38MaxSpeedOk; }
      }
      public bool Evt38MaxSpeedOk {
        get { return result.Evt38MaxSpeedOk; }
        set { SetEvt38MaxSpeedOk(value); }
      }
      public Builder SetEvt38MaxSpeedOk(bool value) {
        PrepareBuilder();
        result.hasEvt38MaxSpeedOk = true;
        result.evt38MaxSpeedOk_ = value;
        return this;
      }
      public Builder ClearEvt38MaxSpeedOk() {
        PrepareBuilder();
        result.hasEvt38MaxSpeedOk = false;
        result.evt38MaxSpeedOk_ = false;
        return this;
      }
      
      public bool HasEvt39EnteringWaypoint {
        get { return result.hasEvt39EnteringWaypoint; }
      }
      public bool Evt39EnteringWaypoint {
        get { return result.Evt39EnteringWaypoint; }
        set { SetEvt39EnteringWaypoint(value); }
      }
      public Builder SetEvt39EnteringWaypoint(bool value) {
        PrepareBuilder();
        result.hasEvt39EnteringWaypoint = true;
        result.evt39EnteringWaypoint_ = value;
        return this;
      }
      public Builder ClearEvt39EnteringWaypoint() {
        PrepareBuilder();
        result.hasEvt39EnteringWaypoint = false;
        result.evt39EnteringWaypoint_ = false;
        return this;
      }
      
      public bool HasEvt40LeavingWaypoint {
        get { return result.hasEvt40LeavingWaypoint; }
      }
      public bool Evt40LeavingWaypoint {
        get { return result.Evt40LeavingWaypoint; }
        set { SetEvt40LeavingWaypoint(value); }
      }
      public Builder SetEvt40LeavingWaypoint(bool value) {
        PrepareBuilder();
        result.hasEvt40LeavingWaypoint = true;
        result.evt40LeavingWaypoint_ = value;
        return this;
      }
      public Builder ClearEvt40LeavingWaypoint() {
        PrepareBuilder();
        result.hasEvt40LeavingWaypoint = false;
        result.evt40LeavingWaypoint_ = false;
        return this;
      }
      
      public bool HasEvt41BatteryIsFailed {
        get { return result.hasEvt41BatteryIsFailed; }
      }
      public bool Evt41BatteryIsFailed {
        get { return result.Evt41BatteryIsFailed; }
        set { SetEvt41BatteryIsFailed(value); }
      }
      public Builder SetEvt41BatteryIsFailed(bool value) {
        PrepareBuilder();
        result.hasEvt41BatteryIsFailed = true;
        result.evt41BatteryIsFailed_ = value;
        return this;
      }
      public Builder ClearEvt41BatteryIsFailed() {
        PrepareBuilder();
        result.hasEvt41BatteryIsFailed = false;
        result.evt41BatteryIsFailed_ = false;
        return this;
      }
      
      public bool HasEvt42BatteryIsOk {
        get { return result.hasEvt42BatteryIsOk; }
      }
      public bool Evt42BatteryIsOk {
        get { return result.Evt42BatteryIsOk; }
        set { SetEvt42BatteryIsOk(value); }
      }
      public Builder SetEvt42BatteryIsOk(bool value) {
        PrepareBuilder();
        result.hasEvt42BatteryIsOk = true;
        result.evt42BatteryIsOk_ = value;
        return this;
      }
      public Builder ClearEvt42BatteryIsOk() {
        PrepareBuilder();
        result.hasEvt42BatteryIsOk = false;
        result.evt42BatteryIsOk_ = false;
        return this;
      }
      
      public bool HasEvt43DeliveryFail {
        get { return result.hasEvt43DeliveryFail; }
      }
      public bool Evt43DeliveryFail {
        get { return result.Evt43DeliveryFail; }
        set { SetEvt43DeliveryFail(value); }
      }
      public Builder SetEvt43DeliveryFail(bool value) {
        PrepareBuilder();
        result.hasEvt43DeliveryFail = true;
        result.evt43DeliveryFail_ = value;
        return this;
      }
      public Builder ClearEvt43DeliveryFail() {
        PrepareBuilder();
        result.hasEvt43DeliveryFail = false;
        result.evt43DeliveryFail_ = false;
        return this;
      }
      
      public bool HasEvt46GsensorRollingThreshold {
        get { return result.hasEvt46GsensorRollingThreshold; }
      }
      public bool Evt46GsensorRollingThreshold {
        get { return result.Evt46GsensorRollingThreshold; }
        set { SetEvt46GsensorRollingThreshold(value); }
      }
      public Builder SetEvt46GsensorRollingThreshold(bool value) {
        PrepareBuilder();
        result.hasEvt46GsensorRollingThreshold = true;
        result.evt46GsensorRollingThreshold_ = value;
        return this;
      }
      public Builder ClearEvt46GsensorRollingThreshold() {
        PrepareBuilder();
        result.hasEvt46GsensorRollingThreshold = false;
        result.evt46GsensorRollingThreshold_ = false;
        return this;
      }
      
      public bool HasEvt47GsensorSideThreshold {
        get { return result.hasEvt47GsensorSideThreshold; }
      }
      public bool Evt47GsensorSideThreshold {
        get { return result.Evt47GsensorSideThreshold; }
        set { SetEvt47GsensorSideThreshold(value); }
      }
      public Builder SetEvt47GsensorSideThreshold(bool value) {
        PrepareBuilder();
        result.hasEvt47GsensorSideThreshold = true;
        result.evt47GsensorSideThreshold_ = value;
        return this;
      }
      public Builder ClearEvt47GsensorSideThreshold() {
        PrepareBuilder();
        result.hasEvt47GsensorSideThreshold = false;
        result.evt47GsensorSideThreshold_ = false;
        return this;
      }
      
      public bool HasEvt48GsensorShockThreshold {
        get { return result.hasEvt48GsensorShockThreshold; }
      }
      public bool Evt48GsensorShockThreshold {
        get { return result.Evt48GsensorShockThreshold; }
        set { SetEvt48GsensorShockThreshold(value); }
      }
      public Builder SetEvt48GsensorShockThreshold(bool value) {
        PrepareBuilder();
        result.hasEvt48GsensorShockThreshold = true;
        result.evt48GsensorShockThreshold_ = value;
        return this;
      }
      public Builder ClearEvt48GsensorShockThreshold() {
        PrepareBuilder();
        result.hasEvt48GsensorShockThreshold = false;
        result.evt48GsensorShockThreshold_ = false;
        return this;
      }
      
      public bool HasEvt49DirectionChanged {
        get { return result.hasEvt49DirectionChanged; }
      }
      public bool Evt49DirectionChanged {
        get { return result.Evt49DirectionChanged; }
        set { SetEvt49DirectionChanged(value); }
      }
      public Builder SetEvt49DirectionChanged(bool value) {
        PrepareBuilder();
        result.hasEvt49DirectionChanged = true;
        result.evt49DirectionChanged_ = value;
        return this;
      }
      public Builder ClearEvt49DirectionChanged() {
        PrepareBuilder();
        result.hasEvt49DirectionChanged = false;
        result.evt49DirectionChanged_ = false;
        return this;
      }
      
      public bool HasEvt50SmsIntervalReached {
        get { return result.hasEvt50SmsIntervalReached; }
      }
      public bool Evt50SmsIntervalReached {
        get { return result.Evt50SmsIntervalReached; }
        set { SetEvt50SmsIntervalReached(value); }
      }
      public Builder SetEvt50SmsIntervalReached(bool value) {
        PrepareBuilder();
        result.hasEvt50SmsIntervalReached = true;
        result.evt50SmsIntervalReached_ = value;
        return this;
      }
      public Builder ClearEvt50SmsIntervalReached() {
        PrepareBuilder();
        result.hasEvt50SmsIntervalReached = false;
        result.evt50SmsIntervalReached_ = false;
        return this;
      }
      
      public bool HasEvt52AntiTheftBackToNormal {
        get { return result.hasEvt52AntiTheftBackToNormal; }
      }
      public bool Evt52AntiTheftBackToNormal {
        get { return result.Evt52AntiTheftBackToNormal; }
        set { SetEvt52AntiTheftBackToNormal(value); }
      }
      public Builder SetEvt52AntiTheftBackToNormal(bool value) {
        PrepareBuilder();
        result.hasEvt52AntiTheftBackToNormal = true;
        result.evt52AntiTheftBackToNormal_ = value;
        return this;
      }
      public Builder ClearEvt52AntiTheftBackToNormal() {
        PrepareBuilder();
        result.hasEvt52AntiTheftBackToNormal = false;
        result.evt52AntiTheftBackToNormal_ = false;
        return this;
      }
      
      public bool HasEvt53GsmJammingStart {
        get { return result.hasEvt53GsmJammingStart; }
      }
      public bool Evt53GsmJammingStart {
        get { return result.Evt53GsmJammingStart; }
        set { SetEvt53GsmJammingStart(value); }
      }
      public Builder SetEvt53GsmJammingStart(bool value) {
        PrepareBuilder();
        result.hasEvt53GsmJammingStart = true;
        result.evt53GsmJammingStart_ = value;
        return this;
      }
      public Builder ClearEvt53GsmJammingStart() {
        PrepareBuilder();
        result.hasEvt53GsmJammingStart = false;
        result.evt53GsmJammingStart_ = false;
        return this;
      }
      
      public bool HasEvt54GsmJammingStop {
        get { return result.hasEvt54GsmJammingStop; }
      }
      public bool Evt54GsmJammingStop {
        get { return result.Evt54GsmJammingStop; }
        set { SetEvt54GsmJammingStop(value); }
      }
      public Builder SetEvt54GsmJammingStop(bool value) {
        PrepareBuilder();
        result.hasEvt54GsmJammingStop = true;
        result.evt54GsmJammingStop_ = value;
        return this;
      }
      public Builder ClearEvt54GsmJammingStop() {
        PrepareBuilder();
        result.hasEvt54GsmJammingStop = false;
        result.evt54GsmJammingStop_ = false;
        return this;
      }
      
      public bool HasEvt55ExcessiveRpm {
        get { return result.hasEvt55ExcessiveRpm; }
      }
      public bool Evt55ExcessiveRpm {
        get { return result.Evt55ExcessiveRpm; }
        set { SetEvt55ExcessiveRpm(value); }
      }
      public Builder SetEvt55ExcessiveRpm(bool value) {
        PrepareBuilder();
        result.hasEvt55ExcessiveRpm = true;
        result.evt55ExcessiveRpm_ = value;
        return this;
      }
      public Builder ClearEvt55ExcessiveRpm() {
        PrepareBuilder();
        result.hasEvt55ExcessiveRpm = false;
        result.evt55ExcessiveRpm_ = false;
        return this;
      }
      
      public bool HasEvt56ExcessiveRpmOnNeutral {
        get { return result.hasEvt56ExcessiveRpmOnNeutral; }
      }
      public bool Evt56ExcessiveRpmOnNeutral {
        get { return result.Evt56ExcessiveRpmOnNeutral; }
        set { SetEvt56ExcessiveRpmOnNeutral(value); }
      }
      public Builder SetEvt56ExcessiveRpmOnNeutral(bool value) {
        PrepareBuilder();
        result.hasEvt56ExcessiveRpmOnNeutral = true;
        result.evt56ExcessiveRpmOnNeutral_ = value;
        return this;
      }
      public Builder ClearEvt56ExcessiveRpmOnNeutral() {
        PrepareBuilder();
        result.hasEvt56ExcessiveRpmOnNeutral = false;
        result.evt56ExcessiveRpmOnNeutral_ = false;
        return this;
      }
      
      public bool HasEvt57SpeedingOnNeutral {
        get { return result.hasEvt57SpeedingOnNeutral; }
      }
      public bool Evt57SpeedingOnNeutral {
        get { return result.Evt57SpeedingOnNeutral; }
        set { SetEvt57SpeedingOnNeutral(value); }
      }
      public Builder SetEvt57SpeedingOnNeutral(bool value) {
        PrepareBuilder();
        result.hasEvt57SpeedingOnNeutral = true;
        result.evt57SpeedingOnNeutral_ = value;
        return this;
      }
      public Builder ClearEvt57SpeedingOnNeutral() {
        PrepareBuilder();
        result.hasEvt57SpeedingOnNeutral = false;
        result.evt57SpeedingOnNeutral_ = false;
        return this;
      }
      
      public bool HasEvt58GpsFailure {
        get { return result.hasEvt58GpsFailure; }
      }
      public bool Evt58GpsFailure {
        get { return result.Evt58GpsFailure; }
        set { SetEvt58GpsFailure(value); }
      }
      public Builder SetEvt58GpsFailure(bool value) {
        PrepareBuilder();
        result.hasEvt58GpsFailure = true;
        result.evt58GpsFailure_ = value;
        return this;
      }
      public Builder ClearEvt58GpsFailure() {
        PrepareBuilder();
        result.hasEvt58GpsFailure = false;
        result.evt58GpsFailure_ = false;
        return this;
      }
      
      public bool HasEvt59DistanceAttached {
        get { return result.hasEvt59DistanceAttached; }
      }
      public bool Evt59DistanceAttached {
        get { return result.Evt59DistanceAttached; }
        set { SetEvt59DistanceAttached(value); }
      }
      public Builder SetEvt59DistanceAttached(bool value) {
        PrepareBuilder();
        result.hasEvt59DistanceAttached = true;
        result.evt59DistanceAttached_ = value;
        return this;
      }
      public Builder ClearEvt59DistanceAttached() {
        PrepareBuilder();
        result.hasEvt59DistanceAttached = false;
        result.evt59DistanceAttached_ = false;
        return this;
      }
      
      public bool HasEvt60PowerFailGpsFail {
        get { return result.hasEvt60PowerFailGpsFail; }
      }
      public bool Evt60PowerFailGpsFail {
        get { return result.Evt60PowerFailGpsFail; }
        set { SetEvt60PowerFailGpsFail(value); }
      }
      public Builder SetEvt60PowerFailGpsFail(bool value) {
        PrepareBuilder();
        result.hasEvt60PowerFailGpsFail = true;
        result.evt60PowerFailGpsFail_ = value;
        return this;
      }
      public Builder ClearEvt60PowerFailGpsFail() {
        PrepareBuilder();
        result.hasEvt60PowerFailGpsFail = false;
        result.evt60PowerFailGpsFail_ = false;
        return this;
      }
      
      public bool HasEvt61AgpsRequest {
        get { return result.hasEvt61AgpsRequest; }
      }
      public bool Evt61AgpsRequest {
        get { return result.Evt61AgpsRequest; }
        set { SetEvt61AgpsRequest(value); }
      }
      public Builder SetEvt61AgpsRequest(bool value) {
        PrepareBuilder();
        result.hasEvt61AgpsRequest = true;
        result.evt61AgpsRequest_ = value;
        return this;
      }
      public Builder ClearEvt61AgpsRequest() {
        PrepareBuilder();
        result.hasEvt61AgpsRequest = false;
        result.evt61AgpsRequest_ = false;
        return this;
      }
      
      public bool HasEvt62TagAccessoriesStatusChanged {
        get { return result.hasEvt62TagAccessoriesStatusChanged; }
      }
      public bool Evt62TagAccessoriesStatusChanged {
        get { return result.Evt62TagAccessoriesStatusChanged; }
        set { SetEvt62TagAccessoriesStatusChanged(value); }
      }
      public Builder SetEvt62TagAccessoriesStatusChanged(bool value) {
        PrepareBuilder();
        result.hasEvt62TagAccessoriesStatusChanged = true;
        result.evt62TagAccessoriesStatusChanged_ = value;
        return this;
      }
      public Builder ClearEvt62TagAccessoriesStatusChanged() {
        PrepareBuilder();
        result.hasEvt62TagAccessoriesStatusChanged = false;
        result.evt62TagAccessoriesStatusChanged_ = false;
        return this;
      }
      
      public bool HasEvt63TagAccessoriesBatteryStatusChanged {
        get { return result.hasEvt63TagAccessoriesBatteryStatusChanged; }
      }
      public bool Evt63TagAccessoriesBatteryStatusChanged {
        get { return result.Evt63TagAccessoriesBatteryStatusChanged; }
        set { SetEvt63TagAccessoriesBatteryStatusChanged(value); }
      }
      public Builder SetEvt63TagAccessoriesBatteryStatusChanged(bool value) {
        PrepareBuilder();
        result.hasEvt63TagAccessoriesBatteryStatusChanged = true;
        result.evt63TagAccessoriesBatteryStatusChanged_ = value;
        return this;
      }
      public Builder ClearEvt63TagAccessoriesBatteryStatusChanged() {
        PrepareBuilder();
        result.hasEvt63TagAccessoriesBatteryStatusChanged = false;
        result.evt63TagAccessoriesBatteryStatusChanged_ = false;
        return this;
      }
      
      public bool HasEvt64LinkBroken {
        get { return result.hasEvt64LinkBroken; }
      }
      public bool Evt64LinkBroken {
        get { return result.Evt64LinkBroken; }
        set { SetEvt64LinkBroken(value); }
      }
      public Builder SetEvt64LinkBroken(bool value) {
        PrepareBuilder();
        result.hasEvt64LinkBroken = true;
        result.evt64LinkBroken_ = value;
        return this;
      }
      public Builder ClearEvt64LinkBroken() {
        PrepareBuilder();
        result.hasEvt64LinkBroken = false;
        result.evt64LinkBroken_ = false;
        return this;
      }
      
      public bool HasEvt65ExpandInputChanged {
        get { return result.hasEvt65ExpandInputChanged; }
      }
      public bool Evt65ExpandInputChanged {
        get { return result.Evt65ExpandInputChanged; }
        set { SetEvt65ExpandInputChanged(value); }
      }
      public Builder SetEvt65ExpandInputChanged(bool value) {
        PrepareBuilder();
        result.hasEvt65ExpandInputChanged = true;
        result.evt65ExpandInputChanged_ = value;
        return this;
      }
      public Builder ClearEvt65ExpandInputChanged() {
        PrepareBuilder();
        result.hasEvt65ExpandInputChanged = false;
        result.evt65ExpandInputChanged_ = false;
        return this;
      }
      
      public bool HasEvt66TagAccessoriesStatusChangedBack {
        get { return result.hasEvt66TagAccessoriesStatusChangedBack; }
      }
      public bool Evt66TagAccessoriesStatusChangedBack {
        get { return result.Evt66TagAccessoriesStatusChangedBack; }
        set { SetEvt66TagAccessoriesStatusChangedBack(value); }
      }
      public Builder SetEvt66TagAccessoriesStatusChangedBack(bool value) {
        PrepareBuilder();
        result.hasEvt66TagAccessoriesStatusChangedBack = true;
        result.evt66TagAccessoriesStatusChangedBack_ = value;
        return this;
      }
      public Builder ClearEvt66TagAccessoriesStatusChangedBack() {
        PrepareBuilder();
        result.hasEvt66TagAccessoriesStatusChangedBack = false;
        result.evt66TagAccessoriesStatusChangedBack_ = false;
        return this;
      }
      
      public bool HasEvt67OnlyHave30PowerInBattery {
        get { return result.hasEvt67OnlyHave30PowerInBattery; }
      }
      public bool Evt67OnlyHave30PowerInBattery {
        get { return result.Evt67OnlyHave30PowerInBattery; }
        set { SetEvt67OnlyHave30PowerInBattery(value); }
      }
      public Builder SetEvt67OnlyHave30PowerInBattery(bool value) {
        PrepareBuilder();
        result.hasEvt67OnlyHave30PowerInBattery = true;
        result.evt67OnlyHave30PowerInBattery_ = value;
        return this;
      }
      public Builder ClearEvt67OnlyHave30PowerInBattery() {
        PrepareBuilder();
        result.hasEvt67OnlyHave30PowerInBattery = false;
        result.evt67OnlyHave30PowerInBattery_ = false;
        return this;
      }
      
      public bool HasEvt68OnlyHave20PowerInBattery {
        get { return result.hasEvt68OnlyHave20PowerInBattery; }
      }
      public bool Evt68OnlyHave20PowerInBattery {
        get { return result.Evt68OnlyHave20PowerInBattery; }
        set { SetEvt68OnlyHave20PowerInBattery(value); }
      }
      public Builder SetEvt68OnlyHave20PowerInBattery(bool value) {
        PrepareBuilder();
        result.hasEvt68OnlyHave20PowerInBattery = true;
        result.evt68OnlyHave20PowerInBattery_ = value;
        return this;
      }
      public Builder ClearEvt68OnlyHave20PowerInBattery() {
        PrepareBuilder();
        result.hasEvt68OnlyHave20PowerInBattery = false;
        result.evt68OnlyHave20PowerInBattery_ = false;
        return this;
      }
      
      public bool HasEvt69KeepStoppedWithIgnitionOnStatus {
        get { return result.hasEvt69KeepStoppedWithIgnitionOnStatus; }
      }
      public bool Evt69KeepStoppedWithIgnitionOnStatus {
        get { return result.Evt69KeepStoppedWithIgnitionOnStatus; }
        set { SetEvt69KeepStoppedWithIgnitionOnStatus(value); }
      }
      public Builder SetEvt69KeepStoppedWithIgnitionOnStatus(bool value) {
        PrepareBuilder();
        result.hasEvt69KeepStoppedWithIgnitionOnStatus = true;
        result.evt69KeepStoppedWithIgnitionOnStatus_ = value;
        return this;
      }
      public Builder ClearEvt69KeepStoppedWithIgnitionOnStatus() {
        PrepareBuilder();
        result.hasEvt69KeepStoppedWithIgnitionOnStatus = false;
        result.evt69KeepStoppedWithIgnitionOnStatus_ = false;
        return this;
      }
      
      public bool HasEvt70ImproperMoving {
        get { return result.hasEvt70ImproperMoving; }
      }
      public bool Evt70ImproperMoving {
        get { return result.Evt70ImproperMoving; }
        set { SetEvt70ImproperMoving(value); }
      }
      public Builder SetEvt70ImproperMoving(bool value) {
        PrepareBuilder();
        result.hasEvt70ImproperMoving = true;
        result.evt70ImproperMoving_ = value;
        return this;
      }
      public Builder ClearEvt70ImproperMoving() {
        PrepareBuilder();
        result.hasEvt70ImproperMoving = false;
        result.evt70ImproperMoving_ = false;
        return this;
      }
      
      public bool HasEvt71CameraBlind {
        get { return result.hasEvt71CameraBlind; }
      }
      public bool Evt71CameraBlind {
        get { return result.Evt71CameraBlind; }
        set { SetEvt71CameraBlind(value); }
      }
      public Builder SetEvt71CameraBlind(bool value) {
        PrepareBuilder();
        result.hasEvt71CameraBlind = true;
        result.evt71CameraBlind_ = value;
        return this;
      }
      public Builder ClearEvt71CameraBlind() {
        PrepareBuilder();
        result.hasEvt71CameraBlind = false;
        result.evt71CameraBlind_ = false;
        return this;
      }
      
      public bool HasEvt72BlindRecover {
        get { return result.hasEvt72BlindRecover; }
      }
      public bool Evt72BlindRecover {
        get { return result.Evt72BlindRecover; }
        set { SetEvt72BlindRecover(value); }
      }
      public Builder SetEvt72BlindRecover(bool value) {
        PrepareBuilder();
        result.hasEvt72BlindRecover = true;
        result.evt72BlindRecover_ = value;
        return this;
      }
      public Builder ClearEvt72BlindRecover() {
        PrepareBuilder();
        result.hasEvt72BlindRecover = false;
        result.evt72BlindRecover_ = false;
        return this;
      }
      
      public bool HasEvt73VideoLost {
        get { return result.hasEvt73VideoLost; }
      }
      public bool Evt73VideoLost {
        get { return result.Evt73VideoLost; }
        set { SetEvt73VideoLost(value); }
      }
      public Builder SetEvt73VideoLost(bool value) {
        PrepareBuilder();
        result.hasEvt73VideoLost = true;
        result.evt73VideoLost_ = value;
        return this;
      }
      public Builder ClearEvt73VideoLost() {
        PrepareBuilder();
        result.hasEvt73VideoLost = false;
        result.evt73VideoLost_ = false;
        return this;
      }
      
      public bool HasEvt74VideoOk {
        get { return result.hasEvt74VideoOk; }
      }
      public bool Evt74VideoOk {
        get { return result.Evt74VideoOk; }
        set { SetEvt74VideoOk(value); }
      }
      public Builder SetEvt74VideoOk(bool value) {
        PrepareBuilder();
        result.hasEvt74VideoOk = true;
        result.evt74VideoOk_ = value;
        return this;
      }
      public Builder ClearEvt74VideoOk() {
        PrepareBuilder();
        result.hasEvt74VideoOk = false;
        result.evt74VideoOk_ = false;
        return this;
      }
      
      public bool HasEvt75Rs232DataIncoming {
        get { return result.hasEvt75Rs232DataIncoming; }
      }
      public bool Evt75Rs232DataIncoming {
        get { return result.Evt75Rs232DataIncoming; }
        set { SetEvt75Rs232DataIncoming(value); }
      }
      public Builder SetEvt75Rs232DataIncoming(bool value) {
        PrepareBuilder();
        result.hasEvt75Rs232DataIncoming = true;
        result.evt75Rs232DataIncoming_ = value;
        return this;
      }
      public Builder ClearEvt75Rs232DataIncoming() {
        PrepareBuilder();
        result.hasEvt75Rs232DataIncoming = false;
        result.evt75Rs232DataIncoming_ = false;
        return this;
      }
      
      public bool HasEvt76CalibrateIgnitionVoltageFinished {
        get { return result.hasEvt76CalibrateIgnitionVoltageFinished; }
      }
      public bool Evt76CalibrateIgnitionVoltageFinished {
        get { return result.Evt76CalibrateIgnitionVoltageFinished; }
        set { SetEvt76CalibrateIgnitionVoltageFinished(value); }
      }
      public Builder SetEvt76CalibrateIgnitionVoltageFinished(bool value) {
        PrepareBuilder();
        result.hasEvt76CalibrateIgnitionVoltageFinished = true;
        result.evt76CalibrateIgnitionVoltageFinished_ = value;
        return this;
      }
      public Builder ClearEvt76CalibrateIgnitionVoltageFinished() {
        PrepareBuilder();
        result.hasEvt76CalibrateIgnitionVoltageFinished = false;
        result.evt76CalibrateIgnitionVoltageFinished_ = false;
        return this;
      }
      
      public bool HasEvt77BeforeDeepSleep {
        get { return result.hasEvt77BeforeDeepSleep; }
      }
      public bool Evt77BeforeDeepSleep {
        get { return result.Evt77BeforeDeepSleep; }
        set { SetEvt77BeforeDeepSleep(value); }
      }
      public Builder SetEvt77BeforeDeepSleep(bool value) {
        PrepareBuilder();
        result.hasEvt77BeforeDeepSleep = true;
        result.evt77BeforeDeepSleep_ = value;
        return this;
      }
      public Builder ClearEvt77BeforeDeepSleep() {
        PrepareBuilder();
        result.hasEvt77BeforeDeepSleep = false;
        result.evt77BeforeDeepSleep_ = false;
        return this;
      }
      
      public bool HasEvt78ExceedMaxSpeedInRaining {
        get { return result.hasEvt78ExceedMaxSpeedInRaining; }
      }
      public bool Evt78ExceedMaxSpeedInRaining {
        get { return result.Evt78ExceedMaxSpeedInRaining; }
        set { SetEvt78ExceedMaxSpeedInRaining(value); }
      }
      public Builder SetEvt78ExceedMaxSpeedInRaining(bool value) {
        PrepareBuilder();
        result.hasEvt78ExceedMaxSpeedInRaining = true;
        result.evt78ExceedMaxSpeedInRaining_ = value;
        return this;
      }
      public Builder ClearEvt78ExceedMaxSpeedInRaining() {
        PrepareBuilder();
        result.hasEvt78ExceedMaxSpeedInRaining = false;
        result.evt78ExceedMaxSpeedInRaining_ = false;
        return this;
      }
      
      public bool HasEvt79ResumeSpeedAfterExceedInRaining {
        get { return result.hasEvt79ResumeSpeedAfterExceedInRaining; }
      }
      public bool Evt79ResumeSpeedAfterExceedInRaining {
        get { return result.Evt79ResumeSpeedAfterExceedInRaining; }
        set { SetEvt79ResumeSpeedAfterExceedInRaining(value); }
      }
      public Builder SetEvt79ResumeSpeedAfterExceedInRaining(bool value) {
        PrepareBuilder();
        result.hasEvt79ResumeSpeedAfterExceedInRaining = true;
        result.evt79ResumeSpeedAfterExceedInRaining_ = value;
        return this;
      }
      public Builder ClearEvt79ResumeSpeedAfterExceedInRaining() {
        PrepareBuilder();
        result.hasEvt79ResumeSpeedAfterExceedInRaining = false;
        result.evt79ResumeSpeedAfterExceedInRaining_ = false;
        return this;
      }
      
      public bool HasEvt80AccelerationExceed {
        get { return result.hasEvt80AccelerationExceed; }
      }
      public bool Evt80AccelerationExceed {
        get { return result.Evt80AccelerationExceed; }
        set { SetEvt80AccelerationExceed(value); }
      }
      public Builder SetEvt80AccelerationExceed(bool value) {
        PrepareBuilder();
        result.hasEvt80AccelerationExceed = true;
        result.evt80AccelerationExceed_ = value;
        return this;
      }
      public Builder ClearEvt80AccelerationExceed() {
        PrepareBuilder();
        result.hasEvt80AccelerationExceed = false;
        result.evt80AccelerationExceed_ = false;
        return this;
      }
      
      public bool HasEvt81AccelerationResumeAfterExceed {
        get { return result.hasEvt81AccelerationResumeAfterExceed; }
      }
      public bool Evt81AccelerationResumeAfterExceed {
        get { return result.Evt81AccelerationResumeAfterExceed; }
        set { SetEvt81AccelerationResumeAfterExceed(value); }
      }
      public Builder SetEvt81AccelerationResumeAfterExceed(bool value) {
        PrepareBuilder();
        result.hasEvt81AccelerationResumeAfterExceed = true;
        result.evt81AccelerationResumeAfterExceed_ = value;
        return this;
      }
      public Builder ClearEvt81AccelerationResumeAfterExceed() {
        PrepareBuilder();
        result.hasEvt81AccelerationResumeAfterExceed = false;
        result.evt81AccelerationResumeAfterExceed_ = false;
        return this;
      }
      
      public bool HasEvt82DecelerationExceed {
        get { return result.hasEvt82DecelerationExceed; }
      }
      public bool Evt82DecelerationExceed {
        get { return result.Evt82DecelerationExceed; }
        set { SetEvt82DecelerationExceed(value); }
      }
      public Builder SetEvt82DecelerationExceed(bool value) {
        PrepareBuilder();
        result.hasEvt82DecelerationExceed = true;
        result.evt82DecelerationExceed_ = value;
        return this;
      }
      public Builder ClearEvt82DecelerationExceed() {
        PrepareBuilder();
        result.hasEvt82DecelerationExceed = false;
        result.evt82DecelerationExceed_ = false;
        return this;
      }
      
      public bool HasEvt83DecelerationResumeAfterExceed {
        get { return result.hasEvt83DecelerationResumeAfterExceed; }
      }
      public bool Evt83DecelerationResumeAfterExceed {
        get { return result.Evt83DecelerationResumeAfterExceed; }
        set { SetEvt83DecelerationResumeAfterExceed(value); }
      }
      public Builder SetEvt83DecelerationResumeAfterExceed(bool value) {
        PrepareBuilder();
        result.hasEvt83DecelerationResumeAfterExceed = true;
        result.evt83DecelerationResumeAfterExceed_ = value;
        return this;
      }
      public Builder ClearEvt83DecelerationResumeAfterExceed() {
        PrepareBuilder();
        result.hasEvt83DecelerationResumeAfterExceed = false;
        result.evt83DecelerationResumeAfterExceed_ = false;
        return this;
      }
      
      public bool HasEvt84RfidDriverLogin {
        get { return result.hasEvt84RfidDriverLogin; }
      }
      public bool Evt84RfidDriverLogin {
        get { return result.Evt84RfidDriverLogin; }
        set { SetEvt84RfidDriverLogin(value); }
      }
      public Builder SetEvt84RfidDriverLogin(bool value) {
        PrepareBuilder();
        result.hasEvt84RfidDriverLogin = true;
        result.evt84RfidDriverLogin_ = value;
        return this;
      }
      public Builder ClearEvt84RfidDriverLogin() {
        PrepareBuilder();
        result.hasEvt84RfidDriverLogin = false;
        result.evt84RfidDriverLogin_ = false;
        return this;
      }
      
      public bool HasEvt85RfidDriverLogout {
        get { return result.hasEvt85RfidDriverLogout; }
      }
      public bool Evt85RfidDriverLogout {
        get { return result.Evt85RfidDriverLogout; }
        set { SetEvt85RfidDriverLogout(value); }
      }
      public Builder SetEvt85RfidDriverLogout(bool value) {
        PrepareBuilder();
        result.hasEvt85RfidDriverLogout = true;
        result.evt85RfidDriverLogout_ = value;
        return this;
      }
      public Builder ClearEvt85RfidDriverLogout() {
        PrepareBuilder();
        result.hasEvt85RfidDriverLogout = false;
        result.evt85RfidDriverLogout_ = false;
        return this;
      }
      
      public bool HasEvt86RfidPassengerLogin {
        get { return result.hasEvt86RfidPassengerLogin; }
      }
      public bool Evt86RfidPassengerLogin {
        get { return result.Evt86RfidPassengerLogin; }
        set { SetEvt86RfidPassengerLogin(value); }
      }
      public Builder SetEvt86RfidPassengerLogin(bool value) {
        PrepareBuilder();
        result.hasEvt86RfidPassengerLogin = true;
        result.evt86RfidPassengerLogin_ = value;
        return this;
      }
      public Builder ClearEvt86RfidPassengerLogin() {
        PrepareBuilder();
        result.hasEvt86RfidPassengerLogin = false;
        result.evt86RfidPassengerLogin_ = false;
        return this;
      }
      
      public bool HasEvt87GenericExceedMaxSpeed {
        get { return result.hasEvt87GenericExceedMaxSpeed; }
      }
      public bool Evt87GenericExceedMaxSpeed {
        get { return result.Evt87GenericExceedMaxSpeed; }
        set { SetEvt87GenericExceedMaxSpeed(value); }
      }
      public Builder SetEvt87GenericExceedMaxSpeed(bool value) {
        PrepareBuilder();
        result.hasEvt87GenericExceedMaxSpeed = true;
        result.evt87GenericExceedMaxSpeed_ = value;
        return this;
      }
      public Builder ClearEvt87GenericExceedMaxSpeed() {
        PrepareBuilder();
        result.hasEvt87GenericExceedMaxSpeed = false;
        result.evt87GenericExceedMaxSpeed_ = false;
        return this;
      }
      
      public bool HasEvt88GenericResumeSpeedAfterExceed {
        get { return result.hasEvt88GenericResumeSpeedAfterExceed; }
      }
      public bool Evt88GenericResumeSpeedAfterExceed {
        get { return result.Evt88GenericResumeSpeedAfterExceed; }
        set { SetEvt88GenericResumeSpeedAfterExceed(value); }
      }
      public Builder SetEvt88GenericResumeSpeedAfterExceed(bool value) {
        PrepareBuilder();
        result.hasEvt88GenericResumeSpeedAfterExceed = true;
        result.evt88GenericResumeSpeedAfterExceed_ = value;
        return this;
      }
      public Builder ClearEvt88GenericResumeSpeedAfterExceed() {
        PrepareBuilder();
        result.hasEvt88GenericResumeSpeedAfterExceed = false;
        result.evt88GenericResumeSpeedAfterExceed_ = false;
        return this;
      }
      
      public bool HasEvt89FailTryDevicePasswordMoreThan3Times {
        get { return result.hasEvt89FailTryDevicePasswordMoreThan3Times; }
      }
      public bool Evt89FailTryDevicePasswordMoreThan3Times {
        get { return result.Evt89FailTryDevicePasswordMoreThan3Times; }
        set { SetEvt89FailTryDevicePasswordMoreThan3Times(value); }
      }
      public Builder SetEvt89FailTryDevicePasswordMoreThan3Times(bool value) {
        PrepareBuilder();
        result.hasEvt89FailTryDevicePasswordMoreThan3Times = true;
        result.evt89FailTryDevicePasswordMoreThan3Times_ = value;
        return this;
      }
      public Builder ClearEvt89FailTryDevicePasswordMoreThan3Times() {
        PrepareBuilder();
        result.hasEvt89FailTryDevicePasswordMoreThan3Times = false;
        result.evt89FailTryDevicePasswordMoreThan3Times_ = false;
        return this;
      }
      
      public bool HasEvt90ReceiveEngineSealActivateCommand {
        get { return result.hasEvt90ReceiveEngineSealActivateCommand; }
      }
      public bool Evt90ReceiveEngineSealActivateCommand {
        get { return result.Evt90ReceiveEngineSealActivateCommand; }
        set { SetEvt90ReceiveEngineSealActivateCommand(value); }
      }
      public Builder SetEvt90ReceiveEngineSealActivateCommand(bool value) {
        PrepareBuilder();
        result.hasEvt90ReceiveEngineSealActivateCommand = true;
        result.evt90ReceiveEngineSealActivateCommand_ = value;
        return this;
      }
      public Builder ClearEvt90ReceiveEngineSealActivateCommand() {
        PrepareBuilder();
        result.hasEvt90ReceiveEngineSealActivateCommand = false;
        result.evt90ReceiveEngineSealActivateCommand_ = false;
        return this;
      }
      
      public bool HasEvt91EngineSealActivated {
        get { return result.hasEvt91EngineSealActivated; }
      }
      public bool Evt91EngineSealActivated {
        get { return result.Evt91EngineSealActivated; }
        set { SetEvt91EngineSealActivated(value); }
      }
      public Builder SetEvt91EngineSealActivated(bool value) {
        PrepareBuilder();
        result.hasEvt91EngineSealActivated = true;
        result.evt91EngineSealActivated_ = value;
        return this;
      }
      public Builder ClearEvt91EngineSealActivated() {
        PrepareBuilder();
        result.hasEvt91EngineSealActivated = false;
        result.evt91EngineSealActivated_ = false;
        return this;
      }
      
      public bool HasEvt92EngineSealDeactivated {
        get { return result.hasEvt92EngineSealDeactivated; }
      }
      public bool Evt92EngineSealDeactivated {
        get { return result.Evt92EngineSealDeactivated; }
        set { SetEvt92EngineSealDeactivated(value); }
      }
      public Builder SetEvt92EngineSealDeactivated(bool value) {
        PrepareBuilder();
        result.hasEvt92EngineSealDeactivated = true;
        result.evt92EngineSealDeactivated_ = value;
        return this;
      }
      public Builder ClearEvt92EngineSealDeactivated() {
        PrepareBuilder();
        result.hasEvt92EngineSealDeactivated = false;
        result.evt92EngineSealDeactivated_ = false;
        return this;
      }
      
      public bool HasEvt93EngineSealActivatedByRelay {
        get { return result.hasEvt93EngineSealActivatedByRelay; }
      }
      public bool Evt93EngineSealActivatedByRelay {
        get { return result.Evt93EngineSealActivatedByRelay; }
        set { SetEvt93EngineSealActivatedByRelay(value); }
      }
      public Builder SetEvt93EngineSealActivatedByRelay(bool value) {
        PrepareBuilder();
        result.hasEvt93EngineSealActivatedByRelay = true;
        result.evt93EngineSealActivatedByRelay_ = value;
        return this;
      }
      public Builder ClearEvt93EngineSealActivatedByRelay() {
        PrepareBuilder();
        result.hasEvt93EngineSealActivatedByRelay = false;
        result.evt93EngineSealActivatedByRelay_ = false;
        return this;
      }
      
      public bool HasEvt94EngineSealDeactivatedRelay {
        get { return result.hasEvt94EngineSealDeactivatedRelay; }
      }
      public bool Evt94EngineSealDeactivatedRelay {
        get { return result.Evt94EngineSealDeactivatedRelay; }
        set { SetEvt94EngineSealDeactivatedRelay(value); }
      }
      public Builder SetEvt94EngineSealDeactivatedRelay(bool value) {
        PrepareBuilder();
        result.hasEvt94EngineSealDeactivatedRelay = true;
        result.evt94EngineSealDeactivatedRelay_ = value;
        return this;
      }
      public Builder ClearEvt94EngineSealDeactivatedRelay() {
        PrepareBuilder();
        result.hasEvt94EngineSealDeactivatedRelay = false;
        result.evt94EngineSealDeactivatedRelay_ = false;
        return this;
      }
      
      public bool HasEvt95EngineSealActivatedByInput1 {
        get { return result.hasEvt95EngineSealActivatedByInput1; }
      }
      public bool Evt95EngineSealActivatedByInput1 {
        get { return result.Evt95EngineSealActivatedByInput1; }
        set { SetEvt95EngineSealActivatedByInput1(value); }
      }
      public Builder SetEvt95EngineSealActivatedByInput1(bool value) {
        PrepareBuilder();
        result.hasEvt95EngineSealActivatedByInput1 = true;
        result.evt95EngineSealActivatedByInput1_ = value;
        return this;
      }
      public Builder ClearEvt95EngineSealActivatedByInput1() {
        PrepareBuilder();
        result.hasEvt95EngineSealActivatedByInput1 = false;
        result.evt95EngineSealActivatedByInput1_ = false;
        return this;
      }
      
      public bool HasEvt96EngineSealDeactivatedByInput1 {
        get { return result.hasEvt96EngineSealDeactivatedByInput1; }
      }
      public bool Evt96EngineSealDeactivatedByInput1 {
        get { return result.Evt96EngineSealDeactivatedByInput1; }
        set { SetEvt96EngineSealDeactivatedByInput1(value); }
      }
      public Builder SetEvt96EngineSealDeactivatedByInput1(bool value) {
        PrepareBuilder();
        result.hasEvt96EngineSealDeactivatedByInput1 = true;
        result.evt96EngineSealDeactivatedByInput1_ = value;
        return this;
      }
      public Builder ClearEvt96EngineSealDeactivatedByInput1() {
        PrepareBuilder();
        result.hasEvt96EngineSealDeactivatedByInput1 = false;
        result.evt96EngineSealDeactivatedByInput1_ = false;
        return this;
      }
      
      public bool HasEvt97NetworkScanResponse {
        get { return result.hasEvt97NetworkScanResponse; }
      }
      public bool Evt97NetworkScanResponse {
        get { return result.Evt97NetworkScanResponse; }
        set { SetEvt97NetworkScanResponse(value); }
      }
      public Builder SetEvt97NetworkScanResponse(bool value) {
        PrepareBuilder();
        result.hasEvt97NetworkScanResponse = true;
        result.evt97NetworkScanResponse_ = value;
        return this;
      }
      public Builder ClearEvt97NetworkScanResponse() {
        PrepareBuilder();
        result.hasEvt97NetworkScanResponse = false;
        result.evt97NetworkScanResponse_ = false;
        return this;
      }
      
      public bool HasEvt98SpeedHistogram {
        get { return result.hasEvt98SpeedHistogram; }
      }
      public bool Evt98SpeedHistogram {
        get { return result.Evt98SpeedHistogram; }
        set { SetEvt98SpeedHistogram(value); }
      }
      public Builder SetEvt98SpeedHistogram(bool value) {
        PrepareBuilder();
        result.hasEvt98SpeedHistogram = true;
        result.evt98SpeedHistogram_ = value;
        return this;
      }
      public Builder ClearEvt98SpeedHistogram() {
        PrepareBuilder();
        result.hasEvt98SpeedHistogram = false;
        result.evt98SpeedHistogram_ = false;
        return this;
      }
      
      public bool HasEvt99TripSummarizationEvent {
        get { return result.hasEvt99TripSummarizationEvent; }
      }
      public bool Evt99TripSummarizationEvent {
        get { return result.Evt99TripSummarizationEvent; }
        set { SetEvt99TripSummarizationEvent(value); }
      }
      public Builder SetEvt99TripSummarizationEvent(bool value) {
        PrepareBuilder();
        result.hasEvt99TripSummarizationEvent = true;
        result.evt99TripSummarizationEvent_ = value;
        return this;
      }
      public Builder ClearEvt99TripSummarizationEvent() {
        PrepareBuilder();
        result.hasEvt99TripSummarizationEvent = false;
        result.evt99TripSummarizationEvent_ = false;
        return this;
      }
      
      public bool HasEvt100TelemetryEvents {
        get { return result.hasEvt100TelemetryEvents; }
      }
      public bool Evt100TelemetryEvents {
        get { return result.Evt100TelemetryEvents; }
        set { SetEvt100TelemetryEvents(value); }
      }
      public Builder SetEvt100TelemetryEvents(bool value) {
        PrepareBuilder();
        result.hasEvt100TelemetryEvents = true;
        result.evt100TelemetryEvents_ = value;
        return this;
      }
      public Builder ClearEvt100TelemetryEvents() {
        PrepareBuilder();
        result.hasEvt100TelemetryEvents = false;
        result.evt100TelemetryEvents_ = false;
        return this;
      }
      
      public bool HasEvt101GsensorHistoricEvent {
        get { return result.hasEvt101GsensorHistoricEvent; }
      }
      public bool Evt101GsensorHistoricEvent {
        get { return result.Evt101GsensorHistoricEvent; }
        set { SetEvt101GsensorHistoricEvent(value); }
      }
      public Builder SetEvt101GsensorHistoricEvent(bool value) {
        PrepareBuilder();
        result.hasEvt101GsensorHistoricEvent = true;
        result.evt101GsensorHistoricEvent_ = value;
        return this;
      }
      public Builder ClearEvt101GsensorHistoricEvent() {
        PrepareBuilder();
        result.hasEvt101GsensorHistoricEvent = false;
        result.evt101GsensorHistoricEvent_ = false;
        return this;
      }
      
      public bool HasEvt102RouteReconstructionEvent {
        get { return result.hasEvt102RouteReconstructionEvent; }
      }
      public bool Evt102RouteReconstructionEvent {
        get { return result.Evt102RouteReconstructionEvent; }
        set { SetEvt102RouteReconstructionEvent(value); }
      }
      public Builder SetEvt102RouteReconstructionEvent(bool value) {
        PrepareBuilder();
        result.hasEvt102RouteReconstructionEvent = true;
        result.evt102RouteReconstructionEvent_ = value;
        return this;
      }
      public Builder ClearEvt102RouteReconstructionEvent() {
        PrepareBuilder();
        result.hasEvt102RouteReconstructionEvent = false;
        result.evt102RouteReconstructionEvent_ = false;
        return this;
      }
    }
    static mxt1xx_u_dynamic_setup_event() {
      object.ReferenceEquals(global::maxtrack.pb.mxt1xx.Mxt1Xx.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mxt1xx_u_dynamic_setup_info_group : pb::GeneratedMessage<mxt1xx_u_dynamic_setup_info_group, mxt1xx_u_dynamic_setup_info_group.Builder> {
    private mxt1xx_u_dynamic_setup_info_group() { }
    private static readonly mxt1xx_u_dynamic_setup_info_group defaultInstance = new mxt1xx_u_dynamic_setup_info_group().MakeReadOnly();
    private static readonly string[] _mxt1XxUDynamicSetupInfoGroupFieldNames = new string[] { "detail_voltage", "event_id", "general", "hourmeter", "odometer", "waypoint", "wireless" };
    private static readonly uint[] _mxt1XxUDynamicSetupInfoGroupFieldTags = new uint[] { 56, 48, 24, 40, 32, 8, 16 };
    public static mxt1xx_u_dynamic_setup_info_group DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mxt1xx_u_dynamic_setup_info_group DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mxt1xx_u_dynamic_setup_info_group ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_dynamic_setup_info_group__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mxt1xx_u_dynamic_setup_info_group, mxt1xx_u_dynamic_setup_info_group.Builder> InternalFieldAccessors {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_dynamic_setup_info_group__FieldAccessorTable; }
    }
    
    public const int WaypointFieldNumber = 1;
    private bool hasWaypoint;
    private bool waypoint_;
    public bool HasWaypoint {
      get { return hasWaypoint; }
    }
    public bool Waypoint {
      get { return waypoint_; }
    }
    
    public const int WirelessFieldNumber = 2;
    private bool hasWireless;
    private bool wireless_;
    public bool HasWireless {
      get { return hasWireless; }
    }
    public bool Wireless {
      get { return wireless_; }
    }
    
    public const int GeneralFieldNumber = 3;
    private bool hasGeneral;
    private bool general_;
    public bool HasGeneral {
      get { return hasGeneral; }
    }
    public bool General {
      get { return general_; }
    }
    
    public const int OdometerFieldNumber = 4;
    private bool hasOdometer;
    private bool odometer_;
    public bool HasOdometer {
      get { return hasOdometer; }
    }
    public bool Odometer {
      get { return odometer_; }
    }
    
    public const int HourmeterFieldNumber = 5;
    private bool hasHourmeter;
    private bool hourmeter_;
    public bool HasHourmeter {
      get { return hasHourmeter; }
    }
    public bool Hourmeter {
      get { return hourmeter_; }
    }
    
    public const int EventIdFieldNumber = 6;
    private bool hasEventId;
    private bool eventId_;
    public bool HasEventId {
      get { return hasEventId; }
    }
    public bool EventId {
      get { return eventId_; }
    }
    
    public const int DetailVoltageFieldNumber = 7;
    private bool hasDetailVoltage;
    private bool detailVoltage_;
    public bool HasDetailVoltage {
      get { return hasDetailVoltage; }
    }
    public bool DetailVoltage {
      get { return detailVoltage_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mxt1XxUDynamicSetupInfoGroupFieldNames;
      if (hasWaypoint) {
        output.WriteBool(1, field_names[5], Waypoint);
      }
      if (hasWireless) {
        output.WriteBool(2, field_names[6], Wireless);
      }
      if (hasGeneral) {
        output.WriteBool(3, field_names[2], General);
      }
      if (hasOdometer) {
        output.WriteBool(4, field_names[4], Odometer);
      }
      if (hasHourmeter) {
        output.WriteBool(5, field_names[3], Hourmeter);
      }
      if (hasEventId) {
        output.WriteBool(6, field_names[1], EventId);
      }
      if (hasDetailVoltage) {
        output.WriteBool(7, field_names[0], DetailVoltage);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasWaypoint) {
        size += pb::CodedOutputStream.ComputeBoolSize(1, Waypoint);
      }
      if (hasWireless) {
        size += pb::CodedOutputStream.ComputeBoolSize(2, Wireless);
      }
      if (hasGeneral) {
        size += pb::CodedOutputStream.ComputeBoolSize(3, General);
      }
      if (hasOdometer) {
        size += pb::CodedOutputStream.ComputeBoolSize(4, Odometer);
      }
      if (hasHourmeter) {
        size += pb::CodedOutputStream.ComputeBoolSize(5, Hourmeter);
      }
      if (hasEventId) {
        size += pb::CodedOutputStream.ComputeBoolSize(6, EventId);
      }
      if (hasDetailVoltage) {
        size += pb::CodedOutputStream.ComputeBoolSize(7, DetailVoltage);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mxt1xx_u_dynamic_setup_info_group ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_info_group ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_info_group ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_info_group ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_info_group ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_info_group ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_info_group ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_info_group ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_info_group ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_info_group ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mxt1xx_u_dynamic_setup_info_group MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mxt1xx_u_dynamic_setup_info_group prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mxt1xx_u_dynamic_setup_info_group, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mxt1xx_u_dynamic_setup_info_group cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mxt1xx_u_dynamic_setup_info_group result;
      
      private mxt1xx_u_dynamic_setup_info_group PrepareBuilder() {
        if (resultIsReadOnly) {
          mxt1xx_u_dynamic_setup_info_group original = result;
          result = new mxt1xx_u_dynamic_setup_info_group();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mxt1xx_u_dynamic_setup_info_group MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_info_group.Descriptor; }
      }
      
      public override mxt1xx_u_dynamic_setup_info_group DefaultInstanceForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_info_group.DefaultInstance; }
      }
      
      public override mxt1xx_u_dynamic_setup_info_group BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mxt1xx_u_dynamic_setup_info_group) {
          return MergeFrom((mxt1xx_u_dynamic_setup_info_group) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mxt1xx_u_dynamic_setup_info_group other) {
        if (other == global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_info_group.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasWaypoint) {
          Waypoint = other.Waypoint;
        }
        if (other.HasWireless) {
          Wireless = other.Wireless;
        }
        if (other.HasGeneral) {
          General = other.General;
        }
        if (other.HasOdometer) {
          Odometer = other.Odometer;
        }
        if (other.HasHourmeter) {
          Hourmeter = other.Hourmeter;
        }
        if (other.HasEventId) {
          EventId = other.EventId;
        }
        if (other.HasDetailVoltage) {
          DetailVoltage = other.DetailVoltage;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mxt1XxUDynamicSetupInfoGroupFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mxt1XxUDynamicSetupInfoGroupFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasWaypoint = input.ReadBool(ref result.waypoint_);
              break;
            }
            case 16: {
              result.hasWireless = input.ReadBool(ref result.wireless_);
              break;
            }
            case 24: {
              result.hasGeneral = input.ReadBool(ref result.general_);
              break;
            }
            case 32: {
              result.hasOdometer = input.ReadBool(ref result.odometer_);
              break;
            }
            case 40: {
              result.hasHourmeter = input.ReadBool(ref result.hourmeter_);
              break;
            }
            case 48: {
              result.hasEventId = input.ReadBool(ref result.eventId_);
              break;
            }
            case 56: {
              result.hasDetailVoltage = input.ReadBool(ref result.detailVoltage_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasWaypoint {
        get { return result.hasWaypoint; }
      }
      public bool Waypoint {
        get { return result.Waypoint; }
        set { SetWaypoint(value); }
      }
      public Builder SetWaypoint(bool value) {
        PrepareBuilder();
        result.hasWaypoint = true;
        result.waypoint_ = value;
        return this;
      }
      public Builder ClearWaypoint() {
        PrepareBuilder();
        result.hasWaypoint = false;
        result.waypoint_ = false;
        return this;
      }
      
      public bool HasWireless {
        get { return result.hasWireless; }
      }
      public bool Wireless {
        get { return result.Wireless; }
        set { SetWireless(value); }
      }
      public Builder SetWireless(bool value) {
        PrepareBuilder();
        result.hasWireless = true;
        result.wireless_ = value;
        return this;
      }
      public Builder ClearWireless() {
        PrepareBuilder();
        result.hasWireless = false;
        result.wireless_ = false;
        return this;
      }
      
      public bool HasGeneral {
        get { return result.hasGeneral; }
      }
      public bool General {
        get { return result.General; }
        set { SetGeneral(value); }
      }
      public Builder SetGeneral(bool value) {
        PrepareBuilder();
        result.hasGeneral = true;
        result.general_ = value;
        return this;
      }
      public Builder ClearGeneral() {
        PrepareBuilder();
        result.hasGeneral = false;
        result.general_ = false;
        return this;
      }
      
      public bool HasOdometer {
        get { return result.hasOdometer; }
      }
      public bool Odometer {
        get { return result.Odometer; }
        set { SetOdometer(value); }
      }
      public Builder SetOdometer(bool value) {
        PrepareBuilder();
        result.hasOdometer = true;
        result.odometer_ = value;
        return this;
      }
      public Builder ClearOdometer() {
        PrepareBuilder();
        result.hasOdometer = false;
        result.odometer_ = false;
        return this;
      }
      
      public bool HasHourmeter {
        get { return result.hasHourmeter; }
      }
      public bool Hourmeter {
        get { return result.Hourmeter; }
        set { SetHourmeter(value); }
      }
      public Builder SetHourmeter(bool value) {
        PrepareBuilder();
        result.hasHourmeter = true;
        result.hourmeter_ = value;
        return this;
      }
      public Builder ClearHourmeter() {
        PrepareBuilder();
        result.hasHourmeter = false;
        result.hourmeter_ = false;
        return this;
      }
      
      public bool HasEventId {
        get { return result.hasEventId; }
      }
      public bool EventId {
        get { return result.EventId; }
        set { SetEventId(value); }
      }
      public Builder SetEventId(bool value) {
        PrepareBuilder();
        result.hasEventId = true;
        result.eventId_ = value;
        return this;
      }
      public Builder ClearEventId() {
        PrepareBuilder();
        result.hasEventId = false;
        result.eventId_ = false;
        return this;
      }
      
      public bool HasDetailVoltage {
        get { return result.hasDetailVoltage; }
      }
      public bool DetailVoltage {
        get { return result.DetailVoltage; }
        set { SetDetailVoltage(value); }
      }
      public Builder SetDetailVoltage(bool value) {
        PrepareBuilder();
        result.hasDetailVoltage = true;
        result.detailVoltage_ = value;
        return this;
      }
      public Builder ClearDetailVoltage() {
        PrepareBuilder();
        result.hasDetailVoltage = false;
        result.detailVoltage_ = false;
        return this;
      }
    }
    static mxt1xx_u_dynamic_setup_info_group() {
      object.ReferenceEquals(global::maxtrack.pb.mxt1xx.Mxt1Xx.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mxt1xx_u_dynamic_setup_anti_theft : pb::GeneratedMessage<mxt1xx_u_dynamic_setup_anti_theft, mxt1xx_u_dynamic_setup_anti_theft.Builder> {
    private mxt1xx_u_dynamic_setup_anti_theft() { }
    private static readonly mxt1xx_u_dynamic_setup_anti_theft defaultInstance = new mxt1xx_u_dynamic_setup_anti_theft().MakeReadOnly();
    private static readonly string[] _mxt1XxUDynamicSetupAntiTheftFieldNames = new string[] { "alarm_mode_timer", "alarmed_after_timer", "anti_theft_enable", "ignition_code", "improper_move_output", "improper_moving", "local_parking", "output1_mask", "output2_mask", "output3_mask", "silence_law" };
    private static readonly uint[] _mxt1XxUDynamicSetupAntiTheftFieldTags = new uint[] { 72, 80, 8, 64, 24, 16, 32, 40, 48, 56, 88 };
    public static mxt1xx_u_dynamic_setup_anti_theft DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mxt1xx_u_dynamic_setup_anti_theft DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mxt1xx_u_dynamic_setup_anti_theft ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_dynamic_setup_anti_theft__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mxt1xx_u_dynamic_setup_anti_theft, mxt1xx_u_dynamic_setup_anti_theft.Builder> InternalFieldAccessors {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_dynamic_setup_anti_theft__FieldAccessorTable; }
    }
    
    public const int AntiTheftEnableFieldNumber = 1;
    private bool hasAntiTheftEnable;
    private bool antiTheftEnable_;
    public bool HasAntiTheftEnable {
      get { return hasAntiTheftEnable; }
    }
    public bool AntiTheftEnable {
      get { return antiTheftEnable_; }
    }
    
    public const int ImproperMovingFieldNumber = 2;
    private bool hasImproperMoving;
    private bool improperMoving_;
    public bool HasImproperMoving {
      get { return hasImproperMoving; }
    }
    public bool ImproperMoving {
      get { return improperMoving_; }
    }
    
    public const int ImproperMoveOutputFieldNumber = 3;
    private bool hasImproperMoveOutput;
    private uint improperMoveOutput_;
    public bool HasImproperMoveOutput {
      get { return hasImproperMoveOutput; }
    }
    [global::System.CLSCompliant(false)]
    public uint ImproperMoveOutput {
      get { return improperMoveOutput_; }
    }
    
    public const int LocalParkingFieldNumber = 4;
    private bool hasLocalParking;
    private bool localParking_;
    public bool HasLocalParking {
      get { return hasLocalParking; }
    }
    public bool LocalParking {
      get { return localParking_; }
    }
    
    public const int Output1MaskFieldNumber = 5;
    private bool hasOutput1Mask;
    private bool output1Mask_;
    public bool HasOutput1Mask {
      get { return hasOutput1Mask; }
    }
    public bool Output1Mask {
      get { return output1Mask_; }
    }
    
    public const int Output2MaskFieldNumber = 6;
    private bool hasOutput2Mask;
    private bool output2Mask_;
    public bool HasOutput2Mask {
      get { return hasOutput2Mask; }
    }
    public bool Output2Mask {
      get { return output2Mask_; }
    }
    
    public const int Output3MaskFieldNumber = 7;
    private bool hasOutput3Mask;
    private bool output3Mask_;
    public bool HasOutput3Mask {
      get { return hasOutput3Mask; }
    }
    public bool Output3Mask {
      get { return output3Mask_; }
    }
    
    public const int IgnitionCodeFieldNumber = 8;
    private bool hasIgnitionCode;
    private uint ignitionCode_;
    public bool HasIgnitionCode {
      get { return hasIgnitionCode; }
    }
    [global::System.CLSCompliant(false)]
    public uint IgnitionCode {
      get { return ignitionCode_; }
    }
    
    public const int AlarmModeTimerFieldNumber = 9;
    private bool hasAlarmModeTimer;
    private uint alarmModeTimer_;
    public bool HasAlarmModeTimer {
      get { return hasAlarmModeTimer; }
    }
    [global::System.CLSCompliant(false)]
    public uint AlarmModeTimer {
      get { return alarmModeTimer_; }
    }
    
    public const int AlarmedAfterTimerFieldNumber = 10;
    private bool hasAlarmedAfterTimer;
    private bool alarmedAfterTimer_;
    public bool HasAlarmedAfterTimer {
      get { return hasAlarmedAfterTimer; }
    }
    public bool AlarmedAfterTimer {
      get { return alarmedAfterTimer_; }
    }
    
    public const int SilenceLawFieldNumber = 11;
    private bool hasSilenceLaw;
    private bool silenceLaw_;
    public bool HasSilenceLaw {
      get { return hasSilenceLaw; }
    }
    public bool SilenceLaw {
      get { return silenceLaw_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mxt1XxUDynamicSetupAntiTheftFieldNames;
      if (hasAntiTheftEnable) {
        output.WriteBool(1, field_names[2], AntiTheftEnable);
      }
      if (hasImproperMoving) {
        output.WriteBool(2, field_names[5], ImproperMoving);
      }
      if (hasImproperMoveOutput) {
        output.WriteUInt32(3, field_names[4], ImproperMoveOutput);
      }
      if (hasLocalParking) {
        output.WriteBool(4, field_names[6], LocalParking);
      }
      if (hasOutput1Mask) {
        output.WriteBool(5, field_names[7], Output1Mask);
      }
      if (hasOutput2Mask) {
        output.WriteBool(6, field_names[8], Output2Mask);
      }
      if (hasOutput3Mask) {
        output.WriteBool(7, field_names[9], Output3Mask);
      }
      if (hasIgnitionCode) {
        output.WriteUInt32(8, field_names[3], IgnitionCode);
      }
      if (hasAlarmModeTimer) {
        output.WriteUInt32(9, field_names[0], AlarmModeTimer);
      }
      if (hasAlarmedAfterTimer) {
        output.WriteBool(10, field_names[1], AlarmedAfterTimer);
      }
      if (hasSilenceLaw) {
        output.WriteBool(11, field_names[10], SilenceLaw);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAntiTheftEnable) {
        size += pb::CodedOutputStream.ComputeBoolSize(1, AntiTheftEnable);
      }
      if (hasImproperMoving) {
        size += pb::CodedOutputStream.ComputeBoolSize(2, ImproperMoving);
      }
      if (hasImproperMoveOutput) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, ImproperMoveOutput);
      }
      if (hasLocalParking) {
        size += pb::CodedOutputStream.ComputeBoolSize(4, LocalParking);
      }
      if (hasOutput1Mask) {
        size += pb::CodedOutputStream.ComputeBoolSize(5, Output1Mask);
      }
      if (hasOutput2Mask) {
        size += pb::CodedOutputStream.ComputeBoolSize(6, Output2Mask);
      }
      if (hasOutput3Mask) {
        size += pb::CodedOutputStream.ComputeBoolSize(7, Output3Mask);
      }
      if (hasIgnitionCode) {
        size += pb::CodedOutputStream.ComputeUInt32Size(8, IgnitionCode);
      }
      if (hasAlarmModeTimer) {
        size += pb::CodedOutputStream.ComputeUInt32Size(9, AlarmModeTimer);
      }
      if (hasAlarmedAfterTimer) {
        size += pb::CodedOutputStream.ComputeBoolSize(10, AlarmedAfterTimer);
      }
      if (hasSilenceLaw) {
        size += pb::CodedOutputStream.ComputeBoolSize(11, SilenceLaw);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mxt1xx_u_dynamic_setup_anti_theft ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_anti_theft ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_anti_theft ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_anti_theft ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_anti_theft ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_anti_theft ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_anti_theft ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_anti_theft ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_anti_theft ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_anti_theft ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mxt1xx_u_dynamic_setup_anti_theft MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mxt1xx_u_dynamic_setup_anti_theft prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mxt1xx_u_dynamic_setup_anti_theft, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mxt1xx_u_dynamic_setup_anti_theft cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mxt1xx_u_dynamic_setup_anti_theft result;
      
      private mxt1xx_u_dynamic_setup_anti_theft PrepareBuilder() {
        if (resultIsReadOnly) {
          mxt1xx_u_dynamic_setup_anti_theft original = result;
          result = new mxt1xx_u_dynamic_setup_anti_theft();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mxt1xx_u_dynamic_setup_anti_theft MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_anti_theft.Descriptor; }
      }
      
      public override mxt1xx_u_dynamic_setup_anti_theft DefaultInstanceForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_anti_theft.DefaultInstance; }
      }
      
      public override mxt1xx_u_dynamic_setup_anti_theft BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mxt1xx_u_dynamic_setup_anti_theft) {
          return MergeFrom((mxt1xx_u_dynamic_setup_anti_theft) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mxt1xx_u_dynamic_setup_anti_theft other) {
        if (other == global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_anti_theft.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAntiTheftEnable) {
          AntiTheftEnable = other.AntiTheftEnable;
        }
        if (other.HasImproperMoving) {
          ImproperMoving = other.ImproperMoving;
        }
        if (other.HasImproperMoveOutput) {
          ImproperMoveOutput = other.ImproperMoveOutput;
        }
        if (other.HasLocalParking) {
          LocalParking = other.LocalParking;
        }
        if (other.HasOutput1Mask) {
          Output1Mask = other.Output1Mask;
        }
        if (other.HasOutput2Mask) {
          Output2Mask = other.Output2Mask;
        }
        if (other.HasOutput3Mask) {
          Output3Mask = other.Output3Mask;
        }
        if (other.HasIgnitionCode) {
          IgnitionCode = other.IgnitionCode;
        }
        if (other.HasAlarmModeTimer) {
          AlarmModeTimer = other.AlarmModeTimer;
        }
        if (other.HasAlarmedAfterTimer) {
          AlarmedAfterTimer = other.AlarmedAfterTimer;
        }
        if (other.HasSilenceLaw) {
          SilenceLaw = other.SilenceLaw;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mxt1XxUDynamicSetupAntiTheftFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mxt1XxUDynamicSetupAntiTheftFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasAntiTheftEnable = input.ReadBool(ref result.antiTheftEnable_);
              break;
            }
            case 16: {
              result.hasImproperMoving = input.ReadBool(ref result.improperMoving_);
              break;
            }
            case 24: {
              result.hasImproperMoveOutput = input.ReadUInt32(ref result.improperMoveOutput_);
              break;
            }
            case 32: {
              result.hasLocalParking = input.ReadBool(ref result.localParking_);
              break;
            }
            case 40: {
              result.hasOutput1Mask = input.ReadBool(ref result.output1Mask_);
              break;
            }
            case 48: {
              result.hasOutput2Mask = input.ReadBool(ref result.output2Mask_);
              break;
            }
            case 56: {
              result.hasOutput3Mask = input.ReadBool(ref result.output3Mask_);
              break;
            }
            case 64: {
              result.hasIgnitionCode = input.ReadUInt32(ref result.ignitionCode_);
              break;
            }
            case 72: {
              result.hasAlarmModeTimer = input.ReadUInt32(ref result.alarmModeTimer_);
              break;
            }
            case 80: {
              result.hasAlarmedAfterTimer = input.ReadBool(ref result.alarmedAfterTimer_);
              break;
            }
            case 88: {
              result.hasSilenceLaw = input.ReadBool(ref result.silenceLaw_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAntiTheftEnable {
        get { return result.hasAntiTheftEnable; }
      }
      public bool AntiTheftEnable {
        get { return result.AntiTheftEnable; }
        set { SetAntiTheftEnable(value); }
      }
      public Builder SetAntiTheftEnable(bool value) {
        PrepareBuilder();
        result.hasAntiTheftEnable = true;
        result.antiTheftEnable_ = value;
        return this;
      }
      public Builder ClearAntiTheftEnable() {
        PrepareBuilder();
        result.hasAntiTheftEnable = false;
        result.antiTheftEnable_ = false;
        return this;
      }
      
      public bool HasImproperMoving {
        get { return result.hasImproperMoving; }
      }
      public bool ImproperMoving {
        get { return result.ImproperMoving; }
        set { SetImproperMoving(value); }
      }
      public Builder SetImproperMoving(bool value) {
        PrepareBuilder();
        result.hasImproperMoving = true;
        result.improperMoving_ = value;
        return this;
      }
      public Builder ClearImproperMoving() {
        PrepareBuilder();
        result.hasImproperMoving = false;
        result.improperMoving_ = false;
        return this;
      }
      
      public bool HasImproperMoveOutput {
        get { return result.hasImproperMoveOutput; }
      }
      [global::System.CLSCompliant(false)]
      public uint ImproperMoveOutput {
        get { return result.ImproperMoveOutput; }
        set { SetImproperMoveOutput(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetImproperMoveOutput(uint value) {
        PrepareBuilder();
        result.hasImproperMoveOutput = true;
        result.improperMoveOutput_ = value;
        return this;
      }
      public Builder ClearImproperMoveOutput() {
        PrepareBuilder();
        result.hasImproperMoveOutput = false;
        result.improperMoveOutput_ = 0;
        return this;
      }
      
      public bool HasLocalParking {
        get { return result.hasLocalParking; }
      }
      public bool LocalParking {
        get { return result.LocalParking; }
        set { SetLocalParking(value); }
      }
      public Builder SetLocalParking(bool value) {
        PrepareBuilder();
        result.hasLocalParking = true;
        result.localParking_ = value;
        return this;
      }
      public Builder ClearLocalParking() {
        PrepareBuilder();
        result.hasLocalParking = false;
        result.localParking_ = false;
        return this;
      }
      
      public bool HasOutput1Mask {
        get { return result.hasOutput1Mask; }
      }
      public bool Output1Mask {
        get { return result.Output1Mask; }
        set { SetOutput1Mask(value); }
      }
      public Builder SetOutput1Mask(bool value) {
        PrepareBuilder();
        result.hasOutput1Mask = true;
        result.output1Mask_ = value;
        return this;
      }
      public Builder ClearOutput1Mask() {
        PrepareBuilder();
        result.hasOutput1Mask = false;
        result.output1Mask_ = false;
        return this;
      }
      
      public bool HasOutput2Mask {
        get { return result.hasOutput2Mask; }
      }
      public bool Output2Mask {
        get { return result.Output2Mask; }
        set { SetOutput2Mask(value); }
      }
      public Builder SetOutput2Mask(bool value) {
        PrepareBuilder();
        result.hasOutput2Mask = true;
        result.output2Mask_ = value;
        return this;
      }
      public Builder ClearOutput2Mask() {
        PrepareBuilder();
        result.hasOutput2Mask = false;
        result.output2Mask_ = false;
        return this;
      }
      
      public bool HasOutput3Mask {
        get { return result.hasOutput3Mask; }
      }
      public bool Output3Mask {
        get { return result.Output3Mask; }
        set { SetOutput3Mask(value); }
      }
      public Builder SetOutput3Mask(bool value) {
        PrepareBuilder();
        result.hasOutput3Mask = true;
        result.output3Mask_ = value;
        return this;
      }
      public Builder ClearOutput3Mask() {
        PrepareBuilder();
        result.hasOutput3Mask = false;
        result.output3Mask_ = false;
        return this;
      }
      
      public bool HasIgnitionCode {
        get { return result.hasIgnitionCode; }
      }
      [global::System.CLSCompliant(false)]
      public uint IgnitionCode {
        get { return result.IgnitionCode; }
        set { SetIgnitionCode(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetIgnitionCode(uint value) {
        PrepareBuilder();
        result.hasIgnitionCode = true;
        result.ignitionCode_ = value;
        return this;
      }
      public Builder ClearIgnitionCode() {
        PrepareBuilder();
        result.hasIgnitionCode = false;
        result.ignitionCode_ = 0;
        return this;
      }
      
      public bool HasAlarmModeTimer {
        get { return result.hasAlarmModeTimer; }
      }
      [global::System.CLSCompliant(false)]
      public uint AlarmModeTimer {
        get { return result.AlarmModeTimer; }
        set { SetAlarmModeTimer(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetAlarmModeTimer(uint value) {
        PrepareBuilder();
        result.hasAlarmModeTimer = true;
        result.alarmModeTimer_ = value;
        return this;
      }
      public Builder ClearAlarmModeTimer() {
        PrepareBuilder();
        result.hasAlarmModeTimer = false;
        result.alarmModeTimer_ = 0;
        return this;
      }
      
      public bool HasAlarmedAfterTimer {
        get { return result.hasAlarmedAfterTimer; }
      }
      public bool AlarmedAfterTimer {
        get { return result.AlarmedAfterTimer; }
        set { SetAlarmedAfterTimer(value); }
      }
      public Builder SetAlarmedAfterTimer(bool value) {
        PrepareBuilder();
        result.hasAlarmedAfterTimer = true;
        result.alarmedAfterTimer_ = value;
        return this;
      }
      public Builder ClearAlarmedAfterTimer() {
        PrepareBuilder();
        result.hasAlarmedAfterTimer = false;
        result.alarmedAfterTimer_ = false;
        return this;
      }
      
      public bool HasSilenceLaw {
        get { return result.hasSilenceLaw; }
      }
      public bool SilenceLaw {
        get { return result.SilenceLaw; }
        set { SetSilenceLaw(value); }
      }
      public Builder SetSilenceLaw(bool value) {
        PrepareBuilder();
        result.hasSilenceLaw = true;
        result.silenceLaw_ = value;
        return this;
      }
      public Builder ClearSilenceLaw() {
        PrepareBuilder();
        result.hasSilenceLaw = false;
        result.silenceLaw_ = false;
        return this;
      }
    }
    static mxt1xx_u_dynamic_setup_anti_theft() {
      object.ReferenceEquals(global::maxtrack.pb.mxt1xx.Mxt1Xx.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mxt1xx_u_dynamic_setup_rs232 : pb::GeneratedMessage<mxt1xx_u_dynamic_setup_rs232, mxt1xx_u_dynamic_setup_rs232.Builder> {
    private mxt1xx_u_dynamic_setup_rs232() { }
    private static readonly mxt1xx_u_dynamic_setup_rs232 defaultInstance = new mxt1xx_u_dynamic_setup_rs232().MakeReadOnly();
    private static readonly string[] _mxt1XxUDynamicSetupRs232FieldNames = new string[] { "any_rfid_card", "baud_rate", "keep_working_timer", "logout_mode", "serial_alert", "working_mode" };
    private static readonly uint[] _mxt1XxUDynamicSetupRs232FieldTags = new uint[] { 40, 24, 16, 48, 32, 8 };
    public static mxt1xx_u_dynamic_setup_rs232 DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mxt1xx_u_dynamic_setup_rs232 DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mxt1xx_u_dynamic_setup_rs232 ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_dynamic_setup_rs232__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mxt1xx_u_dynamic_setup_rs232, mxt1xx_u_dynamic_setup_rs232.Builder> InternalFieldAccessors {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_dynamic_setup_rs232__FieldAccessorTable; }
    }
    
    public const int WorkingModeFieldNumber = 1;
    private bool hasWorkingMode;
    private bool workingMode_;
    public bool HasWorkingMode {
      get { return hasWorkingMode; }
    }
    public bool WorkingMode {
      get { return workingMode_; }
    }
    
    public const int KeepWorkingTimerFieldNumber = 2;
    private bool hasKeepWorkingTimer;
    private uint keepWorkingTimer_;
    public bool HasKeepWorkingTimer {
      get { return hasKeepWorkingTimer; }
    }
    [global::System.CLSCompliant(false)]
    public uint KeepWorkingTimer {
      get { return keepWorkingTimer_; }
    }
    
    public const int BaudRateFieldNumber = 3;
    private bool hasBaudRate;
    private uint baudRate_;
    public bool HasBaudRate {
      get { return hasBaudRate; }
    }
    [global::System.CLSCompliant(false)]
    public uint BaudRate {
      get { return baudRate_; }
    }
    
    public const int SerialAlertFieldNumber = 4;
    private bool hasSerialAlert;
    private bool serialAlert_;
    public bool HasSerialAlert {
      get { return hasSerialAlert; }
    }
    public bool SerialAlert {
      get { return serialAlert_; }
    }
    
    public const int AnyRfidCardFieldNumber = 5;
    private bool hasAnyRfidCard;
    private bool anyRfidCard_;
    public bool HasAnyRfidCard {
      get { return hasAnyRfidCard; }
    }
    public bool AnyRfidCard {
      get { return anyRfidCard_; }
    }
    
    public const int LogoutModeFieldNumber = 6;
    private bool hasLogoutMode;
    private uint logoutMode_;
    public bool HasLogoutMode {
      get { return hasLogoutMode; }
    }
    [global::System.CLSCompliant(false)]
    public uint LogoutMode {
      get { return logoutMode_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mxt1XxUDynamicSetupRs232FieldNames;
      if (hasWorkingMode) {
        output.WriteBool(1, field_names[5], WorkingMode);
      }
      if (hasKeepWorkingTimer) {
        output.WriteUInt32(2, field_names[2], KeepWorkingTimer);
      }
      if (hasBaudRate) {
        output.WriteUInt32(3, field_names[1], BaudRate);
      }
      if (hasSerialAlert) {
        output.WriteBool(4, field_names[4], SerialAlert);
      }
      if (hasAnyRfidCard) {
        output.WriteBool(5, field_names[0], AnyRfidCard);
      }
      if (hasLogoutMode) {
        output.WriteUInt32(6, field_names[3], LogoutMode);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasWorkingMode) {
        size += pb::CodedOutputStream.ComputeBoolSize(1, WorkingMode);
      }
      if (hasKeepWorkingTimer) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, KeepWorkingTimer);
      }
      if (hasBaudRate) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, BaudRate);
      }
      if (hasSerialAlert) {
        size += pb::CodedOutputStream.ComputeBoolSize(4, SerialAlert);
      }
      if (hasAnyRfidCard) {
        size += pb::CodedOutputStream.ComputeBoolSize(5, AnyRfidCard);
      }
      if (hasLogoutMode) {
        size += pb::CodedOutputStream.ComputeUInt32Size(6, LogoutMode);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mxt1xx_u_dynamic_setup_rs232 ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_rs232 ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_rs232 ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_rs232 ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_rs232 ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_rs232 ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_rs232 ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_rs232 ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_rs232 ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_rs232 ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mxt1xx_u_dynamic_setup_rs232 MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mxt1xx_u_dynamic_setup_rs232 prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mxt1xx_u_dynamic_setup_rs232, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mxt1xx_u_dynamic_setup_rs232 cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mxt1xx_u_dynamic_setup_rs232 result;
      
      private mxt1xx_u_dynamic_setup_rs232 PrepareBuilder() {
        if (resultIsReadOnly) {
          mxt1xx_u_dynamic_setup_rs232 original = result;
          result = new mxt1xx_u_dynamic_setup_rs232();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mxt1xx_u_dynamic_setup_rs232 MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_rs232.Descriptor; }
      }
      
      public override mxt1xx_u_dynamic_setup_rs232 DefaultInstanceForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_rs232.DefaultInstance; }
      }
      
      public override mxt1xx_u_dynamic_setup_rs232 BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mxt1xx_u_dynamic_setup_rs232) {
          return MergeFrom((mxt1xx_u_dynamic_setup_rs232) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mxt1xx_u_dynamic_setup_rs232 other) {
        if (other == global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_rs232.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasWorkingMode) {
          WorkingMode = other.WorkingMode;
        }
        if (other.HasKeepWorkingTimer) {
          KeepWorkingTimer = other.KeepWorkingTimer;
        }
        if (other.HasBaudRate) {
          BaudRate = other.BaudRate;
        }
        if (other.HasSerialAlert) {
          SerialAlert = other.SerialAlert;
        }
        if (other.HasAnyRfidCard) {
          AnyRfidCard = other.AnyRfidCard;
        }
        if (other.HasLogoutMode) {
          LogoutMode = other.LogoutMode;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mxt1XxUDynamicSetupRs232FieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mxt1XxUDynamicSetupRs232FieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasWorkingMode = input.ReadBool(ref result.workingMode_);
              break;
            }
            case 16: {
              result.hasKeepWorkingTimer = input.ReadUInt32(ref result.keepWorkingTimer_);
              break;
            }
            case 24: {
              result.hasBaudRate = input.ReadUInt32(ref result.baudRate_);
              break;
            }
            case 32: {
              result.hasSerialAlert = input.ReadBool(ref result.serialAlert_);
              break;
            }
            case 40: {
              result.hasAnyRfidCard = input.ReadBool(ref result.anyRfidCard_);
              break;
            }
            case 48: {
              result.hasLogoutMode = input.ReadUInt32(ref result.logoutMode_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasWorkingMode {
        get { return result.hasWorkingMode; }
      }
      public bool WorkingMode {
        get { return result.WorkingMode; }
        set { SetWorkingMode(value); }
      }
      public Builder SetWorkingMode(bool value) {
        PrepareBuilder();
        result.hasWorkingMode = true;
        result.workingMode_ = value;
        return this;
      }
      public Builder ClearWorkingMode() {
        PrepareBuilder();
        result.hasWorkingMode = false;
        result.workingMode_ = false;
        return this;
      }
      
      public bool HasKeepWorkingTimer {
        get { return result.hasKeepWorkingTimer; }
      }
      [global::System.CLSCompliant(false)]
      public uint KeepWorkingTimer {
        get { return result.KeepWorkingTimer; }
        set { SetKeepWorkingTimer(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetKeepWorkingTimer(uint value) {
        PrepareBuilder();
        result.hasKeepWorkingTimer = true;
        result.keepWorkingTimer_ = value;
        return this;
      }
      public Builder ClearKeepWorkingTimer() {
        PrepareBuilder();
        result.hasKeepWorkingTimer = false;
        result.keepWorkingTimer_ = 0;
        return this;
      }
      
      public bool HasBaudRate {
        get { return result.hasBaudRate; }
      }
      [global::System.CLSCompliant(false)]
      public uint BaudRate {
        get { return result.BaudRate; }
        set { SetBaudRate(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetBaudRate(uint value) {
        PrepareBuilder();
        result.hasBaudRate = true;
        result.baudRate_ = value;
        return this;
      }
      public Builder ClearBaudRate() {
        PrepareBuilder();
        result.hasBaudRate = false;
        result.baudRate_ = 0;
        return this;
      }
      
      public bool HasSerialAlert {
        get { return result.hasSerialAlert; }
      }
      public bool SerialAlert {
        get { return result.SerialAlert; }
        set { SetSerialAlert(value); }
      }
      public Builder SetSerialAlert(bool value) {
        PrepareBuilder();
        result.hasSerialAlert = true;
        result.serialAlert_ = value;
        return this;
      }
      public Builder ClearSerialAlert() {
        PrepareBuilder();
        result.hasSerialAlert = false;
        result.serialAlert_ = false;
        return this;
      }
      
      public bool HasAnyRfidCard {
        get { return result.hasAnyRfidCard; }
      }
      public bool AnyRfidCard {
        get { return result.AnyRfidCard; }
        set { SetAnyRfidCard(value); }
      }
      public Builder SetAnyRfidCard(bool value) {
        PrepareBuilder();
        result.hasAnyRfidCard = true;
        result.anyRfidCard_ = value;
        return this;
      }
      public Builder ClearAnyRfidCard() {
        PrepareBuilder();
        result.hasAnyRfidCard = false;
        result.anyRfidCard_ = false;
        return this;
      }
      
      public bool HasLogoutMode {
        get { return result.hasLogoutMode; }
      }
      [global::System.CLSCompliant(false)]
      public uint LogoutMode {
        get { return result.LogoutMode; }
        set { SetLogoutMode(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetLogoutMode(uint value) {
        PrepareBuilder();
        result.hasLogoutMode = true;
        result.logoutMode_ = value;
        return this;
      }
      public Builder ClearLogoutMode() {
        PrepareBuilder();
        result.hasLogoutMode = false;
        result.logoutMode_ = 0;
        return this;
      }
    }
    static mxt1xx_u_dynamic_setup_rs232() {
      object.ReferenceEquals(global::maxtrack.pb.mxt1xx.Mxt1Xx.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mxt1xx_u_dynamic_setup_others : pb::GeneratedMessage<mxt1xx_u_dynamic_setup_others, mxt1xx_u_dynamic_setup_others.Builder> {
    private mxt1xx_u_dynamic_setup_others() { }
    private static readonly mxt1xx_u_dynamic_setup_others defaultInstance = new mxt1xx_u_dynamic_setup_others().MakeReadOnly();
    private static readonly string[] _mxt1XxUDynamicSetupOthersFieldNames = new string[] { "alias_name", "calculate_odometer", "cell_info_in_pos", "charging_allow", "device_password", "histogram_groups", "ignition_timer", "ignition_voltage", "ignition_voltage_factor", "max_speed_limit", "maximum_log_count", "pin", "position_speed_summarization", "puk", "speed_histogram_interval", "switch_led_on", "timezone", "working_before_sleep" };
    private static readonly uint[] _mxt1XxUDynamicSetupOthersFieldTags = new uint[] { 10, 72, 56, 112, 16, 128, 104, 88, 96, 64, 80, 26, 144, 34, 136, 40, 48, 120 };
    public static mxt1xx_u_dynamic_setup_others DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mxt1xx_u_dynamic_setup_others DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mxt1xx_u_dynamic_setup_others ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_dynamic_setup_others__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mxt1xx_u_dynamic_setup_others, mxt1xx_u_dynamic_setup_others.Builder> InternalFieldAccessors {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_dynamic_setup_others__FieldAccessorTable; }
    }
    
    public const int AliasNameFieldNumber = 1;
    private bool hasAliasName;
    private string aliasName_ = "";
    public bool HasAliasName {
      get { return hasAliasName; }
    }
    public string AliasName {
      get { return aliasName_; }
    }
    
    public const int DevicePasswordFieldNumber = 2;
    private bool hasDevicePassword;
    private bool devicePassword_;
    public bool HasDevicePassword {
      get { return hasDevicePassword; }
    }
    public bool DevicePassword {
      get { return devicePassword_; }
    }
    
    public const int PinFieldNumber = 3;
    private bool hasPin;
    private string pin_ = "";
    public bool HasPin {
      get { return hasPin; }
    }
    public string Pin {
      get { return pin_; }
    }
    
    public const int PukFieldNumber = 4;
    private bool hasPuk;
    private string puk_ = "";
    public bool HasPuk {
      get { return hasPuk; }
    }
    public string Puk {
      get { return puk_; }
    }
    
    public const int SwitchLedOnFieldNumber = 5;
    private bool hasSwitchLedOn;
    private bool switchLedOn_;
    public bool HasSwitchLedOn {
      get { return hasSwitchLedOn; }
    }
    public bool SwitchLedOn {
      get { return switchLedOn_; }
    }
    
    public const int TimezoneFieldNumber = 6;
    private bool hasTimezone;
    private int timezone_;
    public bool HasTimezone {
      get { return hasTimezone; }
    }
    public int Timezone {
      get { return timezone_; }
    }
    
    public const int CellInfoInPosFieldNumber = 7;
    private bool hasCellInfoInPos;
    private bool cellInfoInPos_;
    public bool HasCellInfoInPos {
      get { return hasCellInfoInPos; }
    }
    public bool CellInfoInPos {
      get { return cellInfoInPos_; }
    }
    
    public const int MaxSpeedLimitFieldNumber = 8;
    private bool hasMaxSpeedLimit;
    private uint maxSpeedLimit_;
    public bool HasMaxSpeedLimit {
      get { return hasMaxSpeedLimit; }
    }
    [global::System.CLSCompliant(false)]
    public uint MaxSpeedLimit {
      get { return maxSpeedLimit_; }
    }
    
    public const int CalculateOdometerFieldNumber = 9;
    private bool hasCalculateOdometer;
    private bool calculateOdometer_;
    public bool HasCalculateOdometer {
      get { return hasCalculateOdometer; }
    }
    public bool CalculateOdometer {
      get { return calculateOdometer_; }
    }
    
    public const int MaximumLogCountFieldNumber = 10;
    private bool hasMaximumLogCount;
    private uint maximumLogCount_;
    public bool HasMaximumLogCount {
      get { return hasMaximumLogCount; }
    }
    [global::System.CLSCompliant(false)]
    public uint MaximumLogCount {
      get { return maximumLogCount_; }
    }
    
    public const int IgnitionVoltageFieldNumber = 11;
    private bool hasIgnitionVoltage;
    private uint ignitionVoltage_;
    public bool HasIgnitionVoltage {
      get { return hasIgnitionVoltage; }
    }
    [global::System.CLSCompliant(false)]
    public uint IgnitionVoltage {
      get { return ignitionVoltage_; }
    }
    
    public const int IgnitionVoltageFactorFieldNumber = 12;
    private bool hasIgnitionVoltageFactor;
    private uint ignitionVoltageFactor_;
    public bool HasIgnitionVoltageFactor {
      get { return hasIgnitionVoltageFactor; }
    }
    [global::System.CLSCompliant(false)]
    public uint IgnitionVoltageFactor {
      get { return ignitionVoltageFactor_; }
    }
    
    public const int IgnitionTimerFieldNumber = 13;
    private bool hasIgnitionTimer;
    private uint ignitionTimer_;
    public bool HasIgnitionTimer {
      get { return hasIgnitionTimer; }
    }
    [global::System.CLSCompliant(false)]
    public uint IgnitionTimer {
      get { return ignitionTimer_; }
    }
    
    public const int ChargingAllowFieldNumber = 14;
    private bool hasChargingAllow;
    private bool chargingAllow_;
    public bool HasChargingAllow {
      get { return hasChargingAllow; }
    }
    public bool ChargingAllow {
      get { return chargingAllow_; }
    }
    
    public const int WorkingBeforeSleepFieldNumber = 15;
    private bool hasWorkingBeforeSleep;
    private uint workingBeforeSleep_;
    public bool HasWorkingBeforeSleep {
      get { return hasWorkingBeforeSleep; }
    }
    [global::System.CLSCompliant(false)]
    public uint WorkingBeforeSleep {
      get { return workingBeforeSleep_; }
    }
    
    public const int HistogramGroupsFieldNumber = 16;
    private bool hasHistogramGroups;
    private uint histogramGroups_;
    public bool HasHistogramGroups {
      get { return hasHistogramGroups; }
    }
    [global::System.CLSCompliant(false)]
    public uint HistogramGroups {
      get { return histogramGroups_; }
    }
    
    public const int SpeedHistogramIntervalFieldNumber = 17;
    private bool hasSpeedHistogramInterval;
    private uint speedHistogramInterval_;
    public bool HasSpeedHistogramInterval {
      get { return hasSpeedHistogramInterval; }
    }
    [global::System.CLSCompliant(false)]
    public uint SpeedHistogramInterval {
      get { return speedHistogramInterval_; }
    }
    
    public const int PositionSpeedSummarizationFieldNumber = 18;
    private bool hasPositionSpeedSummarization;
    private bool positionSpeedSummarization_;
    public bool HasPositionSpeedSummarization {
      get { return hasPositionSpeedSummarization; }
    }
    public bool PositionSpeedSummarization {
      get { return positionSpeedSummarization_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mxt1XxUDynamicSetupOthersFieldNames;
      if (hasAliasName) {
        output.WriteString(1, field_names[0], AliasName);
      }
      if (hasDevicePassword) {
        output.WriteBool(2, field_names[4], DevicePassword);
      }
      if (hasPin) {
        output.WriteString(3, field_names[11], Pin);
      }
      if (hasPuk) {
        output.WriteString(4, field_names[13], Puk);
      }
      if (hasSwitchLedOn) {
        output.WriteBool(5, field_names[15], SwitchLedOn);
      }
      if (hasTimezone) {
        output.WriteSInt32(6, field_names[16], Timezone);
      }
      if (hasCellInfoInPos) {
        output.WriteBool(7, field_names[2], CellInfoInPos);
      }
      if (hasMaxSpeedLimit) {
        output.WriteUInt32(8, field_names[9], MaxSpeedLimit);
      }
      if (hasCalculateOdometer) {
        output.WriteBool(9, field_names[1], CalculateOdometer);
      }
      if (hasMaximumLogCount) {
        output.WriteUInt32(10, field_names[10], MaximumLogCount);
      }
      if (hasIgnitionVoltage) {
        output.WriteUInt32(11, field_names[7], IgnitionVoltage);
      }
      if (hasIgnitionVoltageFactor) {
        output.WriteUInt32(12, field_names[8], IgnitionVoltageFactor);
      }
      if (hasIgnitionTimer) {
        output.WriteUInt32(13, field_names[6], IgnitionTimer);
      }
      if (hasChargingAllow) {
        output.WriteBool(14, field_names[3], ChargingAllow);
      }
      if (hasWorkingBeforeSleep) {
        output.WriteUInt32(15, field_names[17], WorkingBeforeSleep);
      }
      if (hasHistogramGroups) {
        output.WriteUInt32(16, field_names[5], HistogramGroups);
      }
      if (hasSpeedHistogramInterval) {
        output.WriteUInt32(17, field_names[14], SpeedHistogramInterval);
      }
      if (hasPositionSpeedSummarization) {
        output.WriteBool(18, field_names[12], PositionSpeedSummarization);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAliasName) {
        size += pb::CodedOutputStream.ComputeStringSize(1, AliasName);
      }
      if (hasDevicePassword) {
        size += pb::CodedOutputStream.ComputeBoolSize(2, DevicePassword);
      }
      if (hasPin) {
        size += pb::CodedOutputStream.ComputeStringSize(3, Pin);
      }
      if (hasPuk) {
        size += pb::CodedOutputStream.ComputeStringSize(4, Puk);
      }
      if (hasSwitchLedOn) {
        size += pb::CodedOutputStream.ComputeBoolSize(5, SwitchLedOn);
      }
      if (hasTimezone) {
        size += pb::CodedOutputStream.ComputeSInt32Size(6, Timezone);
      }
      if (hasCellInfoInPos) {
        size += pb::CodedOutputStream.ComputeBoolSize(7, CellInfoInPos);
      }
      if (hasMaxSpeedLimit) {
        size += pb::CodedOutputStream.ComputeUInt32Size(8, MaxSpeedLimit);
      }
      if (hasCalculateOdometer) {
        size += pb::CodedOutputStream.ComputeBoolSize(9, CalculateOdometer);
      }
      if (hasMaximumLogCount) {
        size += pb::CodedOutputStream.ComputeUInt32Size(10, MaximumLogCount);
      }
      if (hasIgnitionVoltage) {
        size += pb::CodedOutputStream.ComputeUInt32Size(11, IgnitionVoltage);
      }
      if (hasIgnitionVoltageFactor) {
        size += pb::CodedOutputStream.ComputeUInt32Size(12, IgnitionVoltageFactor);
      }
      if (hasIgnitionTimer) {
        size += pb::CodedOutputStream.ComputeUInt32Size(13, IgnitionTimer);
      }
      if (hasChargingAllow) {
        size += pb::CodedOutputStream.ComputeBoolSize(14, ChargingAllow);
      }
      if (hasWorkingBeforeSleep) {
        size += pb::CodedOutputStream.ComputeUInt32Size(15, WorkingBeforeSleep);
      }
      if (hasHistogramGroups) {
        size += pb::CodedOutputStream.ComputeUInt32Size(16, HistogramGroups);
      }
      if (hasSpeedHistogramInterval) {
        size += pb::CodedOutputStream.ComputeUInt32Size(17, SpeedHistogramInterval);
      }
      if (hasPositionSpeedSummarization) {
        size += pb::CodedOutputStream.ComputeBoolSize(18, PositionSpeedSummarization);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mxt1xx_u_dynamic_setup_others ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_others ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_others ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_others ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_others ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_others ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_others ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_others ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_others ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_others ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mxt1xx_u_dynamic_setup_others MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mxt1xx_u_dynamic_setup_others prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mxt1xx_u_dynamic_setup_others, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mxt1xx_u_dynamic_setup_others cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mxt1xx_u_dynamic_setup_others result;
      
      private mxt1xx_u_dynamic_setup_others PrepareBuilder() {
        if (resultIsReadOnly) {
          mxt1xx_u_dynamic_setup_others original = result;
          result = new mxt1xx_u_dynamic_setup_others();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mxt1xx_u_dynamic_setup_others MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_others.Descriptor; }
      }
      
      public override mxt1xx_u_dynamic_setup_others DefaultInstanceForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_others.DefaultInstance; }
      }
      
      public override mxt1xx_u_dynamic_setup_others BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mxt1xx_u_dynamic_setup_others) {
          return MergeFrom((mxt1xx_u_dynamic_setup_others) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mxt1xx_u_dynamic_setup_others other) {
        if (other == global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_others.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAliasName) {
          AliasName = other.AliasName;
        }
        if (other.HasDevicePassword) {
          DevicePassword = other.DevicePassword;
        }
        if (other.HasPin) {
          Pin = other.Pin;
        }
        if (other.HasPuk) {
          Puk = other.Puk;
        }
        if (other.HasSwitchLedOn) {
          SwitchLedOn = other.SwitchLedOn;
        }
        if (other.HasTimezone) {
          Timezone = other.Timezone;
        }
        if (other.HasCellInfoInPos) {
          CellInfoInPos = other.CellInfoInPos;
        }
        if (other.HasMaxSpeedLimit) {
          MaxSpeedLimit = other.MaxSpeedLimit;
        }
        if (other.HasCalculateOdometer) {
          CalculateOdometer = other.CalculateOdometer;
        }
        if (other.HasMaximumLogCount) {
          MaximumLogCount = other.MaximumLogCount;
        }
        if (other.HasIgnitionVoltage) {
          IgnitionVoltage = other.IgnitionVoltage;
        }
        if (other.HasIgnitionVoltageFactor) {
          IgnitionVoltageFactor = other.IgnitionVoltageFactor;
        }
        if (other.HasIgnitionTimer) {
          IgnitionTimer = other.IgnitionTimer;
        }
        if (other.HasChargingAllow) {
          ChargingAllow = other.ChargingAllow;
        }
        if (other.HasWorkingBeforeSleep) {
          WorkingBeforeSleep = other.WorkingBeforeSleep;
        }
        if (other.HasHistogramGroups) {
          HistogramGroups = other.HistogramGroups;
        }
        if (other.HasSpeedHistogramInterval) {
          SpeedHistogramInterval = other.SpeedHistogramInterval;
        }
        if (other.HasPositionSpeedSummarization) {
          PositionSpeedSummarization = other.PositionSpeedSummarization;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mxt1XxUDynamicSetupOthersFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mxt1XxUDynamicSetupOthersFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasAliasName = input.ReadString(ref result.aliasName_);
              break;
            }
            case 16: {
              result.hasDevicePassword = input.ReadBool(ref result.devicePassword_);
              break;
            }
            case 26: {
              result.hasPin = input.ReadString(ref result.pin_);
              break;
            }
            case 34: {
              result.hasPuk = input.ReadString(ref result.puk_);
              break;
            }
            case 40: {
              result.hasSwitchLedOn = input.ReadBool(ref result.switchLedOn_);
              break;
            }
            case 48: {
              result.hasTimezone = input.ReadSInt32(ref result.timezone_);
              break;
            }
            case 56: {
              result.hasCellInfoInPos = input.ReadBool(ref result.cellInfoInPos_);
              break;
            }
            case 64: {
              result.hasMaxSpeedLimit = input.ReadUInt32(ref result.maxSpeedLimit_);
              break;
            }
            case 72: {
              result.hasCalculateOdometer = input.ReadBool(ref result.calculateOdometer_);
              break;
            }
            case 80: {
              result.hasMaximumLogCount = input.ReadUInt32(ref result.maximumLogCount_);
              break;
            }
            case 88: {
              result.hasIgnitionVoltage = input.ReadUInt32(ref result.ignitionVoltage_);
              break;
            }
            case 96: {
              result.hasIgnitionVoltageFactor = input.ReadUInt32(ref result.ignitionVoltageFactor_);
              break;
            }
            case 104: {
              result.hasIgnitionTimer = input.ReadUInt32(ref result.ignitionTimer_);
              break;
            }
            case 112: {
              result.hasChargingAllow = input.ReadBool(ref result.chargingAllow_);
              break;
            }
            case 120: {
              result.hasWorkingBeforeSleep = input.ReadUInt32(ref result.workingBeforeSleep_);
              break;
            }
            case 128: {
              result.hasHistogramGroups = input.ReadUInt32(ref result.histogramGroups_);
              break;
            }
            case 136: {
              result.hasSpeedHistogramInterval = input.ReadUInt32(ref result.speedHistogramInterval_);
              break;
            }
            case 144: {
              result.hasPositionSpeedSummarization = input.ReadBool(ref result.positionSpeedSummarization_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAliasName {
        get { return result.hasAliasName; }
      }
      public string AliasName {
        get { return result.AliasName; }
        set { SetAliasName(value); }
      }
      public Builder SetAliasName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAliasName = true;
        result.aliasName_ = value;
        return this;
      }
      public Builder ClearAliasName() {
        PrepareBuilder();
        result.hasAliasName = false;
        result.aliasName_ = "";
        return this;
      }
      
      public bool HasDevicePassword {
        get { return result.hasDevicePassword; }
      }
      public bool DevicePassword {
        get { return result.DevicePassword; }
        set { SetDevicePassword(value); }
      }
      public Builder SetDevicePassword(bool value) {
        PrepareBuilder();
        result.hasDevicePassword = true;
        result.devicePassword_ = value;
        return this;
      }
      public Builder ClearDevicePassword() {
        PrepareBuilder();
        result.hasDevicePassword = false;
        result.devicePassword_ = false;
        return this;
      }
      
      public bool HasPin {
        get { return result.hasPin; }
      }
      public string Pin {
        get { return result.Pin; }
        set { SetPin(value); }
      }
      public Builder SetPin(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPin = true;
        result.pin_ = value;
        return this;
      }
      public Builder ClearPin() {
        PrepareBuilder();
        result.hasPin = false;
        result.pin_ = "";
        return this;
      }
      
      public bool HasPuk {
        get { return result.hasPuk; }
      }
      public string Puk {
        get { return result.Puk; }
        set { SetPuk(value); }
      }
      public Builder SetPuk(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPuk = true;
        result.puk_ = value;
        return this;
      }
      public Builder ClearPuk() {
        PrepareBuilder();
        result.hasPuk = false;
        result.puk_ = "";
        return this;
      }
      
      public bool HasSwitchLedOn {
        get { return result.hasSwitchLedOn; }
      }
      public bool SwitchLedOn {
        get { return result.SwitchLedOn; }
        set { SetSwitchLedOn(value); }
      }
      public Builder SetSwitchLedOn(bool value) {
        PrepareBuilder();
        result.hasSwitchLedOn = true;
        result.switchLedOn_ = value;
        return this;
      }
      public Builder ClearSwitchLedOn() {
        PrepareBuilder();
        result.hasSwitchLedOn = false;
        result.switchLedOn_ = false;
        return this;
      }
      
      public bool HasTimezone {
        get { return result.hasTimezone; }
      }
      public int Timezone {
        get { return result.Timezone; }
        set { SetTimezone(value); }
      }
      public Builder SetTimezone(int value) {
        PrepareBuilder();
        result.hasTimezone = true;
        result.timezone_ = value;
        return this;
      }
      public Builder ClearTimezone() {
        PrepareBuilder();
        result.hasTimezone = false;
        result.timezone_ = 0;
        return this;
      }
      
      public bool HasCellInfoInPos {
        get { return result.hasCellInfoInPos; }
      }
      public bool CellInfoInPos {
        get { return result.CellInfoInPos; }
        set { SetCellInfoInPos(value); }
      }
      public Builder SetCellInfoInPos(bool value) {
        PrepareBuilder();
        result.hasCellInfoInPos = true;
        result.cellInfoInPos_ = value;
        return this;
      }
      public Builder ClearCellInfoInPos() {
        PrepareBuilder();
        result.hasCellInfoInPos = false;
        result.cellInfoInPos_ = false;
        return this;
      }
      
      public bool HasMaxSpeedLimit {
        get { return result.hasMaxSpeedLimit; }
      }
      [global::System.CLSCompliant(false)]
      public uint MaxSpeedLimit {
        get { return result.MaxSpeedLimit; }
        set { SetMaxSpeedLimit(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetMaxSpeedLimit(uint value) {
        PrepareBuilder();
        result.hasMaxSpeedLimit = true;
        result.maxSpeedLimit_ = value;
        return this;
      }
      public Builder ClearMaxSpeedLimit() {
        PrepareBuilder();
        result.hasMaxSpeedLimit = false;
        result.maxSpeedLimit_ = 0;
        return this;
      }
      
      public bool HasCalculateOdometer {
        get { return result.hasCalculateOdometer; }
      }
      public bool CalculateOdometer {
        get { return result.CalculateOdometer; }
        set { SetCalculateOdometer(value); }
      }
      public Builder SetCalculateOdometer(bool value) {
        PrepareBuilder();
        result.hasCalculateOdometer = true;
        result.calculateOdometer_ = value;
        return this;
      }
      public Builder ClearCalculateOdometer() {
        PrepareBuilder();
        result.hasCalculateOdometer = false;
        result.calculateOdometer_ = false;
        return this;
      }
      
      public bool HasMaximumLogCount {
        get { return result.hasMaximumLogCount; }
      }
      [global::System.CLSCompliant(false)]
      public uint MaximumLogCount {
        get { return result.MaximumLogCount; }
        set { SetMaximumLogCount(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetMaximumLogCount(uint value) {
        PrepareBuilder();
        result.hasMaximumLogCount = true;
        result.maximumLogCount_ = value;
        return this;
      }
      public Builder ClearMaximumLogCount() {
        PrepareBuilder();
        result.hasMaximumLogCount = false;
        result.maximumLogCount_ = 0;
        return this;
      }
      
      public bool HasIgnitionVoltage {
        get { return result.hasIgnitionVoltage; }
      }
      [global::System.CLSCompliant(false)]
      public uint IgnitionVoltage {
        get { return result.IgnitionVoltage; }
        set { SetIgnitionVoltage(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetIgnitionVoltage(uint value) {
        PrepareBuilder();
        result.hasIgnitionVoltage = true;
        result.ignitionVoltage_ = value;
        return this;
      }
      public Builder ClearIgnitionVoltage() {
        PrepareBuilder();
        result.hasIgnitionVoltage = false;
        result.ignitionVoltage_ = 0;
        return this;
      }
      
      public bool HasIgnitionVoltageFactor {
        get { return result.hasIgnitionVoltageFactor; }
      }
      [global::System.CLSCompliant(false)]
      public uint IgnitionVoltageFactor {
        get { return result.IgnitionVoltageFactor; }
        set { SetIgnitionVoltageFactor(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetIgnitionVoltageFactor(uint value) {
        PrepareBuilder();
        result.hasIgnitionVoltageFactor = true;
        result.ignitionVoltageFactor_ = value;
        return this;
      }
      public Builder ClearIgnitionVoltageFactor() {
        PrepareBuilder();
        result.hasIgnitionVoltageFactor = false;
        result.ignitionVoltageFactor_ = 0;
        return this;
      }
      
      public bool HasIgnitionTimer {
        get { return result.hasIgnitionTimer; }
      }
      [global::System.CLSCompliant(false)]
      public uint IgnitionTimer {
        get { return result.IgnitionTimer; }
        set { SetIgnitionTimer(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetIgnitionTimer(uint value) {
        PrepareBuilder();
        result.hasIgnitionTimer = true;
        result.ignitionTimer_ = value;
        return this;
      }
      public Builder ClearIgnitionTimer() {
        PrepareBuilder();
        result.hasIgnitionTimer = false;
        result.ignitionTimer_ = 0;
        return this;
      }
      
      public bool HasChargingAllow {
        get { return result.hasChargingAllow; }
      }
      public bool ChargingAllow {
        get { return result.ChargingAllow; }
        set { SetChargingAllow(value); }
      }
      public Builder SetChargingAllow(bool value) {
        PrepareBuilder();
        result.hasChargingAllow = true;
        result.chargingAllow_ = value;
        return this;
      }
      public Builder ClearChargingAllow() {
        PrepareBuilder();
        result.hasChargingAllow = false;
        result.chargingAllow_ = false;
        return this;
      }
      
      public bool HasWorkingBeforeSleep {
        get { return result.hasWorkingBeforeSleep; }
      }
      [global::System.CLSCompliant(false)]
      public uint WorkingBeforeSleep {
        get { return result.WorkingBeforeSleep; }
        set { SetWorkingBeforeSleep(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetWorkingBeforeSleep(uint value) {
        PrepareBuilder();
        result.hasWorkingBeforeSleep = true;
        result.workingBeforeSleep_ = value;
        return this;
      }
      public Builder ClearWorkingBeforeSleep() {
        PrepareBuilder();
        result.hasWorkingBeforeSleep = false;
        result.workingBeforeSleep_ = 0;
        return this;
      }
      
      public bool HasHistogramGroups {
        get { return result.hasHistogramGroups; }
      }
      [global::System.CLSCompliant(false)]
      public uint HistogramGroups {
        get { return result.HistogramGroups; }
        set { SetHistogramGroups(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetHistogramGroups(uint value) {
        PrepareBuilder();
        result.hasHistogramGroups = true;
        result.histogramGroups_ = value;
        return this;
      }
      public Builder ClearHistogramGroups() {
        PrepareBuilder();
        result.hasHistogramGroups = false;
        result.histogramGroups_ = 0;
        return this;
      }
      
      public bool HasSpeedHistogramInterval {
        get { return result.hasSpeedHistogramInterval; }
      }
      [global::System.CLSCompliant(false)]
      public uint SpeedHistogramInterval {
        get { return result.SpeedHistogramInterval; }
        set { SetSpeedHistogramInterval(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSpeedHistogramInterval(uint value) {
        PrepareBuilder();
        result.hasSpeedHistogramInterval = true;
        result.speedHistogramInterval_ = value;
        return this;
      }
      public Builder ClearSpeedHistogramInterval() {
        PrepareBuilder();
        result.hasSpeedHistogramInterval = false;
        result.speedHistogramInterval_ = 0;
        return this;
      }
      
      public bool HasPositionSpeedSummarization {
        get { return result.hasPositionSpeedSummarization; }
      }
      public bool PositionSpeedSummarization {
        get { return result.PositionSpeedSummarization; }
        set { SetPositionSpeedSummarization(value); }
      }
      public Builder SetPositionSpeedSummarization(bool value) {
        PrepareBuilder();
        result.hasPositionSpeedSummarization = true;
        result.positionSpeedSummarization_ = value;
        return this;
      }
      public Builder ClearPositionSpeedSummarization() {
        PrepareBuilder();
        result.hasPositionSpeedSummarization = false;
        result.positionSpeedSummarization_ = false;
        return this;
      }
    }
    static mxt1xx_u_dynamic_setup_others() {
      object.ReferenceEquals(global::maxtrack.pb.mxt1xx.Mxt1Xx.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mxt1xx_u_dynamic_setup_can : pb::GeneratedMessage<mxt1xx_u_dynamic_setup_can, mxt1xx_u_dynamic_setup_can.Builder> {
    private mxt1xx_u_dynamic_setup_can() { }
    private static readonly mxt1xx_u_dynamic_setup_can defaultInstance = new mxt1xx_u_dynamic_setup_can().MakeReadOnly();
    private static readonly string[] _mxt1XxUDynamicSetupCanFieldNames = new string[] { "brake", "can_additional_packet", "can_enable", "clutch", "current_gear", "doors_closed", "doors_locked", "dtc", "engine_reference_torque", "ethanol_ratio", "fuel_consumption", "fuel_level_1", "fuel_level_2", "fuel_type", "headlights_on", "intake_air_flow", "intake_air_temp", "malfunction_lamp_on", "motor_brake", "oil_temperature", "parking_brake", "rpm", "seat_belt_buckled", "speed", "trunk_closed", "window_wipers" };
    private static readonly uint[] _mxt1XxUDynamicSetupCanFieldTags = new uint[] { 32, 16, 8, 24, 200, 64, 72, 208, 192, 176, 144, 128, 136, 168, 96, 160, 152, 104, 48, 184, 40, 120, 88, 112, 80, 56 };
    public static mxt1xx_u_dynamic_setup_can DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mxt1xx_u_dynamic_setup_can DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mxt1xx_u_dynamic_setup_can ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_dynamic_setup_can__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mxt1xx_u_dynamic_setup_can, mxt1xx_u_dynamic_setup_can.Builder> InternalFieldAccessors {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_dynamic_setup_can__FieldAccessorTable; }
    }
    
    public const int CanEnableFieldNumber = 1;
    private bool hasCanEnable;
    private bool canEnable_;
    public bool HasCanEnable {
      get { return hasCanEnable; }
    }
    public bool CanEnable {
      get { return canEnable_; }
    }
    
    public const int CanAdditionalPacketFieldNumber = 2;
    private bool hasCanAdditionalPacket;
    private bool canAdditionalPacket_;
    public bool HasCanAdditionalPacket {
      get { return hasCanAdditionalPacket; }
    }
    public bool CanAdditionalPacket {
      get { return canAdditionalPacket_; }
    }
    
    public const int ClutchFieldNumber = 3;
    private bool hasClutch;
    private bool clutch_;
    public bool HasClutch {
      get { return hasClutch; }
    }
    public bool Clutch {
      get { return clutch_; }
    }
    
    public const int BrakeFieldNumber = 4;
    private bool hasBrake;
    private bool brake_;
    public bool HasBrake {
      get { return hasBrake; }
    }
    public bool Brake {
      get { return brake_; }
    }
    
    public const int ParkingBrakeFieldNumber = 5;
    private bool hasParkingBrake;
    private bool parkingBrake_;
    public bool HasParkingBrake {
      get { return hasParkingBrake; }
    }
    public bool ParkingBrake {
      get { return parkingBrake_; }
    }
    
    public const int MotorBrakeFieldNumber = 6;
    private bool hasMotorBrake;
    private bool motorBrake_;
    public bool HasMotorBrake {
      get { return hasMotorBrake; }
    }
    public bool MotorBrake {
      get { return motorBrake_; }
    }
    
    public const int WindowWipersFieldNumber = 7;
    private bool hasWindowWipers;
    private bool windowWipers_;
    public bool HasWindowWipers {
      get { return hasWindowWipers; }
    }
    public bool WindowWipers {
      get { return windowWipers_; }
    }
    
    public const int DoorsClosedFieldNumber = 8;
    private bool hasDoorsClosed;
    private bool doorsClosed_;
    public bool HasDoorsClosed {
      get { return hasDoorsClosed; }
    }
    public bool DoorsClosed {
      get { return doorsClosed_; }
    }
    
    public const int DoorsLockedFieldNumber = 9;
    private bool hasDoorsLocked;
    private bool doorsLocked_;
    public bool HasDoorsLocked {
      get { return hasDoorsLocked; }
    }
    public bool DoorsLocked {
      get { return doorsLocked_; }
    }
    
    public const int TrunkClosedFieldNumber = 10;
    private bool hasTrunkClosed;
    private bool trunkClosed_;
    public bool HasTrunkClosed {
      get { return hasTrunkClosed; }
    }
    public bool TrunkClosed {
      get { return trunkClosed_; }
    }
    
    public const int SeatBeltBuckledFieldNumber = 11;
    private bool hasSeatBeltBuckled;
    private bool seatBeltBuckled_;
    public bool HasSeatBeltBuckled {
      get { return hasSeatBeltBuckled; }
    }
    public bool SeatBeltBuckled {
      get { return seatBeltBuckled_; }
    }
    
    public const int HeadlightsOnFieldNumber = 12;
    private bool hasHeadlightsOn;
    private bool headlightsOn_;
    public bool HasHeadlightsOn {
      get { return hasHeadlightsOn; }
    }
    public bool HeadlightsOn {
      get { return headlightsOn_; }
    }
    
    public const int MalfunctionLampOnFieldNumber = 13;
    private bool hasMalfunctionLampOn;
    private bool malfunctionLampOn_;
    public bool HasMalfunctionLampOn {
      get { return hasMalfunctionLampOn; }
    }
    public bool MalfunctionLampOn {
      get { return malfunctionLampOn_; }
    }
    
    public const int SpeedFieldNumber = 14;
    private bool hasSpeed;
    private bool speed_;
    public bool HasSpeed {
      get { return hasSpeed; }
    }
    public bool Speed {
      get { return speed_; }
    }
    
    public const int RpmFieldNumber = 15;
    private bool hasRpm;
    private bool rpm_;
    public bool HasRpm {
      get { return hasRpm; }
    }
    public bool Rpm {
      get { return rpm_; }
    }
    
    public const int FuelLevel1FieldNumber = 16;
    private bool hasFuelLevel1;
    private bool fuelLevel1_;
    public bool HasFuelLevel1 {
      get { return hasFuelLevel1; }
    }
    public bool FuelLevel1 {
      get { return fuelLevel1_; }
    }
    
    public const int FuelLevel2FieldNumber = 17;
    private bool hasFuelLevel2;
    private bool fuelLevel2_;
    public bool HasFuelLevel2 {
      get { return hasFuelLevel2; }
    }
    public bool FuelLevel2 {
      get { return fuelLevel2_; }
    }
    
    public const int FuelConsumptionFieldNumber = 18;
    private bool hasFuelConsumption;
    private bool fuelConsumption_;
    public bool HasFuelConsumption {
      get { return hasFuelConsumption; }
    }
    public bool FuelConsumption {
      get { return fuelConsumption_; }
    }
    
    public const int IntakeAirTempFieldNumber = 19;
    private bool hasIntakeAirTemp;
    private bool intakeAirTemp_;
    public bool HasIntakeAirTemp {
      get { return hasIntakeAirTemp; }
    }
    public bool IntakeAirTemp {
      get { return intakeAirTemp_; }
    }
    
    public const int IntakeAirFlowFieldNumber = 20;
    private bool hasIntakeAirFlow;
    private bool intakeAirFlow_;
    public bool HasIntakeAirFlow {
      get { return hasIntakeAirFlow; }
    }
    public bool IntakeAirFlow {
      get { return intakeAirFlow_; }
    }
    
    public const int FuelTypeFieldNumber = 21;
    private bool hasFuelType;
    private bool fuelType_;
    public bool HasFuelType {
      get { return hasFuelType; }
    }
    public bool FuelType {
      get { return fuelType_; }
    }
    
    public const int EthanolRatioFieldNumber = 22;
    private bool hasEthanolRatio;
    private bool ethanolRatio_;
    public bool HasEthanolRatio {
      get { return hasEthanolRatio; }
    }
    public bool EthanolRatio {
      get { return ethanolRatio_; }
    }
    
    public const int OilTemperatureFieldNumber = 23;
    private bool hasOilTemperature;
    private bool oilTemperature_;
    public bool HasOilTemperature {
      get { return hasOilTemperature; }
    }
    public bool OilTemperature {
      get { return oilTemperature_; }
    }
    
    public const int EngineReferenceTorqueFieldNumber = 24;
    private bool hasEngineReferenceTorque;
    private bool engineReferenceTorque_;
    public bool HasEngineReferenceTorque {
      get { return hasEngineReferenceTorque; }
    }
    public bool EngineReferenceTorque {
      get { return engineReferenceTorque_; }
    }
    
    public const int CurrentGearFieldNumber = 25;
    private bool hasCurrentGear;
    private bool currentGear_;
    public bool HasCurrentGear {
      get { return hasCurrentGear; }
    }
    public bool CurrentGear {
      get { return currentGear_; }
    }
    
    public const int DtcFieldNumber = 26;
    private bool hasDtc;
    private bool dtc_;
    public bool HasDtc {
      get { return hasDtc; }
    }
    public bool Dtc {
      get { return dtc_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mxt1XxUDynamicSetupCanFieldNames;
      if (hasCanEnable) {
        output.WriteBool(1, field_names[2], CanEnable);
      }
      if (hasCanAdditionalPacket) {
        output.WriteBool(2, field_names[1], CanAdditionalPacket);
      }
      if (hasClutch) {
        output.WriteBool(3, field_names[3], Clutch);
      }
      if (hasBrake) {
        output.WriteBool(4, field_names[0], Brake);
      }
      if (hasParkingBrake) {
        output.WriteBool(5, field_names[20], ParkingBrake);
      }
      if (hasMotorBrake) {
        output.WriteBool(6, field_names[18], MotorBrake);
      }
      if (hasWindowWipers) {
        output.WriteBool(7, field_names[25], WindowWipers);
      }
      if (hasDoorsClosed) {
        output.WriteBool(8, field_names[5], DoorsClosed);
      }
      if (hasDoorsLocked) {
        output.WriteBool(9, field_names[6], DoorsLocked);
      }
      if (hasTrunkClosed) {
        output.WriteBool(10, field_names[24], TrunkClosed);
      }
      if (hasSeatBeltBuckled) {
        output.WriteBool(11, field_names[22], SeatBeltBuckled);
      }
      if (hasHeadlightsOn) {
        output.WriteBool(12, field_names[14], HeadlightsOn);
      }
      if (hasMalfunctionLampOn) {
        output.WriteBool(13, field_names[17], MalfunctionLampOn);
      }
      if (hasSpeed) {
        output.WriteBool(14, field_names[23], Speed);
      }
      if (hasRpm) {
        output.WriteBool(15, field_names[21], Rpm);
      }
      if (hasFuelLevel1) {
        output.WriteBool(16, field_names[11], FuelLevel1);
      }
      if (hasFuelLevel2) {
        output.WriteBool(17, field_names[12], FuelLevel2);
      }
      if (hasFuelConsumption) {
        output.WriteBool(18, field_names[10], FuelConsumption);
      }
      if (hasIntakeAirTemp) {
        output.WriteBool(19, field_names[16], IntakeAirTemp);
      }
      if (hasIntakeAirFlow) {
        output.WriteBool(20, field_names[15], IntakeAirFlow);
      }
      if (hasFuelType) {
        output.WriteBool(21, field_names[13], FuelType);
      }
      if (hasEthanolRatio) {
        output.WriteBool(22, field_names[9], EthanolRatio);
      }
      if (hasOilTemperature) {
        output.WriteBool(23, field_names[19], OilTemperature);
      }
      if (hasEngineReferenceTorque) {
        output.WriteBool(24, field_names[8], EngineReferenceTorque);
      }
      if (hasCurrentGear) {
        output.WriteBool(25, field_names[4], CurrentGear);
      }
      if (hasDtc) {
        output.WriteBool(26, field_names[7], Dtc);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasCanEnable) {
        size += pb::CodedOutputStream.ComputeBoolSize(1, CanEnable);
      }
      if (hasCanAdditionalPacket) {
        size += pb::CodedOutputStream.ComputeBoolSize(2, CanAdditionalPacket);
      }
      if (hasClutch) {
        size += pb::CodedOutputStream.ComputeBoolSize(3, Clutch);
      }
      if (hasBrake) {
        size += pb::CodedOutputStream.ComputeBoolSize(4, Brake);
      }
      if (hasParkingBrake) {
        size += pb::CodedOutputStream.ComputeBoolSize(5, ParkingBrake);
      }
      if (hasMotorBrake) {
        size += pb::CodedOutputStream.ComputeBoolSize(6, MotorBrake);
      }
      if (hasWindowWipers) {
        size += pb::CodedOutputStream.ComputeBoolSize(7, WindowWipers);
      }
      if (hasDoorsClosed) {
        size += pb::CodedOutputStream.ComputeBoolSize(8, DoorsClosed);
      }
      if (hasDoorsLocked) {
        size += pb::CodedOutputStream.ComputeBoolSize(9, DoorsLocked);
      }
      if (hasTrunkClosed) {
        size += pb::CodedOutputStream.ComputeBoolSize(10, TrunkClosed);
      }
      if (hasSeatBeltBuckled) {
        size += pb::CodedOutputStream.ComputeBoolSize(11, SeatBeltBuckled);
      }
      if (hasHeadlightsOn) {
        size += pb::CodedOutputStream.ComputeBoolSize(12, HeadlightsOn);
      }
      if (hasMalfunctionLampOn) {
        size += pb::CodedOutputStream.ComputeBoolSize(13, MalfunctionLampOn);
      }
      if (hasSpeed) {
        size += pb::CodedOutputStream.ComputeBoolSize(14, Speed);
      }
      if (hasRpm) {
        size += pb::CodedOutputStream.ComputeBoolSize(15, Rpm);
      }
      if (hasFuelLevel1) {
        size += pb::CodedOutputStream.ComputeBoolSize(16, FuelLevel1);
      }
      if (hasFuelLevel2) {
        size += pb::CodedOutputStream.ComputeBoolSize(17, FuelLevel2);
      }
      if (hasFuelConsumption) {
        size += pb::CodedOutputStream.ComputeBoolSize(18, FuelConsumption);
      }
      if (hasIntakeAirTemp) {
        size += pb::CodedOutputStream.ComputeBoolSize(19, IntakeAirTemp);
      }
      if (hasIntakeAirFlow) {
        size += pb::CodedOutputStream.ComputeBoolSize(20, IntakeAirFlow);
      }
      if (hasFuelType) {
        size += pb::CodedOutputStream.ComputeBoolSize(21, FuelType);
      }
      if (hasEthanolRatio) {
        size += pb::CodedOutputStream.ComputeBoolSize(22, EthanolRatio);
      }
      if (hasOilTemperature) {
        size += pb::CodedOutputStream.ComputeBoolSize(23, OilTemperature);
      }
      if (hasEngineReferenceTorque) {
        size += pb::CodedOutputStream.ComputeBoolSize(24, EngineReferenceTorque);
      }
      if (hasCurrentGear) {
        size += pb::CodedOutputStream.ComputeBoolSize(25, CurrentGear);
      }
      if (hasDtc) {
        size += pb::CodedOutputStream.ComputeBoolSize(26, Dtc);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mxt1xx_u_dynamic_setup_can ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_can ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_can ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_can ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_can ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_can ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_can ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_can ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_can ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup_can ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mxt1xx_u_dynamic_setup_can MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mxt1xx_u_dynamic_setup_can prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mxt1xx_u_dynamic_setup_can, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mxt1xx_u_dynamic_setup_can cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mxt1xx_u_dynamic_setup_can result;
      
      private mxt1xx_u_dynamic_setup_can PrepareBuilder() {
        if (resultIsReadOnly) {
          mxt1xx_u_dynamic_setup_can original = result;
          result = new mxt1xx_u_dynamic_setup_can();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mxt1xx_u_dynamic_setup_can MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_can.Descriptor; }
      }
      
      public override mxt1xx_u_dynamic_setup_can DefaultInstanceForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_can.DefaultInstance; }
      }
      
      public override mxt1xx_u_dynamic_setup_can BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mxt1xx_u_dynamic_setup_can) {
          return MergeFrom((mxt1xx_u_dynamic_setup_can) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mxt1xx_u_dynamic_setup_can other) {
        if (other == global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_can.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCanEnable) {
          CanEnable = other.CanEnable;
        }
        if (other.HasCanAdditionalPacket) {
          CanAdditionalPacket = other.CanAdditionalPacket;
        }
        if (other.HasClutch) {
          Clutch = other.Clutch;
        }
        if (other.HasBrake) {
          Brake = other.Brake;
        }
        if (other.HasParkingBrake) {
          ParkingBrake = other.ParkingBrake;
        }
        if (other.HasMotorBrake) {
          MotorBrake = other.MotorBrake;
        }
        if (other.HasWindowWipers) {
          WindowWipers = other.WindowWipers;
        }
        if (other.HasDoorsClosed) {
          DoorsClosed = other.DoorsClosed;
        }
        if (other.HasDoorsLocked) {
          DoorsLocked = other.DoorsLocked;
        }
        if (other.HasTrunkClosed) {
          TrunkClosed = other.TrunkClosed;
        }
        if (other.HasSeatBeltBuckled) {
          SeatBeltBuckled = other.SeatBeltBuckled;
        }
        if (other.HasHeadlightsOn) {
          HeadlightsOn = other.HeadlightsOn;
        }
        if (other.HasMalfunctionLampOn) {
          MalfunctionLampOn = other.MalfunctionLampOn;
        }
        if (other.HasSpeed) {
          Speed = other.Speed;
        }
        if (other.HasRpm) {
          Rpm = other.Rpm;
        }
        if (other.HasFuelLevel1) {
          FuelLevel1 = other.FuelLevel1;
        }
        if (other.HasFuelLevel2) {
          FuelLevel2 = other.FuelLevel2;
        }
        if (other.HasFuelConsumption) {
          FuelConsumption = other.FuelConsumption;
        }
        if (other.HasIntakeAirTemp) {
          IntakeAirTemp = other.IntakeAirTemp;
        }
        if (other.HasIntakeAirFlow) {
          IntakeAirFlow = other.IntakeAirFlow;
        }
        if (other.HasFuelType) {
          FuelType = other.FuelType;
        }
        if (other.HasEthanolRatio) {
          EthanolRatio = other.EthanolRatio;
        }
        if (other.HasOilTemperature) {
          OilTemperature = other.OilTemperature;
        }
        if (other.HasEngineReferenceTorque) {
          EngineReferenceTorque = other.EngineReferenceTorque;
        }
        if (other.HasCurrentGear) {
          CurrentGear = other.CurrentGear;
        }
        if (other.HasDtc) {
          Dtc = other.Dtc;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mxt1XxUDynamicSetupCanFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mxt1XxUDynamicSetupCanFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasCanEnable = input.ReadBool(ref result.canEnable_);
              break;
            }
            case 16: {
              result.hasCanAdditionalPacket = input.ReadBool(ref result.canAdditionalPacket_);
              break;
            }
            case 24: {
              result.hasClutch = input.ReadBool(ref result.clutch_);
              break;
            }
            case 32: {
              result.hasBrake = input.ReadBool(ref result.brake_);
              break;
            }
            case 40: {
              result.hasParkingBrake = input.ReadBool(ref result.parkingBrake_);
              break;
            }
            case 48: {
              result.hasMotorBrake = input.ReadBool(ref result.motorBrake_);
              break;
            }
            case 56: {
              result.hasWindowWipers = input.ReadBool(ref result.windowWipers_);
              break;
            }
            case 64: {
              result.hasDoorsClosed = input.ReadBool(ref result.doorsClosed_);
              break;
            }
            case 72: {
              result.hasDoorsLocked = input.ReadBool(ref result.doorsLocked_);
              break;
            }
            case 80: {
              result.hasTrunkClosed = input.ReadBool(ref result.trunkClosed_);
              break;
            }
            case 88: {
              result.hasSeatBeltBuckled = input.ReadBool(ref result.seatBeltBuckled_);
              break;
            }
            case 96: {
              result.hasHeadlightsOn = input.ReadBool(ref result.headlightsOn_);
              break;
            }
            case 104: {
              result.hasMalfunctionLampOn = input.ReadBool(ref result.malfunctionLampOn_);
              break;
            }
            case 112: {
              result.hasSpeed = input.ReadBool(ref result.speed_);
              break;
            }
            case 120: {
              result.hasRpm = input.ReadBool(ref result.rpm_);
              break;
            }
            case 128: {
              result.hasFuelLevel1 = input.ReadBool(ref result.fuelLevel1_);
              break;
            }
            case 136: {
              result.hasFuelLevel2 = input.ReadBool(ref result.fuelLevel2_);
              break;
            }
            case 144: {
              result.hasFuelConsumption = input.ReadBool(ref result.fuelConsumption_);
              break;
            }
            case 152: {
              result.hasIntakeAirTemp = input.ReadBool(ref result.intakeAirTemp_);
              break;
            }
            case 160: {
              result.hasIntakeAirFlow = input.ReadBool(ref result.intakeAirFlow_);
              break;
            }
            case 168: {
              result.hasFuelType = input.ReadBool(ref result.fuelType_);
              break;
            }
            case 176: {
              result.hasEthanolRatio = input.ReadBool(ref result.ethanolRatio_);
              break;
            }
            case 184: {
              result.hasOilTemperature = input.ReadBool(ref result.oilTemperature_);
              break;
            }
            case 192: {
              result.hasEngineReferenceTorque = input.ReadBool(ref result.engineReferenceTorque_);
              break;
            }
            case 200: {
              result.hasCurrentGear = input.ReadBool(ref result.currentGear_);
              break;
            }
            case 208: {
              result.hasDtc = input.ReadBool(ref result.dtc_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCanEnable {
        get { return result.hasCanEnable; }
      }
      public bool CanEnable {
        get { return result.CanEnable; }
        set { SetCanEnable(value); }
      }
      public Builder SetCanEnable(bool value) {
        PrepareBuilder();
        result.hasCanEnable = true;
        result.canEnable_ = value;
        return this;
      }
      public Builder ClearCanEnable() {
        PrepareBuilder();
        result.hasCanEnable = false;
        result.canEnable_ = false;
        return this;
      }
      
      public bool HasCanAdditionalPacket {
        get { return result.hasCanAdditionalPacket; }
      }
      public bool CanAdditionalPacket {
        get { return result.CanAdditionalPacket; }
        set { SetCanAdditionalPacket(value); }
      }
      public Builder SetCanAdditionalPacket(bool value) {
        PrepareBuilder();
        result.hasCanAdditionalPacket = true;
        result.canAdditionalPacket_ = value;
        return this;
      }
      public Builder ClearCanAdditionalPacket() {
        PrepareBuilder();
        result.hasCanAdditionalPacket = false;
        result.canAdditionalPacket_ = false;
        return this;
      }
      
      public bool HasClutch {
        get { return result.hasClutch; }
      }
      public bool Clutch {
        get { return result.Clutch; }
        set { SetClutch(value); }
      }
      public Builder SetClutch(bool value) {
        PrepareBuilder();
        result.hasClutch = true;
        result.clutch_ = value;
        return this;
      }
      public Builder ClearClutch() {
        PrepareBuilder();
        result.hasClutch = false;
        result.clutch_ = false;
        return this;
      }
      
      public bool HasBrake {
        get { return result.hasBrake; }
      }
      public bool Brake {
        get { return result.Brake; }
        set { SetBrake(value); }
      }
      public Builder SetBrake(bool value) {
        PrepareBuilder();
        result.hasBrake = true;
        result.brake_ = value;
        return this;
      }
      public Builder ClearBrake() {
        PrepareBuilder();
        result.hasBrake = false;
        result.brake_ = false;
        return this;
      }
      
      public bool HasParkingBrake {
        get { return result.hasParkingBrake; }
      }
      public bool ParkingBrake {
        get { return result.ParkingBrake; }
        set { SetParkingBrake(value); }
      }
      public Builder SetParkingBrake(bool value) {
        PrepareBuilder();
        result.hasParkingBrake = true;
        result.parkingBrake_ = value;
        return this;
      }
      public Builder ClearParkingBrake() {
        PrepareBuilder();
        result.hasParkingBrake = false;
        result.parkingBrake_ = false;
        return this;
      }
      
      public bool HasMotorBrake {
        get { return result.hasMotorBrake; }
      }
      public bool MotorBrake {
        get { return result.MotorBrake; }
        set { SetMotorBrake(value); }
      }
      public Builder SetMotorBrake(bool value) {
        PrepareBuilder();
        result.hasMotorBrake = true;
        result.motorBrake_ = value;
        return this;
      }
      public Builder ClearMotorBrake() {
        PrepareBuilder();
        result.hasMotorBrake = false;
        result.motorBrake_ = false;
        return this;
      }
      
      public bool HasWindowWipers {
        get { return result.hasWindowWipers; }
      }
      public bool WindowWipers {
        get { return result.WindowWipers; }
        set { SetWindowWipers(value); }
      }
      public Builder SetWindowWipers(bool value) {
        PrepareBuilder();
        result.hasWindowWipers = true;
        result.windowWipers_ = value;
        return this;
      }
      public Builder ClearWindowWipers() {
        PrepareBuilder();
        result.hasWindowWipers = false;
        result.windowWipers_ = false;
        return this;
      }
      
      public bool HasDoorsClosed {
        get { return result.hasDoorsClosed; }
      }
      public bool DoorsClosed {
        get { return result.DoorsClosed; }
        set { SetDoorsClosed(value); }
      }
      public Builder SetDoorsClosed(bool value) {
        PrepareBuilder();
        result.hasDoorsClosed = true;
        result.doorsClosed_ = value;
        return this;
      }
      public Builder ClearDoorsClosed() {
        PrepareBuilder();
        result.hasDoorsClosed = false;
        result.doorsClosed_ = false;
        return this;
      }
      
      public bool HasDoorsLocked {
        get { return result.hasDoorsLocked; }
      }
      public bool DoorsLocked {
        get { return result.DoorsLocked; }
        set { SetDoorsLocked(value); }
      }
      public Builder SetDoorsLocked(bool value) {
        PrepareBuilder();
        result.hasDoorsLocked = true;
        result.doorsLocked_ = value;
        return this;
      }
      public Builder ClearDoorsLocked() {
        PrepareBuilder();
        result.hasDoorsLocked = false;
        result.doorsLocked_ = false;
        return this;
      }
      
      public bool HasTrunkClosed {
        get { return result.hasTrunkClosed; }
      }
      public bool TrunkClosed {
        get { return result.TrunkClosed; }
        set { SetTrunkClosed(value); }
      }
      public Builder SetTrunkClosed(bool value) {
        PrepareBuilder();
        result.hasTrunkClosed = true;
        result.trunkClosed_ = value;
        return this;
      }
      public Builder ClearTrunkClosed() {
        PrepareBuilder();
        result.hasTrunkClosed = false;
        result.trunkClosed_ = false;
        return this;
      }
      
      public bool HasSeatBeltBuckled {
        get { return result.hasSeatBeltBuckled; }
      }
      public bool SeatBeltBuckled {
        get { return result.SeatBeltBuckled; }
        set { SetSeatBeltBuckled(value); }
      }
      public Builder SetSeatBeltBuckled(bool value) {
        PrepareBuilder();
        result.hasSeatBeltBuckled = true;
        result.seatBeltBuckled_ = value;
        return this;
      }
      public Builder ClearSeatBeltBuckled() {
        PrepareBuilder();
        result.hasSeatBeltBuckled = false;
        result.seatBeltBuckled_ = false;
        return this;
      }
      
      public bool HasHeadlightsOn {
        get { return result.hasHeadlightsOn; }
      }
      public bool HeadlightsOn {
        get { return result.HeadlightsOn; }
        set { SetHeadlightsOn(value); }
      }
      public Builder SetHeadlightsOn(bool value) {
        PrepareBuilder();
        result.hasHeadlightsOn = true;
        result.headlightsOn_ = value;
        return this;
      }
      public Builder ClearHeadlightsOn() {
        PrepareBuilder();
        result.hasHeadlightsOn = false;
        result.headlightsOn_ = false;
        return this;
      }
      
      public bool HasMalfunctionLampOn {
        get { return result.hasMalfunctionLampOn; }
      }
      public bool MalfunctionLampOn {
        get { return result.MalfunctionLampOn; }
        set { SetMalfunctionLampOn(value); }
      }
      public Builder SetMalfunctionLampOn(bool value) {
        PrepareBuilder();
        result.hasMalfunctionLampOn = true;
        result.malfunctionLampOn_ = value;
        return this;
      }
      public Builder ClearMalfunctionLampOn() {
        PrepareBuilder();
        result.hasMalfunctionLampOn = false;
        result.malfunctionLampOn_ = false;
        return this;
      }
      
      public bool HasSpeed {
        get { return result.hasSpeed; }
      }
      public bool Speed {
        get { return result.Speed; }
        set { SetSpeed(value); }
      }
      public Builder SetSpeed(bool value) {
        PrepareBuilder();
        result.hasSpeed = true;
        result.speed_ = value;
        return this;
      }
      public Builder ClearSpeed() {
        PrepareBuilder();
        result.hasSpeed = false;
        result.speed_ = false;
        return this;
      }
      
      public bool HasRpm {
        get { return result.hasRpm; }
      }
      public bool Rpm {
        get { return result.Rpm; }
        set { SetRpm(value); }
      }
      public Builder SetRpm(bool value) {
        PrepareBuilder();
        result.hasRpm = true;
        result.rpm_ = value;
        return this;
      }
      public Builder ClearRpm() {
        PrepareBuilder();
        result.hasRpm = false;
        result.rpm_ = false;
        return this;
      }
      
      public bool HasFuelLevel1 {
        get { return result.hasFuelLevel1; }
      }
      public bool FuelLevel1 {
        get { return result.FuelLevel1; }
        set { SetFuelLevel1(value); }
      }
      public Builder SetFuelLevel1(bool value) {
        PrepareBuilder();
        result.hasFuelLevel1 = true;
        result.fuelLevel1_ = value;
        return this;
      }
      public Builder ClearFuelLevel1() {
        PrepareBuilder();
        result.hasFuelLevel1 = false;
        result.fuelLevel1_ = false;
        return this;
      }
      
      public bool HasFuelLevel2 {
        get { return result.hasFuelLevel2; }
      }
      public bool FuelLevel2 {
        get { return result.FuelLevel2; }
        set { SetFuelLevel2(value); }
      }
      public Builder SetFuelLevel2(bool value) {
        PrepareBuilder();
        result.hasFuelLevel2 = true;
        result.fuelLevel2_ = value;
        return this;
      }
      public Builder ClearFuelLevel2() {
        PrepareBuilder();
        result.hasFuelLevel2 = false;
        result.fuelLevel2_ = false;
        return this;
      }
      
      public bool HasFuelConsumption {
        get { return result.hasFuelConsumption; }
      }
      public bool FuelConsumption {
        get { return result.FuelConsumption; }
        set { SetFuelConsumption(value); }
      }
      public Builder SetFuelConsumption(bool value) {
        PrepareBuilder();
        result.hasFuelConsumption = true;
        result.fuelConsumption_ = value;
        return this;
      }
      public Builder ClearFuelConsumption() {
        PrepareBuilder();
        result.hasFuelConsumption = false;
        result.fuelConsumption_ = false;
        return this;
      }
      
      public bool HasIntakeAirTemp {
        get { return result.hasIntakeAirTemp; }
      }
      public bool IntakeAirTemp {
        get { return result.IntakeAirTemp; }
        set { SetIntakeAirTemp(value); }
      }
      public Builder SetIntakeAirTemp(bool value) {
        PrepareBuilder();
        result.hasIntakeAirTemp = true;
        result.intakeAirTemp_ = value;
        return this;
      }
      public Builder ClearIntakeAirTemp() {
        PrepareBuilder();
        result.hasIntakeAirTemp = false;
        result.intakeAirTemp_ = false;
        return this;
      }
      
      public bool HasIntakeAirFlow {
        get { return result.hasIntakeAirFlow; }
      }
      public bool IntakeAirFlow {
        get { return result.IntakeAirFlow; }
        set { SetIntakeAirFlow(value); }
      }
      public Builder SetIntakeAirFlow(bool value) {
        PrepareBuilder();
        result.hasIntakeAirFlow = true;
        result.intakeAirFlow_ = value;
        return this;
      }
      public Builder ClearIntakeAirFlow() {
        PrepareBuilder();
        result.hasIntakeAirFlow = false;
        result.intakeAirFlow_ = false;
        return this;
      }
      
      public bool HasFuelType {
        get { return result.hasFuelType; }
      }
      public bool FuelType {
        get { return result.FuelType; }
        set { SetFuelType(value); }
      }
      public Builder SetFuelType(bool value) {
        PrepareBuilder();
        result.hasFuelType = true;
        result.fuelType_ = value;
        return this;
      }
      public Builder ClearFuelType() {
        PrepareBuilder();
        result.hasFuelType = false;
        result.fuelType_ = false;
        return this;
      }
      
      public bool HasEthanolRatio {
        get { return result.hasEthanolRatio; }
      }
      public bool EthanolRatio {
        get { return result.EthanolRatio; }
        set { SetEthanolRatio(value); }
      }
      public Builder SetEthanolRatio(bool value) {
        PrepareBuilder();
        result.hasEthanolRatio = true;
        result.ethanolRatio_ = value;
        return this;
      }
      public Builder ClearEthanolRatio() {
        PrepareBuilder();
        result.hasEthanolRatio = false;
        result.ethanolRatio_ = false;
        return this;
      }
      
      public bool HasOilTemperature {
        get { return result.hasOilTemperature; }
      }
      public bool OilTemperature {
        get { return result.OilTemperature; }
        set { SetOilTemperature(value); }
      }
      public Builder SetOilTemperature(bool value) {
        PrepareBuilder();
        result.hasOilTemperature = true;
        result.oilTemperature_ = value;
        return this;
      }
      public Builder ClearOilTemperature() {
        PrepareBuilder();
        result.hasOilTemperature = false;
        result.oilTemperature_ = false;
        return this;
      }
      
      public bool HasEngineReferenceTorque {
        get { return result.hasEngineReferenceTorque; }
      }
      public bool EngineReferenceTorque {
        get { return result.EngineReferenceTorque; }
        set { SetEngineReferenceTorque(value); }
      }
      public Builder SetEngineReferenceTorque(bool value) {
        PrepareBuilder();
        result.hasEngineReferenceTorque = true;
        result.engineReferenceTorque_ = value;
        return this;
      }
      public Builder ClearEngineReferenceTorque() {
        PrepareBuilder();
        result.hasEngineReferenceTorque = false;
        result.engineReferenceTorque_ = false;
        return this;
      }
      
      public bool HasCurrentGear {
        get { return result.hasCurrentGear; }
      }
      public bool CurrentGear {
        get { return result.CurrentGear; }
        set { SetCurrentGear(value); }
      }
      public Builder SetCurrentGear(bool value) {
        PrepareBuilder();
        result.hasCurrentGear = true;
        result.currentGear_ = value;
        return this;
      }
      public Builder ClearCurrentGear() {
        PrepareBuilder();
        result.hasCurrentGear = false;
        result.currentGear_ = false;
        return this;
      }
      
      public bool HasDtc {
        get { return result.hasDtc; }
      }
      public bool Dtc {
        get { return result.Dtc; }
        set { SetDtc(value); }
      }
      public Builder SetDtc(bool value) {
        PrepareBuilder();
        result.hasDtc = true;
        result.dtc_ = value;
        return this;
      }
      public Builder ClearDtc() {
        PrepareBuilder();
        result.hasDtc = false;
        result.dtc_ = false;
        return this;
      }
    }
    static mxt1xx_u_dynamic_setup_can() {
      object.ReferenceEquals(global::maxtrack.pb.mxt1xx.Mxt1Xx.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mxt1xx_u_dynamic_setup : pb::GeneratedMessage<mxt1xx_u_dynamic_setup, mxt1xx_u_dynamic_setup.Builder> {
    private mxt1xx_u_dynamic_setup() { }
    private static readonly mxt1xx_u_dynamic_setup defaultInstance = new mxt1xx_u_dynamic_setup().MakeReadOnly();
    private static readonly string[] _mxt1XxUDynamicSetupFieldNames = new string[] { "anti_theft", "can", "connection", "debounce_timer", "event", "gps", "gsensor", "header", "info_group", "input_and_output", "others", "position", "rs232", "sms" };
    private static readonly uint[] _mxt1XxUDynamicSetupFieldTags = new uint[] { 90, 114, 18, 66, 74, 34, 42, 10, 82, 58, 106, 26, 98, 50 };
    public static mxt1xx_u_dynamic_setup DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mxt1xx_u_dynamic_setup DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mxt1xx_u_dynamic_setup ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_dynamic_setup__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mxt1xx_u_dynamic_setup, mxt1xx_u_dynamic_setup.Builder> InternalFieldAccessors {
      get { return global::maxtrack.pb.mxt1xx.Mxt1Xx.internal__static_maxtrack_pb_mxt1xx_mxt1xx_u_dynamic_setup__FieldAccessorTable; }
    }
    
    public const int HeaderFieldNumber = 1;
    private bool hasHeader;
    private global::maxtrack.pb.mxt1xx.mxt1xx_u_setup_header header_;
    public bool HasHeader {
      get { return hasHeader; }
    }
    public global::maxtrack.pb.mxt1xx.mxt1xx_u_setup_header Header {
      get { return header_ ?? global::maxtrack.pb.mxt1xx.mxt1xx_u_setup_header.DefaultInstance; }
    }
    
    public const int ConnectionFieldNumber = 2;
    private bool hasConnection;
    private global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_connection connection_;
    public bool HasConnection {
      get { return hasConnection; }
    }
    public global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_connection Connection {
      get { return connection_ ?? global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_connection.DefaultInstance; }
    }
    
    public const int PositionFieldNumber = 3;
    private bool hasPosition;
    private global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_position position_;
    public bool HasPosition {
      get { return hasPosition; }
    }
    public global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_position Position {
      get { return position_ ?? global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_position.DefaultInstance; }
    }
    
    public const int GpsFieldNumber = 4;
    private bool hasGps;
    private global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_gps gps_;
    public bool HasGps {
      get { return hasGps; }
    }
    public global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_gps Gps {
      get { return gps_ ?? global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_gps.DefaultInstance; }
    }
    
    public const int GsensorFieldNumber = 5;
    private bool hasGsensor;
    private global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_gsensor gsensor_;
    public bool HasGsensor {
      get { return hasGsensor; }
    }
    public global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_gsensor Gsensor {
      get { return gsensor_ ?? global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_gsensor.DefaultInstance; }
    }
    
    public const int SmsFieldNumber = 6;
    private bool hasSms;
    private global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_sms sms_;
    public bool HasSms {
      get { return hasSms; }
    }
    public global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_sms Sms {
      get { return sms_ ?? global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_sms.DefaultInstance; }
    }
    
    public const int InputAndOutputFieldNumber = 7;
    private bool hasInputAndOutput;
    private global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_input_and_output inputAndOutput_;
    public bool HasInputAndOutput {
      get { return hasInputAndOutput; }
    }
    public global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_input_and_output InputAndOutput {
      get { return inputAndOutput_ ?? global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_input_and_output.DefaultInstance; }
    }
    
    public const int DebounceTimerFieldNumber = 8;
    private bool hasDebounceTimer;
    private global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_debounce_timer debounceTimer_;
    public bool HasDebounceTimer {
      get { return hasDebounceTimer; }
    }
    public global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_debounce_timer DebounceTimer {
      get { return debounceTimer_ ?? global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_debounce_timer.DefaultInstance; }
    }
    
    public const int EventFieldNumber = 9;
    private bool hasEvent;
    private global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_event event_;
    public bool HasEvent {
      get { return hasEvent; }
    }
    public global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_event Event {
      get { return event_ ?? global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_event.DefaultInstance; }
    }
    
    public const int InfoGroupFieldNumber = 10;
    private bool hasInfoGroup;
    private global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_info_group infoGroup_;
    public bool HasInfoGroup {
      get { return hasInfoGroup; }
    }
    public global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_info_group InfoGroup {
      get { return infoGroup_ ?? global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_info_group.DefaultInstance; }
    }
    
    public const int AntiTheftFieldNumber = 11;
    private bool hasAntiTheft;
    private global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_anti_theft antiTheft_;
    public bool HasAntiTheft {
      get { return hasAntiTheft; }
    }
    public global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_anti_theft AntiTheft {
      get { return antiTheft_ ?? global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_anti_theft.DefaultInstance; }
    }
    
    public const int Rs232FieldNumber = 12;
    private bool hasRs232;
    private global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_rs232 rs232_;
    public bool HasRs232 {
      get { return hasRs232; }
    }
    public global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_rs232 Rs232 {
      get { return rs232_ ?? global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_rs232.DefaultInstance; }
    }
    
    public const int OthersFieldNumber = 13;
    private bool hasOthers;
    private global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_others others_;
    public bool HasOthers {
      get { return hasOthers; }
    }
    public global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_others Others {
      get { return others_ ?? global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_others.DefaultInstance; }
    }
    
    public const int CanFieldNumber = 14;
    private bool hasCan;
    private global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_can can_;
    public bool HasCan {
      get { return hasCan; }
    }
    public global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_can Can {
      get { return can_ ?? global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_can.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasHeader) return false;
        if (!Header.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mxt1XxUDynamicSetupFieldNames;
      if (hasHeader) {
        output.WriteMessage(1, field_names[7], Header);
      }
      if (hasConnection) {
        output.WriteMessage(2, field_names[2], Connection);
      }
      if (hasPosition) {
        output.WriteMessage(3, field_names[11], Position);
      }
      if (hasGps) {
        output.WriteMessage(4, field_names[5], Gps);
      }
      if (hasGsensor) {
        output.WriteMessage(5, field_names[6], Gsensor);
      }
      if (hasSms) {
        output.WriteMessage(6, field_names[13], Sms);
      }
      if (hasInputAndOutput) {
        output.WriteMessage(7, field_names[9], InputAndOutput);
      }
      if (hasDebounceTimer) {
        output.WriteMessage(8, field_names[3], DebounceTimer);
      }
      if (hasEvent) {
        output.WriteMessage(9, field_names[4], Event);
      }
      if (hasInfoGroup) {
        output.WriteMessage(10, field_names[8], InfoGroup);
      }
      if (hasAntiTheft) {
        output.WriteMessage(11, field_names[0], AntiTheft);
      }
      if (hasRs232) {
        output.WriteMessage(12, field_names[12], Rs232);
      }
      if (hasOthers) {
        output.WriteMessage(13, field_names[10], Others);
      }
      if (hasCan) {
        output.WriteMessage(14, field_names[1], Can);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasHeader) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, Header);
      }
      if (hasConnection) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, Connection);
      }
      if (hasPosition) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, Position);
      }
      if (hasGps) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, Gps);
      }
      if (hasGsensor) {
        size += pb::CodedOutputStream.ComputeMessageSize(5, Gsensor);
      }
      if (hasSms) {
        size += pb::CodedOutputStream.ComputeMessageSize(6, Sms);
      }
      if (hasInputAndOutput) {
        size += pb::CodedOutputStream.ComputeMessageSize(7, InputAndOutput);
      }
      if (hasDebounceTimer) {
        size += pb::CodedOutputStream.ComputeMessageSize(8, DebounceTimer);
      }
      if (hasEvent) {
        size += pb::CodedOutputStream.ComputeMessageSize(9, Event);
      }
      if (hasInfoGroup) {
        size += pb::CodedOutputStream.ComputeMessageSize(10, InfoGroup);
      }
      if (hasAntiTheft) {
        size += pb::CodedOutputStream.ComputeMessageSize(11, AntiTheft);
      }
      if (hasRs232) {
        size += pb::CodedOutputStream.ComputeMessageSize(12, Rs232);
      }
      if (hasOthers) {
        size += pb::CodedOutputStream.ComputeMessageSize(13, Others);
      }
      if (hasCan) {
        size += pb::CodedOutputStream.ComputeMessageSize(14, Can);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mxt1xx_u_dynamic_setup ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mxt1xx_u_dynamic_setup ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mxt1xx_u_dynamic_setup MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mxt1xx_u_dynamic_setup prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mxt1xx_u_dynamic_setup, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mxt1xx_u_dynamic_setup cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mxt1xx_u_dynamic_setup result;
      
      private mxt1xx_u_dynamic_setup PrepareBuilder() {
        if (resultIsReadOnly) {
          mxt1xx_u_dynamic_setup original = result;
          result = new mxt1xx_u_dynamic_setup();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mxt1xx_u_dynamic_setup MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup.Descriptor; }
      }
      
      public override mxt1xx_u_dynamic_setup DefaultInstanceForType {
        get { return global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup.DefaultInstance; }
      }
      
      public override mxt1xx_u_dynamic_setup BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mxt1xx_u_dynamic_setup) {
          return MergeFrom((mxt1xx_u_dynamic_setup) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mxt1xx_u_dynamic_setup other) {
        if (other == global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasHeader) {
          MergeHeader(other.Header);
        }
        if (other.HasConnection) {
          MergeConnection(other.Connection);
        }
        if (other.HasPosition) {
          MergePosition(other.Position);
        }
        if (other.HasGps) {
          MergeGps(other.Gps);
        }
        if (other.HasGsensor) {
          MergeGsensor(other.Gsensor);
        }
        if (other.HasSms) {
          MergeSms(other.Sms);
        }
        if (other.HasInputAndOutput) {
          MergeInputAndOutput(other.InputAndOutput);
        }
        if (other.HasDebounceTimer) {
          MergeDebounceTimer(other.DebounceTimer);
        }
        if (other.HasEvent) {
          MergeEvent(other.Event);
        }
        if (other.HasInfoGroup) {
          MergeInfoGroup(other.InfoGroup);
        }
        if (other.HasAntiTheft) {
          MergeAntiTheft(other.AntiTheft);
        }
        if (other.HasRs232) {
          MergeRs232(other.Rs232);
        }
        if (other.HasOthers) {
          MergeOthers(other.Others);
        }
        if (other.HasCan) {
          MergeCan(other.Can);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mxt1XxUDynamicSetupFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mxt1XxUDynamicSetupFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::maxtrack.pb.mxt1xx.mxt1xx_u_setup_header.Builder subBuilder = global::maxtrack.pb.mxt1xx.mxt1xx_u_setup_header.CreateBuilder();
              if (result.hasHeader) {
                subBuilder.MergeFrom(Header);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Header = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_connection.Builder subBuilder = global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_connection.CreateBuilder();
              if (result.hasConnection) {
                subBuilder.MergeFrom(Connection);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Connection = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_position.Builder subBuilder = global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_position.CreateBuilder();
              if (result.hasPosition) {
                subBuilder.MergeFrom(Position);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Position = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_gps.Builder subBuilder = global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_gps.CreateBuilder();
              if (result.hasGps) {
                subBuilder.MergeFrom(Gps);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Gps = subBuilder.BuildPartial();
              break;
            }
            case 42: {
              global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_gsensor.Builder subBuilder = global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_gsensor.CreateBuilder();
              if (result.hasGsensor) {
                subBuilder.MergeFrom(Gsensor);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Gsensor = subBuilder.BuildPartial();
              break;
            }
            case 50: {
              global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_sms.Builder subBuilder = global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_sms.CreateBuilder();
              if (result.hasSms) {
                subBuilder.MergeFrom(Sms);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Sms = subBuilder.BuildPartial();
              break;
            }
            case 58: {
              global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_input_and_output.Builder subBuilder = global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_input_and_output.CreateBuilder();
              if (result.hasInputAndOutput) {
                subBuilder.MergeFrom(InputAndOutput);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              InputAndOutput = subBuilder.BuildPartial();
              break;
            }
            case 66: {
              global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_debounce_timer.Builder subBuilder = global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_debounce_timer.CreateBuilder();
              if (result.hasDebounceTimer) {
                subBuilder.MergeFrom(DebounceTimer);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              DebounceTimer = subBuilder.BuildPartial();
              break;
            }
            case 74: {
              global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_event.Builder subBuilder = global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_event.CreateBuilder();
              if (result.hasEvent) {
                subBuilder.MergeFrom(Event);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Event = subBuilder.BuildPartial();
              break;
            }
            case 82: {
              global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_info_group.Builder subBuilder = global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_info_group.CreateBuilder();
              if (result.hasInfoGroup) {
                subBuilder.MergeFrom(InfoGroup);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              InfoGroup = subBuilder.BuildPartial();
              break;
            }
            case 90: {
              global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_anti_theft.Builder subBuilder = global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_anti_theft.CreateBuilder();
              if (result.hasAntiTheft) {
                subBuilder.MergeFrom(AntiTheft);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AntiTheft = subBuilder.BuildPartial();
              break;
            }
            case 98: {
              global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_rs232.Builder subBuilder = global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_rs232.CreateBuilder();
              if (result.hasRs232) {
                subBuilder.MergeFrom(Rs232);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Rs232 = subBuilder.BuildPartial();
              break;
            }
            case 106: {
              global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_others.Builder subBuilder = global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_others.CreateBuilder();
              if (result.hasOthers) {
                subBuilder.MergeFrom(Others);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Others = subBuilder.BuildPartial();
              break;
            }
            case 114: {
              global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_can.Builder subBuilder = global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_can.CreateBuilder();
              if (result.hasCan) {
                subBuilder.MergeFrom(Can);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Can = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasHeader {
       get { return result.hasHeader; }
      }
      public global::maxtrack.pb.mxt1xx.mxt1xx_u_setup_header Header {
        get { return result.Header; }
        set { SetHeader(value); }
      }
      public Builder SetHeader(global::maxtrack.pb.mxt1xx.mxt1xx_u_setup_header value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHeader = true;
        result.header_ = value;
        return this;
      }
      public Builder SetHeader(global::maxtrack.pb.mxt1xx.mxt1xx_u_setup_header.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasHeader = true;
        result.header_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHeader(global::maxtrack.pb.mxt1xx.mxt1xx_u_setup_header value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasHeader &&
            result.header_ != global::maxtrack.pb.mxt1xx.mxt1xx_u_setup_header.DefaultInstance) {
            result.header_ = global::maxtrack.pb.mxt1xx.mxt1xx_u_setup_header.CreateBuilder(result.header_).MergeFrom(value).BuildPartial();
        } else {
          result.header_ = value;
        }
        result.hasHeader = true;
        return this;
      }
      public Builder ClearHeader() {
        PrepareBuilder();
        result.hasHeader = false;
        result.header_ = null;
        return this;
      }
      
      public bool HasConnection {
       get { return result.hasConnection; }
      }
      public global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_connection Connection {
        get { return result.Connection; }
        set { SetConnection(value); }
      }
      public Builder SetConnection(global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_connection value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasConnection = true;
        result.connection_ = value;
        return this;
      }
      public Builder SetConnection(global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_connection.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasConnection = true;
        result.connection_ = builderForValue.Build();
        return this;
      }
      public Builder MergeConnection(global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_connection value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasConnection &&
            result.connection_ != global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_connection.DefaultInstance) {
            result.connection_ = global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_connection.CreateBuilder(result.connection_).MergeFrom(value).BuildPartial();
        } else {
          result.connection_ = value;
        }
        result.hasConnection = true;
        return this;
      }
      public Builder ClearConnection() {
        PrepareBuilder();
        result.hasConnection = false;
        result.connection_ = null;
        return this;
      }
      
      public bool HasPosition {
       get { return result.hasPosition; }
      }
      public global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_position Position {
        get { return result.Position; }
        set { SetPosition(value); }
      }
      public Builder SetPosition(global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_position value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPosition = true;
        result.position_ = value;
        return this;
      }
      public Builder SetPosition(global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_position.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPosition = true;
        result.position_ = builderForValue.Build();
        return this;
      }
      public Builder MergePosition(global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_position value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPosition &&
            result.position_ != global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_position.DefaultInstance) {
            result.position_ = global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_position.CreateBuilder(result.position_).MergeFrom(value).BuildPartial();
        } else {
          result.position_ = value;
        }
        result.hasPosition = true;
        return this;
      }
      public Builder ClearPosition() {
        PrepareBuilder();
        result.hasPosition = false;
        result.position_ = null;
        return this;
      }
      
      public bool HasGps {
       get { return result.hasGps; }
      }
      public global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_gps Gps {
        get { return result.Gps; }
        set { SetGps(value); }
      }
      public Builder SetGps(global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_gps value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGps = true;
        result.gps_ = value;
        return this;
      }
      public Builder SetGps(global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_gps.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasGps = true;
        result.gps_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGps(global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_gps value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasGps &&
            result.gps_ != global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_gps.DefaultInstance) {
            result.gps_ = global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_gps.CreateBuilder(result.gps_).MergeFrom(value).BuildPartial();
        } else {
          result.gps_ = value;
        }
        result.hasGps = true;
        return this;
      }
      public Builder ClearGps() {
        PrepareBuilder();
        result.hasGps = false;
        result.gps_ = null;
        return this;
      }
      
      public bool HasGsensor {
       get { return result.hasGsensor; }
      }
      public global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_gsensor Gsensor {
        get { return result.Gsensor; }
        set { SetGsensor(value); }
      }
      public Builder SetGsensor(global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_gsensor value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGsensor = true;
        result.gsensor_ = value;
        return this;
      }
      public Builder SetGsensor(global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_gsensor.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasGsensor = true;
        result.gsensor_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGsensor(global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_gsensor value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasGsensor &&
            result.gsensor_ != global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_gsensor.DefaultInstance) {
            result.gsensor_ = global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_gsensor.CreateBuilder(result.gsensor_).MergeFrom(value).BuildPartial();
        } else {
          result.gsensor_ = value;
        }
        result.hasGsensor = true;
        return this;
      }
      public Builder ClearGsensor() {
        PrepareBuilder();
        result.hasGsensor = false;
        result.gsensor_ = null;
        return this;
      }
      
      public bool HasSms {
       get { return result.hasSms; }
      }
      public global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_sms Sms {
        get { return result.Sms; }
        set { SetSms(value); }
      }
      public Builder SetSms(global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_sms value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSms = true;
        result.sms_ = value;
        return this;
      }
      public Builder SetSms(global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_sms.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSms = true;
        result.sms_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSms(global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_sms value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSms &&
            result.sms_ != global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_sms.DefaultInstance) {
            result.sms_ = global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_sms.CreateBuilder(result.sms_).MergeFrom(value).BuildPartial();
        } else {
          result.sms_ = value;
        }
        result.hasSms = true;
        return this;
      }
      public Builder ClearSms() {
        PrepareBuilder();
        result.hasSms = false;
        result.sms_ = null;
        return this;
      }
      
      public bool HasInputAndOutput {
       get { return result.hasInputAndOutput; }
      }
      public global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_input_and_output InputAndOutput {
        get { return result.InputAndOutput; }
        set { SetInputAndOutput(value); }
      }
      public Builder SetInputAndOutput(global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_input_and_output value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasInputAndOutput = true;
        result.inputAndOutput_ = value;
        return this;
      }
      public Builder SetInputAndOutput(global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_input_and_output.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasInputAndOutput = true;
        result.inputAndOutput_ = builderForValue.Build();
        return this;
      }
      public Builder MergeInputAndOutput(global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_input_and_output value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasInputAndOutput &&
            result.inputAndOutput_ != global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_input_and_output.DefaultInstance) {
            result.inputAndOutput_ = global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_input_and_output.CreateBuilder(result.inputAndOutput_).MergeFrom(value).BuildPartial();
        } else {
          result.inputAndOutput_ = value;
        }
        result.hasInputAndOutput = true;
        return this;
      }
      public Builder ClearInputAndOutput() {
        PrepareBuilder();
        result.hasInputAndOutput = false;
        result.inputAndOutput_ = null;
        return this;
      }
      
      public bool HasDebounceTimer {
       get { return result.hasDebounceTimer; }
      }
      public global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_debounce_timer DebounceTimer {
        get { return result.DebounceTimer; }
        set { SetDebounceTimer(value); }
      }
      public Builder SetDebounceTimer(global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_debounce_timer value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDebounceTimer = true;
        result.debounceTimer_ = value;
        return this;
      }
      public Builder SetDebounceTimer(global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_debounce_timer.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasDebounceTimer = true;
        result.debounceTimer_ = builderForValue.Build();
        return this;
      }
      public Builder MergeDebounceTimer(global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_debounce_timer value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasDebounceTimer &&
            result.debounceTimer_ != global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_debounce_timer.DefaultInstance) {
            result.debounceTimer_ = global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_debounce_timer.CreateBuilder(result.debounceTimer_).MergeFrom(value).BuildPartial();
        } else {
          result.debounceTimer_ = value;
        }
        result.hasDebounceTimer = true;
        return this;
      }
      public Builder ClearDebounceTimer() {
        PrepareBuilder();
        result.hasDebounceTimer = false;
        result.debounceTimer_ = null;
        return this;
      }
      
      public bool HasEvent {
       get { return result.hasEvent; }
      }
      public global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_event Event {
        get { return result.Event; }
        set { SetEvent(value); }
      }
      public Builder SetEvent(global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_event value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasEvent = true;
        result.event_ = value;
        return this;
      }
      public Builder SetEvent(global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_event.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasEvent = true;
        result.event_ = builderForValue.Build();
        return this;
      }
      public Builder MergeEvent(global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_event value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasEvent &&
            result.event_ != global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_event.DefaultInstance) {
            result.event_ = global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_event.CreateBuilder(result.event_).MergeFrom(value).BuildPartial();
        } else {
          result.event_ = value;
        }
        result.hasEvent = true;
        return this;
      }
      public Builder ClearEvent() {
        PrepareBuilder();
        result.hasEvent = false;
        result.event_ = null;
        return this;
      }
      
      public bool HasInfoGroup {
       get { return result.hasInfoGroup; }
      }
      public global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_info_group InfoGroup {
        get { return result.InfoGroup; }
        set { SetInfoGroup(value); }
      }
      public Builder SetInfoGroup(global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_info_group value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasInfoGroup = true;
        result.infoGroup_ = value;
        return this;
      }
      public Builder SetInfoGroup(global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_info_group.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasInfoGroup = true;
        result.infoGroup_ = builderForValue.Build();
        return this;
      }
      public Builder MergeInfoGroup(global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_info_group value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasInfoGroup &&
            result.infoGroup_ != global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_info_group.DefaultInstance) {
            result.infoGroup_ = global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_info_group.CreateBuilder(result.infoGroup_).MergeFrom(value).BuildPartial();
        } else {
          result.infoGroup_ = value;
        }
        result.hasInfoGroup = true;
        return this;
      }
      public Builder ClearInfoGroup() {
        PrepareBuilder();
        result.hasInfoGroup = false;
        result.infoGroup_ = null;
        return this;
      }
      
      public bool HasAntiTheft {
       get { return result.hasAntiTheft; }
      }
      public global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_anti_theft AntiTheft {
        get { return result.AntiTheft; }
        set { SetAntiTheft(value); }
      }
      public Builder SetAntiTheft(global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_anti_theft value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAntiTheft = true;
        result.antiTheft_ = value;
        return this;
      }
      public Builder SetAntiTheft(global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_anti_theft.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAntiTheft = true;
        result.antiTheft_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAntiTheft(global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_anti_theft value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAntiTheft &&
            result.antiTheft_ != global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_anti_theft.DefaultInstance) {
            result.antiTheft_ = global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_anti_theft.CreateBuilder(result.antiTheft_).MergeFrom(value).BuildPartial();
        } else {
          result.antiTheft_ = value;
        }
        result.hasAntiTheft = true;
        return this;
      }
      public Builder ClearAntiTheft() {
        PrepareBuilder();
        result.hasAntiTheft = false;
        result.antiTheft_ = null;
        return this;
      }
      
      public bool HasRs232 {
       get { return result.hasRs232; }
      }
      public global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_rs232 Rs232 {
        get { return result.Rs232; }
        set { SetRs232(value); }
      }
      public Builder SetRs232(global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_rs232 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRs232 = true;
        result.rs232_ = value;
        return this;
      }
      public Builder SetRs232(global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_rs232.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasRs232 = true;
        result.rs232_ = builderForValue.Build();
        return this;
      }
      public Builder MergeRs232(global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_rs232 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasRs232 &&
            result.rs232_ != global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_rs232.DefaultInstance) {
            result.rs232_ = global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_rs232.CreateBuilder(result.rs232_).MergeFrom(value).BuildPartial();
        } else {
          result.rs232_ = value;
        }
        result.hasRs232 = true;
        return this;
      }
      public Builder ClearRs232() {
        PrepareBuilder();
        result.hasRs232 = false;
        result.rs232_ = null;
        return this;
      }
      
      public bool HasOthers {
       get { return result.hasOthers; }
      }
      public global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_others Others {
        get { return result.Others; }
        set { SetOthers(value); }
      }
      public Builder SetOthers(global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_others value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOthers = true;
        result.others_ = value;
        return this;
      }
      public Builder SetOthers(global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_others.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasOthers = true;
        result.others_ = builderForValue.Build();
        return this;
      }
      public Builder MergeOthers(global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_others value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasOthers &&
            result.others_ != global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_others.DefaultInstance) {
            result.others_ = global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_others.CreateBuilder(result.others_).MergeFrom(value).BuildPartial();
        } else {
          result.others_ = value;
        }
        result.hasOthers = true;
        return this;
      }
      public Builder ClearOthers() {
        PrepareBuilder();
        result.hasOthers = false;
        result.others_ = null;
        return this;
      }
      
      public bool HasCan {
       get { return result.hasCan; }
      }
      public global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_can Can {
        get { return result.Can; }
        set { SetCan(value); }
      }
      public Builder SetCan(global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_can value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCan = true;
        result.can_ = value;
        return this;
      }
      public Builder SetCan(global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_can.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasCan = true;
        result.can_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCan(global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_can value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasCan &&
            result.can_ != global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_can.DefaultInstance) {
            result.can_ = global::maxtrack.pb.mxt1xx.mxt1xx_u_dynamic_setup_can.CreateBuilder(result.can_).MergeFrom(value).BuildPartial();
        } else {
          result.can_ = value;
        }
        result.hasCan = true;
        return this;
      }
      public Builder ClearCan() {
        PrepareBuilder();
        result.hasCan = false;
        result.can_ = null;
        return this;
      }
    }
    static mxt1xx_u_dynamic_setup() {
      object.ReferenceEquals(global::maxtrack.pb.mxt1xx.Mxt1Xx.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
